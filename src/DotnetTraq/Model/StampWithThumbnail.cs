/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = DotnetTraq.Client.FileParameter;
using OpenAPIDateConverter = DotnetTraq.Client.OpenAPIDateConverter;

namespace DotnetTraq.Model
{
    /// <summary>
    /// スタンプ情報とサムネイルの有無
    /// </summary>
    [DataContract(Name = "StampWithThumbnail")]
    public partial class StampWithThumbnail : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StampWithThumbnail" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StampWithThumbnail() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StampWithThumbnail" /> class.
        /// </summary>
        /// <param name="id">スタンプUUID (required).</param>
        /// <param name="name">スタンプ名 (required).</param>
        /// <param name="creatorId">作成者UUID (required).</param>
        /// <param name="createdAt">作成日時 (required).</param>
        /// <param name="updatedAt">更新日時 (required).</param>
        /// <param name="fileId">ファイルUUID (required).</param>
        /// <param name="isUnicode">Unicode絵文字か (required).</param>
        /// <param name="hasThumbnail">サムネイルの有無 (required).</param>
        public StampWithThumbnail(Guid id = default(Guid), string name = default(string), Guid creatorId = default(Guid), DateTimeOffset createdAt = default(DateTimeOffset), DateTimeOffset updatedAt = default(DateTimeOffset), Guid fileId = default(Guid), bool isUnicode = default(bool), bool hasThumbnail = default(bool))
        {
            this.Id = id;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for StampWithThumbnail and cannot be null");
            }
            this.Name = name;
            this.CreatorId = creatorId;
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
            this.FileId = fileId;
            this.IsUnicode = isUnicode;
            this.HasThumbnail = hasThumbnail;
        }

        /// <summary>
        /// スタンプUUID
        /// </summary>
        /// <value>スタンプUUID</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public Guid Id { get; set; }

        /// <summary>
        /// スタンプ名
        /// </summary>
        /// <value>スタンプ名</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// 作成者UUID
        /// </summary>
        /// <value>作成者UUID</value>
        [DataMember(Name = "creatorId", IsRequired = true, EmitDefaultValue = true)]
        public Guid CreatorId { get; set; }

        /// <summary>
        /// 作成日時
        /// </summary>
        /// <value>作成日時</value>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// 更新日時
        /// </summary>
        /// <value>更新日時</value>
        [DataMember(Name = "updatedAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset UpdatedAt { get; set; }

        /// <summary>
        /// ファイルUUID
        /// </summary>
        /// <value>ファイルUUID</value>
        [DataMember(Name = "fileId", IsRequired = true, EmitDefaultValue = true)]
        public Guid FileId { get; set; }

        /// <summary>
        /// Unicode絵文字か
        /// </summary>
        /// <value>Unicode絵文字か</value>
        [DataMember(Name = "isUnicode", IsRequired = true, EmitDefaultValue = true)]
        public bool IsUnicode { get; set; }

        /// <summary>
        /// サムネイルの有無
        /// </summary>
        /// <value>サムネイルの有無</value>
        [DataMember(Name = "hasThumbnail", IsRequired = true, EmitDefaultValue = true)]
        public bool HasThumbnail { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StampWithThumbnail {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CreatorId: ").Append(CreatorId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  FileId: ").Append(FileId).Append("\n");
            sb.Append("  IsUnicode: ").Append(IsUnicode).Append("\n");
            sb.Append("  HasThumbnail: ").Append(HasThumbnail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.Name != null) {
                // Name (string) pattern
                Regex regexName = new Regex(@"^[a-zA-Z0-9_-]{1,32}$", RegexOptions.CultureInvariant);
                if (!regexName.Match(this.Name).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, must match a pattern of " + regexName, new [] { "Name" });
                }
            }

            yield break;
        }
    }

}
