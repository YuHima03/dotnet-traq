/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = DotnetTraq.Client.FileParameter;
using OpenAPIDateConverter = DotnetTraq.Client.OpenAPIDateConverter;

namespace DotnetTraq.Model
{
    /// <summary>
    /// チャンネルイベント
    /// </summary>
    [DataContract(Name = "ChannelEvent")]
    public partial class ChannelEvent : IValidatableObject
    {
        /// <summary>
        /// イベントタイプ
        /// </summary>
        /// <value>イベントタイプ</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum TopicChanged for value: TopicChanged
            /// </summary>
            [EnumMember(Value = "TopicChanged")]
            TopicChanged = 1,

            /// <summary>
            /// Enum SubscribersChanged for value: SubscribersChanged
            /// </summary>
            [EnumMember(Value = "SubscribersChanged")]
            SubscribersChanged = 2,

            /// <summary>
            /// Enum PinAdded for value: PinAdded
            /// </summary>
            [EnumMember(Value = "PinAdded")]
            PinAdded = 3,

            /// <summary>
            /// Enum PinRemoved for value: PinRemoved
            /// </summary>
            [EnumMember(Value = "PinRemoved")]
            PinRemoved = 4,

            /// <summary>
            /// Enum NameChanged for value: NameChanged
            /// </summary>
            [EnumMember(Value = "NameChanged")]
            NameChanged = 5,

            /// <summary>
            /// Enum ParentChanged for value: ParentChanged
            /// </summary>
            [EnumMember(Value = "ParentChanged")]
            ParentChanged = 6,

            /// <summary>
            /// Enum VisibilityChanged for value: VisibilityChanged
            /// </summary>
            [EnumMember(Value = "VisibilityChanged")]
            VisibilityChanged = 7,

            /// <summary>
            /// Enum ForcedNotificationChanged for value: ForcedNotificationChanged
            /// </summary>
            [EnumMember(Value = "ForcedNotificationChanged")]
            ForcedNotificationChanged = 8,

            /// <summary>
            /// Enum ChildCreated for value: ChildCreated
            /// </summary>
            [EnumMember(Value = "ChildCreated")]
            ChildCreated = 9
        }


        /// <summary>
        /// イベントタイプ
        /// </summary>
        /// <value>イベントタイプ</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelEvent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ChannelEvent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelEvent" /> class.
        /// </summary>
        /// <param name="type">イベントタイプ (required).</param>
        /// <param name="datetime">イベント日時 (required).</param>
        /// <param name="detail">detail (required).</param>
        public ChannelEvent(TypeEnum type = default(TypeEnum), DateTimeOffset datetime = default(DateTimeOffset), ChannelEventDetail detail = default(ChannelEventDetail))
        {
            this.Type = type;
            this.Datetime = datetime;
            // to ensure "detail" is required (not null)
            if (detail == null)
            {
                throw new ArgumentNullException("detail is a required property for ChannelEvent and cannot be null");
            }
            this.Detail = detail;
        }

        /// <summary>
        /// イベント日時
        /// </summary>
        /// <value>イベント日時</value>
        [DataMember(Name = "datetime", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset Datetime { get; set; }

        /// <summary>
        /// Gets or Sets Detail
        /// </summary>
        [DataMember(Name = "detail", IsRequired = true, EmitDefaultValue = true)]
        public ChannelEventDetail Detail { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ChannelEvent {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Datetime: ").Append(Datetime).Append("\n");
            sb.Append("  Detail: ").Append(Detail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
