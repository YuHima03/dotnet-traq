/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = DotnetTraq.Client.FileParameter;
using OpenAPIDateConverter = DotnetTraq.Client.OpenAPIDateConverter;

namespace DotnetTraq.Model
{
    /// <summary>
    /// メッセージに押されたスタンプ
    /// </summary>
    [DataContract(Name = "MessageStamp")]
    public partial class MessageStamp : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MessageStamp" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MessageStamp() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MessageStamp" /> class.
        /// </summary>
        /// <param name="userId">ユーザーUUID (required).</param>
        /// <param name="stampId">スタンプUUID (required).</param>
        /// <param name="count">スタンプ数 (required).</param>
        /// <param name="createdAt">スタンプが最初に押された日時 (required).</param>
        /// <param name="updatedAt">スタンプが最後に押された日時 (required).</param>
        public MessageStamp(Guid userId = default(Guid), Guid stampId = default(Guid), int count = default(int), DateTimeOffset createdAt = default(DateTimeOffset), DateTimeOffset updatedAt = default(DateTimeOffset))
        {
            this.UserId = userId;
            this.StampId = stampId;
            this.Count = count;
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
        }

        /// <summary>
        /// ユーザーUUID
        /// </summary>
        /// <value>ユーザーUUID</value>
        [DataMember(Name = "userId", IsRequired = true, EmitDefaultValue = true)]
        public Guid UserId { get; set; }

        /// <summary>
        /// スタンプUUID
        /// </summary>
        /// <value>スタンプUUID</value>
        [DataMember(Name = "stampId", IsRequired = true, EmitDefaultValue = true)]
        public Guid StampId { get; set; }

        /// <summary>
        /// スタンプ数
        /// </summary>
        /// <value>スタンプ数</value>
        [DataMember(Name = "count", IsRequired = true, EmitDefaultValue = true)]
        public int Count { get; set; }

        /// <summary>
        /// スタンプが最初に押された日時
        /// </summary>
        /// <value>スタンプが最初に押された日時</value>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// スタンプが最後に押された日時
        /// </summary>
        /// <value>スタンプが最後に押された日時</value>
        [DataMember(Name = "updatedAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MessageStamp {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  StampId: ").Append(StampId).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
