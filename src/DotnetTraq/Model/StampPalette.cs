/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = DotnetTraq.Client.FileParameter;
using OpenAPIDateConverter = DotnetTraq.Client.OpenAPIDateConverter;

namespace DotnetTraq.Model
{
    /// <summary>
    /// スタンプパレット情報
    /// </summary>
    [DataContract(Name = "StampPalette")]
    public partial class StampPalette : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StampPalette" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StampPalette() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StampPalette" /> class.
        /// </summary>
        /// <param name="id">スタンプパレットUUID (required).</param>
        /// <param name="name">パレット名 (required).</param>
        /// <param name="stamps">パレット内のスタンプのUUID配列 (required).</param>
        /// <param name="creatorId">作成者UUID (required).</param>
        /// <param name="createdAt">パレット作成日時 (required).</param>
        /// <param name="updatedAt">パレット更新日時 (required).</param>
        /// <param name="description">パレット説明 (required).</param>
        public StampPalette(Guid id = default(Guid), string name = default(string), List<Guid> stamps = default(List<Guid>), Guid creatorId = default(Guid), DateTimeOffset createdAt = default(DateTimeOffset), DateTimeOffset updatedAt = default(DateTimeOffset), string description = default(string))
        {
            this.Id = id;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for StampPalette and cannot be null");
            }
            this.Name = name;
            // to ensure "stamps" is required (not null)
            if (stamps == null)
            {
                throw new ArgumentNullException("stamps is a required property for StampPalette and cannot be null");
            }
            this.Stamps = stamps;
            this.CreatorId = creatorId;
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for StampPalette and cannot be null");
            }
            this.Description = description;
        }

        /// <summary>
        /// スタンプパレットUUID
        /// </summary>
        /// <value>スタンプパレットUUID</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public Guid Id { get; set; }

        /// <summary>
        /// パレット名
        /// </summary>
        /// <value>パレット名</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// パレット内のスタンプのUUID配列
        /// </summary>
        /// <value>パレット内のスタンプのUUID配列</value>
        [DataMember(Name = "stamps", IsRequired = true, EmitDefaultValue = true)]
        public List<Guid> Stamps { get; set; }

        /// <summary>
        /// 作成者UUID
        /// </summary>
        /// <value>作成者UUID</value>
        [DataMember(Name = "creatorId", IsRequired = true, EmitDefaultValue = true)]
        public Guid CreatorId { get; set; }

        /// <summary>
        /// パレット作成日時
        /// </summary>
        /// <value>パレット作成日時</value>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// パレット更新日時
        /// </summary>
        /// <value>パレット更新日時</value>
        [DataMember(Name = "updatedAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset UpdatedAt { get; set; }

        /// <summary>
        /// パレット説明
        /// </summary>
        /// <value>パレット説明</value>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StampPalette {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Stamps: ").Append(Stamps).Append("\n");
            sb.Append("  CreatorId: ").Append(CreatorId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 30)
            {
                yield return new ValidationResult("Invalid value for Name, length must be less than 30.", new [] { "Name" });
            }

            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 1000)
            {
                yield return new ValidationResult("Invalid value for Description, length must be less than 1000.", new [] { "Description" });
            }

            yield break;
        }
    }

}
