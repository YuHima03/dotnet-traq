/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = DotnetTraq.Client.FileParameter;
using OpenAPIDateConverter = DotnetTraq.Client.OpenAPIDateConverter;

namespace DotnetTraq.Model
{
    /// <summary>
    /// 購読者変更イベント
    /// </summary>
    [DataContract(Name = "SubscribersChangedEvent")]
    public partial class SubscribersChangedEvent : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubscribersChangedEvent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SubscribersChangedEvent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubscribersChangedEvent" /> class.
        /// </summary>
        /// <param name="userId">変更者UUID (required).</param>
        /// <param name="on">オンにされたユーザーのUUID配列 (required).</param>
        /// <param name="off">オフにされたユーザーのUUID配列 (required).</param>
        public SubscribersChangedEvent(Guid userId = default(Guid), List<Guid> on = default(List<Guid>), List<Guid> off = default(List<Guid>))
        {
            this.UserId = userId;
            // to ensure "on" is required (not null)
            if (on == null)
            {
                throw new ArgumentNullException("on is a required property for SubscribersChangedEvent and cannot be null");
            }
            this.On = on;
            // to ensure "off" is required (not null)
            if (off == null)
            {
                throw new ArgumentNullException("off is a required property for SubscribersChangedEvent and cannot be null");
            }
            this.Off = off;
        }

        /// <summary>
        /// 変更者UUID
        /// </summary>
        /// <value>変更者UUID</value>
        [DataMember(Name = "userId", IsRequired = true, EmitDefaultValue = true)]
        public Guid UserId { get; set; }

        /// <summary>
        /// オンにされたユーザーのUUID配列
        /// </summary>
        /// <value>オンにされたユーザーのUUID配列</value>
        [DataMember(Name = "on", IsRequired = true, EmitDefaultValue = true)]
        public List<Guid> On { get; set; }

        /// <summary>
        /// オフにされたユーザーのUUID配列
        /// </summary>
        /// <value>オフにされたユーザーのUUID配列</value>
        [DataMember(Name = "off", IsRequired = true, EmitDefaultValue = true)]
        public List<Guid> Off { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SubscribersChangedEvent {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  On: ").Append(On).Append("\n");
            sb.Append("  Off: ").Append(Off).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
