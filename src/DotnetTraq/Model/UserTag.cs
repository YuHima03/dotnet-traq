/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = DotnetTraq.Client.FileParameter;
using OpenAPIDateConverter = DotnetTraq.Client.OpenAPIDateConverter;

namespace DotnetTraq.Model
{
    /// <summary>
    /// ユーザータグ
    /// </summary>
    [DataContract(Name = "UserTag")]
    public partial class UserTag : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserTag" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UserTag() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserTag" /> class.
        /// </summary>
        /// <param name="tagId">タグUUID (required).</param>
        /// <param name="tag">タグ文字列 (required).</param>
        /// <param name="isLocked">タグがロックされているか (required).</param>
        /// <param name="createdAt">タグ付与日時 (required).</param>
        /// <param name="updatedAt">タグ更新日時 (required).</param>
        public UserTag(Guid tagId = default(Guid), string tag = default(string), bool isLocked = default(bool), DateTimeOffset createdAt = default(DateTimeOffset), DateTimeOffset updatedAt = default(DateTimeOffset))
        {
            this.TagId = tagId;
            // to ensure "tag" is required (not null)
            if (tag == null)
            {
                throw new ArgumentNullException("tag is a required property for UserTag and cannot be null");
            }
            this.Tag = tag;
            this.IsLocked = isLocked;
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
        }

        /// <summary>
        /// タグUUID
        /// </summary>
        /// <value>タグUUID</value>
        [DataMember(Name = "tagId", IsRequired = true, EmitDefaultValue = true)]
        public Guid TagId { get; set; }

        /// <summary>
        /// タグ文字列
        /// </summary>
        /// <value>タグ文字列</value>
        [DataMember(Name = "tag", IsRequired = true, EmitDefaultValue = true)]
        public string Tag { get; set; }

        /// <summary>
        /// タグがロックされているか
        /// </summary>
        /// <value>タグがロックされているか</value>
        [DataMember(Name = "isLocked", IsRequired = true, EmitDefaultValue = true)]
        public bool IsLocked { get; set; }

        /// <summary>
        /// タグ付与日時
        /// </summary>
        /// <value>タグ付与日時</value>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// タグ更新日時
        /// </summary>
        /// <value>タグ更新日時</value>
        [DataMember(Name = "updatedAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserTag {\n");
            sb.Append("  TagId: ").Append(TagId).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  IsLocked: ").Append(IsLocked).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
