/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using DotnetTraq.Client;
using DotnetTraq.Model;

namespace DotnetTraq.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStampApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// スタンプを押す
        /// </summary>
        /// <remarks>
        /// 指定したメッセージに指定したスタンプを押します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">メッセージUUID</param>
        /// <param name="stampId">スタンプUUID</param>
        /// <param name="postMessageStampRequest"> (optional)</param>
        /// <returns></returns>
        void AddMessageStamp(Guid messageId, Guid stampId, PostMessageStampRequest? postMessageStampRequest = default(PostMessageStampRequest?));

        /// <summary>
        /// スタンプを押す
        /// </summary>
        /// <remarks>
        /// 指定したメッセージに指定したスタンプを押します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">メッセージUUID</param>
        /// <param name="stampId">スタンプUUID</param>
        /// <param name="postMessageStampRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddMessageStampWithHttpInfo(Guid messageId, Guid stampId, PostMessageStampRequest? postMessageStampRequest = default(PostMessageStampRequest?));
        /// <summary>
        /// スタンプ画像を変更
        /// </summary>
        /// <remarks>
        /// 指定したスタンプの画像を変更します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stampId">スタンプUUID</param>
        /// <param name="file">スタンプ画像(1MBまでのpng, jpeg, gif)</param>
        /// <returns></returns>
        void ChangeStampImage(Guid stampId, FileParameter file);

        /// <summary>
        /// スタンプ画像を変更
        /// </summary>
        /// <remarks>
        /// 指定したスタンプの画像を変更します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stampId">スタンプUUID</param>
        /// <param name="file">スタンプ画像(1MBまでのpng, jpeg, gif)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ChangeStampImageWithHttpInfo(Guid stampId, FileParameter file);
        /// <summary>
        /// スタンプを作成
        /// </summary>
        /// <remarks>
        /// スタンプを新規作成します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">スタンプ名</param>
        /// <param name="file">スタンプ画像(1MBまでのpng, jpeg, gif)</param>
        /// <returns>Stamp</returns>
        Stamp CreateStamp(string name, FileParameter file);

        /// <summary>
        /// スタンプを作成
        /// </summary>
        /// <remarks>
        /// スタンプを新規作成します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">スタンプ名</param>
        /// <param name="file">スタンプ画像(1MBまでのpng, jpeg, gif)</param>
        /// <returns>ApiResponse of Stamp</returns>
        ApiResponse<Stamp> CreateStampWithHttpInfo(string name, FileParameter file);
        /// <summary>
        /// スタンプパレットを作成
        /// </summary>
        /// <remarks>
        /// スタンプパレットを作成します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postStampPaletteRequest"> (optional)</param>
        /// <returns>StampPalette</returns>
        StampPalette CreateStampPalette(PostStampPaletteRequest? postStampPaletteRequest = default(PostStampPaletteRequest?));

        /// <summary>
        /// スタンプパレットを作成
        /// </summary>
        /// <remarks>
        /// スタンプパレットを作成します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postStampPaletteRequest"> (optional)</param>
        /// <returns>ApiResponse of StampPalette</returns>
        ApiResponse<StampPalette> CreateStampPaletteWithHttpInfo(PostStampPaletteRequest? postStampPaletteRequest = default(PostStampPaletteRequest?));
        /// <summary>
        /// スタンプを削除
        /// </summary>
        /// <remarks>
        /// 指定したスタンプを削除します。 対象のスタンプの削除権限が必要です。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stampId">スタンプUUID</param>
        /// <returns></returns>
        void DeleteStamp(Guid stampId);

        /// <summary>
        /// スタンプを削除
        /// </summary>
        /// <remarks>
        /// 指定したスタンプを削除します。 対象のスタンプの削除権限が必要です。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stampId">スタンプUUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteStampWithHttpInfo(Guid stampId);
        /// <summary>
        /// スタンプパレットを削除
        /// </summary>
        /// <remarks>
        /// 指定したスタンプパレットを削除します。 対象のスタンプパレットの管理権限が必要です。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paletteId">スタンプパレットUUID</param>
        /// <returns></returns>
        void DeleteStampPalette(Guid paletteId);

        /// <summary>
        /// スタンプパレットを削除
        /// </summary>
        /// <remarks>
        /// 指定したスタンプパレットを削除します。 対象のスタンプパレットの管理権限が必要です。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paletteId">スタンプパレットUUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteStampPaletteWithHttpInfo(Guid paletteId);
        /// <summary>
        /// スタンプ情報を変更
        /// </summary>
        /// <remarks>
        /// 指定したスタンプの情報を変更します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stampId">スタンプUUID</param>
        /// <param name="patchStampRequest"> (optional)</param>
        /// <returns></returns>
        void EditStamp(Guid stampId, PatchStampRequest? patchStampRequest = default(PatchStampRequest?));

        /// <summary>
        /// スタンプ情報を変更
        /// </summary>
        /// <remarks>
        /// 指定したスタンプの情報を変更します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stampId">スタンプUUID</param>
        /// <param name="patchStampRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EditStampWithHttpInfo(Guid stampId, PatchStampRequest? patchStampRequest = default(PatchStampRequest?));
        /// <summary>
        /// スタンプパレットを編集
        /// </summary>
        /// <remarks>
        /// 指定したスタンプパレットを編集します。 リクエストのスタンプの配列の順番は保存されて変更されます。 対象のスタンプパレットの管理権限が必要です。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paletteId">スタンプパレットUUID</param>
        /// <param name="patchStampPaletteRequest"> (optional)</param>
        /// <returns></returns>
        void EditStampPalette(Guid paletteId, PatchStampPaletteRequest? patchStampPaletteRequest = default(PatchStampPaletteRequest?));

        /// <summary>
        /// スタンプパレットを編集
        /// </summary>
        /// <remarks>
        /// 指定したスタンプパレットを編集します。 リクエストのスタンプの配列の順番は保存されて変更されます。 対象のスタンプパレットの管理権限が必要です。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paletteId">スタンプパレットUUID</param>
        /// <param name="patchStampPaletteRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EditStampPaletteWithHttpInfo(Guid paletteId, PatchStampPaletteRequest? patchStampPaletteRequest = default(PatchStampPaletteRequest?));
        /// <summary>
        /// メッセージのスタンプリストを取得
        /// </summary>
        /// <remarks>
        /// 指定したメッセージに押されているスタンプのリストを取得します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">メッセージUUID</param>
        /// <returns>List&lt;MessageStamp&gt;</returns>
        List<MessageStamp> GetMessageStamps(Guid messageId);

        /// <summary>
        /// メッセージのスタンプリストを取得
        /// </summary>
        /// <remarks>
        /// 指定したメッセージに押されているスタンプのリストを取得します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">メッセージUUID</param>
        /// <returns>ApiResponse of List&lt;MessageStamp&gt;</returns>
        ApiResponse<List<MessageStamp>> GetMessageStampsWithHttpInfo(Guid messageId);
        /// <summary>
        /// スタンプ履歴を取得
        /// </summary>
        /// <remarks>
        /// 自分のスタンプ履歴を最大100件まで取得します。 結果は降順で返されます。  このAPIが返すスタンプ履歴は厳密な履歴ではありません。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">件数 (optional, default to 100)</param>
        /// <returns>List&lt;StampHistoryEntry&gt;</returns>
        List<StampHistoryEntry> GetMyStampHistory(int? limit = default(int?));

        /// <summary>
        /// スタンプ履歴を取得
        /// </summary>
        /// <remarks>
        /// 自分のスタンプ履歴を最大100件まで取得します。 結果は降順で返されます。  このAPIが返すスタンプ履歴は厳密な履歴ではありません。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">件数 (optional, default to 100)</param>
        /// <returns>ApiResponse of List&lt;StampHistoryEntry&gt;</returns>
        ApiResponse<List<StampHistoryEntry>> GetMyStampHistoryWithHttpInfo(int? limit = default(int?));
        /// <summary>
        /// スタンプ情報を取得
        /// </summary>
        /// <remarks>
        /// 指定したスタンプの情報を取得します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stampId">スタンプUUID</param>
        /// <returns>Stamp</returns>
        Stamp GetStamp(Guid stampId);

        /// <summary>
        /// スタンプ情報を取得
        /// </summary>
        /// <remarks>
        /// 指定したスタンプの情報を取得します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stampId">スタンプUUID</param>
        /// <returns>ApiResponse of Stamp</returns>
        ApiResponse<Stamp> GetStampWithHttpInfo(Guid stampId);
        /// <summary>
        /// スタンプ画像を取得
        /// </summary>
        /// <remarks>
        /// 指定したIDのスタンプ画像を返します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stampId">スタンプUUID</param>
        /// <returns>FileParameter</returns>
        FileParameter GetStampImage(Guid stampId);

        /// <summary>
        /// スタンプ画像を取得
        /// </summary>
        /// <remarks>
        /// 指定したIDのスタンプ画像を返します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stampId">スタンプUUID</param>
        /// <returns>ApiResponse of FileParameter</returns>
        ApiResponse<FileParameter> GetStampImageWithHttpInfo(Guid stampId);
        /// <summary>
        /// スタンプパレットを取得
        /// </summary>
        /// <remarks>
        /// 指定したスタンプパレットの情報を取得します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paletteId">スタンプパレットUUID</param>
        /// <returns>StampPalette</returns>
        StampPalette GetStampPalette(Guid paletteId);

        /// <summary>
        /// スタンプパレットを取得
        /// </summary>
        /// <remarks>
        /// 指定したスタンプパレットの情報を取得します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paletteId">スタンプパレットUUID</param>
        /// <returns>ApiResponse of StampPalette</returns>
        ApiResponse<StampPalette> GetStampPaletteWithHttpInfo(Guid paletteId);
        /// <summary>
        /// スタンプパレットのリストを取得
        /// </summary>
        /// <remarks>
        /// 自身が所有しているスタンプパレットのリストを取得します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;StampPalette&gt;</returns>
        List<StampPalette> GetStampPalettes();

        /// <summary>
        /// スタンプパレットのリストを取得
        /// </summary>
        /// <remarks>
        /// 自身が所有しているスタンプパレットのリストを取得します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;StampPalette&gt;</returns>
        ApiResponse<List<StampPalette>> GetStampPalettesWithHttpInfo();
        /// <summary>
        /// スタンプ統計情報を取得
        /// </summary>
        /// <remarks>
        /// 指定したスタンプの統計情報を取得します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stampId">スタンプUUID</param>
        /// <returns>StampStats</returns>
        StampStats GetStampStats(Guid stampId);

        /// <summary>
        /// スタンプ統計情報を取得
        /// </summary>
        /// <remarks>
        /// 指定したスタンプの統計情報を取得します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stampId">スタンプUUID</param>
        /// <returns>ApiResponse of StampStats</returns>
        ApiResponse<StampStats> GetStampStatsWithHttpInfo(Guid stampId);
        /// <summary>
        /// スタンプリストを取得
        /// </summary>
        /// <remarks>
        /// スタンプのリストを取得します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeUnicode">Unicode絵文字を含ませるかどうか Deprecated: typeクエリを指定しなければ全てのスタンプを取得できるため、そちらを利用してください  (optional, default to true) (deprecated)</param>
        /// <param name="type">取得するスタンプの種類 (optional)</param>
        /// <returns>List&lt;StampWithThumbnail&gt;</returns>
        List<StampWithThumbnail> GetStamps(bool? includeUnicode = default(bool?), string? type = default(string?));

        /// <summary>
        /// スタンプリストを取得
        /// </summary>
        /// <remarks>
        /// スタンプのリストを取得します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeUnicode">Unicode絵文字を含ませるかどうか Deprecated: typeクエリを指定しなければ全てのスタンプを取得できるため、そちらを利用してください  (optional, default to true) (deprecated)</param>
        /// <param name="type">取得するスタンプの種類 (optional)</param>
        /// <returns>ApiResponse of List&lt;StampWithThumbnail&gt;</returns>
        ApiResponse<List<StampWithThumbnail>> GetStampsWithHttpInfo(bool? includeUnicode = default(bool?), string? type = default(string?));
        /// <summary>
        /// スタンプを消す
        /// </summary>
        /// <remarks>
        /// 指定したメッセージから指定した自身が押したスタンプを削除します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">メッセージUUID</param>
        /// <param name="stampId">スタンプUUID</param>
        /// <returns></returns>
        void RemoveMessageStamp(Guid messageId, Guid stampId);

        /// <summary>
        /// スタンプを消す
        /// </summary>
        /// <remarks>
        /// 指定したメッセージから指定した自身が押したスタンプを削除します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">メッセージUUID</param>
        /// <param name="stampId">スタンプUUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveMessageStampWithHttpInfo(Guid messageId, Guid stampId);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStampApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// スタンプを押す
        /// </summary>
        /// <remarks>
        /// 指定したメッセージに指定したスタンプを押します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">メッセージUUID</param>
        /// <param name="stampId">スタンプUUID</param>
        /// <param name="postMessageStampRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddMessageStampAsync(Guid messageId, Guid stampId, PostMessageStampRequest? postMessageStampRequest = default(PostMessageStampRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// スタンプを押す
        /// </summary>
        /// <remarks>
        /// 指定したメッセージに指定したスタンプを押します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">メッセージUUID</param>
        /// <param name="stampId">スタンプUUID</param>
        /// <param name="postMessageStampRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddMessageStampWithHttpInfoAsync(Guid messageId, Guid stampId, PostMessageStampRequest? postMessageStampRequest = default(PostMessageStampRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// スタンプ画像を変更
        /// </summary>
        /// <remarks>
        /// 指定したスタンプの画像を変更します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stampId">スタンプUUID</param>
        /// <param name="file">スタンプ画像(1MBまでのpng, jpeg, gif)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ChangeStampImageAsync(Guid stampId, FileParameter file, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// スタンプ画像を変更
        /// </summary>
        /// <remarks>
        /// 指定したスタンプの画像を変更します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stampId">スタンプUUID</param>
        /// <param name="file">スタンプ画像(1MBまでのpng, jpeg, gif)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ChangeStampImageWithHttpInfoAsync(Guid stampId, FileParameter file, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// スタンプを作成
        /// </summary>
        /// <remarks>
        /// スタンプを新規作成します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">スタンプ名</param>
        /// <param name="file">スタンプ画像(1MBまでのpng, jpeg, gif)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Stamp</returns>
        System.Threading.Tasks.Task<Stamp> CreateStampAsync(string name, FileParameter file, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// スタンプを作成
        /// </summary>
        /// <remarks>
        /// スタンプを新規作成します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">スタンプ名</param>
        /// <param name="file">スタンプ画像(1MBまでのpng, jpeg, gif)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Stamp)</returns>
        System.Threading.Tasks.Task<ApiResponse<Stamp>> CreateStampWithHttpInfoAsync(string name, FileParameter file, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// スタンプパレットを作成
        /// </summary>
        /// <remarks>
        /// スタンプパレットを作成します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postStampPaletteRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StampPalette</returns>
        System.Threading.Tasks.Task<StampPalette> CreateStampPaletteAsync(PostStampPaletteRequest? postStampPaletteRequest = default(PostStampPaletteRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// スタンプパレットを作成
        /// </summary>
        /// <remarks>
        /// スタンプパレットを作成します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postStampPaletteRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StampPalette)</returns>
        System.Threading.Tasks.Task<ApiResponse<StampPalette>> CreateStampPaletteWithHttpInfoAsync(PostStampPaletteRequest? postStampPaletteRequest = default(PostStampPaletteRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// スタンプを削除
        /// </summary>
        /// <remarks>
        /// 指定したスタンプを削除します。 対象のスタンプの削除権限が必要です。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stampId">スタンプUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteStampAsync(Guid stampId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// スタンプを削除
        /// </summary>
        /// <remarks>
        /// 指定したスタンプを削除します。 対象のスタンプの削除権限が必要です。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stampId">スタンプUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteStampWithHttpInfoAsync(Guid stampId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// スタンプパレットを削除
        /// </summary>
        /// <remarks>
        /// 指定したスタンプパレットを削除します。 対象のスタンプパレットの管理権限が必要です。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paletteId">スタンプパレットUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteStampPaletteAsync(Guid paletteId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// スタンプパレットを削除
        /// </summary>
        /// <remarks>
        /// 指定したスタンプパレットを削除します。 対象のスタンプパレットの管理権限が必要です。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paletteId">スタンプパレットUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteStampPaletteWithHttpInfoAsync(Guid paletteId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// スタンプ情報を変更
        /// </summary>
        /// <remarks>
        /// 指定したスタンプの情報を変更します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stampId">スタンプUUID</param>
        /// <param name="patchStampRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EditStampAsync(Guid stampId, PatchStampRequest? patchStampRequest = default(PatchStampRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// スタンプ情報を変更
        /// </summary>
        /// <remarks>
        /// 指定したスタンプの情報を変更します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stampId">スタンプUUID</param>
        /// <param name="patchStampRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EditStampWithHttpInfoAsync(Guid stampId, PatchStampRequest? patchStampRequest = default(PatchStampRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// スタンプパレットを編集
        /// </summary>
        /// <remarks>
        /// 指定したスタンプパレットを編集します。 リクエストのスタンプの配列の順番は保存されて変更されます。 対象のスタンプパレットの管理権限が必要です。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paletteId">スタンプパレットUUID</param>
        /// <param name="patchStampPaletteRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EditStampPaletteAsync(Guid paletteId, PatchStampPaletteRequest? patchStampPaletteRequest = default(PatchStampPaletteRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// スタンプパレットを編集
        /// </summary>
        /// <remarks>
        /// 指定したスタンプパレットを編集します。 リクエストのスタンプの配列の順番は保存されて変更されます。 対象のスタンプパレットの管理権限が必要です。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paletteId">スタンプパレットUUID</param>
        /// <param name="patchStampPaletteRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EditStampPaletteWithHttpInfoAsync(Guid paletteId, PatchStampPaletteRequest? patchStampPaletteRequest = default(PatchStampPaletteRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// メッセージのスタンプリストを取得
        /// </summary>
        /// <remarks>
        /// 指定したメッセージに押されているスタンプのリストを取得します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">メッセージUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;MessageStamp&gt;</returns>
        System.Threading.Tasks.Task<List<MessageStamp>> GetMessageStampsAsync(Guid messageId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// メッセージのスタンプリストを取得
        /// </summary>
        /// <remarks>
        /// 指定したメッセージに押されているスタンプのリストを取得します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">メッセージUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;MessageStamp&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MessageStamp>>> GetMessageStampsWithHttpInfoAsync(Guid messageId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// スタンプ履歴を取得
        /// </summary>
        /// <remarks>
        /// 自分のスタンプ履歴を最大100件まで取得します。 結果は降順で返されます。  このAPIが返すスタンプ履歴は厳密な履歴ではありません。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">件数 (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;StampHistoryEntry&gt;</returns>
        System.Threading.Tasks.Task<List<StampHistoryEntry>> GetMyStampHistoryAsync(int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// スタンプ履歴を取得
        /// </summary>
        /// <remarks>
        /// 自分のスタンプ履歴を最大100件まで取得します。 結果は降順で返されます。  このAPIが返すスタンプ履歴は厳密な履歴ではありません。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">件数 (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;StampHistoryEntry&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<StampHistoryEntry>>> GetMyStampHistoryWithHttpInfoAsync(int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// スタンプ情報を取得
        /// </summary>
        /// <remarks>
        /// 指定したスタンプの情報を取得します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stampId">スタンプUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Stamp</returns>
        System.Threading.Tasks.Task<Stamp> GetStampAsync(Guid stampId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// スタンプ情報を取得
        /// </summary>
        /// <remarks>
        /// 指定したスタンプの情報を取得します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stampId">スタンプUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Stamp)</returns>
        System.Threading.Tasks.Task<ApiResponse<Stamp>> GetStampWithHttpInfoAsync(Guid stampId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// スタンプ画像を取得
        /// </summary>
        /// <remarks>
        /// 指定したIDのスタンプ画像を返します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stampId">スタンプUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileParameter</returns>
        System.Threading.Tasks.Task<FileParameter> GetStampImageAsync(Guid stampId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// スタンプ画像を取得
        /// </summary>
        /// <remarks>
        /// 指定したIDのスタンプ画像を返します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stampId">スタンプUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileParameter)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileParameter>> GetStampImageWithHttpInfoAsync(Guid stampId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// スタンプパレットを取得
        /// </summary>
        /// <remarks>
        /// 指定したスタンプパレットの情報を取得します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paletteId">スタンプパレットUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StampPalette</returns>
        System.Threading.Tasks.Task<StampPalette> GetStampPaletteAsync(Guid paletteId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// スタンプパレットを取得
        /// </summary>
        /// <remarks>
        /// 指定したスタンプパレットの情報を取得します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paletteId">スタンプパレットUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StampPalette)</returns>
        System.Threading.Tasks.Task<ApiResponse<StampPalette>> GetStampPaletteWithHttpInfoAsync(Guid paletteId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// スタンプパレットのリストを取得
        /// </summary>
        /// <remarks>
        /// 自身が所有しているスタンプパレットのリストを取得します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;StampPalette&gt;</returns>
        System.Threading.Tasks.Task<List<StampPalette>> GetStampPalettesAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// スタンプパレットのリストを取得
        /// </summary>
        /// <remarks>
        /// 自身が所有しているスタンプパレットのリストを取得します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;StampPalette&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<StampPalette>>> GetStampPalettesWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// スタンプ統計情報を取得
        /// </summary>
        /// <remarks>
        /// 指定したスタンプの統計情報を取得します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stampId">スタンプUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StampStats</returns>
        System.Threading.Tasks.Task<StampStats> GetStampStatsAsync(Guid stampId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// スタンプ統計情報を取得
        /// </summary>
        /// <remarks>
        /// 指定したスタンプの統計情報を取得します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stampId">スタンプUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StampStats)</returns>
        System.Threading.Tasks.Task<ApiResponse<StampStats>> GetStampStatsWithHttpInfoAsync(Guid stampId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// スタンプリストを取得
        /// </summary>
        /// <remarks>
        /// スタンプのリストを取得します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeUnicode">Unicode絵文字を含ませるかどうか Deprecated: typeクエリを指定しなければ全てのスタンプを取得できるため、そちらを利用してください  (optional, default to true) (deprecated)</param>
        /// <param name="type">取得するスタンプの種類 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;StampWithThumbnail&gt;</returns>
        System.Threading.Tasks.Task<List<StampWithThumbnail>> GetStampsAsync(bool? includeUnicode = default(bool?), string? type = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// スタンプリストを取得
        /// </summary>
        /// <remarks>
        /// スタンプのリストを取得します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeUnicode">Unicode絵文字を含ませるかどうか Deprecated: typeクエリを指定しなければ全てのスタンプを取得できるため、そちらを利用してください  (optional, default to true) (deprecated)</param>
        /// <param name="type">取得するスタンプの種類 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;StampWithThumbnail&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<StampWithThumbnail>>> GetStampsWithHttpInfoAsync(bool? includeUnicode = default(bool?), string? type = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// スタンプを消す
        /// </summary>
        /// <remarks>
        /// 指定したメッセージから指定した自身が押したスタンプを削除します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">メッセージUUID</param>
        /// <param name="stampId">スタンプUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveMessageStampAsync(Guid messageId, Guid stampId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// スタンプを消す
        /// </summary>
        /// <remarks>
        /// 指定したメッセージから指定した自身が押したスタンプを削除します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">メッセージUUID</param>
        /// <param name="stampId">スタンプUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveMessageStampWithHttpInfoAsync(Guid messageId, Guid stampId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStampApi : IStampApiSync, IStampApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class StampApi : IDisposable, IStampApi
    {
        private DotnetTraq.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="StampApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public StampApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StampApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public StampApi(string basePath)
        {
            this.Configuration = DotnetTraq.Client.Configuration.MergeConfigurations(
                DotnetTraq.Client.GlobalConfiguration.Instance,
                new DotnetTraq.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new DotnetTraq.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = DotnetTraq.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StampApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public StampApi(DotnetTraq.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = DotnetTraq.Client.Configuration.MergeConfigurations(
                DotnetTraq.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new DotnetTraq.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = DotnetTraq.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StampApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public StampApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StampApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public StampApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = DotnetTraq.Client.Configuration.MergeConfigurations(
                DotnetTraq.Client.GlobalConfiguration.Instance,
                new DotnetTraq.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new DotnetTraq.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = DotnetTraq.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StampApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public StampApi(HttpClient client, DotnetTraq.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = DotnetTraq.Client.Configuration.MergeConfigurations(
                DotnetTraq.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new DotnetTraq.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = DotnetTraq.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StampApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public StampApi(DotnetTraq.Client.ISynchronousClient client, DotnetTraq.Client.IAsynchronousClient asyncClient, DotnetTraq.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = DotnetTraq.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public DotnetTraq.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public DotnetTraq.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public DotnetTraq.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public DotnetTraq.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public DotnetTraq.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// スタンプを押す 指定したメッセージに指定したスタンプを押します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">メッセージUUID</param>
        /// <param name="stampId">スタンプUUID</param>
        /// <param name="postMessageStampRequest"> (optional)</param>
        /// <returns></returns>
        public void AddMessageStamp(Guid messageId, Guid stampId, PostMessageStampRequest? postMessageStampRequest = default(PostMessageStampRequest?))
        {
            AddMessageStampWithHttpInfo(messageId, stampId, postMessageStampRequest);
        }

        /// <summary>
        /// スタンプを押す 指定したメッセージに指定したスタンプを押します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">メッセージUUID</param>
        /// <param name="stampId">スタンプUUID</param>
        /// <param name="postMessageStampRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public DotnetTraq.Client.ApiResponse<Object> AddMessageStampWithHttpInfo(Guid messageId, Guid stampId, PostMessageStampRequest? postMessageStampRequest = default(PostMessageStampRequest?))
        {
            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("messageId", DotnetTraq.Client.ClientUtils.ParameterToString(messageId)); // path parameter
            localVarRequestOptions.PathParameters.Add("stampId", DotnetTraq.Client.ClientUtils.ParameterToString(stampId)); // path parameter
            localVarRequestOptions.Data = postMessageStampRequest;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/messages/{messageId}/stamps/{stampId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddMessageStamp", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// スタンプを押す 指定したメッセージに指定したスタンプを押します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">メッセージUUID</param>
        /// <param name="stampId">スタンプUUID</param>
        /// <param name="postMessageStampRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddMessageStampAsync(Guid messageId, Guid stampId, PostMessageStampRequest? postMessageStampRequest = default(PostMessageStampRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await AddMessageStampWithHttpInfoAsync(messageId, stampId, postMessageStampRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// スタンプを押す 指定したメッセージに指定したスタンプを押します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">メッセージUUID</param>
        /// <param name="stampId">スタンプUUID</param>
        /// <param name="postMessageStampRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<DotnetTraq.Client.ApiResponse<Object>> AddMessageStampWithHttpInfoAsync(Guid messageId, Guid stampId, PostMessageStampRequest? postMessageStampRequest = default(PostMessageStampRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("messageId", DotnetTraq.Client.ClientUtils.ParameterToString(messageId)); // path parameter
            localVarRequestOptions.PathParameters.Add("stampId", DotnetTraq.Client.ClientUtils.ParameterToString(stampId)); // path parameter
            localVarRequestOptions.Data = postMessageStampRequest;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/messages/{messageId}/stamps/{stampId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddMessageStamp", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// スタンプ画像を変更 指定したスタンプの画像を変更します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stampId">スタンプUUID</param>
        /// <param name="file">スタンプ画像(1MBまでのpng, jpeg, gif)</param>
        /// <returns></returns>
        public void ChangeStampImage(Guid stampId, FileParameter file)
        {
            ChangeStampImageWithHttpInfo(stampId, file);
        }

        /// <summary>
        /// スタンプ画像を変更 指定したスタンプの画像を変更します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stampId">スタンプUUID</param>
        /// <param name="file">スタンプ画像(1MBまでのpng, jpeg, gif)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public DotnetTraq.Client.ApiResponse<Object> ChangeStampImageWithHttpInfo(Guid stampId, FileParameter file)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new DotnetTraq.Client.ApiException(400, "Missing required parameter 'file' when calling StampApi->ChangeStampImage");

            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("stampId", DotnetTraq.Client.ClientUtils.ParameterToString(stampId)); // path parameter
            localVarRequestOptions.FileParameters.Add("file", file);

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/stamps/{stampId}/image", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChangeStampImage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// スタンプ画像を変更 指定したスタンプの画像を変更します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stampId">スタンプUUID</param>
        /// <param name="file">スタンプ画像(1MBまでのpng, jpeg, gif)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ChangeStampImageAsync(Guid stampId, FileParameter file, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ChangeStampImageWithHttpInfoAsync(stampId, file, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// スタンプ画像を変更 指定したスタンプの画像を変更します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stampId">スタンプUUID</param>
        /// <param name="file">スタンプ画像(1MBまでのpng, jpeg, gif)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<DotnetTraq.Client.ApiResponse<Object>> ChangeStampImageWithHttpInfoAsync(Guid stampId, FileParameter file, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new DotnetTraq.Client.ApiException(400, "Missing required parameter 'file' when calling StampApi->ChangeStampImage");


            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("stampId", DotnetTraq.Client.ClientUtils.ParameterToString(stampId)); // path parameter
            localVarRequestOptions.FileParameters.Add("file", file);

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/stamps/{stampId}/image", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChangeStampImage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// スタンプを作成 スタンプを新規作成します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">スタンプ名</param>
        /// <param name="file">スタンプ画像(1MBまでのpng, jpeg, gif)</param>
        /// <returns>Stamp</returns>
        public Stamp CreateStamp(string name, FileParameter file)
        {
            DotnetTraq.Client.ApiResponse<Stamp> localVarResponse = CreateStampWithHttpInfo(name, file);
            return localVarResponse.Data;
        }

        /// <summary>
        /// スタンプを作成 スタンプを新規作成します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">スタンプ名</param>
        /// <param name="file">スタンプ画像(1MBまでのpng, jpeg, gif)</param>
        /// <returns>ApiResponse of Stamp</returns>
        public DotnetTraq.Client.ApiResponse<Stamp> CreateStampWithHttpInfo(string name, FileParameter file)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new DotnetTraq.Client.ApiException(400, "Missing required parameter 'name' when calling StampApi->CreateStamp");

            // verify the required parameter 'file' is set
            if (file == null)
                throw new DotnetTraq.Client.ApiException(400, "Missing required parameter 'file' when calling StampApi->CreateStamp");

            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.FormParameters.Add("name", DotnetTraq.Client.ClientUtils.ParameterToString(name)); // form parameter
            localVarRequestOptions.FileParameters.Add("file", file);

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Stamp>("/stamps", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateStamp", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// スタンプを作成 スタンプを新規作成します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">スタンプ名</param>
        /// <param name="file">スタンプ画像(1MBまでのpng, jpeg, gif)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Stamp</returns>
        public async System.Threading.Tasks.Task<Stamp> CreateStampAsync(string name, FileParameter file, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DotnetTraq.Client.ApiResponse<Stamp> localVarResponse = await CreateStampWithHttpInfoAsync(name, file, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// スタンプを作成 スタンプを新規作成します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">スタンプ名</param>
        /// <param name="file">スタンプ画像(1MBまでのpng, jpeg, gif)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Stamp)</returns>
        public async System.Threading.Tasks.Task<DotnetTraq.Client.ApiResponse<Stamp>> CreateStampWithHttpInfoAsync(string name, FileParameter file, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new DotnetTraq.Client.ApiException(400, "Missing required parameter 'name' when calling StampApi->CreateStamp");

            // verify the required parameter 'file' is set
            if (file == null)
                throw new DotnetTraq.Client.ApiException(400, "Missing required parameter 'file' when calling StampApi->CreateStamp");


            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.FormParameters.Add("name", DotnetTraq.Client.ClientUtils.ParameterToString(name)); // form parameter
            localVarRequestOptions.FileParameters.Add("file", file);

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Stamp>("/stamps", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateStamp", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// スタンプパレットを作成 スタンプパレットを作成します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postStampPaletteRequest"> (optional)</param>
        /// <returns>StampPalette</returns>
        public StampPalette CreateStampPalette(PostStampPaletteRequest? postStampPaletteRequest = default(PostStampPaletteRequest?))
        {
            DotnetTraq.Client.ApiResponse<StampPalette> localVarResponse = CreateStampPaletteWithHttpInfo(postStampPaletteRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// スタンプパレットを作成 スタンプパレットを作成します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postStampPaletteRequest"> (optional)</param>
        /// <returns>ApiResponse of StampPalette</returns>
        public DotnetTraq.Client.ApiResponse<StampPalette> CreateStampPaletteWithHttpInfo(PostStampPaletteRequest? postStampPaletteRequest = default(PostStampPaletteRequest?))
        {
            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = postStampPaletteRequest;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<StampPalette>("/stamp-palettes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateStampPalette", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// スタンプパレットを作成 スタンプパレットを作成します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postStampPaletteRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StampPalette</returns>
        public async System.Threading.Tasks.Task<StampPalette> CreateStampPaletteAsync(PostStampPaletteRequest? postStampPaletteRequest = default(PostStampPaletteRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DotnetTraq.Client.ApiResponse<StampPalette> localVarResponse = await CreateStampPaletteWithHttpInfoAsync(postStampPaletteRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// スタンプパレットを作成 スタンプパレットを作成します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postStampPaletteRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StampPalette)</returns>
        public async System.Threading.Tasks.Task<DotnetTraq.Client.ApiResponse<StampPalette>> CreateStampPaletteWithHttpInfoAsync(PostStampPaletteRequest? postStampPaletteRequest = default(PostStampPaletteRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = postStampPaletteRequest;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<StampPalette>("/stamp-palettes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateStampPalette", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// スタンプを削除 指定したスタンプを削除します。 対象のスタンプの削除権限が必要です。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stampId">スタンプUUID</param>
        /// <returns></returns>
        public void DeleteStamp(Guid stampId)
        {
            DeleteStampWithHttpInfo(stampId);
        }

        /// <summary>
        /// スタンプを削除 指定したスタンプを削除します。 対象のスタンプの削除権限が必要です。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stampId">スタンプUUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public DotnetTraq.Client.ApiResponse<Object> DeleteStampWithHttpInfo(Guid stampId)
        {
            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("stampId", DotnetTraq.Client.ClientUtils.ParameterToString(stampId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/stamps/{stampId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteStamp", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// スタンプを削除 指定したスタンプを削除します。 対象のスタンプの削除権限が必要です。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stampId">スタンプUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteStampAsync(Guid stampId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await DeleteStampWithHttpInfoAsync(stampId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// スタンプを削除 指定したスタンプを削除します。 対象のスタンプの削除権限が必要です。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stampId">スタンプUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<DotnetTraq.Client.ApiResponse<Object>> DeleteStampWithHttpInfoAsync(Guid stampId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("stampId", DotnetTraq.Client.ClientUtils.ParameterToString(stampId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/stamps/{stampId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteStamp", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// スタンプパレットを削除 指定したスタンプパレットを削除します。 対象のスタンプパレットの管理権限が必要です。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paletteId">スタンプパレットUUID</param>
        /// <returns></returns>
        public void DeleteStampPalette(Guid paletteId)
        {
            DeleteStampPaletteWithHttpInfo(paletteId);
        }

        /// <summary>
        /// スタンプパレットを削除 指定したスタンプパレットを削除します。 対象のスタンプパレットの管理権限が必要です。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paletteId">スタンプパレットUUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public DotnetTraq.Client.ApiResponse<Object> DeleteStampPaletteWithHttpInfo(Guid paletteId)
        {
            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("paletteId", DotnetTraq.Client.ClientUtils.ParameterToString(paletteId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/stamp-palettes/{paletteId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteStampPalette", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// スタンプパレットを削除 指定したスタンプパレットを削除します。 対象のスタンプパレットの管理権限が必要です。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paletteId">スタンプパレットUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteStampPaletteAsync(Guid paletteId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await DeleteStampPaletteWithHttpInfoAsync(paletteId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// スタンプパレットを削除 指定したスタンプパレットを削除します。 対象のスタンプパレットの管理権限が必要です。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paletteId">スタンプパレットUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<DotnetTraq.Client.ApiResponse<Object>> DeleteStampPaletteWithHttpInfoAsync(Guid paletteId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("paletteId", DotnetTraq.Client.ClientUtils.ParameterToString(paletteId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/stamp-palettes/{paletteId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteStampPalette", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// スタンプ情報を変更 指定したスタンプの情報を変更します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stampId">スタンプUUID</param>
        /// <param name="patchStampRequest"> (optional)</param>
        /// <returns></returns>
        public void EditStamp(Guid stampId, PatchStampRequest? patchStampRequest = default(PatchStampRequest?))
        {
            EditStampWithHttpInfo(stampId, patchStampRequest);
        }

        /// <summary>
        /// スタンプ情報を変更 指定したスタンプの情報を変更します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stampId">スタンプUUID</param>
        /// <param name="patchStampRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public DotnetTraq.Client.ApiResponse<Object> EditStampWithHttpInfo(Guid stampId, PatchStampRequest? patchStampRequest = default(PatchStampRequest?))
        {
            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("stampId", DotnetTraq.Client.ClientUtils.ParameterToString(stampId)); // path parameter
            localVarRequestOptions.Data = patchStampRequest;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/stamps/{stampId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EditStamp", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// スタンプ情報を変更 指定したスタンプの情報を変更します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stampId">スタンプUUID</param>
        /// <param name="patchStampRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EditStampAsync(Guid stampId, PatchStampRequest? patchStampRequest = default(PatchStampRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await EditStampWithHttpInfoAsync(stampId, patchStampRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// スタンプ情報を変更 指定したスタンプの情報を変更します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stampId">スタンプUUID</param>
        /// <param name="patchStampRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<DotnetTraq.Client.ApiResponse<Object>> EditStampWithHttpInfoAsync(Guid stampId, PatchStampRequest? patchStampRequest = default(PatchStampRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("stampId", DotnetTraq.Client.ClientUtils.ParameterToString(stampId)); // path parameter
            localVarRequestOptions.Data = patchStampRequest;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/stamps/{stampId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EditStamp", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// スタンプパレットを編集 指定したスタンプパレットを編集します。 リクエストのスタンプの配列の順番は保存されて変更されます。 対象のスタンプパレットの管理権限が必要です。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paletteId">スタンプパレットUUID</param>
        /// <param name="patchStampPaletteRequest"> (optional)</param>
        /// <returns></returns>
        public void EditStampPalette(Guid paletteId, PatchStampPaletteRequest? patchStampPaletteRequest = default(PatchStampPaletteRequest?))
        {
            EditStampPaletteWithHttpInfo(paletteId, patchStampPaletteRequest);
        }

        /// <summary>
        /// スタンプパレットを編集 指定したスタンプパレットを編集します。 リクエストのスタンプの配列の順番は保存されて変更されます。 対象のスタンプパレットの管理権限が必要です。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paletteId">スタンプパレットUUID</param>
        /// <param name="patchStampPaletteRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public DotnetTraq.Client.ApiResponse<Object> EditStampPaletteWithHttpInfo(Guid paletteId, PatchStampPaletteRequest? patchStampPaletteRequest = default(PatchStampPaletteRequest?))
        {
            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("paletteId", DotnetTraq.Client.ClientUtils.ParameterToString(paletteId)); // path parameter
            localVarRequestOptions.Data = patchStampPaletteRequest;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/stamp-palettes/{paletteId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EditStampPalette", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// スタンプパレットを編集 指定したスタンプパレットを編集します。 リクエストのスタンプの配列の順番は保存されて変更されます。 対象のスタンプパレットの管理権限が必要です。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paletteId">スタンプパレットUUID</param>
        /// <param name="patchStampPaletteRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EditStampPaletteAsync(Guid paletteId, PatchStampPaletteRequest? patchStampPaletteRequest = default(PatchStampPaletteRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await EditStampPaletteWithHttpInfoAsync(paletteId, patchStampPaletteRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// スタンプパレットを編集 指定したスタンプパレットを編集します。 リクエストのスタンプの配列の順番は保存されて変更されます。 対象のスタンプパレットの管理権限が必要です。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paletteId">スタンプパレットUUID</param>
        /// <param name="patchStampPaletteRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<DotnetTraq.Client.ApiResponse<Object>> EditStampPaletteWithHttpInfoAsync(Guid paletteId, PatchStampPaletteRequest? patchStampPaletteRequest = default(PatchStampPaletteRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("paletteId", DotnetTraq.Client.ClientUtils.ParameterToString(paletteId)); // path parameter
            localVarRequestOptions.Data = patchStampPaletteRequest;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/stamp-palettes/{paletteId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EditStampPalette", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// メッセージのスタンプリストを取得 指定したメッセージに押されているスタンプのリストを取得します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">メッセージUUID</param>
        /// <returns>List&lt;MessageStamp&gt;</returns>
        public List<MessageStamp> GetMessageStamps(Guid messageId)
        {
            DotnetTraq.Client.ApiResponse<List<MessageStamp>> localVarResponse = GetMessageStampsWithHttpInfo(messageId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// メッセージのスタンプリストを取得 指定したメッセージに押されているスタンプのリストを取得します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">メッセージUUID</param>
        /// <returns>ApiResponse of List&lt;MessageStamp&gt;</returns>
        public DotnetTraq.Client.ApiResponse<List<MessageStamp>> GetMessageStampsWithHttpInfo(Guid messageId)
        {
            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("messageId", DotnetTraq.Client.ClientUtils.ParameterToString(messageId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<MessageStamp>>("/messages/{messageId}/stamps", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMessageStamps", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// メッセージのスタンプリストを取得 指定したメッセージに押されているスタンプのリストを取得します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">メッセージUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;MessageStamp&gt;</returns>
        public async System.Threading.Tasks.Task<List<MessageStamp>> GetMessageStampsAsync(Guid messageId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DotnetTraq.Client.ApiResponse<List<MessageStamp>> localVarResponse = await GetMessageStampsWithHttpInfoAsync(messageId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// メッセージのスタンプリストを取得 指定したメッセージに押されているスタンプのリストを取得します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">メッセージUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;MessageStamp&gt;)</returns>
        public async System.Threading.Tasks.Task<DotnetTraq.Client.ApiResponse<List<MessageStamp>>> GetMessageStampsWithHttpInfoAsync(Guid messageId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("messageId", DotnetTraq.Client.ClientUtils.ParameterToString(messageId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<MessageStamp>>("/messages/{messageId}/stamps", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMessageStamps", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// スタンプ履歴を取得 自分のスタンプ履歴を最大100件まで取得します。 結果は降順で返されます。  このAPIが返すスタンプ履歴は厳密な履歴ではありません。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">件数 (optional, default to 100)</param>
        /// <returns>List&lt;StampHistoryEntry&gt;</returns>
        public List<StampHistoryEntry> GetMyStampHistory(int? limit = default(int?))
        {
            DotnetTraq.Client.ApiResponse<List<StampHistoryEntry>> localVarResponse = GetMyStampHistoryWithHttpInfo(limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// スタンプ履歴を取得 自分のスタンプ履歴を最大100件まで取得します。 結果は降順で返されます。  このAPIが返すスタンプ履歴は厳密な履歴ではありません。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">件数 (optional, default to 100)</param>
        /// <returns>ApiResponse of List&lt;StampHistoryEntry&gt;</returns>
        public DotnetTraq.Client.ApiResponse<List<StampHistoryEntry>> GetMyStampHistoryWithHttpInfo(int? limit = default(int?))
        {
            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotnetTraq.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<StampHistoryEntry>>("/users/me/stamp-history", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMyStampHistory", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// スタンプ履歴を取得 自分のスタンプ履歴を最大100件まで取得します。 結果は降順で返されます。  このAPIが返すスタンプ履歴は厳密な履歴ではありません。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">件数 (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;StampHistoryEntry&gt;</returns>
        public async System.Threading.Tasks.Task<List<StampHistoryEntry>> GetMyStampHistoryAsync(int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DotnetTraq.Client.ApiResponse<List<StampHistoryEntry>> localVarResponse = await GetMyStampHistoryWithHttpInfoAsync(limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// スタンプ履歴を取得 自分のスタンプ履歴を最大100件まで取得します。 結果は降順で返されます。  このAPIが返すスタンプ履歴は厳密な履歴ではありません。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">件数 (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;StampHistoryEntry&gt;)</returns>
        public async System.Threading.Tasks.Task<DotnetTraq.Client.ApiResponse<List<StampHistoryEntry>>> GetMyStampHistoryWithHttpInfoAsync(int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotnetTraq.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<StampHistoryEntry>>("/users/me/stamp-history", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMyStampHistory", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// スタンプ情報を取得 指定したスタンプの情報を取得します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stampId">スタンプUUID</param>
        /// <returns>Stamp</returns>
        public Stamp GetStamp(Guid stampId)
        {
            DotnetTraq.Client.ApiResponse<Stamp> localVarResponse = GetStampWithHttpInfo(stampId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// スタンプ情報を取得 指定したスタンプの情報を取得します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stampId">スタンプUUID</param>
        /// <returns>ApiResponse of Stamp</returns>
        public DotnetTraq.Client.ApiResponse<Stamp> GetStampWithHttpInfo(Guid stampId)
        {
            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("stampId", DotnetTraq.Client.ClientUtils.ParameterToString(stampId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Stamp>("/stamps/{stampId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStamp", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// スタンプ情報を取得 指定したスタンプの情報を取得します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stampId">スタンプUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Stamp</returns>
        public async System.Threading.Tasks.Task<Stamp> GetStampAsync(Guid stampId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DotnetTraq.Client.ApiResponse<Stamp> localVarResponse = await GetStampWithHttpInfoAsync(stampId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// スタンプ情報を取得 指定したスタンプの情報を取得します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stampId">スタンプUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Stamp)</returns>
        public async System.Threading.Tasks.Task<DotnetTraq.Client.ApiResponse<Stamp>> GetStampWithHttpInfoAsync(Guid stampId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("stampId", DotnetTraq.Client.ClientUtils.ParameterToString(stampId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Stamp>("/stamps/{stampId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStamp", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// スタンプ画像を取得 指定したIDのスタンプ画像を返します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stampId">スタンプUUID</param>
        /// <returns>FileParameter</returns>
        public FileParameter GetStampImage(Guid stampId)
        {
            DotnetTraq.Client.ApiResponse<FileParameter> localVarResponse = GetStampImageWithHttpInfo(stampId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// スタンプ画像を取得 指定したIDのスタンプ画像を返します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stampId">スタンプUUID</param>
        /// <returns>ApiResponse of FileParameter</returns>
        public DotnetTraq.Client.ApiResponse<FileParameter> GetStampImageWithHttpInfo(Guid stampId)
        {
            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "image/png",
                "image/gif",
                "image/jpeg"
            };

            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("stampId", DotnetTraq.Client.ClientUtils.ParameterToString(stampId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FileParameter>("/stamps/{stampId}/image", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStampImage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// スタンプ画像を取得 指定したIDのスタンプ画像を返します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stampId">スタンプUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileParameter</returns>
        public async System.Threading.Tasks.Task<FileParameter> GetStampImageAsync(Guid stampId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DotnetTraq.Client.ApiResponse<FileParameter> localVarResponse = await GetStampImageWithHttpInfoAsync(stampId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// スタンプ画像を取得 指定したIDのスタンプ画像を返します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stampId">スタンプUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileParameter)</returns>
        public async System.Threading.Tasks.Task<DotnetTraq.Client.ApiResponse<FileParameter>> GetStampImageWithHttpInfoAsync(Guid stampId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "image/png",
                "image/gif",
                "image/jpeg"
            };


            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("stampId", DotnetTraq.Client.ClientUtils.ParameterToString(stampId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<FileParameter>("/stamps/{stampId}/image", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStampImage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// スタンプパレットを取得 指定したスタンプパレットの情報を取得します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paletteId">スタンプパレットUUID</param>
        /// <returns>StampPalette</returns>
        public StampPalette GetStampPalette(Guid paletteId)
        {
            DotnetTraq.Client.ApiResponse<StampPalette> localVarResponse = GetStampPaletteWithHttpInfo(paletteId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// スタンプパレットを取得 指定したスタンプパレットの情報を取得します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paletteId">スタンプパレットUUID</param>
        /// <returns>ApiResponse of StampPalette</returns>
        public DotnetTraq.Client.ApiResponse<StampPalette> GetStampPaletteWithHttpInfo(Guid paletteId)
        {
            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("paletteId", DotnetTraq.Client.ClientUtils.ParameterToString(paletteId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<StampPalette>("/stamp-palettes/{paletteId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStampPalette", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// スタンプパレットを取得 指定したスタンプパレットの情報を取得します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paletteId">スタンプパレットUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StampPalette</returns>
        public async System.Threading.Tasks.Task<StampPalette> GetStampPaletteAsync(Guid paletteId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DotnetTraq.Client.ApiResponse<StampPalette> localVarResponse = await GetStampPaletteWithHttpInfoAsync(paletteId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// スタンプパレットを取得 指定したスタンプパレットの情報を取得します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="paletteId">スタンプパレットUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StampPalette)</returns>
        public async System.Threading.Tasks.Task<DotnetTraq.Client.ApiResponse<StampPalette>> GetStampPaletteWithHttpInfoAsync(Guid paletteId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("paletteId", DotnetTraq.Client.ClientUtils.ParameterToString(paletteId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<StampPalette>("/stamp-palettes/{paletteId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStampPalette", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// スタンプパレットのリストを取得 自身が所有しているスタンプパレットのリストを取得します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;StampPalette&gt;</returns>
        public List<StampPalette> GetStampPalettes()
        {
            DotnetTraq.Client.ApiResponse<List<StampPalette>> localVarResponse = GetStampPalettesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// スタンプパレットのリストを取得 自身が所有しているスタンプパレットのリストを取得します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;StampPalette&gt;</returns>
        public DotnetTraq.Client.ApiResponse<List<StampPalette>> GetStampPalettesWithHttpInfo()
        {
            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<StampPalette>>("/stamp-palettes", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStampPalettes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// スタンプパレットのリストを取得 自身が所有しているスタンプパレットのリストを取得します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;StampPalette&gt;</returns>
        public async System.Threading.Tasks.Task<List<StampPalette>> GetStampPalettesAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DotnetTraq.Client.ApiResponse<List<StampPalette>> localVarResponse = await GetStampPalettesWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// スタンプパレットのリストを取得 自身が所有しているスタンプパレットのリストを取得します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;StampPalette&gt;)</returns>
        public async System.Threading.Tasks.Task<DotnetTraq.Client.ApiResponse<List<StampPalette>>> GetStampPalettesWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<StampPalette>>("/stamp-palettes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStampPalettes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// スタンプ統計情報を取得 指定したスタンプの統計情報を取得します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stampId">スタンプUUID</param>
        /// <returns>StampStats</returns>
        public StampStats GetStampStats(Guid stampId)
        {
            DotnetTraq.Client.ApiResponse<StampStats> localVarResponse = GetStampStatsWithHttpInfo(stampId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// スタンプ統計情報を取得 指定したスタンプの統計情報を取得します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stampId">スタンプUUID</param>
        /// <returns>ApiResponse of StampStats</returns>
        public DotnetTraq.Client.ApiResponse<StampStats> GetStampStatsWithHttpInfo(Guid stampId)
        {
            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("stampId", DotnetTraq.Client.ClientUtils.ParameterToString(stampId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<StampStats>("/stamps/{stampId}/stats", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStampStats", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// スタンプ統計情報を取得 指定したスタンプの統計情報を取得します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stampId">スタンプUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StampStats</returns>
        public async System.Threading.Tasks.Task<StampStats> GetStampStatsAsync(Guid stampId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DotnetTraq.Client.ApiResponse<StampStats> localVarResponse = await GetStampStatsWithHttpInfoAsync(stampId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// スタンプ統計情報を取得 指定したスタンプの統計情報を取得します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="stampId">スタンプUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StampStats)</returns>
        public async System.Threading.Tasks.Task<DotnetTraq.Client.ApiResponse<StampStats>> GetStampStatsWithHttpInfoAsync(Guid stampId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("stampId", DotnetTraq.Client.ClientUtils.ParameterToString(stampId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<StampStats>("/stamps/{stampId}/stats", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStampStats", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// スタンプリストを取得 スタンプのリストを取得します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeUnicode">Unicode絵文字を含ませるかどうか Deprecated: typeクエリを指定しなければ全てのスタンプを取得できるため、そちらを利用してください  (optional, default to true) (deprecated)</param>
        /// <param name="type">取得するスタンプの種類 (optional)</param>
        /// <returns>List&lt;StampWithThumbnail&gt;</returns>
        public List<StampWithThumbnail> GetStamps(bool? includeUnicode = default(bool?), string? type = default(string?))
        {
            DotnetTraq.Client.ApiResponse<List<StampWithThumbnail>> localVarResponse = GetStampsWithHttpInfo(includeUnicode, type);
            return localVarResponse.Data;
        }

        /// <summary>
        /// スタンプリストを取得 スタンプのリストを取得します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeUnicode">Unicode絵文字を含ませるかどうか Deprecated: typeクエリを指定しなければ全てのスタンプを取得できるため、そちらを利用してください  (optional, default to true) (deprecated)</param>
        /// <param name="type">取得するスタンプの種類 (optional)</param>
        /// <returns>ApiResponse of List&lt;StampWithThumbnail&gt;</returns>
        public DotnetTraq.Client.ApiResponse<List<StampWithThumbnail>> GetStampsWithHttpInfo(bool? includeUnicode = default(bool?), string? type = default(string?))
        {
            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (includeUnicode != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotnetTraq.Client.ClientUtils.ParameterToMultiMap("", "include-unicode", includeUnicode));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotnetTraq.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<StampWithThumbnail>>("/stamps", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStamps", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// スタンプリストを取得 スタンプのリストを取得します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeUnicode">Unicode絵文字を含ませるかどうか Deprecated: typeクエリを指定しなければ全てのスタンプを取得できるため、そちらを利用してください  (optional, default to true) (deprecated)</param>
        /// <param name="type">取得するスタンプの種類 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;StampWithThumbnail&gt;</returns>
        public async System.Threading.Tasks.Task<List<StampWithThumbnail>> GetStampsAsync(bool? includeUnicode = default(bool?), string? type = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DotnetTraq.Client.ApiResponse<List<StampWithThumbnail>> localVarResponse = await GetStampsWithHttpInfoAsync(includeUnicode, type, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// スタンプリストを取得 スタンプのリストを取得します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeUnicode">Unicode絵文字を含ませるかどうか Deprecated: typeクエリを指定しなければ全てのスタンプを取得できるため、そちらを利用してください  (optional, default to true) (deprecated)</param>
        /// <param name="type">取得するスタンプの種類 (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;StampWithThumbnail&gt;)</returns>
        public async System.Threading.Tasks.Task<DotnetTraq.Client.ApiResponse<List<StampWithThumbnail>>> GetStampsWithHttpInfoAsync(bool? includeUnicode = default(bool?), string? type = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (includeUnicode != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotnetTraq.Client.ClientUtils.ParameterToMultiMap("", "include-unicode", includeUnicode));
            }
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotnetTraq.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<StampWithThumbnail>>("/stamps", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetStamps", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// スタンプを消す 指定したメッセージから指定した自身が押したスタンプを削除します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">メッセージUUID</param>
        /// <param name="stampId">スタンプUUID</param>
        /// <returns></returns>
        public void RemoveMessageStamp(Guid messageId, Guid stampId)
        {
            RemoveMessageStampWithHttpInfo(messageId, stampId);
        }

        /// <summary>
        /// スタンプを消す 指定したメッセージから指定した自身が押したスタンプを削除します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">メッセージUUID</param>
        /// <param name="stampId">スタンプUUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public DotnetTraq.Client.ApiResponse<Object> RemoveMessageStampWithHttpInfo(Guid messageId, Guid stampId)
        {
            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("messageId", DotnetTraq.Client.ClientUtils.ParameterToString(messageId)); // path parameter
            localVarRequestOptions.PathParameters.Add("stampId", DotnetTraq.Client.ClientUtils.ParameterToString(stampId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/messages/{messageId}/stamps/{stampId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveMessageStamp", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// スタンプを消す 指定したメッセージから指定した自身が押したスタンプを削除します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">メッセージUUID</param>
        /// <param name="stampId">スタンプUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveMessageStampAsync(Guid messageId, Guid stampId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await RemoveMessageStampWithHttpInfoAsync(messageId, stampId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// スタンプを消す 指定したメッセージから指定した自身が押したスタンプを削除します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">メッセージUUID</param>
        /// <param name="stampId">スタンプUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<DotnetTraq.Client.ApiResponse<Object>> RemoveMessageStampWithHttpInfoAsync(Guid messageId, Guid stampId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("messageId", DotnetTraq.Client.ClientUtils.ParameterToString(messageId)); // path parameter
            localVarRequestOptions.PathParameters.Add("stampId", DotnetTraq.Client.ClientUtils.ParameterToString(stampId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/messages/{messageId}/stamps/{stampId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveMessageStamp", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
