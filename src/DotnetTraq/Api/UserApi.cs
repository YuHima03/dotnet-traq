/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using DotnetTraq.Client;
using DotnetTraq.Model;

namespace DotnetTraq.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// ユーザーにタグを追加
        /// </summary>
        /// <remarks>
        /// 指定したユーザーに指定したタグを追加します。 Webhookユーザーにタグを追加することは出来ません。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="postUserTagRequest"> (optional)</param>
        /// <returns>UserTag</returns>
        UserTag AddUserTag(Guid userId, PostUserTagRequest? postUserTagRequest = default(PostUserTagRequest?));

        /// <summary>
        /// ユーザーにタグを追加
        /// </summary>
        /// <remarks>
        /// 指定したユーザーに指定したタグを追加します。 Webhookユーザーにタグを追加することは出来ません。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="postUserTagRequest"> (optional)</param>
        /// <returns>ApiResponse of UserTag</returns>
        ApiResponse<UserTag> AddUserTagWithHttpInfo(Guid userId, PostUserTagRequest? postUserTagRequest = default(PostUserTagRequest?));
        /// <summary>
        /// ユーザーのアイコン画像を変更します
        /// </summary>
        /// <remarks>
        /// 指定したユーザーのアイコン画像を変更します。 管理者権限が必要です。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="file">アイコン画像(2MBまでのpng, jpeg, gif)</param>
        /// <returns></returns>
        void ChangeUserIcon(Guid userId, FileParameter file);

        /// <summary>
        /// ユーザーのアイコン画像を変更します
        /// </summary>
        /// <remarks>
        /// 指定したユーザーのアイコン画像を変更します。 管理者権限が必要です。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="file">アイコン画像(2MBまでのpng, jpeg, gif)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ChangeUserIconWithHttpInfo(Guid userId, FileParameter file);
        /// <summary>
        /// ユーザーのパスワードを変更
        /// </summary>
        /// <remarks>
        /// 指定したユーザーのパスワードを変更します。 管理者権限が必要です。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="putUserPasswordRequest"> (optional)</param>
        /// <returns></returns>
        void ChangeUserPassword(Guid userId, PutUserPasswordRequest? putUserPasswordRequest = default(PutUserPasswordRequest?));

        /// <summary>
        /// ユーザーのパスワードを変更
        /// </summary>
        /// <remarks>
        /// 指定したユーザーのパスワードを変更します。 管理者権限が必要です。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="putUserPasswordRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ChangeUserPasswordWithHttpInfo(Guid userId, PutUserPasswordRequest? putUserPasswordRequest = default(PutUserPasswordRequest?));
        /// <summary>
        /// ユーザーを登録
        /// </summary>
        /// <remarks>
        /// ユーザーを登録します。 管理者権限が必要です。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postUserRequest"> (optional)</param>
        /// <returns>UserDetail</returns>
        UserDetail CreateUser(PostUserRequest? postUserRequest = default(PostUserRequest?));

        /// <summary>
        /// ユーザーを登録
        /// </summary>
        /// <remarks>
        /// ユーザーを登録します。 管理者権限が必要です。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postUserRequest"> (optional)</param>
        /// <returns>ApiResponse of UserDetail</returns>
        ApiResponse<UserDetail> CreateUserWithHttpInfo(PostUserRequest? postUserRequest = default(PostUserRequest?));
        /// <summary>
        /// ユーザー情報を変更
        /// </summary>
        /// <remarks>
        /// 指定したユーザーの情報を変更します。 管理者権限が必要です。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="patchUserRequest"> (optional)</param>
        /// <returns></returns>
        void EditUser(Guid userId, PatchUserRequest? patchUserRequest = default(PatchUserRequest?));

        /// <summary>
        /// ユーザー情報を変更
        /// </summary>
        /// <remarks>
        /// 指定したユーザーの情報を変更します。 管理者権限が必要です。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="patchUserRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EditUserWithHttpInfo(Guid userId, PatchUserRequest? patchUserRequest = default(PatchUserRequest?));
        /// <summary>
        /// ユーザーのタグを編集
        /// </summary>
        /// <remarks>
        /// 指定したユーザーの指定したタグの状態を変更します。 他人の状態は変更できません。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="tagId">タグUUID</param>
        /// <param name="patchUserTagRequest"> (optional)</param>
        /// <returns></returns>
        void EditUserTag(Guid userId, Guid tagId, PatchUserTagRequest? patchUserTagRequest = default(PatchUserTagRequest?));

        /// <summary>
        /// ユーザーのタグを編集
        /// </summary>
        /// <remarks>
        /// 指定したユーザーの指定したタグの状態を変更します。 他人の状態は変更できません。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="tagId">タグUUID</param>
        /// <param name="patchUserTagRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EditUserTagWithHttpInfo(Guid userId, Guid tagId, PatchUserTagRequest? patchUserTagRequest = default(PatchUserTagRequest?));
        /// <summary>
        /// ダイレクトメッセージのリストを取得
        /// </summary>
        /// <remarks>
        /// 指定したユーザーとのダイレクトメッセージのリストを取得します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="limit">取得する件数 (optional)</param>
        /// <param name="offset">取得するオフセット (optional, default to 0)</param>
        /// <param name="since">取得する時間範囲の開始日時 (optional, default to &quot;0000-01-01T00:00Z&quot;)</param>
        /// <param name="until">取得する時間範囲の終了日時 (optional)</param>
        /// <param name="inclusive">範囲の端を含めるかどうか (optional, default to false)</param>
        /// <param name="order">昇順か降順か (optional, default to desc)</param>
        /// <returns>List&lt;Message&gt;</returns>
        List<Message> GetDirectMessages(Guid userId, int? limit = default(int?), int? offset = default(int?), DateTimeOffset? since = default(DateTimeOffset?), DateTimeOffset? until = default(DateTimeOffset?), bool? inclusive = default(bool?), string? order = default(string?));

        /// <summary>
        /// ダイレクトメッセージのリストを取得
        /// </summary>
        /// <remarks>
        /// 指定したユーザーとのダイレクトメッセージのリストを取得します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="limit">取得する件数 (optional)</param>
        /// <param name="offset">取得するオフセット (optional, default to 0)</param>
        /// <param name="since">取得する時間範囲の開始日時 (optional, default to &quot;0000-01-01T00:00Z&quot;)</param>
        /// <param name="until">取得する時間範囲の終了日時 (optional)</param>
        /// <param name="inclusive">範囲の端を含めるかどうか (optional, default to false)</param>
        /// <param name="order">昇順か降順か (optional, default to desc)</param>
        /// <returns>ApiResponse of List&lt;Message&gt;</returns>
        ApiResponse<List<Message>> GetDirectMessagesWithHttpInfo(Guid userId, int? limit = default(int?), int? offset = default(int?), DateTimeOffset? since = default(DateTimeOffset?), DateTimeOffset? until = default(DateTimeOffset?), bool? inclusive = default(bool?), string? order = default(string?));
        /// <summary>
        /// ユーザー詳細情報を取得
        /// </summary>
        /// <remarks>
        /// 指定したユーザーの詳細情報を取得します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <returns>UserDetail</returns>
        UserDetail GetUser(Guid userId);

        /// <summary>
        /// ユーザー詳細情報を取得
        /// </summary>
        /// <remarks>
        /// 指定したユーザーの詳細情報を取得します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <returns>ApiResponse of UserDetail</returns>
        ApiResponse<UserDetail> GetUserWithHttpInfo(Guid userId);
        /// <summary>
        /// DMチャンネル情報を取得
        /// </summary>
        /// <remarks>
        /// 指定したユーザーとのダイレクトメッセージチャンネルの情報を返します。 ダイレクトメッセージチャンネルが存在しなかった場合、自動的に作成されます。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>DMChannel</returns>
        DMChannel GetUserDMChannel(Guid userId);

        /// <summary>
        /// DMチャンネル情報を取得
        /// </summary>
        /// <remarks>
        /// 指定したユーザーとのダイレクトメッセージチャンネルの情報を返します。 ダイレクトメッセージチャンネルが存在しなかった場合、自動的に作成されます。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of DMChannel</returns>
        ApiResponse<DMChannel> GetUserDMChannelWithHttpInfo(Guid userId);
        /// <summary>
        /// ユーザーのアイコン画像を取得
        /// </summary>
        /// <remarks>
        /// 指定したユーザーのアイコン画像を取得します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <returns>FileParameter</returns>
        FileParameter GetUserIcon(Guid userId);

        /// <summary>
        /// ユーザーのアイコン画像を取得
        /// </summary>
        /// <remarks>
        /// 指定したユーザーのアイコン画像を取得します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <returns>ApiResponse of FileParameter</returns>
        ApiResponse<FileParameter> GetUserIconWithHttpInfo(Guid userId);
        /// <summary>
        /// ユーザー統計情報を取得
        /// </summary>
        /// <remarks>
        /// 指定したユーザーの統計情報を取得します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <returns>UserStats</returns>
        UserStats GetUserStats(Guid userId);

        /// <summary>
        /// ユーザー統計情報を取得
        /// </summary>
        /// <remarks>
        /// 指定したユーザーの統計情報を取得します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <returns>ApiResponse of UserStats</returns>
        ApiResponse<UserStats> GetUserStatsWithHttpInfo(Guid userId);
        /// <summary>
        /// ユーザーのタグリストを取得
        /// </summary>
        /// <remarks>
        /// 指定したユーザーのタグリストを取得します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <returns>List&lt;UserTag&gt;</returns>
        List<UserTag> GetUserTags(Guid userId);

        /// <summary>
        /// ユーザーのタグリストを取得
        /// </summary>
        /// <remarks>
        /// 指定したユーザーのタグリストを取得します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <returns>ApiResponse of List&lt;UserTag&gt;</returns>
        ApiResponse<List<UserTag>> GetUserTagsWithHttpInfo(Guid userId);
        /// <summary>
        /// ユーザーのリストを取得
        /// </summary>
        /// <remarks>
        /// ユーザーのリストを取得します。 &#x60;include-suspended&#x60;を指定しない場合、レスポンスにはユーザーアカウント状態が\&quot;1: 有効\&quot;であるユーザーのみが含まれます。 &#x60;include-suspended&#x60;と&#x60;name&#x60;を同時に指定することはできません。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeSuspended">アカウントがアクティブでないユーザーを含め、全てのユーザーを取得するかどうか (optional, default to false)</param>
        /// <param name="name">名前が一致するアカウントのみを取得する (optional)</param>
        /// <returns>List&lt;User&gt;</returns>
        List<User> GetUsers(bool? includeSuspended = default(bool?), string? name = default(string?));

        /// <summary>
        /// ユーザーのリストを取得
        /// </summary>
        /// <remarks>
        /// ユーザーのリストを取得します。 &#x60;include-suspended&#x60;を指定しない場合、レスポンスにはユーザーアカウント状態が\&quot;1: 有効\&quot;であるユーザーのみが含まれます。 &#x60;include-suspended&#x60;と&#x60;name&#x60;を同時に指定することはできません。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeSuspended">アカウントがアクティブでないユーザーを含め、全てのユーザーを取得するかどうか (optional, default to false)</param>
        /// <param name="name">名前が一致するアカウントのみを取得する (optional)</param>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        ApiResponse<List<User>> GetUsersWithHttpInfo(bool? includeSuspended = default(bool?), string? name = default(string?));
        /// <summary>
        /// ダイレクトメッセージを送信
        /// </summary>
        /// <remarks>
        /// 指定したユーザーにダイレクトメッセージを送信します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="postMessageRequest"> (optional)</param>
        /// <returns>Message</returns>
        Message PostDirectMessage(Guid userId, PostMessageRequest? postMessageRequest = default(PostMessageRequest?));

        /// <summary>
        /// ダイレクトメッセージを送信
        /// </summary>
        /// <remarks>
        /// 指定したユーザーにダイレクトメッセージを送信します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="postMessageRequest"> (optional)</param>
        /// <returns>ApiResponse of Message</returns>
        ApiResponse<Message> PostDirectMessageWithHttpInfo(Guid userId, PostMessageRequest? postMessageRequest = default(PostMessageRequest?));
        /// <summary>
        /// ユーザーからタグを削除します
        /// </summary>
        /// <remarks>
        /// 既に存在しないタグを削除しようとした場合は204を返します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="tagId">タグUUID</param>
        /// <returns></returns>
        void RemoveUserTag(Guid userId, Guid tagId);

        /// <summary>
        /// ユーザーからタグを削除します
        /// </summary>
        /// <remarks>
        /// 既に存在しないタグを削除しようとした場合は204を返します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="tagId">タグUUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveUserTagWithHttpInfo(Guid userId, Guid tagId);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// ユーザーにタグを追加
        /// </summary>
        /// <remarks>
        /// 指定したユーザーに指定したタグを追加します。 Webhookユーザーにタグを追加することは出来ません。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="postUserTagRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserTag</returns>
        System.Threading.Tasks.Task<UserTag> AddUserTagAsync(Guid userId, PostUserTagRequest? postUserTagRequest = default(PostUserTagRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// ユーザーにタグを追加
        /// </summary>
        /// <remarks>
        /// 指定したユーザーに指定したタグを追加します。 Webhookユーザーにタグを追加することは出来ません。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="postUserTagRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserTag)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserTag>> AddUserTagWithHttpInfoAsync(Guid userId, PostUserTagRequest? postUserTagRequest = default(PostUserTagRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// ユーザーのアイコン画像を変更します
        /// </summary>
        /// <remarks>
        /// 指定したユーザーのアイコン画像を変更します。 管理者権限が必要です。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="file">アイコン画像(2MBまでのpng, jpeg, gif)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ChangeUserIconAsync(Guid userId, FileParameter file, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// ユーザーのアイコン画像を変更します
        /// </summary>
        /// <remarks>
        /// 指定したユーザーのアイコン画像を変更します。 管理者権限が必要です。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="file">アイコン画像(2MBまでのpng, jpeg, gif)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ChangeUserIconWithHttpInfoAsync(Guid userId, FileParameter file, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// ユーザーのパスワードを変更
        /// </summary>
        /// <remarks>
        /// 指定したユーザーのパスワードを変更します。 管理者権限が必要です。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="putUserPasswordRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ChangeUserPasswordAsync(Guid userId, PutUserPasswordRequest? putUserPasswordRequest = default(PutUserPasswordRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// ユーザーのパスワードを変更
        /// </summary>
        /// <remarks>
        /// 指定したユーザーのパスワードを変更します。 管理者権限が必要です。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="putUserPasswordRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ChangeUserPasswordWithHttpInfoAsync(Guid userId, PutUserPasswordRequest? putUserPasswordRequest = default(PutUserPasswordRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// ユーザーを登録
        /// </summary>
        /// <remarks>
        /// ユーザーを登録します。 管理者権限が必要です。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postUserRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserDetail</returns>
        System.Threading.Tasks.Task<UserDetail> CreateUserAsync(PostUserRequest? postUserRequest = default(PostUserRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// ユーザーを登録
        /// </summary>
        /// <remarks>
        /// ユーザーを登録します。 管理者権限が必要です。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postUserRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserDetail>> CreateUserWithHttpInfoAsync(PostUserRequest? postUserRequest = default(PostUserRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// ユーザー情報を変更
        /// </summary>
        /// <remarks>
        /// 指定したユーザーの情報を変更します。 管理者権限が必要です。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="patchUserRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EditUserAsync(Guid userId, PatchUserRequest? patchUserRequest = default(PatchUserRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// ユーザー情報を変更
        /// </summary>
        /// <remarks>
        /// 指定したユーザーの情報を変更します。 管理者権限が必要です。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="patchUserRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EditUserWithHttpInfoAsync(Guid userId, PatchUserRequest? patchUserRequest = default(PatchUserRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// ユーザーのタグを編集
        /// </summary>
        /// <remarks>
        /// 指定したユーザーの指定したタグの状態を変更します。 他人の状態は変更できません。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="tagId">タグUUID</param>
        /// <param name="patchUserTagRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EditUserTagAsync(Guid userId, Guid tagId, PatchUserTagRequest? patchUserTagRequest = default(PatchUserTagRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// ユーザーのタグを編集
        /// </summary>
        /// <remarks>
        /// 指定したユーザーの指定したタグの状態を変更します。 他人の状態は変更できません。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="tagId">タグUUID</param>
        /// <param name="patchUserTagRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EditUserTagWithHttpInfoAsync(Guid userId, Guid tagId, PatchUserTagRequest? patchUserTagRequest = default(PatchUserTagRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// ダイレクトメッセージのリストを取得
        /// </summary>
        /// <remarks>
        /// 指定したユーザーとのダイレクトメッセージのリストを取得します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="limit">取得する件数 (optional)</param>
        /// <param name="offset">取得するオフセット (optional, default to 0)</param>
        /// <param name="since">取得する時間範囲の開始日時 (optional, default to &quot;0000-01-01T00:00Z&quot;)</param>
        /// <param name="until">取得する時間範囲の終了日時 (optional)</param>
        /// <param name="inclusive">範囲の端を含めるかどうか (optional, default to false)</param>
        /// <param name="order">昇順か降順か (optional, default to desc)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Message&gt;</returns>
        System.Threading.Tasks.Task<List<Message>> GetDirectMessagesAsync(Guid userId, int? limit = default(int?), int? offset = default(int?), DateTimeOffset? since = default(DateTimeOffset?), DateTimeOffset? until = default(DateTimeOffset?), bool? inclusive = default(bool?), string? order = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// ダイレクトメッセージのリストを取得
        /// </summary>
        /// <remarks>
        /// 指定したユーザーとのダイレクトメッセージのリストを取得します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="limit">取得する件数 (optional)</param>
        /// <param name="offset">取得するオフセット (optional, default to 0)</param>
        /// <param name="since">取得する時間範囲の開始日時 (optional, default to &quot;0000-01-01T00:00Z&quot;)</param>
        /// <param name="until">取得する時間範囲の終了日時 (optional)</param>
        /// <param name="inclusive">範囲の端を含めるかどうか (optional, default to false)</param>
        /// <param name="order">昇順か降順か (optional, default to desc)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Message&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Message>>> GetDirectMessagesWithHttpInfoAsync(Guid userId, int? limit = default(int?), int? offset = default(int?), DateTimeOffset? since = default(DateTimeOffset?), DateTimeOffset? until = default(DateTimeOffset?), bool? inclusive = default(bool?), string? order = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// ユーザー詳細情報を取得
        /// </summary>
        /// <remarks>
        /// 指定したユーザーの詳細情報を取得します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserDetail</returns>
        System.Threading.Tasks.Task<UserDetail> GetUserAsync(Guid userId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// ユーザー詳細情報を取得
        /// </summary>
        /// <remarks>
        /// 指定したユーザーの詳細情報を取得します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserDetail>> GetUserWithHttpInfoAsync(Guid userId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// DMチャンネル情報を取得
        /// </summary>
        /// <remarks>
        /// 指定したユーザーとのダイレクトメッセージチャンネルの情報を返します。 ダイレクトメッセージチャンネルが存在しなかった場合、自動的に作成されます。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DMChannel</returns>
        System.Threading.Tasks.Task<DMChannel> GetUserDMChannelAsync(Guid userId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// DMチャンネル情報を取得
        /// </summary>
        /// <remarks>
        /// 指定したユーザーとのダイレクトメッセージチャンネルの情報を返します。 ダイレクトメッセージチャンネルが存在しなかった場合、自動的に作成されます。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DMChannel)</returns>
        System.Threading.Tasks.Task<ApiResponse<DMChannel>> GetUserDMChannelWithHttpInfoAsync(Guid userId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// ユーザーのアイコン画像を取得
        /// </summary>
        /// <remarks>
        /// 指定したユーザーのアイコン画像を取得します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileParameter</returns>
        System.Threading.Tasks.Task<FileParameter> GetUserIconAsync(Guid userId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// ユーザーのアイコン画像を取得
        /// </summary>
        /// <remarks>
        /// 指定したユーザーのアイコン画像を取得します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileParameter)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileParameter>> GetUserIconWithHttpInfoAsync(Guid userId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// ユーザー統計情報を取得
        /// </summary>
        /// <remarks>
        /// 指定したユーザーの統計情報を取得します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserStats</returns>
        System.Threading.Tasks.Task<UserStats> GetUserStatsAsync(Guid userId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// ユーザー統計情報を取得
        /// </summary>
        /// <remarks>
        /// 指定したユーザーの統計情報を取得します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserStats)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserStats>> GetUserStatsWithHttpInfoAsync(Guid userId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// ユーザーのタグリストを取得
        /// </summary>
        /// <remarks>
        /// 指定したユーザーのタグリストを取得します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;UserTag&gt;</returns>
        System.Threading.Tasks.Task<List<UserTag>> GetUserTagsAsync(Guid userId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// ユーザーのタグリストを取得
        /// </summary>
        /// <remarks>
        /// 指定したユーザーのタグリストを取得します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;UserTag&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserTag>>> GetUserTagsWithHttpInfoAsync(Guid userId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// ユーザーのリストを取得
        /// </summary>
        /// <remarks>
        /// ユーザーのリストを取得します。 &#x60;include-suspended&#x60;を指定しない場合、レスポンスにはユーザーアカウント状態が\&quot;1: 有効\&quot;であるユーザーのみが含まれます。 &#x60;include-suspended&#x60;と&#x60;name&#x60;を同時に指定することはできません。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeSuspended">アカウントがアクティブでないユーザーを含め、全てのユーザーを取得するかどうか (optional, default to false)</param>
        /// <param name="name">名前が一致するアカウントのみを取得する (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;User&gt;</returns>
        System.Threading.Tasks.Task<List<User>> GetUsersAsync(bool? includeSuspended = default(bool?), string? name = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// ユーザーのリストを取得
        /// </summary>
        /// <remarks>
        /// ユーザーのリストを取得します。 &#x60;include-suspended&#x60;を指定しない場合、レスポンスにはユーザーアカウント状態が\&quot;1: 有効\&quot;であるユーザーのみが含まれます。 &#x60;include-suspended&#x60;と&#x60;name&#x60;を同時に指定することはできません。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeSuspended">アカウントがアクティブでないユーザーを含め、全てのユーザーを取得するかどうか (optional, default to false)</param>
        /// <param name="name">名前が一致するアカウントのみを取得する (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<User>>> GetUsersWithHttpInfoAsync(bool? includeSuspended = default(bool?), string? name = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// ダイレクトメッセージを送信
        /// </summary>
        /// <remarks>
        /// 指定したユーザーにダイレクトメッセージを送信します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="postMessageRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Message</returns>
        System.Threading.Tasks.Task<Message> PostDirectMessageAsync(Guid userId, PostMessageRequest? postMessageRequest = default(PostMessageRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// ダイレクトメッセージを送信
        /// </summary>
        /// <remarks>
        /// 指定したユーザーにダイレクトメッセージを送信します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="postMessageRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Message)</returns>
        System.Threading.Tasks.Task<ApiResponse<Message>> PostDirectMessageWithHttpInfoAsync(Guid userId, PostMessageRequest? postMessageRequest = default(PostMessageRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// ユーザーからタグを削除します
        /// </summary>
        /// <remarks>
        /// 既に存在しないタグを削除しようとした場合は204を返します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="tagId">タグUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveUserTagAsync(Guid userId, Guid tagId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// ユーザーからタグを削除します
        /// </summary>
        /// <remarks>
        /// 既に存在しないタグを削除しようとした場合は204を返します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="tagId">タグUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveUserTagWithHttpInfoAsync(Guid userId, Guid tagId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserApi : IUserApiSync, IUserApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UserApi : IDisposable, IUserApi
    {
        private DotnetTraq.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public UserApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public UserApi(string basePath)
        {
            this.Configuration = DotnetTraq.Client.Configuration.MergeConfigurations(
                DotnetTraq.Client.GlobalConfiguration.Instance,
                new DotnetTraq.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new DotnetTraq.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = DotnetTraq.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public UserApi(DotnetTraq.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = DotnetTraq.Client.Configuration.MergeConfigurations(
                DotnetTraq.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new DotnetTraq.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = DotnetTraq.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public UserApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public UserApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = DotnetTraq.Client.Configuration.MergeConfigurations(
                DotnetTraq.Client.GlobalConfiguration.Instance,
                new DotnetTraq.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new DotnetTraq.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = DotnetTraq.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public UserApi(HttpClient client, DotnetTraq.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = DotnetTraq.Client.Configuration.MergeConfigurations(
                DotnetTraq.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new DotnetTraq.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = DotnetTraq.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public UserApi(DotnetTraq.Client.ISynchronousClient client, DotnetTraq.Client.IAsynchronousClient asyncClient, DotnetTraq.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = DotnetTraq.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public DotnetTraq.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public DotnetTraq.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public DotnetTraq.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public DotnetTraq.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public DotnetTraq.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// ユーザーにタグを追加 指定したユーザーに指定したタグを追加します。 Webhookユーザーにタグを追加することは出来ません。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="postUserTagRequest"> (optional)</param>
        /// <returns>UserTag</returns>
        public UserTag AddUserTag(Guid userId, PostUserTagRequest? postUserTagRequest = default(PostUserTagRequest?))
        {
            DotnetTraq.Client.ApiResponse<UserTag> localVarResponse = AddUserTagWithHttpInfo(userId, postUserTagRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ユーザーにタグを追加 指定したユーザーに指定したタグを追加します。 Webhookユーザーにタグを追加することは出来ません。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="postUserTagRequest"> (optional)</param>
        /// <returns>ApiResponse of UserTag</returns>
        public DotnetTraq.Client.ApiResponse<UserTag> AddUserTagWithHttpInfo(Guid userId, PostUserTagRequest? postUserTagRequest = default(PostUserTagRequest?))
        {
            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userId", DotnetTraq.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = postUserTagRequest;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<UserTag>("/users/{userId}/tags", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddUserTag", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ユーザーにタグを追加 指定したユーザーに指定したタグを追加します。 Webhookユーザーにタグを追加することは出来ません。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="postUserTagRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserTag</returns>
        public async System.Threading.Tasks.Task<UserTag> AddUserTagAsync(Guid userId, PostUserTagRequest? postUserTagRequest = default(PostUserTagRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DotnetTraq.Client.ApiResponse<UserTag> localVarResponse = await AddUserTagWithHttpInfoAsync(userId, postUserTagRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ユーザーにタグを追加 指定したユーザーに指定したタグを追加します。 Webhookユーザーにタグを追加することは出来ません。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="postUserTagRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserTag)</returns>
        public async System.Threading.Tasks.Task<DotnetTraq.Client.ApiResponse<UserTag>> AddUserTagWithHttpInfoAsync(Guid userId, PostUserTagRequest? postUserTagRequest = default(PostUserTagRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userId", DotnetTraq.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = postUserTagRequest;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<UserTag>("/users/{userId}/tags", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddUserTag", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ユーザーのアイコン画像を変更します 指定したユーザーのアイコン画像を変更します。 管理者権限が必要です。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="file">アイコン画像(2MBまでのpng, jpeg, gif)</param>
        /// <returns></returns>
        public void ChangeUserIcon(Guid userId, FileParameter file)
        {
            ChangeUserIconWithHttpInfo(userId, file);
        }

        /// <summary>
        /// ユーザーのアイコン画像を変更します 指定したユーザーのアイコン画像を変更します。 管理者権限が必要です。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="file">アイコン画像(2MBまでのpng, jpeg, gif)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public DotnetTraq.Client.ApiResponse<Object> ChangeUserIconWithHttpInfo(Guid userId, FileParameter file)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new DotnetTraq.Client.ApiException(400, "Missing required parameter 'file' when calling UserApi->ChangeUserIcon");

            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userId", DotnetTraq.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.FileParameters.Add("file", file);

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/users/{userId}/icon", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChangeUserIcon", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ユーザーのアイコン画像を変更します 指定したユーザーのアイコン画像を変更します。 管理者権限が必要です。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="file">アイコン画像(2MBまでのpng, jpeg, gif)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ChangeUserIconAsync(Guid userId, FileParameter file, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ChangeUserIconWithHttpInfoAsync(userId, file, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// ユーザーのアイコン画像を変更します 指定したユーザーのアイコン画像を変更します。 管理者権限が必要です。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="file">アイコン画像(2MBまでのpng, jpeg, gif)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<DotnetTraq.Client.ApiResponse<Object>> ChangeUserIconWithHttpInfoAsync(Guid userId, FileParameter file, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new DotnetTraq.Client.ApiException(400, "Missing required parameter 'file' when calling UserApi->ChangeUserIcon");


            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userId", DotnetTraq.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.FileParameters.Add("file", file);

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/users/{userId}/icon", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChangeUserIcon", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ユーザーのパスワードを変更 指定したユーザーのパスワードを変更します。 管理者権限が必要です。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="putUserPasswordRequest"> (optional)</param>
        /// <returns></returns>
        public void ChangeUserPassword(Guid userId, PutUserPasswordRequest? putUserPasswordRequest = default(PutUserPasswordRequest?))
        {
            ChangeUserPasswordWithHttpInfo(userId, putUserPasswordRequest);
        }

        /// <summary>
        /// ユーザーのパスワードを変更 指定したユーザーのパスワードを変更します。 管理者権限が必要です。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="putUserPasswordRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public DotnetTraq.Client.ApiResponse<Object> ChangeUserPasswordWithHttpInfo(Guid userId, PutUserPasswordRequest? putUserPasswordRequest = default(PutUserPasswordRequest?))
        {
            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userId", DotnetTraq.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = putUserPasswordRequest;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/users/{userId}/password", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChangeUserPassword", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ユーザーのパスワードを変更 指定したユーザーのパスワードを変更します。 管理者権限が必要です。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="putUserPasswordRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ChangeUserPasswordAsync(Guid userId, PutUserPasswordRequest? putUserPasswordRequest = default(PutUserPasswordRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ChangeUserPasswordWithHttpInfoAsync(userId, putUserPasswordRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// ユーザーのパスワードを変更 指定したユーザーのパスワードを変更します。 管理者権限が必要です。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="putUserPasswordRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<DotnetTraq.Client.ApiResponse<Object>> ChangeUserPasswordWithHttpInfoAsync(Guid userId, PutUserPasswordRequest? putUserPasswordRequest = default(PutUserPasswordRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userId", DotnetTraq.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = putUserPasswordRequest;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/users/{userId}/password", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChangeUserPassword", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ユーザーを登録 ユーザーを登録します。 管理者権限が必要です。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postUserRequest"> (optional)</param>
        /// <returns>UserDetail</returns>
        public UserDetail CreateUser(PostUserRequest? postUserRequest = default(PostUserRequest?))
        {
            DotnetTraq.Client.ApiResponse<UserDetail> localVarResponse = CreateUserWithHttpInfo(postUserRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ユーザーを登録 ユーザーを登録します。 管理者権限が必要です。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postUserRequest"> (optional)</param>
        /// <returns>ApiResponse of UserDetail</returns>
        public DotnetTraq.Client.ApiResponse<UserDetail> CreateUserWithHttpInfo(PostUserRequest? postUserRequest = default(PostUserRequest?))
        {
            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = postUserRequest;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<UserDetail>("/users", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ユーザーを登録 ユーザーを登録します。 管理者権限が必要です。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postUserRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserDetail</returns>
        public async System.Threading.Tasks.Task<UserDetail> CreateUserAsync(PostUserRequest? postUserRequest = default(PostUserRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DotnetTraq.Client.ApiResponse<UserDetail> localVarResponse = await CreateUserWithHttpInfoAsync(postUserRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ユーザーを登録 ユーザーを登録します。 管理者権限が必要です。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postUserRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserDetail)</returns>
        public async System.Threading.Tasks.Task<DotnetTraq.Client.ApiResponse<UserDetail>> CreateUserWithHttpInfoAsync(PostUserRequest? postUserRequest = default(PostUserRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = postUserRequest;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<UserDetail>("/users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ユーザー情報を変更 指定したユーザーの情報を変更します。 管理者権限が必要です。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="patchUserRequest"> (optional)</param>
        /// <returns></returns>
        public void EditUser(Guid userId, PatchUserRequest? patchUserRequest = default(PatchUserRequest?))
        {
            EditUserWithHttpInfo(userId, patchUserRequest);
        }

        /// <summary>
        /// ユーザー情報を変更 指定したユーザーの情報を変更します。 管理者権限が必要です。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="patchUserRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public DotnetTraq.Client.ApiResponse<Object> EditUserWithHttpInfo(Guid userId, PatchUserRequest? patchUserRequest = default(PatchUserRequest?))
        {
            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userId", DotnetTraq.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = patchUserRequest;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/users/{userId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EditUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ユーザー情報を変更 指定したユーザーの情報を変更します。 管理者権限が必要です。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="patchUserRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EditUserAsync(Guid userId, PatchUserRequest? patchUserRequest = default(PatchUserRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await EditUserWithHttpInfoAsync(userId, patchUserRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// ユーザー情報を変更 指定したユーザーの情報を変更します。 管理者権限が必要です。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="patchUserRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<DotnetTraq.Client.ApiResponse<Object>> EditUserWithHttpInfoAsync(Guid userId, PatchUserRequest? patchUserRequest = default(PatchUserRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userId", DotnetTraq.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = patchUserRequest;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/users/{userId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EditUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ユーザーのタグを編集 指定したユーザーの指定したタグの状態を変更します。 他人の状態は変更できません。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="tagId">タグUUID</param>
        /// <param name="patchUserTagRequest"> (optional)</param>
        /// <returns></returns>
        public void EditUserTag(Guid userId, Guid tagId, PatchUserTagRequest? patchUserTagRequest = default(PatchUserTagRequest?))
        {
            EditUserTagWithHttpInfo(userId, tagId, patchUserTagRequest);
        }

        /// <summary>
        /// ユーザーのタグを編集 指定したユーザーの指定したタグの状態を変更します。 他人の状態は変更できません。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="tagId">タグUUID</param>
        /// <param name="patchUserTagRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public DotnetTraq.Client.ApiResponse<Object> EditUserTagWithHttpInfo(Guid userId, Guid tagId, PatchUserTagRequest? patchUserTagRequest = default(PatchUserTagRequest?))
        {
            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userId", DotnetTraq.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("tagId", DotnetTraq.Client.ClientUtils.ParameterToString(tagId)); // path parameter
            localVarRequestOptions.Data = patchUserTagRequest;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/users/{userId}/tags/{tagId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EditUserTag", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ユーザーのタグを編集 指定したユーザーの指定したタグの状態を変更します。 他人の状態は変更できません。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="tagId">タグUUID</param>
        /// <param name="patchUserTagRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EditUserTagAsync(Guid userId, Guid tagId, PatchUserTagRequest? patchUserTagRequest = default(PatchUserTagRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await EditUserTagWithHttpInfoAsync(userId, tagId, patchUserTagRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// ユーザーのタグを編集 指定したユーザーの指定したタグの状態を変更します。 他人の状態は変更できません。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="tagId">タグUUID</param>
        /// <param name="patchUserTagRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<DotnetTraq.Client.ApiResponse<Object>> EditUserTagWithHttpInfoAsync(Guid userId, Guid tagId, PatchUserTagRequest? patchUserTagRequest = default(PatchUserTagRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userId", DotnetTraq.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("tagId", DotnetTraq.Client.ClientUtils.ParameterToString(tagId)); // path parameter
            localVarRequestOptions.Data = patchUserTagRequest;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/users/{userId}/tags/{tagId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EditUserTag", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ダイレクトメッセージのリストを取得 指定したユーザーとのダイレクトメッセージのリストを取得します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="limit">取得する件数 (optional)</param>
        /// <param name="offset">取得するオフセット (optional, default to 0)</param>
        /// <param name="since">取得する時間範囲の開始日時 (optional, default to &quot;0000-01-01T00:00Z&quot;)</param>
        /// <param name="until">取得する時間範囲の終了日時 (optional)</param>
        /// <param name="inclusive">範囲の端を含めるかどうか (optional, default to false)</param>
        /// <param name="order">昇順か降順か (optional, default to desc)</param>
        /// <returns>List&lt;Message&gt;</returns>
        public List<Message> GetDirectMessages(Guid userId, int? limit = default(int?), int? offset = default(int?), DateTimeOffset? since = default(DateTimeOffset?), DateTimeOffset? until = default(DateTimeOffset?), bool? inclusive = default(bool?), string? order = default(string?))
        {
            DotnetTraq.Client.ApiResponse<List<Message>> localVarResponse = GetDirectMessagesWithHttpInfo(userId, limit, offset, since, until, inclusive, order);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ダイレクトメッセージのリストを取得 指定したユーザーとのダイレクトメッセージのリストを取得します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="limit">取得する件数 (optional)</param>
        /// <param name="offset">取得するオフセット (optional, default to 0)</param>
        /// <param name="since">取得する時間範囲の開始日時 (optional, default to &quot;0000-01-01T00:00Z&quot;)</param>
        /// <param name="until">取得する時間範囲の終了日時 (optional)</param>
        /// <param name="inclusive">範囲の端を含めるかどうか (optional, default to false)</param>
        /// <param name="order">昇順か降順か (optional, default to desc)</param>
        /// <returns>ApiResponse of List&lt;Message&gt;</returns>
        public DotnetTraq.Client.ApiResponse<List<Message>> GetDirectMessagesWithHttpInfo(Guid userId, int? limit = default(int?), int? offset = default(int?), DateTimeOffset? since = default(DateTimeOffset?), DateTimeOffset? until = default(DateTimeOffset?), bool? inclusive = default(bool?), string? order = default(string?))
        {
            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userId", DotnetTraq.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotnetTraq.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotnetTraq.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (since != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotnetTraq.Client.ClientUtils.ParameterToMultiMap("", "since", since));
            }
            if (until != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotnetTraq.Client.ClientUtils.ParameterToMultiMap("", "until", until));
            }
            if (inclusive != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotnetTraq.Client.ClientUtils.ParameterToMultiMap("", "inclusive", inclusive));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotnetTraq.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Message>>("/users/{userId}/messages", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDirectMessages", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ダイレクトメッセージのリストを取得 指定したユーザーとのダイレクトメッセージのリストを取得します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="limit">取得する件数 (optional)</param>
        /// <param name="offset">取得するオフセット (optional, default to 0)</param>
        /// <param name="since">取得する時間範囲の開始日時 (optional, default to &quot;0000-01-01T00:00Z&quot;)</param>
        /// <param name="until">取得する時間範囲の終了日時 (optional)</param>
        /// <param name="inclusive">範囲の端を含めるかどうか (optional, default to false)</param>
        /// <param name="order">昇順か降順か (optional, default to desc)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Message&gt;</returns>
        public async System.Threading.Tasks.Task<List<Message>> GetDirectMessagesAsync(Guid userId, int? limit = default(int?), int? offset = default(int?), DateTimeOffset? since = default(DateTimeOffset?), DateTimeOffset? until = default(DateTimeOffset?), bool? inclusive = default(bool?), string? order = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DotnetTraq.Client.ApiResponse<List<Message>> localVarResponse = await GetDirectMessagesWithHttpInfoAsync(userId, limit, offset, since, until, inclusive, order, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ダイレクトメッセージのリストを取得 指定したユーザーとのダイレクトメッセージのリストを取得します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="limit">取得する件数 (optional)</param>
        /// <param name="offset">取得するオフセット (optional, default to 0)</param>
        /// <param name="since">取得する時間範囲の開始日時 (optional, default to &quot;0000-01-01T00:00Z&quot;)</param>
        /// <param name="until">取得する時間範囲の終了日時 (optional)</param>
        /// <param name="inclusive">範囲の端を含めるかどうか (optional, default to false)</param>
        /// <param name="order">昇順か降順か (optional, default to desc)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Message&gt;)</returns>
        public async System.Threading.Tasks.Task<DotnetTraq.Client.ApiResponse<List<Message>>> GetDirectMessagesWithHttpInfoAsync(Guid userId, int? limit = default(int?), int? offset = default(int?), DateTimeOffset? since = default(DateTimeOffset?), DateTimeOffset? until = default(DateTimeOffset?), bool? inclusive = default(bool?), string? order = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userId", DotnetTraq.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotnetTraq.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotnetTraq.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (since != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotnetTraq.Client.ClientUtils.ParameterToMultiMap("", "since", since));
            }
            if (until != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotnetTraq.Client.ClientUtils.ParameterToMultiMap("", "until", until));
            }
            if (inclusive != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotnetTraq.Client.ClientUtils.ParameterToMultiMap("", "inclusive", inclusive));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotnetTraq.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Message>>("/users/{userId}/messages", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDirectMessages", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ユーザー詳細情報を取得 指定したユーザーの詳細情報を取得します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <returns>UserDetail</returns>
        public UserDetail GetUser(Guid userId)
        {
            DotnetTraq.Client.ApiResponse<UserDetail> localVarResponse = GetUserWithHttpInfo(userId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ユーザー詳細情報を取得 指定したユーザーの詳細情報を取得します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <returns>ApiResponse of UserDetail</returns>
        public DotnetTraq.Client.ApiResponse<UserDetail> GetUserWithHttpInfo(Guid userId)
        {
            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userId", DotnetTraq.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<UserDetail>("/users/{userId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ユーザー詳細情報を取得 指定したユーザーの詳細情報を取得します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserDetail</returns>
        public async System.Threading.Tasks.Task<UserDetail> GetUserAsync(Guid userId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DotnetTraq.Client.ApiResponse<UserDetail> localVarResponse = await GetUserWithHttpInfoAsync(userId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ユーザー詳細情報を取得 指定したユーザーの詳細情報を取得します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserDetail)</returns>
        public async System.Threading.Tasks.Task<DotnetTraq.Client.ApiResponse<UserDetail>> GetUserWithHttpInfoAsync(Guid userId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userId", DotnetTraq.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<UserDetail>("/users/{userId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// DMチャンネル情報を取得 指定したユーザーとのダイレクトメッセージチャンネルの情報を返します。 ダイレクトメッセージチャンネルが存在しなかった場合、自動的に作成されます。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>DMChannel</returns>
        public DMChannel GetUserDMChannel(Guid userId)
        {
            DotnetTraq.Client.ApiResponse<DMChannel> localVarResponse = GetUserDMChannelWithHttpInfo(userId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// DMチャンネル情報を取得 指定したユーザーとのダイレクトメッセージチャンネルの情報を返します。 ダイレクトメッセージチャンネルが存在しなかった場合、自動的に作成されます。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <returns>ApiResponse of DMChannel</returns>
        public DotnetTraq.Client.ApiResponse<DMChannel> GetUserDMChannelWithHttpInfo(Guid userId)
        {
            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userId", DotnetTraq.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<DMChannel>("/users/{userId}/dm-channel", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserDMChannel", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// DMチャンネル情報を取得 指定したユーザーとのダイレクトメッセージチャンネルの情報を返します。 ダイレクトメッセージチャンネルが存在しなかった場合、自動的に作成されます。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DMChannel</returns>
        public async System.Threading.Tasks.Task<DMChannel> GetUserDMChannelAsync(Guid userId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DotnetTraq.Client.ApiResponse<DMChannel> localVarResponse = await GetUserDMChannelWithHttpInfoAsync(userId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// DMチャンネル情報を取得 指定したユーザーとのダイレクトメッセージチャンネルの情報を返します。 ダイレクトメッセージチャンネルが存在しなかった場合、自動的に作成されます。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DMChannel)</returns>
        public async System.Threading.Tasks.Task<DotnetTraq.Client.ApiResponse<DMChannel>> GetUserDMChannelWithHttpInfoAsync(Guid userId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userId", DotnetTraq.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<DMChannel>("/users/{userId}/dm-channel", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserDMChannel", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ユーザーのアイコン画像を取得 指定したユーザーのアイコン画像を取得します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <returns>FileParameter</returns>
        public FileParameter GetUserIcon(Guid userId)
        {
            DotnetTraq.Client.ApiResponse<FileParameter> localVarResponse = GetUserIconWithHttpInfo(userId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ユーザーのアイコン画像を取得 指定したユーザーのアイコン画像を取得します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <returns>ApiResponse of FileParameter</returns>
        public DotnetTraq.Client.ApiResponse<FileParameter> GetUserIconWithHttpInfo(Guid userId)
        {
            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "image/jpeg",
                "image/gif",
                "image/png"
            };

            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userId", DotnetTraq.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FileParameter>("/users/{userId}/icon", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserIcon", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ユーザーのアイコン画像を取得 指定したユーザーのアイコン画像を取得します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileParameter</returns>
        public async System.Threading.Tasks.Task<FileParameter> GetUserIconAsync(Guid userId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DotnetTraq.Client.ApiResponse<FileParameter> localVarResponse = await GetUserIconWithHttpInfoAsync(userId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ユーザーのアイコン画像を取得 指定したユーザーのアイコン画像を取得します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileParameter)</returns>
        public async System.Threading.Tasks.Task<DotnetTraq.Client.ApiResponse<FileParameter>> GetUserIconWithHttpInfoAsync(Guid userId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "image/jpeg",
                "image/gif",
                "image/png"
            };


            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userId", DotnetTraq.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<FileParameter>("/users/{userId}/icon", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserIcon", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ユーザー統計情報を取得 指定したユーザーの統計情報を取得します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <returns>UserStats</returns>
        public UserStats GetUserStats(Guid userId)
        {
            DotnetTraq.Client.ApiResponse<UserStats> localVarResponse = GetUserStatsWithHttpInfo(userId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ユーザー統計情報を取得 指定したユーザーの統計情報を取得します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <returns>ApiResponse of UserStats</returns>
        public DotnetTraq.Client.ApiResponse<UserStats> GetUserStatsWithHttpInfo(Guid userId)
        {
            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userId", DotnetTraq.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<UserStats>("/users/{userId}/stats", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserStats", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ユーザー統計情報を取得 指定したユーザーの統計情報を取得します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserStats</returns>
        public async System.Threading.Tasks.Task<UserStats> GetUserStatsAsync(Guid userId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DotnetTraq.Client.ApiResponse<UserStats> localVarResponse = await GetUserStatsWithHttpInfoAsync(userId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ユーザー統計情報を取得 指定したユーザーの統計情報を取得します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserStats)</returns>
        public async System.Threading.Tasks.Task<DotnetTraq.Client.ApiResponse<UserStats>> GetUserStatsWithHttpInfoAsync(Guid userId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userId", DotnetTraq.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<UserStats>("/users/{userId}/stats", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserStats", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ユーザーのタグリストを取得 指定したユーザーのタグリストを取得します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <returns>List&lt;UserTag&gt;</returns>
        public List<UserTag> GetUserTags(Guid userId)
        {
            DotnetTraq.Client.ApiResponse<List<UserTag>> localVarResponse = GetUserTagsWithHttpInfo(userId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ユーザーのタグリストを取得 指定したユーザーのタグリストを取得します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <returns>ApiResponse of List&lt;UserTag&gt;</returns>
        public DotnetTraq.Client.ApiResponse<List<UserTag>> GetUserTagsWithHttpInfo(Guid userId)
        {
            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userId", DotnetTraq.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<UserTag>>("/users/{userId}/tags", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserTags", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ユーザーのタグリストを取得 指定したユーザーのタグリストを取得します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;UserTag&gt;</returns>
        public async System.Threading.Tasks.Task<List<UserTag>> GetUserTagsAsync(Guid userId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DotnetTraq.Client.ApiResponse<List<UserTag>> localVarResponse = await GetUserTagsWithHttpInfoAsync(userId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ユーザーのタグリストを取得 指定したユーザーのタグリストを取得します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;UserTag&gt;)</returns>
        public async System.Threading.Tasks.Task<DotnetTraq.Client.ApiResponse<List<UserTag>>> GetUserTagsWithHttpInfoAsync(Guid userId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userId", DotnetTraq.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<UserTag>>("/users/{userId}/tags", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserTags", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ユーザーのリストを取得 ユーザーのリストを取得します。 &#x60;include-suspended&#x60;を指定しない場合、レスポンスにはユーザーアカウント状態が\&quot;1: 有効\&quot;であるユーザーのみが含まれます。 &#x60;include-suspended&#x60;と&#x60;name&#x60;を同時に指定することはできません。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeSuspended">アカウントがアクティブでないユーザーを含め、全てのユーザーを取得するかどうか (optional, default to false)</param>
        /// <param name="name">名前が一致するアカウントのみを取得する (optional)</param>
        /// <returns>List&lt;User&gt;</returns>
        public List<User> GetUsers(bool? includeSuspended = default(bool?), string? name = default(string?))
        {
            DotnetTraq.Client.ApiResponse<List<User>> localVarResponse = GetUsersWithHttpInfo(includeSuspended, name);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ユーザーのリストを取得 ユーザーのリストを取得します。 &#x60;include-suspended&#x60;を指定しない場合、レスポンスにはユーザーアカウント状態が\&quot;1: 有効\&quot;であるユーザーのみが含まれます。 &#x60;include-suspended&#x60;と&#x60;name&#x60;を同時に指定することはできません。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeSuspended">アカウントがアクティブでないユーザーを含め、全てのユーザーを取得するかどうか (optional, default to false)</param>
        /// <param name="name">名前が一致するアカウントのみを取得する (optional)</param>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        public DotnetTraq.Client.ApiResponse<List<User>> GetUsersWithHttpInfo(bool? includeSuspended = default(bool?), string? name = default(string?))
        {
            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (includeSuspended != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotnetTraq.Client.ClientUtils.ParameterToMultiMap("", "include-suspended", includeSuspended));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotnetTraq.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<User>>("/users", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ユーザーのリストを取得 ユーザーのリストを取得します。 &#x60;include-suspended&#x60;を指定しない場合、レスポンスにはユーザーアカウント状態が\&quot;1: 有効\&quot;であるユーザーのみが含まれます。 &#x60;include-suspended&#x60;と&#x60;name&#x60;を同時に指定することはできません。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeSuspended">アカウントがアクティブでないユーザーを含め、全てのユーザーを取得するかどうか (optional, default to false)</param>
        /// <param name="name">名前が一致するアカウントのみを取得する (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;User&gt;</returns>
        public async System.Threading.Tasks.Task<List<User>> GetUsersAsync(bool? includeSuspended = default(bool?), string? name = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DotnetTraq.Client.ApiResponse<List<User>> localVarResponse = await GetUsersWithHttpInfoAsync(includeSuspended, name, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ユーザーのリストを取得 ユーザーのリストを取得します。 &#x60;include-suspended&#x60;を指定しない場合、レスポンスにはユーザーアカウント状態が\&quot;1: 有効\&quot;であるユーザーのみが含まれます。 &#x60;include-suspended&#x60;と&#x60;name&#x60;を同時に指定することはできません。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeSuspended">アカウントがアクティブでないユーザーを含め、全てのユーザーを取得するかどうか (optional, default to false)</param>
        /// <param name="name">名前が一致するアカウントのみを取得する (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        public async System.Threading.Tasks.Task<DotnetTraq.Client.ApiResponse<List<User>>> GetUsersWithHttpInfoAsync(bool? includeSuspended = default(bool?), string? name = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (includeSuspended != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotnetTraq.Client.ClientUtils.ParameterToMultiMap("", "include-suspended", includeSuspended));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(DotnetTraq.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<User>>("/users", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ダイレクトメッセージを送信 指定したユーザーにダイレクトメッセージを送信します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="postMessageRequest"> (optional)</param>
        /// <returns>Message</returns>
        public Message PostDirectMessage(Guid userId, PostMessageRequest? postMessageRequest = default(PostMessageRequest?))
        {
            DotnetTraq.Client.ApiResponse<Message> localVarResponse = PostDirectMessageWithHttpInfo(userId, postMessageRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ダイレクトメッセージを送信 指定したユーザーにダイレクトメッセージを送信します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="postMessageRequest"> (optional)</param>
        /// <returns>ApiResponse of Message</returns>
        public DotnetTraq.Client.ApiResponse<Message> PostDirectMessageWithHttpInfo(Guid userId, PostMessageRequest? postMessageRequest = default(PostMessageRequest?))
        {
            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userId", DotnetTraq.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = postMessageRequest;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Message>("/users/{userId}/messages", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostDirectMessage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ダイレクトメッセージを送信 指定したユーザーにダイレクトメッセージを送信します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="postMessageRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Message</returns>
        public async System.Threading.Tasks.Task<Message> PostDirectMessageAsync(Guid userId, PostMessageRequest? postMessageRequest = default(PostMessageRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DotnetTraq.Client.ApiResponse<Message> localVarResponse = await PostDirectMessageWithHttpInfoAsync(userId, postMessageRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ダイレクトメッセージを送信 指定したユーザーにダイレクトメッセージを送信します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="postMessageRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Message)</returns>
        public async System.Threading.Tasks.Task<DotnetTraq.Client.ApiResponse<Message>> PostDirectMessageWithHttpInfoAsync(Guid userId, PostMessageRequest? postMessageRequest = default(PostMessageRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userId", DotnetTraq.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = postMessageRequest;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Message>("/users/{userId}/messages", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostDirectMessage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ユーザーからタグを削除します 既に存在しないタグを削除しようとした場合は204を返します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="tagId">タグUUID</param>
        /// <returns></returns>
        public void RemoveUserTag(Guid userId, Guid tagId)
        {
            RemoveUserTagWithHttpInfo(userId, tagId);
        }

        /// <summary>
        /// ユーザーからタグを削除します 既に存在しないタグを削除しようとした場合は204を返します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="tagId">タグUUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public DotnetTraq.Client.ApiResponse<Object> RemoveUserTagWithHttpInfo(Guid userId, Guid tagId)
        {
            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userId", DotnetTraq.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("tagId", DotnetTraq.Client.ClientUtils.ParameterToString(tagId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/users/{userId}/tags/{tagId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveUserTag", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ユーザーからタグを削除します 既に存在しないタグを削除しようとした場合は204を返します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="tagId">タグUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveUserTagAsync(Guid userId, Guid tagId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await RemoveUserTagWithHttpInfoAsync(userId, tagId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// ユーザーからタグを削除します 既に存在しないタグを削除しようとした場合は204を返します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="tagId">タグUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<DotnetTraq.Client.ApiResponse<Object>> RemoveUserTagWithHttpInfoAsync(Guid userId, Guid tagId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userId", DotnetTraq.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("tagId", DotnetTraq.Client.ClientUtils.ParameterToString(tagId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/users/{userId}/tags/{tagId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveUserTag", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
