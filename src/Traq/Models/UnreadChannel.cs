// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Traq.Models
{
    /// <summary>
    /// 未読チャンネル情報
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class UnreadChannel : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>チャンネルUUID</summary>
        public Guid? ChannelId { get; set; }
        /// <summary>未読メッセージ数</summary>
        public int? Count { get; set; }
        /// <summary>自分宛てメッセージが含まれているかどうか</summary>
        public bool? Noticeable { get; set; }
        /// <summary>そのチャンネルの未読の中で最も古いメッセージのid</summary>
        public Guid? OldestMessageId { get; set; }
        /// <summary>チャンネルの最古の未読メッセージの日時</summary>
        public DateTimeOffset? Since { get; set; }
        /// <summary>チャンネルの最新の未読メッセージの日時</summary>
        public DateTimeOffset? UpdatedAt { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Traq.Models.UnreadChannel"/> and sets the default values.
        /// </summary>
        public UnreadChannel()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Traq.Models.UnreadChannel"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Traq.Models.UnreadChannel CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Traq.Models.UnreadChannel();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "channelId", n => { ChannelId = n.GetGuidValue(); } },
                { "count", n => { Count = n.GetIntValue(); } },
                { "noticeable", n => { Noticeable = n.GetBoolValue(); } },
                { "oldestMessageId", n => { OldestMessageId = n.GetGuidValue(); } },
                { "since", n => { Since = n.GetDateTimeOffsetValue(); } },
                { "updatedAt", n => { UpdatedAt = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteGuidValue("channelId", ChannelId);
            writer.WriteIntValue("count", Count);
            writer.WriteBoolValue("noticeable", Noticeable);
            writer.WriteGuidValue("oldestMessageId", OldestMessageId);
            writer.WriteDateTimeOffsetValue("since", Since);
            writer.WriteDateTimeOffsetValue("updatedAt", UpdatedAt);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
