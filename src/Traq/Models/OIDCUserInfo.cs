// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System;
using System.Collections.Generic;
using System.IO;
namespace Traq.Models
{
    /// <summary>
    /// 自分のユーザー詳細情報
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class OIDCUserInfo : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>ユーザー名</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>アイコン画像URL</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Picture { get; set; }
#nullable restore
#else
        public string Picture { get; set; }
#endif
        /// <summary>ユーザー名</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PreferredUsername { get; set; }
#nullable restore
#else
        public string PreferredUsername { get; set; }
#endif
        /// <summary>ユーザーUUID</summary>
        public Guid? Sub { get; set; }
        /// <summary>traQ特有のユーザー詳細情報</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Traq.Models.OIDCTraqUserInfo? Traq { get; set; }
#nullable restore
#else
        public global::Traq.Models.OIDCTraqUserInfo Traq { get; set; }
#endif
        /// <summary>更新日時</summary>
        public long? UpdatedAt { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Traq.Models.OIDCUserInfo"/> and sets the default values.
        /// </summary>
        public OIDCUserInfo()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Traq.Models.OIDCUserInfo"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Traq.Models.OIDCUserInfo CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Traq.Models.OIDCUserInfo();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "name", n => { Name = n.GetStringValue(); } },
                { "picture", n => { Picture = n.GetStringValue(); } },
                { "preferred_username", n => { PreferredUsername = n.GetStringValue(); } },
                { "sub", n => { Sub = n.GetGuidValue(); } },
                { "traq", n => { Traq = n.GetObjectValue<global::Traq.Models.OIDCTraqUserInfo>(global::Traq.Models.OIDCTraqUserInfo.CreateFromDiscriminatorValue); } },
                { "updated_at", n => { UpdatedAt = n.GetLongValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("picture", Picture);
            writer.WriteStringValue("preferred_username", PreferredUsername);
            writer.WriteGuidValue("sub", Sub);
            writer.WriteObjectValue<global::Traq.Models.OIDCTraqUserInfo>("traq", Traq);
            writer.WriteLongValue("updated_at", UpdatedAt);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
