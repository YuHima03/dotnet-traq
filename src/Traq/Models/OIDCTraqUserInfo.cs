// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Traq.Models
{
    /// <summary>
    /// traQ特有のユーザー詳細情報
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class OIDCTraqUserInfo : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>自己紹介(biography)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Bio { get; set; }
#nullable restore
#else
        public string Bio { get; set; }
#endif
        /// <summary>BOTかどうか</summary>
        public bool? Bot { get; set; }
        /// <summary>ユーザー表示名</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName { get; set; }
#nullable restore
#else
        public string DisplayName { get; set; }
#endif
        /// <summary>所属グループのUUIDの配列</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Guid?>? Groups { get; set; }
#nullable restore
#else
        public List<Guid?> Groups { get; set; }
#endif
        /// <summary>ホームチャンネル</summary>
        public Guid? HomeChannel { get; set; }
        /// <summary>アイコンファイルUUID</summary>
        public Guid? IconFileId { get; set; }
        /// <summary>最終オンライン日時</summary>
        public DateTimeOffset? LastOnline { get; set; }
        /// <summary>所有している権限の配列</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Traq.Models.UserPermission?>? Permissions { get; set; }
#nullable restore
#else
        public List<global::Traq.Models.UserPermission?> Permissions { get; set; }
#endif
        /// <summary>ユーザーアカウント状態0: 停止1: 有効2: 一時停止</summary>
        public int? State { get; set; }
        /// <summary>タグリスト</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Traq.Models.UserTag>? Tags { get; set; }
#nullable restore
#else
        public List<global::Traq.Models.UserTag> Tags { get; set; }
#endif
        /// <summary>Twitter ID</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TwitterId { get; set; }
#nullable restore
#else
        public string TwitterId { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Traq.Models.OIDCTraqUserInfo"/> and sets the default values.
        /// </summary>
        public OIDCTraqUserInfo()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Traq.Models.OIDCTraqUserInfo"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Traq.Models.OIDCTraqUserInfo CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Traq.Models.OIDCTraqUserInfo();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "bio", n => { Bio = n.GetStringValue(); } },
                { "bot", n => { Bot = n.GetBoolValue(); } },
                { "display_name", n => { DisplayName = n.GetStringValue(); } },
                { "groups", n => { Groups = n.GetCollectionOfPrimitiveValues<Guid?>()?.AsList(); } },
                { "home_channel", n => { HomeChannel = n.GetGuidValue(); } },
                { "icon_file_id", n => { IconFileId = n.GetGuidValue(); } },
                { "last_online", n => { LastOnline = n.GetDateTimeOffsetValue(); } },
                { "permissions", n => { Permissions = n.GetCollectionOfEnumValues<global::Traq.Models.UserPermission>()?.AsList(); } },
                { "state", n => { State = n.GetIntValue(); } },
                { "tags", n => { Tags = n.GetCollectionOfObjectValues<global::Traq.Models.UserTag>(global::Traq.Models.UserTag.CreateFromDiscriminatorValue)?.AsList(); } },
                { "twitter_id", n => { TwitterId = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("bio", Bio);
            writer.WriteBoolValue("bot", Bot);
            writer.WriteStringValue("display_name", DisplayName);
            writer.WriteCollectionOfPrimitiveValues<Guid?>("groups", Groups);
            writer.WriteGuidValue("home_channel", HomeChannel);
            writer.WriteGuidValue("icon_file_id", IconFileId);
            writer.WriteDateTimeOffsetValue("last_online", LastOnline);
            writer.WriteCollectionOfEnumValues<global::Traq.Models.UserPermission>("permissions", Permissions);
            writer.WriteIntValue("state", State);
            writer.WriteCollectionOfObjectValues<global::Traq.Models.UserTag>("tags", Tags);
            writer.WriteStringValue("twitter_id", TwitterId);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
