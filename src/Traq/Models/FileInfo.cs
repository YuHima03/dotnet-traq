// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System;
using System.Collections.Generic;
using System.IO;
namespace Traq.Models
{
    /// <summary>
    /// ファイル情報
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class FileInfo : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>属しているチャンネルUUID</summary>
        public Guid? ChannelId { get; set; }
        /// <summary>アップロード日時</summary>
        public DateTimeOffset? CreatedAt { get; set; }
        /// <summary>ファイルUUID</summary>
        public Guid? Id { get; set; }
        /// <summary>アニメーション画像かどうか</summary>
        public bool? IsAnimatedImage { get; set; }
        /// <summary>MD5ハッシュ</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Md5 { get; set; }
#nullable restore
#else
        public string Md5 { get; set; }
#endif
        /// <summary>MIMEタイプ</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Mime { get; set; }
#nullable restore
#else
        public string Mime { get; set; }
#endif
        /// <summary>ファイル名</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>ファイルサイズ</summary>
        public long? Size { get; set; }
        /// <summary>サムネイル情報サムネイルが存在しない場合はnullになりますDeprecated: thumbnailsを参照してください</summary>
        [Obsolete("")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Traq.Models.FileInfo_thumbnail? Thumbnail { get; set; }
#nullable restore
#else
        public global::Traq.Models.FileInfo_thumbnail Thumbnail { get; set; }
#endif
        /// <summary>The thumbnails property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Traq.Models.ThumbnailInfo>? Thumbnails { get; set; }
#nullable restore
#else
        public List<global::Traq.Models.ThumbnailInfo> Thumbnails { get; set; }
#endif
        /// <summary>アップロード者UUID</summary>
        public Guid? UploaderId { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Traq.Models.FileInfo"/> and sets the default values.
        /// </summary>
        public FileInfo()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Traq.Models.FileInfo"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Traq.Models.FileInfo CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Traq.Models.FileInfo();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "channelId", n => { ChannelId = n.GetGuidValue(); } },
                { "createdAt", n => { CreatedAt = n.GetDateTimeOffsetValue(); } },
                { "id", n => { Id = n.GetGuidValue(); } },
                { "isAnimatedImage", n => { IsAnimatedImage = n.GetBoolValue(); } },
                { "md5", n => { Md5 = n.GetStringValue(); } },
                { "mime", n => { Mime = n.GetStringValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "size", n => { Size = n.GetLongValue(); } },
                { "thumbnail", n => { Thumbnail = n.GetObjectValue<global::Traq.Models.FileInfo_thumbnail>(global::Traq.Models.FileInfo_thumbnail.CreateFromDiscriminatorValue); } },
                { "thumbnails", n => { Thumbnails = n.GetCollectionOfObjectValues<global::Traq.Models.ThumbnailInfo>(global::Traq.Models.ThumbnailInfo.CreateFromDiscriminatorValue)?.AsList(); } },
                { "uploaderId", n => { UploaderId = n.GetGuidValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteGuidValue("channelId", ChannelId);
            writer.WriteDateTimeOffsetValue("createdAt", CreatedAt);
            writer.WriteGuidValue("id", Id);
            writer.WriteBoolValue("isAnimatedImage", IsAnimatedImage);
            writer.WriteStringValue("md5", Md5);
            writer.WriteStringValue("mime", Mime);
            writer.WriteStringValue("name", Name);
            writer.WriteLongValue("size", Size);
            writer.WriteObjectValue<global::Traq.Models.FileInfo_thumbnail>("thumbnail", Thumbnail);
            writer.WriteCollectionOfObjectValues<global::Traq.Models.ThumbnailInfo>("thumbnails", Thumbnails);
            writer.WriteGuidValue("uploaderId", UploaderId);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
