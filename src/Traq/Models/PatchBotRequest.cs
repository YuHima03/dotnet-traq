// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Traq.Models
{
    /// <summary>
    /// BOT情報変更リクエスト
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class PatchBotRequest : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>自己紹介(biography)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Bio { get; set; }
#nullable restore
#else
        public string Bio { get; set; }
#endif
        /// <summary>BOTの説明</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>移譲先の開発者UUID</summary>
        public Guid? DeveloperId { get; set; }
        /// <summary>BOTユーザー表示名</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName { get; set; }
#nullable restore
#else
        public string DisplayName { get; set; }
#endif
        /// <summary>BOTサーバーエンドポイント</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Endpoint { get; set; }
#nullable restore
#else
        public string Endpoint { get; set; }
#endif
        /// <summary>BOT動作モードHTTP: HTTP ModeWebSocket: WebSocket Mode</summary>
        public global::Traq.Models.BotMode? Mode { get; set; }
        /// <summary>特権</summary>
        public bool? Privileged { get; set; }
        /// <summary>購読するイベント</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? SubscribeEvents { get; set; }
#nullable restore
#else
        public List<string> SubscribeEvents { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Traq.Models.PatchBotRequest"/> and sets the default values.
        /// </summary>
        public PatchBotRequest()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Traq.Models.PatchBotRequest"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Traq.Models.PatchBotRequest CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Traq.Models.PatchBotRequest();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "bio", n => { Bio = n.GetStringValue(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "developerId", n => { DeveloperId = n.GetGuidValue(); } },
                { "displayName", n => { DisplayName = n.GetStringValue(); } },
                { "endpoint", n => { Endpoint = n.GetStringValue(); } },
                { "mode", n => { Mode = n.GetEnumValue<global::Traq.Models.BotMode>(); } },
                { "privileged", n => { Privileged = n.GetBoolValue(); } },
                { "subscribeEvents", n => { SubscribeEvents = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("bio", Bio);
            writer.WriteStringValue("description", Description);
            writer.WriteGuidValue("developerId", DeveloperId);
            writer.WriteStringValue("displayName", DisplayName);
            writer.WriteStringValue("endpoint", Endpoint);
            writer.WriteEnumValue<global::Traq.Models.BotMode>("mode", Mode);
            writer.WriteBoolValue("privileged", Privileged);
            writer.WriteCollectionOfPrimitiveValues<string>("subscribeEvents", SubscribeEvents);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
