// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System;
using System.Collections.Generic;
using System.IO;
namespace Traq.Models
{
    /// <summary>
    /// チャンネルイベント
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class ChannelEvent : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>イベント日時</summary>
        public DateTimeOffset? Datetime { get; set; }
        /// <summary>イベント内容</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Traq.Models.ChannelEvent.ChannelEvent_detail? Detail { get; set; }
#nullable restore
#else
        public global::Traq.Models.ChannelEvent.ChannelEvent_detail Detail { get; set; }
#endif
        /// <summary>イベントタイプ</summary>
        public global::Traq.Models.ChannelEvent_type? Type { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Traq.Models.ChannelEvent"/> and sets the default values.
        /// </summary>
        public ChannelEvent()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Traq.Models.ChannelEvent"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Traq.Models.ChannelEvent CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Traq.Models.ChannelEvent();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "datetime", n => { Datetime = n.GetDateTimeOffsetValue(); } },
                { "detail", n => { Detail = n.GetObjectValue<global::Traq.Models.ChannelEvent.ChannelEvent_detail>(global::Traq.Models.ChannelEvent.ChannelEvent_detail.CreateFromDiscriminatorValue); } },
                { "type", n => { Type = n.GetEnumValue<global::Traq.Models.ChannelEvent_type>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDateTimeOffsetValue("datetime", Datetime);
            writer.WriteObjectValue<global::Traq.Models.ChannelEvent.ChannelEvent_detail>("detail", Detail);
            writer.WriteEnumValue<global::Traq.Models.ChannelEvent_type>("type", Type);
            writer.WriteAdditionalData(AdditionalData);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Traq.Models.ChildCreatedEvent"/>, <see cref="global::Traq.Models.ForcedNotificationChangedEvent"/>, <see cref="global::Traq.Models.NameChangedEvent"/>, <see cref="global::Traq.Models.ParentChangedEvent"/>, <see cref="global::Traq.Models.PinAddedEvent"/>, <see cref="global::Traq.Models.PinRemovedEvent"/>, <see cref="global::Traq.Models.SubscribersChangedEvent"/>, <see cref="global::Traq.Models.TopicChangedEvent"/>, <see cref="global::Traq.Models.VisibilityChangedEvent"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class ChannelEvent_detail : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Traq.Models.ChildCreatedEvent"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Traq.Models.ChildCreatedEvent? ChildCreatedEvent { get; set; }
#nullable restore
#else
            public global::Traq.Models.ChildCreatedEvent ChildCreatedEvent { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Traq.Models.ForcedNotificationChangedEvent"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Traq.Models.ForcedNotificationChangedEvent? ForcedNotificationChangedEvent { get; set; }
#nullable restore
#else
            public global::Traq.Models.ForcedNotificationChangedEvent ForcedNotificationChangedEvent { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Traq.Models.NameChangedEvent"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Traq.Models.NameChangedEvent? NameChangedEvent { get; set; }
#nullable restore
#else
            public global::Traq.Models.NameChangedEvent NameChangedEvent { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Traq.Models.ParentChangedEvent"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Traq.Models.ParentChangedEvent? ParentChangedEvent { get; set; }
#nullable restore
#else
            public global::Traq.Models.ParentChangedEvent ParentChangedEvent { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Traq.Models.PinAddedEvent"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Traq.Models.PinAddedEvent? PinAddedEvent { get; set; }
#nullable restore
#else
            public global::Traq.Models.PinAddedEvent PinAddedEvent { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Traq.Models.PinRemovedEvent"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Traq.Models.PinRemovedEvent? PinRemovedEvent { get; set; }
#nullable restore
#else
            public global::Traq.Models.PinRemovedEvent PinRemovedEvent { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Traq.Models.SubscribersChangedEvent"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Traq.Models.SubscribersChangedEvent? SubscribersChangedEvent { get; set; }
#nullable restore
#else
            public global::Traq.Models.SubscribersChangedEvent SubscribersChangedEvent { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Traq.Models.TopicChangedEvent"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Traq.Models.TopicChangedEvent? TopicChangedEvent { get; set; }
#nullable restore
#else
            public global::Traq.Models.TopicChangedEvent TopicChangedEvent { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Traq.Models.VisibilityChangedEvent"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Traq.Models.VisibilityChangedEvent? VisibilityChangedEvent { get; set; }
#nullable restore
#else
            public global::Traq.Models.VisibilityChangedEvent VisibilityChangedEvent { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Traq.Models.ChannelEvent.ChannelEvent_detail"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Traq.Models.ChannelEvent.ChannelEvent_detail CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new global::Traq.Models.ChannelEvent.ChannelEvent_detail();
                if ("ChildCreatedEvent".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.ChildCreatedEvent = new global::Traq.Models.ChildCreatedEvent();
                }
                else if ("ForcedNotificationChangedEvent".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.ForcedNotificationChangedEvent = new global::Traq.Models.ForcedNotificationChangedEvent();
                }
                else if ("NameChangedEvent".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.NameChangedEvent = new global::Traq.Models.NameChangedEvent();
                }
                else if ("ParentChangedEvent".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.ParentChangedEvent = new global::Traq.Models.ParentChangedEvent();
                }
                else if ("PinAddedEvent".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.PinAddedEvent = new global::Traq.Models.PinAddedEvent();
                }
                else if ("PinRemovedEvent".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.PinRemovedEvent = new global::Traq.Models.PinRemovedEvent();
                }
                else if ("SubscribersChangedEvent".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.SubscribersChangedEvent = new global::Traq.Models.SubscribersChangedEvent();
                }
                else if ("TopicChangedEvent".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.TopicChangedEvent = new global::Traq.Models.TopicChangedEvent();
                }
                else if ("VisibilityChangedEvent".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.VisibilityChangedEvent = new global::Traq.Models.VisibilityChangedEvent();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if (ChildCreatedEvent != null)
                {
                    return ChildCreatedEvent.GetFieldDeserializers();
                }
                else if (ForcedNotificationChangedEvent != null)
                {
                    return ForcedNotificationChangedEvent.GetFieldDeserializers();
                }
                else if (NameChangedEvent != null)
                {
                    return NameChangedEvent.GetFieldDeserializers();
                }
                else if (ParentChangedEvent != null)
                {
                    return ParentChangedEvent.GetFieldDeserializers();
                }
                else if (PinAddedEvent != null)
                {
                    return PinAddedEvent.GetFieldDeserializers();
                }
                else if (PinRemovedEvent != null)
                {
                    return PinRemovedEvent.GetFieldDeserializers();
                }
                else if (SubscribersChangedEvent != null)
                {
                    return SubscribersChangedEvent.GetFieldDeserializers();
                }
                else if (TopicChangedEvent != null)
                {
                    return TopicChangedEvent.GetFieldDeserializers();
                }
                else if (VisibilityChangedEvent != null)
                {
                    return VisibilityChangedEvent.GetFieldDeserializers();
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if (ChildCreatedEvent != null)
                {
                    writer.WriteObjectValue<global::Traq.Models.ChildCreatedEvent>(null, ChildCreatedEvent);
                }
                else if (ForcedNotificationChangedEvent != null)
                {
                    writer.WriteObjectValue<global::Traq.Models.ForcedNotificationChangedEvent>(null, ForcedNotificationChangedEvent);
                }
                else if (NameChangedEvent != null)
                {
                    writer.WriteObjectValue<global::Traq.Models.NameChangedEvent>(null, NameChangedEvent);
                }
                else if (ParentChangedEvent != null)
                {
                    writer.WriteObjectValue<global::Traq.Models.ParentChangedEvent>(null, ParentChangedEvent);
                }
                else if (PinAddedEvent != null)
                {
                    writer.WriteObjectValue<global::Traq.Models.PinAddedEvent>(null, PinAddedEvent);
                }
                else if (PinRemovedEvent != null)
                {
                    writer.WriteObjectValue<global::Traq.Models.PinRemovedEvent>(null, PinRemovedEvent);
                }
                else if (SubscribersChangedEvent != null)
                {
                    writer.WriteObjectValue<global::Traq.Models.SubscribersChangedEvent>(null, SubscribersChangedEvent);
                }
                else if (TopicChangedEvent != null)
                {
                    writer.WriteObjectValue<global::Traq.Models.TopicChangedEvent>(null, TopicChangedEvent);
                }
                else if (VisibilityChangedEvent != null)
                {
                    writer.WriteObjectValue<global::Traq.Models.VisibilityChangedEvent>(null, VisibilityChangedEvent);
                }
            }
        }
    }
}
#pragma warning restore CS0618
