// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System;
using System.Collections.Generic;
using System.IO;
namespace Traq.Models
{
    /// <summary>
    /// メッセージ
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class Message : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>チャンネルUUID</summary>
        public Guid? ChannelId { get; set; }
        /// <summary>メッセージ本文</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Content { get; set; }
#nullable restore
#else
        public string Content { get; set; }
#endif
        /// <summary>投稿日時</summary>
        public DateTimeOffset? CreatedAt { get; set; }
        /// <summary>メッセージUUID</summary>
        public Guid? Id { get; set; }
        /// <summary>メッセージ送信の確認に使うことができる任意の識別子(投稿でのみ使用可)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Nonce { get; set; }
#nullable restore
#else
        public string Nonce { get; set; }
#endif
        /// <summary>ピン留めされているかどうか</summary>
        public bool? Pinned { get; set; }
        /// <summary>押されているスタンプの配列</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Traq.Models.MessageStamp>? Stamps { get; set; }
#nullable restore
#else
        public List<global::Traq.Models.MessageStamp> Stamps { get; set; }
#endif
        /// <summary>スレッドUUID</summary>
        public Guid? ThreadId { get; set; }
        /// <summary>編集日時</summary>
        public DateTimeOffset? UpdatedAt { get; set; }
        /// <summary>投稿者UUID</summary>
        public Guid? UserId { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Traq.Models.Message"/> and sets the default values.
        /// </summary>
        public Message()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Traq.Models.Message"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Traq.Models.Message CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Traq.Models.Message();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "channelId", n => { ChannelId = n.GetGuidValue(); } },
                { "content", n => { Content = n.GetStringValue(); } },
                { "createdAt", n => { CreatedAt = n.GetDateTimeOffsetValue(); } },
                { "id", n => { Id = n.GetGuidValue(); } },
                { "nonce", n => { Nonce = n.GetStringValue(); } },
                { "pinned", n => { Pinned = n.GetBoolValue(); } },
                { "stamps", n => { Stamps = n.GetCollectionOfObjectValues<global::Traq.Models.MessageStamp>(global::Traq.Models.MessageStamp.CreateFromDiscriminatorValue)?.AsList(); } },
                { "threadId", n => { ThreadId = n.GetGuidValue(); } },
                { "updatedAt", n => { UpdatedAt = n.GetDateTimeOffsetValue(); } },
                { "userId", n => { UserId = n.GetGuidValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteGuidValue("channelId", ChannelId);
            writer.WriteStringValue("content", Content);
            writer.WriteDateTimeOffsetValue("createdAt", CreatedAt);
            writer.WriteGuidValue("id", Id);
            writer.WriteStringValue("nonce", Nonce);
            writer.WriteBoolValue("pinned", Pinned);
            writer.WriteCollectionOfObjectValues<global::Traq.Models.MessageStamp>("stamps", Stamps);
            writer.WriteGuidValue("threadId", ThreadId);
            writer.WriteDateTimeOffsetValue("updatedAt", UpdatedAt);
            writer.WriteGuidValue("userId", UserId);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
