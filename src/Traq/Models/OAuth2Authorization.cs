// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System;
using System.Collections.Generic;
using System.IO;
namespace Traq.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
#pragma warning disable CS1591
    public partial class OAuth2Authorization : IAdditionalDataHolder, IParsable
#pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The client_id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClientId { get; set; }
#nullable restore
#else
        public string ClientId { get; set; }
#endif
        /// <summary>The code_challenge property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CodeChallenge { get; set; }
#nullable restore
#else
        public string CodeChallenge { get; set; }
#endif
        /// <summary>The code_challenge_method property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CodeChallengeMethod { get; set; }
#nullable restore
#else
        public string CodeChallengeMethod { get; set; }
#endif
        /// <summary>The nonce property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Nonce { get; set; }
#nullable restore
#else
        public string Nonce { get; set; }
#endif
        /// <summary>The prompt property</summary>
        public global::Traq.Models.OAuth2Prompt? Prompt { get; set; }
        /// <summary>The redirect_uri property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RedirectUri { get; set; }
#nullable restore
#else
        public string RedirectUri { get; set; }
#endif
        /// <summary>The response_type property</summary>
        public global::Traq.Models.OAuth2ResponseType? ResponseType { get; set; }
        /// <summary>The scope property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Scope { get; set; }
#nullable restore
#else
        public string Scope { get; set; }
#endif
        /// <summary>The state property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? State { get; set; }
#nullable restore
#else
        public string State { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Traq.Models.OAuth2Authorization"/> and sets the default values.
        /// </summary>
        public OAuth2Authorization()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Traq.Models.OAuth2Authorization"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Traq.Models.OAuth2Authorization CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Traq.Models.OAuth2Authorization();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "client_id", n => { ClientId = n.GetStringValue(); } },
                { "code_challenge", n => { CodeChallenge = n.GetStringValue(); } },
                { "code_challenge_method", n => { CodeChallengeMethod = n.GetStringValue(); } },
                { "nonce", n => { Nonce = n.GetStringValue(); } },
                { "prompt", n => { Prompt = n.GetEnumValue<global::Traq.Models.OAuth2Prompt>(); } },
                { "redirect_uri", n => { RedirectUri = n.GetStringValue(); } },
                { "response_type", n => { ResponseType = n.GetEnumValue<global::Traq.Models.OAuth2ResponseType>(); } },
                { "scope", n => { Scope = n.GetStringValue(); } },
                { "state", n => { State = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("client_id", ClientId);
            writer.WriteStringValue("code_challenge", CodeChallenge);
            writer.WriteStringValue("code_challenge_method", CodeChallengeMethod);
            writer.WriteStringValue("nonce", Nonce);
            writer.WriteEnumValue<global::Traq.Models.OAuth2Prompt>("prompt", Prompt);
            writer.WriteStringValue("redirect_uri", RedirectUri);
            writer.WriteEnumValue<global::Traq.Models.OAuth2ResponseType>("response_type", ResponseType);
            writer.WriteStringValue("scope", Scope);
            writer.WriteStringValue("state", State);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
