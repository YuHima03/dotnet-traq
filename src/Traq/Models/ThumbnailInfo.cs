// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System;
using System.Collections.Generic;
using System.IO;
namespace Traq.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
#pragma warning disable CS1591
    public partial class ThumbnailInfo : IAdditionalDataHolder, IParsable
#pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>サムネイル高さ</summary>
        public int? Height { get; set; }
        /// <summary>MIMEタイプ</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Mime { get; set; }
#nullable restore
#else
        public string Mime { get; set; }
#endif
        /// <summary>サムネイル画像のタイプ</summary>
        public global::Traq.Models.ThumbnailType? Type { get; set; }
        /// <summary>サムネイル幅</summary>
        public int? Width { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Traq.Models.ThumbnailInfo"/> and sets the default values.
        /// </summary>
        public ThumbnailInfo()
        {
            AdditionalData = new Dictionary<string, object>();
            Type = global::Traq.Models.ThumbnailType.Image;
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Traq.Models.ThumbnailInfo"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Traq.Models.ThumbnailInfo CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Traq.Models.ThumbnailInfo();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "height", n => { Height = n.GetIntValue(); } },
                { "mime", n => { Mime = n.GetStringValue(); } },
                { "type", n => { Type = n.GetEnumValue<global::Traq.Models.ThumbnailType>(); } },
                { "width", n => { Width = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("height", Height);
            writer.WriteStringValue("mime", Mime);
            writer.WriteEnumValue<global::Traq.Models.ThumbnailType>("type", Type);
            writer.WriteIntValue("width", Width);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
