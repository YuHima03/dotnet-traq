// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System;
using System.Collections.Generic;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Traq.Messages.Item;
namespace Traq.Messages
{
    /// <summary>
    /// Builds and executes requests for operations under \messages
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class MessagesRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the Traq.messages.item collection</summary>
        /// <param name="position">メッセージUUID</param>
        /// <returns>A <see cref="global::Traq.Messages.Item.WithMessageItemRequestBuilder"/></returns>
        public global::Traq.Messages.Item.WithMessageItemRequestBuilder this[Guid position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("messageId", position);
                return new global::Traq.Messages.Item.WithMessageItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>Gets an item from the Traq.messages.item collection</summary>
        /// <param name="position">メッセージUUID</param>
        /// <returns>A <see cref="global::Traq.Messages.Item.WithMessageItemRequestBuilder"/></returns>
        [Obsolete("This indexer is deprecated and will be removed in the next major version. Use the one with the typed parameter instead.")]
        public global::Traq.Messages.Item.WithMessageItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                if (!string.IsNullOrWhiteSpace(position))
                    urlTplParams.Add("messageId", position);
                return new global::Traq.Messages.Item.WithMessageItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Traq.Messages.MessagesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public MessagesRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/messages{?after*,before*,bot*,citation*,from*,hasAttachments*,hasAudio*,hasImage*,hasURL*,hasVideo*,in*,limit*,offset*,sort*,to*,word*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Traq.Messages.MessagesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public MessagesRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/messages{?after*,before*,bot*,citation*,from*,hasAttachments*,hasAudio*,hasImage*,hasURL*,hasVideo*,in*,limit*,offset*,sort*,to*,word*}", rawUrl)
        {
        }
        /// <summary>
        /// メッセージを検索します。
        /// </summary>
        /// <returns>A <see cref="global::Traq.Messages.MessagesGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Traq.Messages.MessagesGetResponse?> GetAsMessagesGetResponseAsync(Action<RequestConfiguration<global::Traq.Messages.MessagesRequestBuilder.MessagesRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Traq.Messages.MessagesGetResponse> GetAsMessagesGetResponseAsync(Action<RequestConfiguration<global::Traq.Messages.MessagesRequestBuilder.MessagesRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::Traq.Messages.MessagesGetResponse>(requestInfo, global::Traq.Messages.MessagesGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// メッセージを検索します。
        /// </summary>
        /// <returns>A <see cref="global::Traq.Messages.MessagesResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsMessagesGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Traq.Messages.MessagesResponse?> GetAsync(Action<RequestConfiguration<global::Traq.Messages.MessagesRequestBuilder.MessagesRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Traq.Messages.MessagesResponse> GetAsync(Action<RequestConfiguration<global::Traq.Messages.MessagesRequestBuilder.MessagesRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::Traq.Messages.MessagesResponse>(requestInfo, global::Traq.Messages.MessagesResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// メッセージを検索します。
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Traq.Messages.MessagesRequestBuilder.MessagesRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Traq.Messages.MessagesRequestBuilder.MessagesRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Traq.Messages.MessagesRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Traq.Messages.MessagesRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Traq.Messages.MessagesRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// メッセージを検索します。
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class MessagesRequestBuilderGetQueryParameters
        {
            /// <summary>投稿日時が指定日時より後</summary>
            [QueryParameter("after")]
            public DateTimeOffset? After { get; set; }
            /// <summary>投稿日時が指定日時より前</summary>
            [QueryParameter("before")]
            public DateTimeOffset? Before { get; set; }
            /// <summary>メッセージを投稿したユーザーがBotかどうか</summary>
            [QueryParameter("bot")]
            public bool? Bot { get; set; }
            /// <summary>引用しているメッセージ</summary>
            [QueryParameter("citation")]
            public Guid? Citation { get; set; }
            /// <summary>メッセージを投稿したユーザー</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("from")]
            public Guid?[]? From { get; set; }
#nullable restore
#else
            [QueryParameter("from")]
            public Guid?[] From { get; set; }
#endif
            /// <summary>メッセージが添付ファイルを含むか</summary>
            [QueryParameter("hasAttachments")]
            public bool? HasAttachments { get; set; }
            /// <summary>メッセージが音声ファイルを含むか</summary>
            [QueryParameter("hasAudio")]
            public bool? HasAudio { get; set; }
            /// <summary>メッセージが画像を含むか</summary>
            [QueryParameter("hasImage")]
            public bool? HasImage { get; set; }
            /// <summary>メッセージがURLを含むか</summary>
            [QueryParameter("hasURL")]
            public bool? HasURL { get; set; }
            /// <summary>メッセージが動画を含むか</summary>
            [QueryParameter("hasVideo")]
            public bool? HasVideo { get; set; }
            /// <summary>メッセージが投稿されたチャンネル</summary>
            [QueryParameter("in")]
            public Guid? In { get; set; }
            /// <summary>検索結果から取得するメッセージの最大件数</summary>
            [QueryParameter("limit")]
            public int? Limit { get; set; }
            /// <summary>検索結果から取得するメッセージのオフセット</summary>
            [QueryParameter("offset")]
            public int? Offset { get; set; }
            /// <summary>ソート順 (作成日時が新しい `createdAt`, 作成日時が古い `-createdAt`, 更新日時が新しい `updatedAt`, 更新日時が古い `-updatedAt`)</summary>
            [Obsolete("This property is deprecated, use SortAsGetSortQueryParameterType instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("sort")]
            public string? Sort { get; set; }
#nullable restore
#else
            [QueryParameter("sort")]
            public string Sort { get; set; }
#endif
            /// <summary>ソート順 (作成日時が新しい `createdAt`, 作成日時が古い `-createdAt`, 更新日時が新しい `updatedAt`, 更新日時が古い `-updatedAt`)</summary>
            [QueryParameter("sort")]
            public global::Traq.Messages.GetSortQueryParameterType? SortAsGetSortQueryParameterType { get; set; }
            /// <summary>メンションされたユーザー</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("to")]
            public Guid?[]? To { get; set; }
#nullable restore
#else
            [QueryParameter("to")]
            public Guid?[] To { get; set; }
#endif
            /// <summary>検索ワードSimple-Query-String-Syntaxをパースして検索します</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("word")]
            public string? Word { get; set; }
#nullable restore
#else
            [QueryParameter("word")]
            public string Word { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class MessagesRequestBuilderGetRequestConfiguration : RequestConfiguration<global::Traq.Messages.MessagesRequestBuilder.MessagesRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
