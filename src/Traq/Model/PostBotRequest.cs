// <auto-generated>
/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Traq.Client;

namespace Traq.Model
{
    /// <summary>
    /// BOT作成リクエスト
    /// </summary>
    public partial class PostBotRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PostBotRequest" /> class.
        /// </summary>
        /// <param name="name">BOTユーザーID 自動的に接頭辞\&quot;BOT_\&quot;が付与されます</param>
        /// <param name="displayName">BOTユーザー表示名</param>
        /// <param name="description">BOTの説明</param>
        /// <param name="mode">mode</param>
        /// <param name="endpoint">BOTサーバーエンドポイント BOT動作モードがHTTPの場合必須です</param>
        [JsonConstructor]
        public PostBotRequest(string name, string displayName, string description, BotMode mode, Option<string?> endpoint = default)
        {
            Name = name;
            DisplayName = displayName;
            Description = description;
            Mode = mode;
            EndpointOption = endpoint;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Mode
        /// </summary>
        [JsonPropertyName("mode")]
        public BotMode Mode { get; set; }

        /// <summary>
        /// BOTユーザーID 自動的に接頭辞\&quot;BOT_\&quot;が付与されます
        /// </summary>
        /// <value>BOTユーザーID 自動的に接頭辞\&quot;BOT_\&quot;が付与されます</value>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// BOTユーザー表示名
        /// </summary>
        /// <value>BOTユーザー表示名</value>
        [JsonPropertyName("displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// BOTの説明
        /// </summary>
        /// <value>BOTの説明</value>
        [JsonPropertyName("description")]
        public string Description { get; set; }

        /// <summary>
        /// Used to track the state of Endpoint
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EndpointOption { get; private set; }

        /// <summary>
        /// BOTサーバーエンドポイント BOT動作モードがHTTPの場合必須です
        /// </summary>
        /// <value>BOTサーバーエンドポイント BOT動作モードがHTTPの場合必須です</value>
        [JsonPropertyName("endpoint")]
        public string? Endpoint { get { return this.EndpointOption; } set { this.EndpointOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PostBotRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  Endpoint: ").Append(Endpoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 16)
            {
                yield return new ValidationResult("Invalid value for Name, length must be less than 16.", new [] { "Name" });
            }

            if (this.Name != null) {
                // Name (string) pattern
                Regex regexName = new Regex(@"^[a-zA-Z0-9_-]{1,16}$", RegexOptions.CultureInvariant);

                if (!regexName.Match(this.Name).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, must match a pattern of " + regexName, new [] { "Name" });
                }
            }

            // DisplayName (string) maxLength
            if (this.DisplayName != null && this.DisplayName.Length > 32)
            {
                yield return new ValidationResult("Invalid value for DisplayName, length must be less than 32.", new [] { "DisplayName" });
            }

            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 1000)
            {
                yield return new ValidationResult("Invalid value for Description, length must be less than 1000.", new [] { "Description" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PostBotRequest" />
    /// </summary>
    public class PostBotRequestJsonConverter : JsonConverter<PostBotRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="PostBotRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PostBotRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> name = default;
            Option<string?> displayName = default;
            Option<string?> description = default;
            Option<BotMode?> mode = default;
            Option<string?> endpoint = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "displayName":
                            displayName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "mode":
                            string? modeRawValue = utf8JsonReader.GetString();
                            if (modeRawValue != null)
                                mode = new Option<BotMode?>(BotModeValueConverter.FromStringOrDefault(modeRawValue));
                            break;
                        case "endpoint":
                            endpoint = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class PostBotRequest.", nameof(name));

            if (!displayName.IsSet)
                throw new ArgumentException("Property is required for class PostBotRequest.", nameof(displayName));

            if (!description.IsSet)
                throw new ArgumentException("Property is required for class PostBotRequest.", nameof(description));

            if (!mode.IsSet)
                throw new ArgumentException("Property is required for class PostBotRequest.", nameof(mode));

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class PostBotRequest.");

            if (displayName.IsSet && displayName.Value == null)
                throw new ArgumentNullException(nameof(displayName), "Property is not nullable for class PostBotRequest.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class PostBotRequest.");

            if (mode.IsSet && mode.Value == null)
                throw new ArgumentNullException(nameof(mode), "Property is not nullable for class PostBotRequest.");

            if (endpoint.IsSet && endpoint.Value == null)
                throw new ArgumentNullException(nameof(endpoint), "Property is not nullable for class PostBotRequest.");

            return new PostBotRequest(name.Value!, displayName.Value!, description.Value!, mode.Value!.Value!, endpoint);
        }

        /// <summary>
        /// Serializes a <see cref="PostBotRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="postBotRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PostBotRequest postBotRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, postBotRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PostBotRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="postBotRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PostBotRequest postBotRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (postBotRequest.Name == null)
                throw new ArgumentNullException(nameof(postBotRequest.Name), "Property is required for class PostBotRequest.");

            if (postBotRequest.DisplayName == null)
                throw new ArgumentNullException(nameof(postBotRequest.DisplayName), "Property is required for class PostBotRequest.");

            if (postBotRequest.Description == null)
                throw new ArgumentNullException(nameof(postBotRequest.Description), "Property is required for class PostBotRequest.");

            if (postBotRequest.EndpointOption.IsSet && postBotRequest.Endpoint == null)
                throw new ArgumentNullException(nameof(postBotRequest.Endpoint), "Property is required for class PostBotRequest.");

            writer.WriteString("name", postBotRequest.Name);

            writer.WriteString("displayName", postBotRequest.DisplayName);

            writer.WriteString("description", postBotRequest.Description);

            var modeRawValue = BotModeValueConverter.ToJsonValue(postBotRequest.Mode);
            writer.WriteString("mode", modeRawValue);

            if (postBotRequest.EndpointOption.IsSet)
                writer.WriteString("endpoint", postBotRequest.Endpoint);
        }
    }

    /// <summary>
    /// The PostBotRequestSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(PostBotRequest))]
    public partial class PostBotRequestSerializationContext : JsonSerializerContext { }
}
