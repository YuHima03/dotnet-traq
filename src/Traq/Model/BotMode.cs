// <auto-generated>
/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Traq.Client;

namespace Traq.Model
{
    /// <summary>
    /// BOT動作モード  HTTP: HTTP Mode WebSocket: WebSocket Mode
    /// </summary>
    /// <value>BOT動作モード  HTTP: HTTP Mode WebSocket: WebSocket Mode</value>
    public enum BotMode
    {
        /// <summary>
        /// Enum HTTP for value: HTTP
        /// </summary>
        HTTP = 1,

        /// <summary>
        /// Enum WebSocket for value: WebSocket
        /// </summary>
        WebSocket = 2
    }

    /// <summary>
    /// Converts <see cref="BotMode"/> to and from the JSON value
    /// </summary>
    public static class BotModeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="BotMode"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static BotMode FromString(string value)
        {
            if (value.Equals("HTTP"))
                return BotMode.HTTP;

            if (value.Equals("WebSocket"))
                return BotMode.WebSocket;

            throw new NotImplementedException($"Could not convert value to type BotMode: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="BotMode"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static BotMode? FromStringOrDefault(string value)
        {
            if (value.Equals("HTTP"))
                return BotMode.HTTP;

            if (value.Equals("WebSocket"))
                return BotMode.WebSocket;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="BotMode"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(BotMode value)
        {
            if (value == BotMode.HTTP)
                return "HTTP";

            if (value == BotMode.WebSocket)
                return "WebSocket";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="BotMode"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class BotModeJsonConverter : JsonConverter<BotMode>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override BotMode Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            BotMode? result = rawValue == null
                ? null
                : BotModeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the BotMode to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="botMode"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, BotMode botMode, JsonSerializerOptions options)
        {
            writer.WriteStringValue(botMode.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="BotMode"/>
    /// </summary>
    public class BotModeNullableJsonConverter : JsonConverter<BotMode?>
    {
        /// <summary>
        /// Returns a BotMode from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override BotMode? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            BotMode? result = rawValue == null
                ? null
                : BotModeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="botMode"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, BotMode? botMode, JsonSerializerOptions options)
        {
            writer.WriteStringValue(botMode?.ToString() ?? "null");
        }
    }


    /// <summary>
    /// The BotModeSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(BotMode))]
    public partial class BotModeSerializationContext : JsonSerializerContext { }
}
