// <auto-generated>
/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Traq.Client;

namespace Traq.Model
{
    /// <summary>
    /// スタンプ情報とサムネイルの有無
    /// </summary>
    public partial class StampWithThumbnail : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StampWithThumbnail" /> class.
        /// </summary>
        /// <param name="id">スタンプUUID</param>
        /// <param name="name">スタンプ名</param>
        /// <param name="creatorId">作成者UUID</param>
        /// <param name="createdAt">作成日時</param>
        /// <param name="updatedAt">更新日時</param>
        /// <param name="fileId">ファイルUUID</param>
        /// <param name="isUnicode">Unicode絵文字か</param>
        /// <param name="hasThumbnail">サムネイルの有無</param>
        [JsonConstructor]
        public StampWithThumbnail(Guid id, string name, Guid creatorId, DateTimeOffset createdAt, DateTimeOffset updatedAt, Guid fileId, bool isUnicode, bool hasThumbnail)
        {
            Id = id;
            Name = name;
            CreatorId = creatorId;
            CreatedAt = createdAt;
            UpdatedAt = updatedAt;
            FileId = fileId;
            IsUnicode = isUnicode;
            HasThumbnail = hasThumbnail;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// スタンプUUID
        /// </summary>
        /// <value>スタンプUUID</value>
        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        /// <summary>
        /// スタンプ名
        /// </summary>
        /// <value>スタンプ名</value>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// 作成者UUID
        /// </summary>
        /// <value>作成者UUID</value>
        [JsonPropertyName("creatorId")]
        public Guid CreatorId { get; set; }

        /// <summary>
        /// 作成日時
        /// </summary>
        /// <value>作成日時</value>
        [JsonPropertyName("createdAt")]
        public DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// 更新日時
        /// </summary>
        /// <value>更新日時</value>
        [JsonPropertyName("updatedAt")]
        public DateTimeOffset UpdatedAt { get; set; }

        /// <summary>
        /// ファイルUUID
        /// </summary>
        /// <value>ファイルUUID</value>
        [JsonPropertyName("fileId")]
        public Guid FileId { get; set; }

        /// <summary>
        /// Unicode絵文字か
        /// </summary>
        /// <value>Unicode絵文字か</value>
        [JsonPropertyName("isUnicode")]
        public bool IsUnicode { get; set; }

        /// <summary>
        /// サムネイルの有無
        /// </summary>
        /// <value>サムネイルの有無</value>
        [JsonPropertyName("hasThumbnail")]
        public bool HasThumbnail { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StampWithThumbnail {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CreatorId: ").Append(CreatorId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  FileId: ").Append(FileId).Append("\n");
            sb.Append("  IsUnicode: ").Append(IsUnicode).Append("\n");
            sb.Append("  HasThumbnail: ").Append(HasThumbnail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.Name != null) {
                // Name (string) pattern
                Regex regexName = new Regex(@"^[a-zA-Z0-9_-]{1,32}$", RegexOptions.CultureInvariant);

                if (!regexName.Match(this.Name).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, must match a pattern of " + regexName, new [] { "Name" });
                }
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="StampWithThumbnail" />
    /// </summary>
    public class StampWithThumbnailJsonConverter : JsonConverter<StampWithThumbnail>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdatedAt
        /// </summary>
        public static string UpdatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="StampWithThumbnail" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override StampWithThumbnail Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid?> id = default;
            Option<string?> name = default;
            Option<Guid?> creatorId = default;
            Option<DateTimeOffset?> createdAt = default;
            Option<DateTimeOffset?> updatedAt = default;
            Option<Guid?> fileId = default;
            Option<bool?> isUnicode = default;
            Option<bool?> hasThumbnail = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "creatorId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                creatorId = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        case "createdAt":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createdAt = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "updatedAt":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                updatedAt = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "fileId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                fileId = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        case "isUnicode":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isUnicode = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "hasThumbnail":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                hasThumbnail = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class StampWithThumbnail.", nameof(id));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class StampWithThumbnail.", nameof(name));

            if (!creatorId.IsSet)
                throw new ArgumentException("Property is required for class StampWithThumbnail.", nameof(creatorId));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class StampWithThumbnail.", nameof(createdAt));

            if (!updatedAt.IsSet)
                throw new ArgumentException("Property is required for class StampWithThumbnail.", nameof(updatedAt));

            if (!fileId.IsSet)
                throw new ArgumentException("Property is required for class StampWithThumbnail.", nameof(fileId));

            if (!isUnicode.IsSet)
                throw new ArgumentException("Property is required for class StampWithThumbnail.", nameof(isUnicode));

            if (!hasThumbnail.IsSet)
                throw new ArgumentException("Property is required for class StampWithThumbnail.", nameof(hasThumbnail));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class StampWithThumbnail.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class StampWithThumbnail.");

            if (creatorId.IsSet && creatorId.Value == null)
                throw new ArgumentNullException(nameof(creatorId), "Property is not nullable for class StampWithThumbnail.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class StampWithThumbnail.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class StampWithThumbnail.");

            if (fileId.IsSet && fileId.Value == null)
                throw new ArgumentNullException(nameof(fileId), "Property is not nullable for class StampWithThumbnail.");

            if (isUnicode.IsSet && isUnicode.Value == null)
                throw new ArgumentNullException(nameof(isUnicode), "Property is not nullable for class StampWithThumbnail.");

            if (hasThumbnail.IsSet && hasThumbnail.Value == null)
                throw new ArgumentNullException(nameof(hasThumbnail), "Property is not nullable for class StampWithThumbnail.");

            return new StampWithThumbnail(id.Value!.Value!, name.Value!, creatorId.Value!.Value!, createdAt.Value!.Value!, updatedAt.Value!.Value!, fileId.Value!.Value!, isUnicode.Value!.Value!, hasThumbnail.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="StampWithThumbnail" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="stampWithThumbnail"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, StampWithThumbnail stampWithThumbnail, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, stampWithThumbnail, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="StampWithThumbnail" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="stampWithThumbnail"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, StampWithThumbnail stampWithThumbnail, JsonSerializerOptions jsonSerializerOptions)
        {
            if (stampWithThumbnail.Name == null)
                throw new ArgumentNullException(nameof(stampWithThumbnail.Name), "Property is required for class StampWithThumbnail.");

            writer.WriteString("id", stampWithThumbnail.Id);

            writer.WriteString("name", stampWithThumbnail.Name);

            writer.WriteString("creatorId", stampWithThumbnail.CreatorId);

            writer.WriteString("createdAt", stampWithThumbnail.CreatedAt.ToString(CreatedAtFormat));

            writer.WriteString("updatedAt", stampWithThumbnail.UpdatedAt.ToString(UpdatedAtFormat));

            writer.WriteString("fileId", stampWithThumbnail.FileId);

            writer.WriteBoolean("isUnicode", stampWithThumbnail.IsUnicode);

            writer.WriteBoolean("hasThumbnail", stampWithThumbnail.HasThumbnail);
        }
    }

    /// <summary>
    /// The StampWithThumbnailSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(StampWithThumbnail))]
    public partial class StampWithThumbnailSerializationContext : JsonSerializerContext { }
}
