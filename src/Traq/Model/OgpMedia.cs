// <auto-generated>
/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Traq.Client;

namespace Traq.Model
{
    /// <summary>
    /// OGPに含まれる画像の情報
    /// </summary>
    public partial class OgpMedia : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OgpMedia" /> class.
        /// </summary>
        /// <param name="url">url</param>
        /// <param name="secureUrl">secureUrl</param>
        /// <param name="type">type</param>
        /// <param name="width">width</param>
        /// <param name="height">height</param>
        [JsonConstructor]
        public OgpMedia(string url, string? secureUrl = default, string? type = default, int? width = default, int? height = default)
        {
            Url = url;
            SecureUrl = secureUrl;
            Type = type;
            Width = width;
            Height = height;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [JsonPropertyName("url")]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets SecureUrl
        /// </summary>
        [JsonPropertyName("secureUrl")]
        public string? SecureUrl { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public string? Type { get; set; }

        /// <summary>
        /// Gets or Sets Width
        /// </summary>
        [JsonPropertyName("width")]
        public int? Width { get; set; }

        /// <summary>
        /// Gets or Sets Height
        /// </summary>
        [JsonPropertyName("height")]
        public int? Height { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OgpMedia {\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  SecureUrl: ").Append(SecureUrl).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="OgpMedia" />
    /// </summary>
    public class OgpMediaJsonConverter : JsonConverter<OgpMedia>
    {
        /// <summary>
        /// Deserializes json to <see cref="OgpMedia" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override OgpMedia Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> url = default;
            Option<string?> secureUrl = default;
            Option<string?> type = default;
            Option<int?> width = default;
            Option<int?> height = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "url":
                            url = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "secureUrl":
                            secureUrl = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "type":
                            type = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "width":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                width = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "height":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                height = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!url.IsSet)
                throw new ArgumentException("Property is required for class OgpMedia.", nameof(url));

            if (!secureUrl.IsSet)
                throw new ArgumentException("Property is required for class OgpMedia.", nameof(secureUrl));

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class OgpMedia.", nameof(type));

            if (!width.IsSet)
                throw new ArgumentException("Property is required for class OgpMedia.", nameof(width));

            if (!height.IsSet)
                throw new ArgumentException("Property is required for class OgpMedia.", nameof(height));

            if (url.IsSet && url.Value == null)
                throw new ArgumentNullException(nameof(url), "Property is not nullable for class OgpMedia.");

            return new OgpMedia(url.Value!, secureUrl.Value!, type.Value!, width.Value!, height.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="OgpMedia" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="ogpMedia"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, OgpMedia ogpMedia, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, ogpMedia, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="OgpMedia" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="ogpMedia"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, OgpMedia ogpMedia, JsonSerializerOptions jsonSerializerOptions)
        {
            if (ogpMedia.Url == null)
                throw new ArgumentNullException(nameof(ogpMedia.Url), "Property is required for class OgpMedia.");

            writer.WriteString("url", ogpMedia.Url);

            if (ogpMedia.SecureUrl != null)
                writer.WriteString("secureUrl", ogpMedia.SecureUrl);
            else
                writer.WriteNull("secureUrl");

            if (ogpMedia.Type != null)
                writer.WriteString("type", ogpMedia.Type);
            else
                writer.WriteNull("type");

            if (ogpMedia.Width != null)
                writer.WriteNumber("width", ogpMedia.Width.Value);
            else
                writer.WriteNull("width");

            if (ogpMedia.Height != null)
                writer.WriteNumber("height", ogpMedia.Height.Value);
            else
                writer.WriteNull("height");
        }
    }

    /// <summary>
    /// The OgpMediaSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(OgpMedia))]
    public partial class OgpMediaSerializationContext : JsonSerializerContext { }
}
