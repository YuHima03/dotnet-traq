// <auto-generated>
/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Traq.Client;

namespace Traq.Model
{
    /// <summary>
    /// 自分のユーザー詳細情報
    /// </summary>
    public partial class OIDCUserInfo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OIDCUserInfo" /> class.
        /// </summary>
        /// <param name="sub">ユーザーUUID</param>
        /// <param name="name">ユーザー名</param>
        /// <param name="preferredUsername">ユーザー名</param>
        /// <param name="picture">アイコン画像URL</param>
        /// <param name="updatedAt">更新日時</param>
        /// <param name="traq">traq</param>
        [JsonConstructor]
        public OIDCUserInfo(Guid sub, string name, string preferredUsername, string picture, Option<long?> updatedAt = default, Option<OIDCTraqUserInfo?> traq = default)
        {
            Sub = sub;
            Name = name;
            PreferredUsername = preferredUsername;
            Picture = picture;
            UpdatedAtOption = updatedAt;
            TraqOption = traq;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// ユーザーUUID
        /// </summary>
        /// <value>ユーザーUUID</value>
        [JsonPropertyName("sub")]
        public Guid Sub { get; set; }

        /// <summary>
        /// ユーザー名
        /// </summary>
        /// <value>ユーザー名</value>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// ユーザー名
        /// </summary>
        /// <value>ユーザー名</value>
        [JsonPropertyName("preferred_username")]
        public string PreferredUsername { get; set; }

        /// <summary>
        /// アイコン画像URL
        /// </summary>
        /// <value>アイコン画像URL</value>
        [JsonPropertyName("picture")]
        public string Picture { get; set; }

        /// <summary>
        /// Used to track the state of UpdatedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> UpdatedAtOption { get; private set; }

        /// <summary>
        /// 更新日時
        /// </summary>
        /// <value>更新日時</value>
        [JsonPropertyName("updated_at")]
        public long? UpdatedAt { get { return this.UpdatedAtOption; } set { this.UpdatedAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of Traq
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<OIDCTraqUserInfo?> TraqOption { get; private set; }

        /// <summary>
        /// Gets or Sets Traq
        /// </summary>
        [JsonPropertyName("traq")]
        public OIDCTraqUserInfo? Traq { get { return this.TraqOption; } set { this.TraqOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OIDCUserInfo {\n");
            sb.Append("  Sub: ").Append(Sub).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PreferredUsername: ").Append(PreferredUsername).Append("\n");
            sb.Append("  Picture: ").Append(Picture).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Traq: ").Append(Traq).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.Name != null) {
                // Name (string) pattern
                Regex regexName = new Regex(@"^[a-zA-Z0-9_-]{1,32}$", RegexOptions.CultureInvariant);

                if (!regexName.Match(this.Name).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, must match a pattern of " + regexName, new [] { "Name" });
                }
            }

            if (this.PreferredUsername != null) {
                // PreferredUsername (string) pattern
                Regex regexPreferredUsername = new Regex(@"^[a-zA-Z0-9_-]{1,32}$", RegexOptions.CultureInvariant);

                if (!regexPreferredUsername.Match(this.PreferredUsername).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PreferredUsername, must match a pattern of " + regexPreferredUsername, new [] { "PreferredUsername" });
                }
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="OIDCUserInfo" />
    /// </summary>
    public class OIDCUserInfoJsonConverter : JsonConverter<OIDCUserInfo>
    {
        /// <summary>
        /// Deserializes json to <see cref="OIDCUserInfo" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override OIDCUserInfo Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid?> sub = default;
            Option<string?> name = default;
            Option<string?> preferredUsername = default;
            Option<string?> picture = default;
            Option<long?> updatedAt = default;
            Option<OIDCTraqUserInfo?> traq = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "sub":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                sub = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "preferred_username":
                            preferredUsername = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "picture":
                            picture = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "updated_at":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                updatedAt = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "traq":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                traq = new Option<OIDCTraqUserInfo?>(JsonSerializer.Deserialize<OIDCTraqUserInfo>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!sub.IsSet)
                throw new ArgumentException("Property is required for class OIDCUserInfo.", nameof(sub));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class OIDCUserInfo.", nameof(name));

            if (!preferredUsername.IsSet)
                throw new ArgumentException("Property is required for class OIDCUserInfo.", nameof(preferredUsername));

            if (!picture.IsSet)
                throw new ArgumentException("Property is required for class OIDCUserInfo.", nameof(picture));

            if (sub.IsSet && sub.Value == null)
                throw new ArgumentNullException(nameof(sub), "Property is not nullable for class OIDCUserInfo.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class OIDCUserInfo.");

            if (preferredUsername.IsSet && preferredUsername.Value == null)
                throw new ArgumentNullException(nameof(preferredUsername), "Property is not nullable for class OIDCUserInfo.");

            if (picture.IsSet && picture.Value == null)
                throw new ArgumentNullException(nameof(picture), "Property is not nullable for class OIDCUserInfo.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class OIDCUserInfo.");

            if (traq.IsSet && traq.Value == null)
                throw new ArgumentNullException(nameof(traq), "Property is not nullable for class OIDCUserInfo.");

            return new OIDCUserInfo(sub.Value!.Value!, name.Value!, preferredUsername.Value!, picture.Value!, updatedAt, traq);
        }

        /// <summary>
        /// Serializes a <see cref="OIDCUserInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="oIDCUserInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, OIDCUserInfo oIDCUserInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, oIDCUserInfo, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="OIDCUserInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="oIDCUserInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, OIDCUserInfo oIDCUserInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            if (oIDCUserInfo.Name == null)
                throw new ArgumentNullException(nameof(oIDCUserInfo.Name), "Property is required for class OIDCUserInfo.");

            if (oIDCUserInfo.PreferredUsername == null)
                throw new ArgumentNullException(nameof(oIDCUserInfo.PreferredUsername), "Property is required for class OIDCUserInfo.");

            if (oIDCUserInfo.Picture == null)
                throw new ArgumentNullException(nameof(oIDCUserInfo.Picture), "Property is required for class OIDCUserInfo.");

            if (oIDCUserInfo.TraqOption.IsSet && oIDCUserInfo.Traq == null)
                throw new ArgumentNullException(nameof(oIDCUserInfo.Traq), "Property is required for class OIDCUserInfo.");

            writer.WriteString("sub", oIDCUserInfo.Sub);

            writer.WriteString("name", oIDCUserInfo.Name);

            writer.WriteString("preferred_username", oIDCUserInfo.PreferredUsername);

            writer.WriteString("picture", oIDCUserInfo.Picture);

            if (oIDCUserInfo.UpdatedAtOption.IsSet)
                writer.WriteNumber("updated_at", oIDCUserInfo.UpdatedAtOption.Value!.Value);

            if (oIDCUserInfo.TraqOption.IsSet)
            {
                writer.WritePropertyName("traq");
                JsonSerializer.Serialize(writer, oIDCUserInfo.Traq, jsonSerializerOptions);
            }
        }
    }

    /// <summary>
    /// The OIDCUserInfoSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(OIDCUserInfo))]
    public partial class OIDCUserInfoSerializationContext : JsonSerializerContext { }
}
