// <auto-generated>
/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Traq.Client;

namespace Traq.Model
{
    /// <summary>
    /// OAuth2クライアント作成リクエスト
    /// </summary>
    public partial class PostClientRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PostClientRequest" /> class.
        /// </summary>
        /// <param name="name">クライアント名</param>
        /// <param name="callbackUrl">コールバックURL</param>
        /// <param name="scopes">要求スコープの配列</param>
        /// <param name="description">説明</param>
        /// <param name="confidential">confidential client なら true, public cleint なら false (default to false)</param>
        [JsonConstructor]
        public PostClientRequest(string name, string callbackUrl, List<OAuth2Scope> scopes, string description, Option<bool?> confidential = default)
        {
            Name = name;
            CallbackUrl = callbackUrl;
            Scopes = scopes;
            Description = description;
            ConfidentialOption = confidential;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// クライアント名
        /// </summary>
        /// <value>クライアント名</value>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// コールバックURL
        /// </summary>
        /// <value>コールバックURL</value>
        [JsonPropertyName("callbackUrl")]
        public string CallbackUrl { get; set; }

        /// <summary>
        /// 要求スコープの配列
        /// </summary>
        /// <value>要求スコープの配列</value>
        [JsonPropertyName("scopes")]
        public List<OAuth2Scope> Scopes { get; set; }

        /// <summary>
        /// 説明
        /// </summary>
        /// <value>説明</value>
        [JsonPropertyName("description")]
        public string Description { get; set; }

        /// <summary>
        /// Used to track the state of Confidential
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ConfidentialOption { get; private set; }

        /// <summary>
        /// confidential client なら true, public cleint なら false
        /// </summary>
        /// <value>confidential client なら true, public cleint なら false</value>
        [JsonPropertyName("confidential")]
        public bool? Confidential { get { return this.ConfidentialOption; } set { this.ConfidentialOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PostClientRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CallbackUrl: ").Append(CallbackUrl).Append("\n");
            sb.Append("  Scopes: ").Append(Scopes).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Confidential: ").Append(Confidential).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 32)
            {
                yield return new ValidationResult("Invalid value for Name, length must be less than 32.", new [] { "Name" });
            }

            // Name (string) minLength
            if (this.Name != null && this.Name.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Name, length must be greater than 1.", new [] { "Name" });
            }

            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 1000)
            {
                yield return new ValidationResult("Invalid value for Description, length must be less than 1000.", new [] { "Description" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PostClientRequest" />
    /// </summary>
    public class PostClientRequestJsonConverter : JsonConverter<PostClientRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="PostClientRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PostClientRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> name = default;
            Option<string?> callbackUrl = default;
            Option<List<OAuth2Scope>?> scopes = default;
            Option<string?> description = default;
            Option<bool?> confidential = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "callbackUrl":
                            callbackUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "scopes":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                scopes = new Option<List<OAuth2Scope>?>(JsonSerializer.Deserialize<List<OAuth2Scope>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "confidential":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                confidential = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class PostClientRequest.", nameof(name));

            if (!callbackUrl.IsSet)
                throw new ArgumentException("Property is required for class PostClientRequest.", nameof(callbackUrl));

            if (!scopes.IsSet)
                throw new ArgumentException("Property is required for class PostClientRequest.", nameof(scopes));

            if (!description.IsSet)
                throw new ArgumentException("Property is required for class PostClientRequest.", nameof(description));

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class PostClientRequest.");

            if (callbackUrl.IsSet && callbackUrl.Value == null)
                throw new ArgumentNullException(nameof(callbackUrl), "Property is not nullable for class PostClientRequest.");

            if (scopes.IsSet && scopes.Value == null)
                throw new ArgumentNullException(nameof(scopes), "Property is not nullable for class PostClientRequest.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class PostClientRequest.");

            if (confidential.IsSet && confidential.Value == null)
                throw new ArgumentNullException(nameof(confidential), "Property is not nullable for class PostClientRequest.");

            return new PostClientRequest(name.Value!, callbackUrl.Value!, scopes.Value!, description.Value!, confidential);
        }

        /// <summary>
        /// Serializes a <see cref="PostClientRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="postClientRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PostClientRequest postClientRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, postClientRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PostClientRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="postClientRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PostClientRequest postClientRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (postClientRequest.Name == null)
                throw new ArgumentNullException(nameof(postClientRequest.Name), "Property is required for class PostClientRequest.");

            if (postClientRequest.CallbackUrl == null)
                throw new ArgumentNullException(nameof(postClientRequest.CallbackUrl), "Property is required for class PostClientRequest.");

            if (postClientRequest.Scopes == null)
                throw new ArgumentNullException(nameof(postClientRequest.Scopes), "Property is required for class PostClientRequest.");

            if (postClientRequest.Description == null)
                throw new ArgumentNullException(nameof(postClientRequest.Description), "Property is required for class PostClientRequest.");

            writer.WriteString("name", postClientRequest.Name);

            writer.WriteString("callbackUrl", postClientRequest.CallbackUrl);

            writer.WritePropertyName("scopes");
            JsonSerializer.Serialize(writer, postClientRequest.Scopes, jsonSerializerOptions);
            writer.WriteString("description", postClientRequest.Description);

            if (postClientRequest.ConfidentialOption.IsSet)
                writer.WriteBoolean("confidential", postClientRequest.ConfidentialOption.Value!.Value);
        }
    }

    /// <summary>
    /// The PostClientRequestSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(PostClientRequest))]
    public partial class PostClientRequestSerializationContext : JsonSerializerContext { }
}
