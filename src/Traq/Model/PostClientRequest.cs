/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Traq.Client.FileParameter;
using OpenAPIDateConverter = Traq.Client.OpenAPIDateConverter;

namespace Traq.Model
{
    /// <summary>
    /// OAuth2クライアント作成リクエスト
    /// </summary>
    [DataContract(Name = "PostClientRequest")]
    public partial class PostClientRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PostClientRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PostClientRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PostClientRequest" /> class.
        /// </summary>
        /// <param name="name">クライアント名 (required).</param>
        /// <param name="callbackUrl">コールバックURL (required).</param>
        /// <param name="scopes">要求スコープの配列 (required).</param>
        /// <param name="description">説明 (required).</param>
        /// <param name="confidential">confidential client なら true, public cleint なら false (default to false).</param>
        public PostClientRequest(string name = default(string), string callbackUrl = default(string), List<OAuth2Scope> scopes = default(List<OAuth2Scope>), string description = default(string), bool confidential = false)
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for PostClientRequest and cannot be null");
            }
            this.Name = name;
            // to ensure "callbackUrl" is required (not null)
            if (callbackUrl == null)
            {
                throw new ArgumentNullException("callbackUrl is a required property for PostClientRequest and cannot be null");
            }
            this.CallbackUrl = callbackUrl;
            // to ensure "scopes" is required (not null)
            if (scopes == null)
            {
                throw new ArgumentNullException("scopes is a required property for PostClientRequest and cannot be null");
            }
            this.Scopes = scopes;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for PostClientRequest and cannot be null");
            }
            this.Description = description;
            this.Confidential = confidential;
        }

        /// <summary>
        /// クライアント名
        /// </summary>
        /// <value>クライアント名</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// コールバックURL
        /// </summary>
        /// <value>コールバックURL</value>
        [DataMember(Name = "callbackUrl", IsRequired = true, EmitDefaultValue = true)]
        public string CallbackUrl { get; set; }

        /// <summary>
        /// 要求スコープの配列
        /// </summary>
        /// <value>要求スコープの配列</value>
        [DataMember(Name = "scopes", IsRequired = true, EmitDefaultValue = true)]
        public List<OAuth2Scope> Scopes { get; set; }

        /// <summary>
        /// 説明
        /// </summary>
        /// <value>説明</value>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// confidential client なら true, public cleint なら false
        /// </summary>
        /// <value>confidential client なら true, public cleint なら false</value>
        [DataMember(Name = "confidential", EmitDefaultValue = true)]
        public bool Confidential { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PostClientRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CallbackUrl: ").Append(CallbackUrl).Append("\n");
            sb.Append("  Scopes: ").Append(Scopes).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Confidential: ").Append(Confidential).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 32)
            {
                yield return new ValidationResult("Invalid value for Name, length must be less than 32.", new [] { "Name" });
            }

            // Name (string) minLength
            if (this.Name != null && this.Name.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Name, length must be greater than 1.", new [] { "Name" });
            }

            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 1000)
            {
                yield return new ValidationResult("Invalid value for Description, length must be less than 1000.", new [] { "Description" });
            }

            yield break;
        }
    }

}
