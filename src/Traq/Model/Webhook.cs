// <auto-generated>
/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Traq.Client;

namespace Traq.Model
{
    /// <summary>
    /// Webhook情報
    /// </summary>
    public partial class Webhook : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Webhook" /> class.
        /// </summary>
        /// <param name="id">WebhookUUID</param>
        /// <param name="botUserId">WebhookユーザーUUID</param>
        /// <param name="displayName">Webhookユーザー表示名</param>
        /// <param name="description">説明</param>
        /// <param name="secure">セキュアWebhookかどうか</param>
        /// <param name="channelId">デフォルトの投稿先チャンネルUUID</param>
        /// <param name="ownerId">オーナーUUID</param>
        /// <param name="createdAt">作成日時</param>
        /// <param name="updatedAt">更新日時</param>
        [JsonConstructor]
        public Webhook(Guid id, Guid botUserId, string displayName, string description, bool secure, Guid channelId, Guid ownerId, DateTimeOffset createdAt, DateTimeOffset updatedAt)
        {
            Id = id;
            BotUserId = botUserId;
            DisplayName = displayName;
            Description = description;
            Secure = secure;
            ChannelId = channelId;
            OwnerId = ownerId;
            CreatedAt = createdAt;
            UpdatedAt = updatedAt;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// WebhookUUID
        /// </summary>
        /// <value>WebhookUUID</value>
        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        /// <summary>
        /// WebhookユーザーUUID
        /// </summary>
        /// <value>WebhookユーザーUUID</value>
        [JsonPropertyName("botUserId")]
        public Guid BotUserId { get; set; }

        /// <summary>
        /// Webhookユーザー表示名
        /// </summary>
        /// <value>Webhookユーザー表示名</value>
        [JsonPropertyName("displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// 説明
        /// </summary>
        /// <value>説明</value>
        [JsonPropertyName("description")]
        public string Description { get; set; }

        /// <summary>
        /// セキュアWebhookかどうか
        /// </summary>
        /// <value>セキュアWebhookかどうか</value>
        [JsonPropertyName("secure")]
        public bool Secure { get; set; }

        /// <summary>
        /// デフォルトの投稿先チャンネルUUID
        /// </summary>
        /// <value>デフォルトの投稿先チャンネルUUID</value>
        [JsonPropertyName("channelId")]
        public Guid ChannelId { get; set; }

        /// <summary>
        /// オーナーUUID
        /// </summary>
        /// <value>オーナーUUID</value>
        [JsonPropertyName("ownerId")]
        public Guid OwnerId { get; set; }

        /// <summary>
        /// 作成日時
        /// </summary>
        /// <value>作成日時</value>
        [JsonPropertyName("createdAt")]
        public DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// 更新日時
        /// </summary>
        /// <value>更新日時</value>
        [JsonPropertyName("updatedAt")]
        public DateTimeOffset UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Webhook {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  BotUserId: ").Append(BotUserId).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Secure: ").Append(Secure).Append("\n");
            sb.Append("  ChannelId: ").Append(ChannelId).Append("\n");
            sb.Append("  OwnerId: ").Append(OwnerId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Webhook" />
    /// </summary>
    public class WebhookJsonConverter : JsonConverter<Webhook>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdatedAt
        /// </summary>
        public static string UpdatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="Webhook" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Webhook Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid?> id = default;
            Option<Guid?> botUserId = default;
            Option<string?> displayName = default;
            Option<string?> description = default;
            Option<bool?> secure = default;
            Option<Guid?> channelId = default;
            Option<Guid?> ownerId = default;
            Option<DateTimeOffset?> createdAt = default;
            Option<DateTimeOffset?> updatedAt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        case "botUserId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                botUserId = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        case "displayName":
                            displayName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "secure":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                secure = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "channelId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                channelId = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        case "ownerId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                ownerId = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        case "createdAt":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createdAt = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "updatedAt":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                updatedAt = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class Webhook.", nameof(id));

            if (!botUserId.IsSet)
                throw new ArgumentException("Property is required for class Webhook.", nameof(botUserId));

            if (!displayName.IsSet)
                throw new ArgumentException("Property is required for class Webhook.", nameof(displayName));

            if (!description.IsSet)
                throw new ArgumentException("Property is required for class Webhook.", nameof(description));

            if (!secure.IsSet)
                throw new ArgumentException("Property is required for class Webhook.", nameof(secure));

            if (!channelId.IsSet)
                throw new ArgumentException("Property is required for class Webhook.", nameof(channelId));

            if (!ownerId.IsSet)
                throw new ArgumentException("Property is required for class Webhook.", nameof(ownerId));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class Webhook.", nameof(createdAt));

            if (!updatedAt.IsSet)
                throw new ArgumentException("Property is required for class Webhook.", nameof(updatedAt));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class Webhook.");

            if (botUserId.IsSet && botUserId.Value == null)
                throw new ArgumentNullException(nameof(botUserId), "Property is not nullable for class Webhook.");

            if (displayName.IsSet && displayName.Value == null)
                throw new ArgumentNullException(nameof(displayName), "Property is not nullable for class Webhook.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class Webhook.");

            if (secure.IsSet && secure.Value == null)
                throw new ArgumentNullException(nameof(secure), "Property is not nullable for class Webhook.");

            if (channelId.IsSet && channelId.Value == null)
                throw new ArgumentNullException(nameof(channelId), "Property is not nullable for class Webhook.");

            if (ownerId.IsSet && ownerId.Value == null)
                throw new ArgumentNullException(nameof(ownerId), "Property is not nullable for class Webhook.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class Webhook.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class Webhook.");

            return new Webhook(id.Value!.Value!, botUserId.Value!.Value!, displayName.Value!, description.Value!, secure.Value!.Value!, channelId.Value!.Value!, ownerId.Value!.Value!, createdAt.Value!.Value!, updatedAt.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="Webhook" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webhook"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Webhook webhook, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, webhook, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Webhook" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webhook"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Webhook webhook, JsonSerializerOptions jsonSerializerOptions)
        {
            if (webhook.DisplayName == null)
                throw new ArgumentNullException(nameof(webhook.DisplayName), "Property is required for class Webhook.");

            if (webhook.Description == null)
                throw new ArgumentNullException(nameof(webhook.Description), "Property is required for class Webhook.");

            writer.WriteString("id", webhook.Id);

            writer.WriteString("botUserId", webhook.BotUserId);

            writer.WriteString("displayName", webhook.DisplayName);

            writer.WriteString("description", webhook.Description);

            writer.WriteBoolean("secure", webhook.Secure);

            writer.WriteString("channelId", webhook.ChannelId);

            writer.WriteString("ownerId", webhook.OwnerId);

            writer.WriteString("createdAt", webhook.CreatedAt.ToString(CreatedAtFormat));

            writer.WriteString("updatedAt", webhook.UpdatedAt.ToString(UpdatedAtFormat));
        }
    }

    /// <summary>
    /// The WebhookSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(Webhook))]
    public partial class WebhookSerializationContext : JsonSerializerContext { }
}
