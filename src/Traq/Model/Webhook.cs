/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Traq.Client.FileParameter;
using OpenAPIDateConverter = Traq.Client.OpenAPIDateConverter;

namespace Traq.Model
{
    /// <summary>
    /// Webhook情報
    /// </summary>
    [DataContract(Name = "Webhook")]
    public partial class Webhook : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Webhook" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Webhook() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Webhook" /> class.
        /// </summary>
        /// <param name="id">WebhookUUID (required).</param>
        /// <param name="botUserId">WebhookユーザーUUID (required).</param>
        /// <param name="displayName">Webhookユーザー表示名 (required).</param>
        /// <param name="description">説明 (required).</param>
        /// <param name="secure">セキュアWebhookかどうか (required).</param>
        /// <param name="channelId">デフォルトの投稿先チャンネルUUID (required).</param>
        /// <param name="ownerId">オーナーUUID (required).</param>
        /// <param name="createdAt">作成日時 (required).</param>
        /// <param name="updatedAt">更新日時 (required).</param>
        public Webhook(Guid id = default(Guid), Guid botUserId = default(Guid), string displayName = default(string), string description = default(string), bool secure = default(bool), Guid channelId = default(Guid), Guid ownerId = default(Guid), DateTimeOffset createdAt = default(DateTimeOffset), DateTimeOffset updatedAt = default(DateTimeOffset))
        {
            this.Id = id;
            this.BotUserId = botUserId;
            // to ensure "displayName" is required (not null)
            if (displayName == null)
            {
                throw new ArgumentNullException("displayName is a required property for Webhook and cannot be null");
            }
            this.DisplayName = displayName;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for Webhook and cannot be null");
            }
            this.Description = description;
            this.Secure = secure;
            this.ChannelId = channelId;
            this.OwnerId = ownerId;
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
        }

        /// <summary>
        /// WebhookUUID
        /// </summary>
        /// <value>WebhookUUID</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public Guid Id { get; set; }

        /// <summary>
        /// WebhookユーザーUUID
        /// </summary>
        /// <value>WebhookユーザーUUID</value>
        [DataMember(Name = "botUserId", IsRequired = true, EmitDefaultValue = true)]
        public Guid BotUserId { get; set; }

        /// <summary>
        /// Webhookユーザー表示名
        /// </summary>
        /// <value>Webhookユーザー表示名</value>
        [DataMember(Name = "displayName", IsRequired = true, EmitDefaultValue = true)]
        public string DisplayName { get; set; }

        /// <summary>
        /// 説明
        /// </summary>
        /// <value>説明</value>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// セキュアWebhookかどうか
        /// </summary>
        /// <value>セキュアWebhookかどうか</value>
        [DataMember(Name = "secure", IsRequired = true, EmitDefaultValue = true)]
        public bool Secure { get; set; }

        /// <summary>
        /// デフォルトの投稿先チャンネルUUID
        /// </summary>
        /// <value>デフォルトの投稿先チャンネルUUID</value>
        [DataMember(Name = "channelId", IsRequired = true, EmitDefaultValue = true)]
        public Guid ChannelId { get; set; }

        /// <summary>
        /// オーナーUUID
        /// </summary>
        /// <value>オーナーUUID</value>
        [DataMember(Name = "ownerId", IsRequired = true, EmitDefaultValue = true)]
        public Guid OwnerId { get; set; }

        /// <summary>
        /// 作成日時
        /// </summary>
        /// <value>作成日時</value>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// 更新日時
        /// </summary>
        /// <value>更新日時</value>
        [DataMember(Name = "updatedAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Webhook {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  BotUserId: ").Append(BotUserId).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Secure: ").Append(Secure).Append("\n");
            sb.Append("  ChannelId: ").Append(ChannelId).Append("\n");
            sb.Append("  OwnerId: ").Append(OwnerId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
