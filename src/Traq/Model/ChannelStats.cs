// <auto-generated>
/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Traq.Client;

namespace Traq.Model
{
    /// <summary>
    /// チャンネル統計情報
    /// </summary>
    public partial class ChannelStats : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelStats" /> class.
        /// </summary>
        /// <param name="totalMessageCount">チャンネルの総投稿メッセージ数(削除されたものも含む)</param>
        /// <param name="stamps">チャンネル上のスタンプ統計情報</param>
        /// <param name="users">チャンネル上のユーザー統計情報</param>
        /// <param name="datetime">統計情報日時</param>
        [JsonConstructor]
        public ChannelStats(long totalMessageCount, List<ChannelStatsStamp> stamps, List<ChannelStatsUser> users, DateTimeOffset datetime)
        {
            TotalMessageCount = totalMessageCount;
            Stamps = stamps;
            Users = users;
            Datetime = datetime;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// チャンネルの総投稿メッセージ数(削除されたものも含む)
        /// </summary>
        /// <value>チャンネルの総投稿メッセージ数(削除されたものも含む)</value>
        [JsonPropertyName("totalMessageCount")]
        public long TotalMessageCount { get; set; }

        /// <summary>
        /// チャンネル上のスタンプ統計情報
        /// </summary>
        /// <value>チャンネル上のスタンプ統計情報</value>
        [JsonPropertyName("stamps")]
        public List<ChannelStatsStamp> Stamps { get; set; }

        /// <summary>
        /// チャンネル上のユーザー統計情報
        /// </summary>
        /// <value>チャンネル上のユーザー統計情報</value>
        [JsonPropertyName("users")]
        public List<ChannelStatsUser> Users { get; set; }

        /// <summary>
        /// 統計情報日時
        /// </summary>
        /// <value>統計情報日時</value>
        [JsonPropertyName("datetime")]
        public DateTimeOffset Datetime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ChannelStats {\n");
            sb.Append("  TotalMessageCount: ").Append(TotalMessageCount).Append("\n");
            sb.Append("  Stamps: ").Append(Stamps).Append("\n");
            sb.Append("  Users: ").Append(Users).Append("\n");
            sb.Append("  Datetime: ").Append(Datetime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ChannelStats" />
    /// </summary>
    public class ChannelStatsJsonConverter : JsonConverter<ChannelStats>
    {
        /// <summary>
        /// The format to use to serialize Datetime
        /// </summary>
        public static string DatetimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="ChannelStats" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ChannelStats Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long?> totalMessageCount = default;
            Option<List<ChannelStatsStamp>?> stamps = default;
            Option<List<ChannelStatsUser>?> users = default;
            Option<DateTimeOffset?> datetime = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "totalMessageCount":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                totalMessageCount = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "stamps":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                stamps = new Option<List<ChannelStatsStamp>?>(JsonSerializer.Deserialize<List<ChannelStatsStamp>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "users":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                users = new Option<List<ChannelStatsUser>?>(JsonSerializer.Deserialize<List<ChannelStatsUser>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "datetime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                datetime = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!totalMessageCount.IsSet)
                throw new ArgumentException("Property is required for class ChannelStats.", nameof(totalMessageCount));

            if (!stamps.IsSet)
                throw new ArgumentException("Property is required for class ChannelStats.", nameof(stamps));

            if (!users.IsSet)
                throw new ArgumentException("Property is required for class ChannelStats.", nameof(users));

            if (!datetime.IsSet)
                throw new ArgumentException("Property is required for class ChannelStats.", nameof(datetime));

            if (totalMessageCount.IsSet && totalMessageCount.Value == null)
                throw new ArgumentNullException(nameof(totalMessageCount), "Property is not nullable for class ChannelStats.");

            if (stamps.IsSet && stamps.Value == null)
                throw new ArgumentNullException(nameof(stamps), "Property is not nullable for class ChannelStats.");

            if (users.IsSet && users.Value == null)
                throw new ArgumentNullException(nameof(users), "Property is not nullable for class ChannelStats.");

            if (datetime.IsSet && datetime.Value == null)
                throw new ArgumentNullException(nameof(datetime), "Property is not nullable for class ChannelStats.");

            return new ChannelStats(totalMessageCount.Value!.Value!, stamps.Value!, users.Value!, datetime.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="ChannelStats" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="channelStats"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ChannelStats channelStats, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, channelStats, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ChannelStats" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="channelStats"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ChannelStats channelStats, JsonSerializerOptions jsonSerializerOptions)
        {
            if (channelStats.Stamps == null)
                throw new ArgumentNullException(nameof(channelStats.Stamps), "Property is required for class ChannelStats.");

            if (channelStats.Users == null)
                throw new ArgumentNullException(nameof(channelStats.Users), "Property is required for class ChannelStats.");

            writer.WriteNumber("totalMessageCount", channelStats.TotalMessageCount);

            writer.WritePropertyName("stamps");
            JsonSerializer.Serialize(writer, channelStats.Stamps, jsonSerializerOptions);
            writer.WritePropertyName("users");
            JsonSerializer.Serialize(writer, channelStats.Users, jsonSerializerOptions);
            writer.WriteString("datetime", channelStats.Datetime.ToString(DatetimeFormat));
        }
    }

    /// <summary>
    /// The ChannelStatsSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(ChannelStats))]
    public partial class ChannelStatsSerializationContext : JsonSerializerContext { }
}
