// <auto-generated>
/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Traq.Client;

namespace Traq.Model
{
    /// <summary>
    /// OAuth2Token
    /// </summary>
    public partial class OAuth2Token : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OAuth2Token" /> class.
        /// </summary>
        /// <param name="accessToken">accessToken</param>
        /// <param name="tokenType">tokenType</param>
        /// <param name="expiresIn">expiresIn</param>
        /// <param name="refreshToken">refreshToken</param>
        /// <param name="scope">scope</param>
        /// <param name="idToken">idToken</param>
        [JsonConstructor]
        public OAuth2Token(string accessToken, string tokenType, Option<int?> expiresIn = default, Option<string?> refreshToken = default, Option<string?> scope = default, Option<string?> idToken = default)
        {
            AccessToken = accessToken;
            TokenType = tokenType;
            ExpiresInOption = expiresIn;
            RefreshTokenOption = refreshToken;
            ScopeOption = scope;
            IdTokenOption = idToken;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets AccessToken
        /// </summary>
        [JsonPropertyName("access_token")]
        public string AccessToken { get; set; }

        /// <summary>
        /// Gets or Sets TokenType
        /// </summary>
        [JsonPropertyName("token_type")]
        public string TokenType { get; set; }

        /// <summary>
        /// Used to track the state of ExpiresIn
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ExpiresInOption { get; private set; }

        /// <summary>
        /// Gets or Sets ExpiresIn
        /// </summary>
        [JsonPropertyName("expires_in")]
        public int? ExpiresIn { get { return this.ExpiresInOption; } set { this.ExpiresInOption = new(value); } }

        /// <summary>
        /// Used to track the state of RefreshToken
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RefreshTokenOption { get; private set; }

        /// <summary>
        /// Gets or Sets RefreshToken
        /// </summary>
        [JsonPropertyName("refresh_token")]
        public string? RefreshToken { get { return this.RefreshTokenOption; } set { this.RefreshTokenOption = new(value); } }

        /// <summary>
        /// Used to track the state of Scope
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ScopeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Scope
        /// </summary>
        [JsonPropertyName("scope")]
        public string? Scope { get { return this.ScopeOption; } set { this.ScopeOption = new(value); } }

        /// <summary>
        /// Used to track the state of IdToken
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdTokenOption { get; private set; }

        /// <summary>
        /// Gets or Sets IdToken
        /// </summary>
        [JsonPropertyName("id_token")]
        public string? IdToken { get { return this.IdTokenOption; } set { this.IdTokenOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OAuth2Token {\n");
            sb.Append("  AccessToken: ").Append(AccessToken).Append("\n");
            sb.Append("  TokenType: ").Append(TokenType).Append("\n");
            sb.Append("  ExpiresIn: ").Append(ExpiresIn).Append("\n");
            sb.Append("  RefreshToken: ").Append(RefreshToken).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  IdToken: ").Append(IdToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="OAuth2Token" />
    /// </summary>
    public class OAuth2TokenJsonConverter : JsonConverter<OAuth2Token>
    {
        /// <summary>
        /// Deserializes json to <see cref="OAuth2Token" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override OAuth2Token Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> accessToken = default;
            Option<string?> tokenType = default;
            Option<int?> expiresIn = default;
            Option<string?> refreshToken = default;
            Option<string?> scope = default;
            Option<string?> idToken = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "access_token":
                            accessToken = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "token_type":
                            tokenType = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "expires_in":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                expiresIn = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "refresh_token":
                            refreshToken = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "scope":
                            scope = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id_token":
                            idToken = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!accessToken.IsSet)
                throw new ArgumentException("Property is required for class OAuth2Token.", nameof(accessToken));

            if (!tokenType.IsSet)
                throw new ArgumentException("Property is required for class OAuth2Token.", nameof(tokenType));

            if (accessToken.IsSet && accessToken.Value == null)
                throw new ArgumentNullException(nameof(accessToken), "Property is not nullable for class OAuth2Token.");

            if (tokenType.IsSet && tokenType.Value == null)
                throw new ArgumentNullException(nameof(tokenType), "Property is not nullable for class OAuth2Token.");

            if (expiresIn.IsSet && expiresIn.Value == null)
                throw new ArgumentNullException(nameof(expiresIn), "Property is not nullable for class OAuth2Token.");

            if (refreshToken.IsSet && refreshToken.Value == null)
                throw new ArgumentNullException(nameof(refreshToken), "Property is not nullable for class OAuth2Token.");

            if (scope.IsSet && scope.Value == null)
                throw new ArgumentNullException(nameof(scope), "Property is not nullable for class OAuth2Token.");

            if (idToken.IsSet && idToken.Value == null)
                throw new ArgumentNullException(nameof(idToken), "Property is not nullable for class OAuth2Token.");

            return new OAuth2Token(accessToken.Value!, tokenType.Value!, expiresIn, refreshToken, scope, idToken);
        }

        /// <summary>
        /// Serializes a <see cref="OAuth2Token" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="oAuth2Token"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, OAuth2Token oAuth2Token, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, oAuth2Token, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="OAuth2Token" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="oAuth2Token"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, OAuth2Token oAuth2Token, JsonSerializerOptions jsonSerializerOptions)
        {
            if (oAuth2Token.AccessToken == null)
                throw new ArgumentNullException(nameof(oAuth2Token.AccessToken), "Property is required for class OAuth2Token.");

            if (oAuth2Token.TokenType == null)
                throw new ArgumentNullException(nameof(oAuth2Token.TokenType), "Property is required for class OAuth2Token.");

            if (oAuth2Token.RefreshTokenOption.IsSet && oAuth2Token.RefreshToken == null)
                throw new ArgumentNullException(nameof(oAuth2Token.RefreshToken), "Property is required for class OAuth2Token.");

            if (oAuth2Token.ScopeOption.IsSet && oAuth2Token.Scope == null)
                throw new ArgumentNullException(nameof(oAuth2Token.Scope), "Property is required for class OAuth2Token.");

            if (oAuth2Token.IdTokenOption.IsSet && oAuth2Token.IdToken == null)
                throw new ArgumentNullException(nameof(oAuth2Token.IdToken), "Property is required for class OAuth2Token.");

            writer.WriteString("access_token", oAuth2Token.AccessToken);

            writer.WriteString("token_type", oAuth2Token.TokenType);

            if (oAuth2Token.ExpiresInOption.IsSet)
                writer.WriteNumber("expires_in", oAuth2Token.ExpiresInOption.Value!.Value);

            if (oAuth2Token.RefreshTokenOption.IsSet)
                writer.WriteString("refresh_token", oAuth2Token.RefreshToken);

            if (oAuth2Token.ScopeOption.IsSet)
                writer.WriteString("scope", oAuth2Token.Scope);

            if (oAuth2Token.IdTokenOption.IsSet)
                writer.WriteString("id_token", oAuth2Token.IdToken);
        }
    }

    /// <summary>
    /// The OAuth2TokenSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(OAuth2Token))]
    public partial class OAuth2TokenSerializationContext : JsonSerializerContext { }
}
