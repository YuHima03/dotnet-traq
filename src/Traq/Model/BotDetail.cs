// <auto-generated>
/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Traq.Client;

namespace Traq.Model
{
    /// <summary>
    /// BOT詳細情報
    /// </summary>
    public partial class BotDetail : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BotDetail" /> class.
        /// </summary>
        /// <param name="id">BOT UUID</param>
        /// <param name="updatedAt">更新日時</param>
        /// <param name="createdAt">作成日時</param>
        /// <param name="mode">mode</param>
        /// <param name="state">state</param>
        /// <param name="subscribeEvents">BOTが購読しているイベントの配列</param>
        /// <param name="developerId">BOT開発者UUID</param>
        /// <param name="description">説明</param>
        /// <param name="botUserId">BOTユーザーUUID</param>
        /// <param name="tokens">tokens</param>
        /// <param name="endpoint">BOTサーバーエンドポイント</param>
        /// <param name="privileged">特権BOTかどうか</param>
        /// <param name="channels">BOTが参加しているチャンネルのUUID配列</param>
        [JsonConstructor]
        public BotDetail(Guid id, DateTimeOffset updatedAt, DateTimeOffset createdAt, BotMode mode, BotState state, List<string> subscribeEvents, Guid developerId, string description, Guid botUserId, BotTokens tokens, string endpoint, bool privileged, List<Guid> channels)
        {
            Id = id;
            UpdatedAt = updatedAt;
            CreatedAt = createdAt;
            Mode = mode;
            State = state;
            SubscribeEvents = subscribeEvents;
            DeveloperId = developerId;
            Description = description;
            BotUserId = botUserId;
            Tokens = tokens;
            Endpoint = endpoint;
            Privileged = privileged;
            Channels = channels;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Mode
        /// </summary>
        [JsonPropertyName("mode")]
        public BotMode Mode { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [JsonPropertyName("state")]
        public BotState State { get; set; }

        /// <summary>
        /// BOT UUID
        /// </summary>
        /// <value>BOT UUID</value>
        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        /// <summary>
        /// 更新日時
        /// </summary>
        /// <value>更新日時</value>
        [JsonPropertyName("updatedAt")]
        public DateTimeOffset UpdatedAt { get; set; }

        /// <summary>
        /// 作成日時
        /// </summary>
        /// <value>作成日時</value>
        [JsonPropertyName("createdAt")]
        public DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// BOTが購読しているイベントの配列
        /// </summary>
        /// <value>BOTが購読しているイベントの配列</value>
        [JsonPropertyName("subscribeEvents")]
        public List<string> SubscribeEvents { get; set; }

        /// <summary>
        /// BOT開発者UUID
        /// </summary>
        /// <value>BOT開発者UUID</value>
        [JsonPropertyName("developerId")]
        public Guid DeveloperId { get; set; }

        /// <summary>
        /// 説明
        /// </summary>
        /// <value>説明</value>
        [JsonPropertyName("description")]
        public string Description { get; set; }

        /// <summary>
        /// BOTユーザーUUID
        /// </summary>
        /// <value>BOTユーザーUUID</value>
        [JsonPropertyName("botUserId")]
        public Guid BotUserId { get; set; }

        /// <summary>
        /// Gets or Sets Tokens
        /// </summary>
        [JsonPropertyName("tokens")]
        public BotTokens Tokens { get; set; }

        /// <summary>
        /// BOTサーバーエンドポイント
        /// </summary>
        /// <value>BOTサーバーエンドポイント</value>
        [JsonPropertyName("endpoint")]
        public string Endpoint { get; set; }

        /// <summary>
        /// 特権BOTかどうか
        /// </summary>
        /// <value>特権BOTかどうか</value>
        [JsonPropertyName("privileged")]
        public bool Privileged { get; set; }

        /// <summary>
        /// BOTが参加しているチャンネルのUUID配列
        /// </summary>
        /// <value>BOTが参加しているチャンネルのUUID配列</value>
        [JsonPropertyName("channels")]
        public List<Guid> Channels { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BotDetail {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  SubscribeEvents: ").Append(SubscribeEvents).Append("\n");
            sb.Append("  DeveloperId: ").Append(DeveloperId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  BotUserId: ").Append(BotUserId).Append("\n");
            sb.Append("  Tokens: ").Append(Tokens).Append("\n");
            sb.Append("  Endpoint: ").Append(Endpoint).Append("\n");
            sb.Append("  Privileged: ").Append(Privileged).Append("\n");
            sb.Append("  Channels: ").Append(Channels).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 1000)
            {
                yield return new ValidationResult("Invalid value for Description, length must be less than 1000.", new [] { "Description" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="BotDetail" />
    /// </summary>
    public class BotDetailJsonConverter : JsonConverter<BotDetail>
    {
        /// <summary>
        /// The format to use to serialize UpdatedAt
        /// </summary>
        public static string UpdatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="BotDetail" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override BotDetail Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid?> id = default;
            Option<DateTimeOffset?> updatedAt = default;
            Option<DateTimeOffset?> createdAt = default;
            Option<BotMode?> mode = default;
            Option<BotState?> state = default;
            Option<List<string>?> subscribeEvents = default;
            Option<Guid?> developerId = default;
            Option<string?> description = default;
            Option<Guid?> botUserId = default;
            Option<BotTokens?> tokens = default;
            Option<string?> endpoint = default;
            Option<bool?> privileged = default;
            Option<List<Guid>?> channels = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        case "updatedAt":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                updatedAt = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "createdAt":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createdAt = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "mode":
                            string? modeRawValue = utf8JsonReader.GetString();
                            if (modeRawValue != null)
                                mode = new Option<BotMode?>(BotModeValueConverter.FromStringOrDefault(modeRawValue));
                            break;
                        case "state":
                            string? stateRawValue = utf8JsonReader.GetString();
                            if (stateRawValue != null)
                                state = new Option<BotState?>(BotStateValueConverter.FromStringOrDefault(stateRawValue));
                            break;
                        case "subscribeEvents":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                subscribeEvents = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "developerId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                developerId = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "botUserId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                botUserId = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        case "tokens":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                tokens = new Option<BotTokens?>(JsonSerializer.Deserialize<BotTokens>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "endpoint":
                            endpoint = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "privileged":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                privileged = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "channels":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                channels = new Option<List<Guid>?>(JsonSerializer.Deserialize<List<Guid>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class BotDetail.", nameof(id));

            if (!updatedAt.IsSet)
                throw new ArgumentException("Property is required for class BotDetail.", nameof(updatedAt));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class BotDetail.", nameof(createdAt));

            if (!mode.IsSet)
                throw new ArgumentException("Property is required for class BotDetail.", nameof(mode));

            if (!state.IsSet)
                throw new ArgumentException("Property is required for class BotDetail.", nameof(state));

            if (!subscribeEvents.IsSet)
                throw new ArgumentException("Property is required for class BotDetail.", nameof(subscribeEvents));

            if (!developerId.IsSet)
                throw new ArgumentException("Property is required for class BotDetail.", nameof(developerId));

            if (!description.IsSet)
                throw new ArgumentException("Property is required for class BotDetail.", nameof(description));

            if (!botUserId.IsSet)
                throw new ArgumentException("Property is required for class BotDetail.", nameof(botUserId));

            if (!tokens.IsSet)
                throw new ArgumentException("Property is required for class BotDetail.", nameof(tokens));

            if (!endpoint.IsSet)
                throw new ArgumentException("Property is required for class BotDetail.", nameof(endpoint));

            if (!privileged.IsSet)
                throw new ArgumentException("Property is required for class BotDetail.", nameof(privileged));

            if (!channels.IsSet)
                throw new ArgumentException("Property is required for class BotDetail.", nameof(channels));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class BotDetail.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class BotDetail.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class BotDetail.");

            if (mode.IsSet && mode.Value == null)
                throw new ArgumentNullException(nameof(mode), "Property is not nullable for class BotDetail.");

            if (state.IsSet && state.Value == null)
                throw new ArgumentNullException(nameof(state), "Property is not nullable for class BotDetail.");

            if (subscribeEvents.IsSet && subscribeEvents.Value == null)
                throw new ArgumentNullException(nameof(subscribeEvents), "Property is not nullable for class BotDetail.");

            if (developerId.IsSet && developerId.Value == null)
                throw new ArgumentNullException(nameof(developerId), "Property is not nullable for class BotDetail.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class BotDetail.");

            if (botUserId.IsSet && botUserId.Value == null)
                throw new ArgumentNullException(nameof(botUserId), "Property is not nullable for class BotDetail.");

            if (tokens.IsSet && tokens.Value == null)
                throw new ArgumentNullException(nameof(tokens), "Property is not nullable for class BotDetail.");

            if (endpoint.IsSet && endpoint.Value == null)
                throw new ArgumentNullException(nameof(endpoint), "Property is not nullable for class BotDetail.");

            if (privileged.IsSet && privileged.Value == null)
                throw new ArgumentNullException(nameof(privileged), "Property is not nullable for class BotDetail.");

            if (channels.IsSet && channels.Value == null)
                throw new ArgumentNullException(nameof(channels), "Property is not nullable for class BotDetail.");

            return new BotDetail(id.Value!.Value!, updatedAt.Value!.Value!, createdAt.Value!.Value!, mode.Value!.Value!, state.Value!.Value!, subscribeEvents.Value!, developerId.Value!.Value!, description.Value!, botUserId.Value!.Value!, tokens.Value!, endpoint.Value!, privileged.Value!.Value!, channels.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="BotDetail" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="botDetail"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, BotDetail botDetail, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, botDetail, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="BotDetail" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="botDetail"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, BotDetail botDetail, JsonSerializerOptions jsonSerializerOptions)
        {
            if (botDetail.SubscribeEvents == null)
                throw new ArgumentNullException(nameof(botDetail.SubscribeEvents), "Property is required for class BotDetail.");

            if (botDetail.Description == null)
                throw new ArgumentNullException(nameof(botDetail.Description), "Property is required for class BotDetail.");

            if (botDetail.Tokens == null)
                throw new ArgumentNullException(nameof(botDetail.Tokens), "Property is required for class BotDetail.");

            if (botDetail.Endpoint == null)
                throw new ArgumentNullException(nameof(botDetail.Endpoint), "Property is required for class BotDetail.");

            if (botDetail.Channels == null)
                throw new ArgumentNullException(nameof(botDetail.Channels), "Property is required for class BotDetail.");

            writer.WriteString("id", botDetail.Id);

            writer.WriteString("updatedAt", botDetail.UpdatedAt.ToString(UpdatedAtFormat));

            writer.WriteString("createdAt", botDetail.CreatedAt.ToString(CreatedAtFormat));

            var modeRawValue = BotModeValueConverter.ToJsonValue(botDetail.Mode);
            writer.WriteString("mode", modeRawValue);

            var stateRawValue = BotStateValueConverter.ToJsonValue(botDetail.State);
            writer.WriteNumber("state", stateRawValue);

            writer.WritePropertyName("subscribeEvents");
            JsonSerializer.Serialize(writer, botDetail.SubscribeEvents, jsonSerializerOptions);
            writer.WriteString("developerId", botDetail.DeveloperId);

            writer.WriteString("description", botDetail.Description);

            writer.WriteString("botUserId", botDetail.BotUserId);

            writer.WritePropertyName("tokens");
            JsonSerializer.Serialize(writer, botDetail.Tokens, jsonSerializerOptions);
            writer.WriteString("endpoint", botDetail.Endpoint);

            writer.WriteBoolean("privileged", botDetail.Privileged);

            writer.WritePropertyName("channels");
            JsonSerializer.Serialize(writer, botDetail.Channels, jsonSerializerOptions);
        }
    }

    /// <summary>
    /// The BotDetailSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(BotDetail))]
    public partial class BotDetailSerializationContext : JsonSerializerContext { }
}
