// <auto-generated>
/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Traq.Client;

namespace Traq.Model
{
    /// <summary>
    /// 親チャンネル変更イベント
    /// </summary>
    public partial class ParentChangedEvent : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ParentChangedEvent" /> class.
        /// </summary>
        /// <param name="userId">変更者UUID</param>
        /// <param name="before">変更前親チャンネルUUID</param>
        /// <param name="after">変更後親チャンネルUUID</param>
        [JsonConstructor]
        public ParentChangedEvent(Guid userId, Guid before, Guid after)
        {
            UserId = userId;
            Before = before;
            After = after;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// 変更者UUID
        /// </summary>
        /// <value>変更者UUID</value>
        [JsonPropertyName("userId")]
        public Guid UserId { get; set; }

        /// <summary>
        /// 変更前親チャンネルUUID
        /// </summary>
        /// <value>変更前親チャンネルUUID</value>
        [JsonPropertyName("before")]
        public Guid Before { get; set; }

        /// <summary>
        /// 変更後親チャンネルUUID
        /// </summary>
        /// <value>変更後親チャンネルUUID</value>
        [JsonPropertyName("after")]
        public Guid After { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ParentChangedEvent {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Before: ").Append(Before).Append("\n");
            sb.Append("  After: ").Append(After).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ParentChangedEvent" />
    /// </summary>
    public class ParentChangedEventJsonConverter : JsonConverter<ParentChangedEvent>
    {
        /// <summary>
        /// Deserializes json to <see cref="ParentChangedEvent" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ParentChangedEvent Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid?> userId = default;
            Option<Guid?> before = default;
            Option<Guid?> after = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "userId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                userId = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        case "before":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                before = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        case "after":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                after = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!userId.IsSet)
                throw new ArgumentException("Property is required for class ParentChangedEvent.", nameof(userId));

            if (!before.IsSet)
                throw new ArgumentException("Property is required for class ParentChangedEvent.", nameof(before));

            if (!after.IsSet)
                throw new ArgumentException("Property is required for class ParentChangedEvent.", nameof(after));

            if (userId.IsSet && userId.Value == null)
                throw new ArgumentNullException(nameof(userId), "Property is not nullable for class ParentChangedEvent.");

            if (before.IsSet && before.Value == null)
                throw new ArgumentNullException(nameof(before), "Property is not nullable for class ParentChangedEvent.");

            if (after.IsSet && after.Value == null)
                throw new ArgumentNullException(nameof(after), "Property is not nullable for class ParentChangedEvent.");

            return new ParentChangedEvent(userId.Value!.Value!, before.Value!.Value!, after.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="ParentChangedEvent" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="parentChangedEvent"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ParentChangedEvent parentChangedEvent, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, parentChangedEvent, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ParentChangedEvent" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="parentChangedEvent"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ParentChangedEvent parentChangedEvent, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteString("userId", parentChangedEvent.UserId);

            writer.WriteString("before", parentChangedEvent.Before);

            writer.WriteString("after", parentChangedEvent.After);
        }
    }

    /// <summary>
    /// The ParentChangedEventSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(ParentChangedEvent))]
    public partial class ParentChangedEventSerializationContext : JsonSerializerContext { }
}
