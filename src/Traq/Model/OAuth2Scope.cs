// <auto-generated>
/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Traq.Client;

namespace Traq.Model
{
    /// <summary>
    /// OAuth2スコープ
    /// </summary>
    /// <value>OAuth2スコープ</value>
    public enum OAuth2Scope
    {
        /// <summary>
        /// Enum Openid for value: openid
        /// </summary>
        Openid = 1,

        /// <summary>
        /// Enum Profile for value: profile
        /// </summary>
        Profile = 2,

        /// <summary>
        /// Enum Read for value: read
        /// </summary>
        Read = 3,

        /// <summary>
        /// Enum Write for value: write
        /// </summary>
        Write = 4,

        /// <summary>
        /// Enum ManageBot for value: manage_bot
        /// </summary>
        ManageBot = 5
    }

    /// <summary>
    /// Converts <see cref="OAuth2Scope"/> to and from the JSON value
    /// </summary>
    public static class OAuth2ScopeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="OAuth2Scope"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static OAuth2Scope FromString(string value)
        {
            if (value.Equals("openid"))
                return OAuth2Scope.Openid;

            if (value.Equals("profile"))
                return OAuth2Scope.Profile;

            if (value.Equals("read"))
                return OAuth2Scope.Read;

            if (value.Equals("write"))
                return OAuth2Scope.Write;

            if (value.Equals("manage_bot"))
                return OAuth2Scope.ManageBot;

            throw new NotImplementedException($"Could not convert value to type OAuth2Scope: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="OAuth2Scope"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static OAuth2Scope? FromStringOrDefault(string value)
        {
            if (value.Equals("openid"))
                return OAuth2Scope.Openid;

            if (value.Equals("profile"))
                return OAuth2Scope.Profile;

            if (value.Equals("read"))
                return OAuth2Scope.Read;

            if (value.Equals("write"))
                return OAuth2Scope.Write;

            if (value.Equals("manage_bot"))
                return OAuth2Scope.ManageBot;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="OAuth2Scope"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(OAuth2Scope value)
        {
            if (value == OAuth2Scope.Openid)
                return "openid";

            if (value == OAuth2Scope.Profile)
                return "profile";

            if (value == OAuth2Scope.Read)
                return "read";

            if (value == OAuth2Scope.Write)
                return "write";

            if (value == OAuth2Scope.ManageBot)
                return "manage_bot";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="OAuth2Scope"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class OAuth2ScopeJsonConverter : JsonConverter<OAuth2Scope>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override OAuth2Scope Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            OAuth2Scope? result = rawValue == null
                ? null
                : OAuth2ScopeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the OAuth2Scope to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="oAuth2Scope"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, OAuth2Scope oAuth2Scope, JsonSerializerOptions options)
        {
            writer.WriteStringValue(oAuth2Scope.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="OAuth2Scope"/>
    /// </summary>
    public class OAuth2ScopeNullableJsonConverter : JsonConverter<OAuth2Scope?>
    {
        /// <summary>
        /// Returns a OAuth2Scope from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override OAuth2Scope? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            OAuth2Scope? result = rawValue == null
                ? null
                : OAuth2ScopeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="oAuth2Scope"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, OAuth2Scope? oAuth2Scope, JsonSerializerOptions options)
        {
            writer.WriteStringValue(oAuth2Scope?.ToString() ?? "null");
        }
    }


    /// <summary>
    /// The OAuth2ScopeSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(OAuth2Scope))]
    public partial class OAuth2ScopeSerializationContext : JsonSerializerContext { }
}
