// <auto-generated>
/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Traq.Client;

namespace Traq.Model
{
    /// <summary>
    /// ピン情報(メッセージ本体付き)
    /// </summary>
    public partial class Pin : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Pin" /> class.
        /// </summary>
        /// <param name="userId">ピン留めしたユーザーUUID</param>
        /// <param name="pinnedAt">ピン留めされた日時</param>
        /// <param name="message">message</param>
        [JsonConstructor]
        public Pin(Guid userId, DateTimeOffset pinnedAt, Message message)
        {
            UserId = userId;
            PinnedAt = pinnedAt;
            Message = message;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// ピン留めしたユーザーUUID
        /// </summary>
        /// <value>ピン留めしたユーザーUUID</value>
        [JsonPropertyName("userId")]
        public Guid UserId { get; set; }

        /// <summary>
        /// ピン留めされた日時
        /// </summary>
        /// <value>ピン留めされた日時</value>
        [JsonPropertyName("pinnedAt")]
        public DateTimeOffset PinnedAt { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [JsonPropertyName("message")]
        public Message Message { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Pin {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  PinnedAt: ").Append(PinnedAt).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Pin" />
    /// </summary>
    public class PinJsonConverter : JsonConverter<Pin>
    {
        /// <summary>
        /// The format to use to serialize PinnedAt
        /// </summary>
        public static string PinnedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="Pin" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Pin Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid?> userId = default;
            Option<DateTimeOffset?> pinnedAt = default;
            Option<Message?> message = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "userId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                userId = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        case "pinnedAt":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                pinnedAt = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "message":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                message = new Option<Message?>(JsonSerializer.Deserialize<Message>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!userId.IsSet)
                throw new ArgumentException("Property is required for class Pin.", nameof(userId));

            if (!pinnedAt.IsSet)
                throw new ArgumentException("Property is required for class Pin.", nameof(pinnedAt));

            if (!message.IsSet)
                throw new ArgumentException("Property is required for class Pin.", nameof(message));

            if (userId.IsSet && userId.Value == null)
                throw new ArgumentNullException(nameof(userId), "Property is not nullable for class Pin.");

            if (pinnedAt.IsSet && pinnedAt.Value == null)
                throw new ArgumentNullException(nameof(pinnedAt), "Property is not nullable for class Pin.");

            if (message.IsSet && message.Value == null)
                throw new ArgumentNullException(nameof(message), "Property is not nullable for class Pin.");

            return new Pin(userId.Value!.Value!, pinnedAt.Value!.Value!, message.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="Pin" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="pin"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Pin pin, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, pin, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Pin" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="pin"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Pin pin, JsonSerializerOptions jsonSerializerOptions)
        {
            if (pin.Message == null)
                throw new ArgumentNullException(nameof(pin.Message), "Property is required for class Pin.");

            writer.WriteString("userId", pin.UserId);

            writer.WriteString("pinnedAt", pin.PinnedAt.ToString(PinnedAtFormat));

            writer.WritePropertyName("message");
            JsonSerializer.Serialize(writer, pin.Message, jsonSerializerOptions);
        }
    }

    /// <summary>
    /// The PinSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(Pin))]
    public partial class PinSerializationContext : JsonSerializerContext { }
}
