// <auto-generated>
/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Traq.Client;

namespace Traq.Model
{
    /// <summary>
    /// メッセージ
    /// </summary>
    public partial class Message : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Message" /> class.
        /// </summary>
        /// <param name="id">メッセージUUID</param>
        /// <param name="userId">投稿者UUID</param>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="content">メッセージ本文</param>
        /// <param name="createdAt">投稿日時</param>
        /// <param name="updatedAt">編集日時</param>
        /// <param name="pinned">ピン留めされているかどうか</param>
        /// <param name="stamps">押されているスタンプの配列</param>
        /// <param name="threadId">スレッドUUID</param>
        [JsonConstructor]
        public Message(Guid id, Guid userId, Guid channelId, string content, DateTimeOffset createdAt, DateTimeOffset updatedAt, bool pinned, List<MessageStamp> stamps, Guid? threadId = default)
        {
            Id = id;
            UserId = userId;
            ChannelId = channelId;
            Content = content;
            CreatedAt = createdAt;
            UpdatedAt = updatedAt;
            Pinned = pinned;
            Stamps = stamps;
            ThreadId = threadId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// メッセージUUID
        /// </summary>
        /// <value>メッセージUUID</value>
        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        /// <summary>
        /// 投稿者UUID
        /// </summary>
        /// <value>投稿者UUID</value>
        [JsonPropertyName("userId")]
        public Guid UserId { get; set; }

        /// <summary>
        /// チャンネルUUID
        /// </summary>
        /// <value>チャンネルUUID</value>
        [JsonPropertyName("channelId")]
        public Guid ChannelId { get; set; }

        /// <summary>
        /// メッセージ本文
        /// </summary>
        /// <value>メッセージ本文</value>
        [JsonPropertyName("content")]
        public string Content { get; set; }

        /// <summary>
        /// 投稿日時
        /// </summary>
        /// <value>投稿日時</value>
        [JsonPropertyName("createdAt")]
        public DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// 編集日時
        /// </summary>
        /// <value>編集日時</value>
        [JsonPropertyName("updatedAt")]
        public DateTimeOffset UpdatedAt { get; set; }

        /// <summary>
        /// ピン留めされているかどうか
        /// </summary>
        /// <value>ピン留めされているかどうか</value>
        [JsonPropertyName("pinned")]
        public bool Pinned { get; set; }

        /// <summary>
        /// 押されているスタンプの配列
        /// </summary>
        /// <value>押されているスタンプの配列</value>
        [JsonPropertyName("stamps")]
        public List<MessageStamp> Stamps { get; set; }

        /// <summary>
        /// スレッドUUID
        /// </summary>
        /// <value>スレッドUUID</value>
        [JsonPropertyName("threadId")]
        public Guid? ThreadId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Message {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  ChannelId: ").Append(ChannelId).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Pinned: ").Append(Pinned).Append("\n");
            sb.Append("  Stamps: ").Append(Stamps).Append("\n");
            sb.Append("  ThreadId: ").Append(ThreadId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Message" />
    /// </summary>
    public class MessageJsonConverter : JsonConverter<Message>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdatedAt
        /// </summary>
        public static string UpdatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="Message" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Message Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid?> id = default;
            Option<Guid?> userId = default;
            Option<Guid?> channelId = default;
            Option<string?> content = default;
            Option<DateTimeOffset?> createdAt = default;
            Option<DateTimeOffset?> updatedAt = default;
            Option<bool?> pinned = default;
            Option<List<MessageStamp>?> stamps = default;
            Option<Guid?> threadId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        case "userId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                userId = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        case "channelId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                channelId = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        case "content":
                            content = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "createdAt":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createdAt = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "updatedAt":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                updatedAt = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "pinned":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                pinned = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "stamps":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                stamps = new Option<List<MessageStamp>?>(JsonSerializer.Deserialize<List<MessageStamp>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "threadId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                threadId = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class Message.", nameof(id));

            if (!userId.IsSet)
                throw new ArgumentException("Property is required for class Message.", nameof(userId));

            if (!channelId.IsSet)
                throw new ArgumentException("Property is required for class Message.", nameof(channelId));

            if (!content.IsSet)
                throw new ArgumentException("Property is required for class Message.", nameof(content));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class Message.", nameof(createdAt));

            if (!updatedAt.IsSet)
                throw new ArgumentException("Property is required for class Message.", nameof(updatedAt));

            if (!pinned.IsSet)
                throw new ArgumentException("Property is required for class Message.", nameof(pinned));

            if (!stamps.IsSet)
                throw new ArgumentException("Property is required for class Message.", nameof(stamps));

            if (!threadId.IsSet)
                throw new ArgumentException("Property is required for class Message.", nameof(threadId));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class Message.");

            if (userId.IsSet && userId.Value == null)
                throw new ArgumentNullException(nameof(userId), "Property is not nullable for class Message.");

            if (channelId.IsSet && channelId.Value == null)
                throw new ArgumentNullException(nameof(channelId), "Property is not nullable for class Message.");

            if (content.IsSet && content.Value == null)
                throw new ArgumentNullException(nameof(content), "Property is not nullable for class Message.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class Message.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class Message.");

            if (pinned.IsSet && pinned.Value == null)
                throw new ArgumentNullException(nameof(pinned), "Property is not nullable for class Message.");

            if (stamps.IsSet && stamps.Value == null)
                throw new ArgumentNullException(nameof(stamps), "Property is not nullable for class Message.");

            return new Message(id.Value!.Value!, userId.Value!.Value!, channelId.Value!.Value!, content.Value!, createdAt.Value!.Value!, updatedAt.Value!.Value!, pinned.Value!.Value!, stamps.Value!, threadId.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="Message" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="message"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Message message, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, message, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Message" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="message"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Message message, JsonSerializerOptions jsonSerializerOptions)
        {
            if (message.Content == null)
                throw new ArgumentNullException(nameof(message.Content), "Property is required for class Message.");

            if (message.Stamps == null)
                throw new ArgumentNullException(nameof(message.Stamps), "Property is required for class Message.");

            writer.WriteString("id", message.Id);

            writer.WriteString("userId", message.UserId);

            writer.WriteString("channelId", message.ChannelId);

            writer.WriteString("content", message.Content);

            writer.WriteString("createdAt", message.CreatedAt.ToString(CreatedAtFormat));

            writer.WriteString("updatedAt", message.UpdatedAt.ToString(UpdatedAtFormat));

            writer.WriteBoolean("pinned", message.Pinned);

            writer.WritePropertyName("stamps");
            JsonSerializer.Serialize(writer, message.Stamps, jsonSerializerOptions);
            if (message.ThreadId != null)
                writer.WriteString("threadId", message.ThreadId.Value);
            else
                writer.WriteNull("threadId");
        }
    }

    /// <summary>
    /// The MessageSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(Message))]
    public partial class MessageSerializationContext : JsonSerializerContext { }
}
