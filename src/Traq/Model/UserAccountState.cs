// <auto-generated>
/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Traq.Client;

namespace Traq.Model
{
    /// <summary>
    /// ユーザーアカウント状態 0: 停止 1: 有効 2: 一時停止
    /// </summary>
    /// <value>ユーザーアカウント状態 0: 停止 1: 有効 2: 一時停止</value>
    public enum UserAccountState
    {
        /// <summary>
        /// Enum deactivated for value: 0
        /// </summary>
        deactivated = 0,

        /// <summary>
        /// Enum active for value: 1
        /// </summary>
        active = 1,

        /// <summary>
        /// Enum suspended for value: 2
        /// </summary>
        suspended = 2
    }

    /// <summary>
    /// Converts <see cref="UserAccountState"/> to and from the JSON value
    /// </summary>
    public static class UserAccountStateValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="UserAccountState"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static UserAccountState FromString(string value)
        {
            if (value.Equals((0).ToString()))
                return UserAccountState.deactivated;

            if (value.Equals((1).ToString()))
                return UserAccountState.active;

            if (value.Equals((2).ToString()))
                return UserAccountState.suspended;

            throw new NotImplementedException($"Could not convert value to type UserAccountState: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="UserAccountState"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static UserAccountState? FromStringOrDefault(string value)
        {
            if (value.Equals((0).ToString()))
                return UserAccountState.deactivated;

            if (value.Equals((1).ToString()))
                return UserAccountState.active;

            if (value.Equals((2).ToString()))
                return UserAccountState.suspended;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="UserAccountState"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static int ToJsonValue(UserAccountState value)
        {
            return (int) value;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UserAccountState"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class UserAccountStateJsonConverter : JsonConverter<UserAccountState>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override UserAccountState Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            UserAccountState? result = rawValue == null
                ? null
                : UserAccountStateValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the UserAccountState to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userAccountState"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, UserAccountState userAccountState, JsonSerializerOptions options)
        {
            writer.WriteStringValue(userAccountState.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UserAccountState"/>
    /// </summary>
    public class UserAccountStateNullableJsonConverter : JsonConverter<UserAccountState?>
    {
        /// <summary>
        /// Returns a UserAccountState from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override UserAccountState? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            UserAccountState? result = rawValue == null
                ? null
                : UserAccountStateValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userAccountState"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, UserAccountState? userAccountState, JsonSerializerOptions options)
        {
            writer.WriteStringValue(userAccountState?.ToString() ?? "null");
        }
    }


    /// <summary>
    /// The UserAccountStateSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(UserAccountState))]
    public partial class UserAccountStateSerializationContext : JsonSerializerContext { }
}
