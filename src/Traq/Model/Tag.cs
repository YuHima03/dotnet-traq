/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Traq.Client.FileParameter;
using OpenAPIDateConverter = Traq.Client.OpenAPIDateConverter;

namespace Traq.Model
{
    /// <summary>
    /// タグ情報
    /// </summary>
    [DataContract(Name = "Tag")]
    public partial class Tag : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Tag" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Tag() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Tag" /> class.
        /// </summary>
        /// <param name="id">タグUUID (required).</param>
        /// <param name="varTag">タグ文字列 (required).</param>
        /// <param name="users">タグがつけられているユーザーのUUID配列 (required).</param>
        public Tag(Guid id = default(Guid), string varTag = default(string), List<Guid> users = default(List<Guid>))
        {
            this.Id = id;
            // to ensure "varTag" is required (not null)
            if (varTag == null)
            {
                throw new ArgumentNullException("varTag is a required property for Tag and cannot be null");
            }
            this.VarTag = varTag;
            // to ensure "users" is required (not null)
            if (users == null)
            {
                throw new ArgumentNullException("users is a required property for Tag and cannot be null");
            }
            this.Users = users;
        }

        /// <summary>
        /// タグUUID
        /// </summary>
        /// <value>タグUUID</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public Guid Id { get; set; }

        /// <summary>
        /// タグ文字列
        /// </summary>
        /// <value>タグ文字列</value>
        [DataMember(Name = "tag", IsRequired = true, EmitDefaultValue = true)]
        public string VarTag { get; set; }

        /// <summary>
        /// タグがつけられているユーザーのUUID配列
        /// </summary>
        /// <value>タグがつけられているユーザーのUUID配列</value>
        [DataMember(Name = "users", IsRequired = true, EmitDefaultValue = true)]
        public List<Guid> Users { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Tag {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  VarTag: ").Append(VarTag).Append("\n");
            sb.Append("  Users: ").Append(Users).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // VarTag (string) maxLength
            if (this.VarTag != null && this.VarTag.Length > 30)
            {
                yield return new ValidationResult("Invalid value for VarTag, length must be less than 30.", new[] { "VarTag" });
            }

            // VarTag (string) minLength
            if (this.VarTag != null && this.VarTag.Length < 1)
            {
                yield return new ValidationResult("Invalid value for VarTag, length must be greater than 1.", new[] { "VarTag" });
            }

            yield break;
        }
    }

}
