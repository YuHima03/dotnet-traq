// <auto-generated>
/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Traq.Client;

namespace Traq.Model
{
    /// <summary>
    /// BOTイベントログ
    /// </summary>
    public partial class BotEventLog : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BotEventLog" /> class.
        /// </summary>
        /// <param name="botId">BOT UUID</param>
        /// <param name="requestId">リクエストUUID</param>
        /// <param name="event">イベントタイプ</param>
        /// <param name="code">ステータスコード</param>
        /// <param name="datetime">イベント日時</param>
        /// <param name="result">result</param>
        [JsonConstructor]
        public BotEventLog(Guid botId, Guid requestId, string @event, int code, DateTimeOffset datetime, Option<BotEventResult?> result = default)
        {
            BotId = botId;
            RequestId = requestId;
            Event = @event;
            Code = code;
            Datetime = datetime;
            ResultOption = result;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Result
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<BotEventResult?> ResultOption { get; private set; }

        /// <summary>
        /// Gets or Sets Result
        /// </summary>
        [JsonPropertyName("result")]
        public BotEventResult? Result { get { return this.ResultOption; } set { this.ResultOption = new(value); } }

        /// <summary>
        /// BOT UUID
        /// </summary>
        /// <value>BOT UUID</value>
        [JsonPropertyName("botId")]
        public Guid BotId { get; set; }

        /// <summary>
        /// リクエストUUID
        /// </summary>
        /// <value>リクエストUUID</value>
        [JsonPropertyName("requestId")]
        public Guid RequestId { get; set; }

        /// <summary>
        /// イベントタイプ
        /// </summary>
        /// <value>イベントタイプ</value>
        [JsonPropertyName("event")]
        public string Event { get; set; }

        /// <summary>
        /// ステータスコード
        /// </summary>
        /// <value>ステータスコード</value>
        [JsonPropertyName("code")]
        public int Code { get; set; }

        /// <summary>
        /// イベント日時
        /// </summary>
        /// <value>イベント日時</value>
        [JsonPropertyName("datetime")]
        public DateTimeOffset Datetime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BotEventLog {\n");
            sb.Append("  BotId: ").Append(BotId).Append("\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  Event: ").Append(Event).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Datetime: ").Append(Datetime).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="BotEventLog" />
    /// </summary>
    public class BotEventLogJsonConverter : JsonConverter<BotEventLog>
    {
        /// <summary>
        /// The format to use to serialize Datetime
        /// </summary>
        public static string DatetimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="BotEventLog" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override BotEventLog Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid?> botId = default;
            Option<Guid?> requestId = default;
            Option<string?> varEvent = default;
            Option<int?> code = default;
            Option<DateTimeOffset?> datetime = default;
            Option<BotEventResult?> result = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "botId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                botId = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        case "requestId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                requestId = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        case "event":
                            varEvent = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "code":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                code = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "datetime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                datetime = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "result":
                            string? resultRawValue = utf8JsonReader.GetString();
                            if (resultRawValue != null)
                                result = new Option<BotEventResult?>(BotEventResultValueConverter.FromStringOrDefault(resultRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!botId.IsSet)
                throw new ArgumentException("Property is required for class BotEventLog.", nameof(botId));

            if (!requestId.IsSet)
                throw new ArgumentException("Property is required for class BotEventLog.", nameof(requestId));

            if (!varEvent.IsSet)
                throw new ArgumentException("Property is required for class BotEventLog.", nameof(varEvent));

            if (!code.IsSet)
                throw new ArgumentException("Property is required for class BotEventLog.", nameof(code));

            if (!datetime.IsSet)
                throw new ArgumentException("Property is required for class BotEventLog.", nameof(datetime));

            if (botId.IsSet && botId.Value == null)
                throw new ArgumentNullException(nameof(botId), "Property is not nullable for class BotEventLog.");

            if (requestId.IsSet && requestId.Value == null)
                throw new ArgumentNullException(nameof(requestId), "Property is not nullable for class BotEventLog.");

            if (varEvent.IsSet && varEvent.Value == null)
                throw new ArgumentNullException(nameof(varEvent), "Property is not nullable for class BotEventLog.");

            if (code.IsSet && code.Value == null)
                throw new ArgumentNullException(nameof(code), "Property is not nullable for class BotEventLog.");

            if (datetime.IsSet && datetime.Value == null)
                throw new ArgumentNullException(nameof(datetime), "Property is not nullable for class BotEventLog.");

            if (result.IsSet && result.Value == null)
                throw new ArgumentNullException(nameof(result), "Property is not nullable for class BotEventLog.");

            return new BotEventLog(botId.Value!.Value!, requestId.Value!.Value!, varEvent.Value!, code.Value!.Value!, datetime.Value!.Value!, result);
        }

        /// <summary>
        /// Serializes a <see cref="BotEventLog" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="botEventLog"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, BotEventLog botEventLog, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, botEventLog, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="BotEventLog" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="botEventLog"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, BotEventLog botEventLog, JsonSerializerOptions jsonSerializerOptions)
        {
            if (botEventLog.Event == null)
                throw new ArgumentNullException(nameof(botEventLog.Event), "Property is required for class BotEventLog.");

            writer.WriteString("botId", botEventLog.BotId);

            writer.WriteString("requestId", botEventLog.RequestId);

            writer.WriteString("event", botEventLog.Event);

            writer.WriteNumber("code", botEventLog.Code);

            writer.WriteString("datetime", botEventLog.Datetime.ToString(DatetimeFormat));

            if (botEventLog.ResultOption.IsSet)
            {
                var resultRawValue = BotEventResultValueConverter.ToJsonValue(botEventLog.Result!.Value);
                writer.WriteString("result", resultRawValue);
            }
        }
    }

    /// <summary>
    /// The BotEventLogSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(BotEventLog))]
    public partial class BotEventLogSerializationContext : JsonSerializerContext { }
}
