// <auto-generated>
/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Traq.Client;

namespace Traq.Model
{
    /// <summary>
    /// クリップ追加リクエスト
    /// </summary>
    public partial class PostClipFolderMessageRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PostClipFolderMessageRequest" /> class.
        /// </summary>
        /// <param name="messageId">メッセージUUID</param>
        [JsonConstructor]
        public PostClipFolderMessageRequest(Guid messageId)
        {
            MessageId = messageId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// メッセージUUID
        /// </summary>
        /// <value>メッセージUUID</value>
        [JsonPropertyName("messageId")]
        public Guid MessageId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PostClipFolderMessageRequest {\n");
            sb.Append("  MessageId: ").Append(MessageId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PostClipFolderMessageRequest" />
    /// </summary>
    public class PostClipFolderMessageRequestJsonConverter : JsonConverter<PostClipFolderMessageRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="PostClipFolderMessageRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PostClipFolderMessageRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid?> messageId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "messageId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                messageId = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!messageId.IsSet)
                throw new ArgumentException("Property is required for class PostClipFolderMessageRequest.", nameof(messageId));

            if (messageId.IsSet && messageId.Value == null)
                throw new ArgumentNullException(nameof(messageId), "Property is not nullable for class PostClipFolderMessageRequest.");

            return new PostClipFolderMessageRequest(messageId.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="PostClipFolderMessageRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="postClipFolderMessageRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PostClipFolderMessageRequest postClipFolderMessageRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, postClipFolderMessageRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PostClipFolderMessageRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="postClipFolderMessageRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PostClipFolderMessageRequest postClipFolderMessageRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteString("messageId", postClipFolderMessageRequest.MessageId);
        }
    }

    /// <summary>
    /// The PostClipFolderMessageRequestSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(PostClipFolderMessageRequest))]
    public partial class PostClipFolderMessageRequestSerializationContext : JsonSerializerContext { }
}
