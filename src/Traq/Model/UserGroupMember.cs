// <auto-generated>
/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Traq.Client;

namespace Traq.Model
{
    /// <summary>
    /// ユーザーグループメンバー
    /// </summary>
    public partial class UserGroupMember : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserGroupMember" /> class.
        /// </summary>
        /// <param name="id">ユーザーUUID</param>
        /// <param name="role">ユーザーの役割</param>
        [JsonConstructor]
        public UserGroupMember(Guid id, string role)
        {
            Id = id;
            Role = role;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// ユーザーUUID
        /// </summary>
        /// <value>ユーザーUUID</value>
        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        /// <summary>
        /// ユーザーの役割
        /// </summary>
        /// <value>ユーザーの役割</value>
        [JsonPropertyName("role")]
        public string Role { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserGroupMember {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Role (string) maxLength
            if (this.Role != null && this.Role.Length > 100)
            {
                yield return new ValidationResult("Invalid value for Role, length must be less than 100.", new [] { "Role" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UserGroupMember" />
    /// </summary>
    public class UserGroupMemberJsonConverter : JsonConverter<UserGroupMember>
    {
        /// <summary>
        /// Deserializes json to <see cref="UserGroupMember" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UserGroupMember Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid?> id = default;
            Option<string?> role = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        case "role":
                            role = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class UserGroupMember.", nameof(id));

            if (!role.IsSet)
                throw new ArgumentException("Property is required for class UserGroupMember.", nameof(role));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class UserGroupMember.");

            if (role.IsSet && role.Value == null)
                throw new ArgumentNullException(nameof(role), "Property is not nullable for class UserGroupMember.");

            return new UserGroupMember(id.Value!.Value!, role.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="UserGroupMember" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userGroupMember"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UserGroupMember userGroupMember, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, userGroupMember, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UserGroupMember" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userGroupMember"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, UserGroupMember userGroupMember, JsonSerializerOptions jsonSerializerOptions)
        {
            if (userGroupMember.Role == null)
                throw new ArgumentNullException(nameof(userGroupMember.Role), "Property is required for class UserGroupMember.");

            writer.WriteString("id", userGroupMember.Id);

            writer.WriteString("role", userGroupMember.Role);
        }
    }

    /// <summary>
    /// The UserGroupMemberSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(UserGroupMember))]
    public partial class UserGroupMemberSerializationContext : JsonSerializerContext { }
}
