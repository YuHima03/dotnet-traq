// <auto-generated>
/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Traq.Client;

namespace Traq.Model
{
    /// <summary>
    /// チャンネルイベント
    /// </summary>
    public partial class ChannelEvent : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelEvent" /> class.
        /// </summary>
        /// <param name="type">イベントタイプ</param>
        /// <param name="datetime">イベント日時</param>
        /// <param name="detail">detail</param>
        [JsonConstructor]
        public ChannelEvent(TypeEnum type, DateTimeOffset datetime, ChannelEventDetail detail)
        {
            Type = type;
            Datetime = datetime;
            Detail = detail;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// イベントタイプ
        /// </summary>
        /// <value>イベントタイプ</value>
        public enum TypeEnum
        {
            /// <summary>
            /// Enum TopicChanged for value: TopicChanged
            /// </summary>
            TopicChanged = 1,

            /// <summary>
            /// Enum SubscribersChanged for value: SubscribersChanged
            /// </summary>
            SubscribersChanged = 2,

            /// <summary>
            /// Enum PinAdded for value: PinAdded
            /// </summary>
            PinAdded = 3,

            /// <summary>
            /// Enum PinRemoved for value: PinRemoved
            /// </summary>
            PinRemoved = 4,

            /// <summary>
            /// Enum NameChanged for value: NameChanged
            /// </summary>
            NameChanged = 5,

            /// <summary>
            /// Enum ParentChanged for value: ParentChanged
            /// </summary>
            ParentChanged = 6,

            /// <summary>
            /// Enum VisibilityChanged for value: VisibilityChanged
            /// </summary>
            VisibilityChanged = 7,

            /// <summary>
            /// Enum ForcedNotificationChanged for value: ForcedNotificationChanged
            /// </summary>
            ForcedNotificationChanged = 8,

            /// <summary>
            /// Enum ChildCreated for value: ChildCreated
            /// </summary>
            ChildCreated = 9
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TypeEnum TypeEnumFromString(string value)
        {
            if (value.Equals("TopicChanged"))
                return TypeEnum.TopicChanged;

            if (value.Equals("SubscribersChanged"))
                return TypeEnum.SubscribersChanged;

            if (value.Equals("PinAdded"))
                return TypeEnum.PinAdded;

            if (value.Equals("PinRemoved"))
                return TypeEnum.PinRemoved;

            if (value.Equals("NameChanged"))
                return TypeEnum.NameChanged;

            if (value.Equals("ParentChanged"))
                return TypeEnum.ParentChanged;

            if (value.Equals("VisibilityChanged"))
                return TypeEnum.VisibilityChanged;

            if (value.Equals("ForcedNotificationChanged"))
                return TypeEnum.ForcedNotificationChanged;

            if (value.Equals("ChildCreated"))
                return TypeEnum.ChildCreated;

            throw new NotImplementedException($"Could not convert value to type TypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TypeEnum? TypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("TopicChanged"))
                return TypeEnum.TopicChanged;

            if (value.Equals("SubscribersChanged"))
                return TypeEnum.SubscribersChanged;

            if (value.Equals("PinAdded"))
                return TypeEnum.PinAdded;

            if (value.Equals("PinRemoved"))
                return TypeEnum.PinRemoved;

            if (value.Equals("NameChanged"))
                return TypeEnum.NameChanged;

            if (value.Equals("ParentChanged"))
                return TypeEnum.ParentChanged;

            if (value.Equals("VisibilityChanged"))
                return TypeEnum.VisibilityChanged;

            if (value.Equals("ForcedNotificationChanged"))
                return TypeEnum.ForcedNotificationChanged;

            if (value.Equals("ChildCreated"))
                return TypeEnum.ChildCreated;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TypeEnumToJsonValue(TypeEnum value)
        {
            if (value == TypeEnum.TopicChanged)
                return "TopicChanged";

            if (value == TypeEnum.SubscribersChanged)
                return "SubscribersChanged";

            if (value == TypeEnum.PinAdded)
                return "PinAdded";

            if (value == TypeEnum.PinRemoved)
                return "PinRemoved";

            if (value == TypeEnum.NameChanged)
                return "NameChanged";

            if (value == TypeEnum.ParentChanged)
                return "ParentChanged";

            if (value == TypeEnum.VisibilityChanged)
                return "VisibilityChanged";

            if (value == TypeEnum.ForcedNotificationChanged)
                return "ForcedNotificationChanged";

            if (value == TypeEnum.ChildCreated)
                return "ChildCreated";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// イベントタイプ
        /// </summary>
        /// <value>イベントタイプ</value>
        [JsonPropertyName("type")]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// イベント日時
        /// </summary>
        /// <value>イベント日時</value>
        [JsonPropertyName("datetime")]
        public DateTimeOffset Datetime { get; set; }

        /// <summary>
        /// Gets or Sets Detail
        /// </summary>
        [JsonPropertyName("detail")]
        public ChannelEventDetail Detail { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ChannelEvent {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Datetime: ").Append(Datetime).Append("\n");
            sb.Append("  Detail: ").Append(Detail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ChannelEvent" />
    /// </summary>
    public class ChannelEventJsonConverter : JsonConverter<ChannelEvent>
    {
        /// <summary>
        /// The format to use to serialize Datetime
        /// </summary>
        public static string DatetimeFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="ChannelEvent" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ChannelEvent Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<ChannelEvent.TypeEnum?> type = default;
            Option<DateTimeOffset?> datetime = default;
            Option<ChannelEventDetail?> detail = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<ChannelEvent.TypeEnum?>(ChannelEvent.TypeEnumFromStringOrDefault(typeRawValue));
                            break;
                        case "datetime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                datetime = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "detail":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                detail = new Option<ChannelEventDetail?>(JsonSerializer.Deserialize<ChannelEventDetail>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class ChannelEvent.", nameof(type));

            if (!datetime.IsSet)
                throw new ArgumentException("Property is required for class ChannelEvent.", nameof(datetime));

            if (!detail.IsSet)
                throw new ArgumentException("Property is required for class ChannelEvent.", nameof(detail));

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class ChannelEvent.");

            if (datetime.IsSet && datetime.Value == null)
                throw new ArgumentNullException(nameof(datetime), "Property is not nullable for class ChannelEvent.");

            if (detail.IsSet && detail.Value == null)
                throw new ArgumentNullException(nameof(detail), "Property is not nullable for class ChannelEvent.");

            return new ChannelEvent(type.Value!.Value!, datetime.Value!.Value!, detail.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="ChannelEvent" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="channelEvent"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ChannelEvent channelEvent, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, channelEvent, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ChannelEvent" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="channelEvent"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ChannelEvent channelEvent, JsonSerializerOptions jsonSerializerOptions)
        {
            if (channelEvent.Detail == null)
                throw new ArgumentNullException(nameof(channelEvent.Detail), "Property is required for class ChannelEvent.");

            var typeRawValue = ChannelEvent.TypeEnumToJsonValue(channelEvent.Type);
            writer.WriteString("type", typeRawValue);
            writer.WriteString("datetime", channelEvent.Datetime.ToString(DatetimeFormat));

            writer.WritePropertyName("detail");
            JsonSerializer.Serialize(writer, channelEvent.Detail, jsonSerializerOptions);
        }
    }

    /// <summary>
    /// The ChannelEventSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(ChannelEvent))]
    public partial class ChannelEventSerializationContext : JsonSerializerContext { }
}
