/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Traq.Client.FileParameter;
using OpenAPIDateConverter = Traq.Client.OpenAPIDateConverter;

namespace Traq.Model
{
    /// <summary>
    /// 自分のユーザー情報変更リクエスト
    /// </summary>
    [DataContract(Name = "PatchMeRequest")]
    public partial class PatchMeRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PatchMeRequest" /> class.
        /// </summary>
        /// <param name="displayName">新しい表示名.</param>
        /// <param name="twitterId">TwitterID.</param>
        /// <param name="bio">自己紹介(biography).</param>
        /// <param name="homeChannel">ホームチャンネルのUUID &#x60;00000000-0000-0000-0000-000000000000&#x60;を指定すると、ホームチャンネルが&#x60;null&#x60;に設定されます.</param>
        public PatchMeRequest(string displayName = default(string), string twitterId = default(string), string bio = default(string), Guid homeChannel = default(Guid))
        {
            this.DisplayName = displayName;
            this.TwitterId = twitterId;
            this.Bio = bio;
            this.HomeChannel = homeChannel;
        }

        /// <summary>
        /// 新しい表示名
        /// </summary>
        /// <value>新しい表示名</value>
        [DataMember(Name = "displayName", EmitDefaultValue = false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// TwitterID
        /// </summary>
        /// <value>TwitterID</value>
        [DataMember(Name = "twitterId", EmitDefaultValue = false)]
        public string TwitterId { get; set; }

        /// <summary>
        /// 自己紹介(biography)
        /// </summary>
        /// <value>自己紹介(biography)</value>
        [DataMember(Name = "bio", EmitDefaultValue = false)]
        public string Bio { get; set; }

        /// <summary>
        /// ホームチャンネルのUUID &#x60;00000000-0000-0000-0000-000000000000&#x60;を指定すると、ホームチャンネルが&#x60;null&#x60;に設定されます
        /// </summary>
        /// <value>ホームチャンネルのUUID &#x60;00000000-0000-0000-0000-000000000000&#x60;を指定すると、ホームチャンネルが&#x60;null&#x60;に設定されます</value>
        [DataMember(Name = "homeChannel", EmitDefaultValue = false)]
        public Guid HomeChannel { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PatchMeRequest {\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  TwitterId: ").Append(TwitterId).Append("\n");
            sb.Append("  Bio: ").Append(Bio).Append("\n");
            sb.Append("  HomeChannel: ").Append(HomeChannel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // DisplayName (string) maxLength
            if (this.DisplayName != null && this.DisplayName.Length > 32)
            {
                yield return new ValidationResult("Invalid value for DisplayName, length must be less than 32.", new [] { "DisplayName" });
            }

            // DisplayName (string) minLength
            if (this.DisplayName != null && this.DisplayName.Length < 0)
            {
                yield return new ValidationResult("Invalid value for DisplayName, length must be greater than 0.", new [] { "DisplayName" });
            }

            if (this.TwitterId != null) {
                // TwitterId (string) pattern
                Regex regexTwitterId = new Regex(@"^[a-zA-Z0-9_]{1,15}$", RegexOptions.CultureInvariant);
                if (!regexTwitterId.Match(this.TwitterId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TwitterId, must match a pattern of " + regexTwitterId, new [] { "TwitterId" });
                }
            }

            // Bio (string) maxLength
            if (this.Bio != null && this.Bio.Length > 1000)
            {
                yield return new ValidationResult("Invalid value for Bio, length must be less than 1000.", new [] { "Bio" });
            }

            yield break;
        }
    }

}
