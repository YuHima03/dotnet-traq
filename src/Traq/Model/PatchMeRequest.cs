// <auto-generated>
/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Traq.Client;

namespace Traq.Model
{
    /// <summary>
    /// 自分のユーザー情報変更リクエスト
    /// </summary>
    public partial class PatchMeRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PatchMeRequest" /> class.
        /// </summary>
        /// <param name="displayName">新しい表示名</param>
        /// <param name="twitterId">TwitterID</param>
        /// <param name="bio">自己紹介(biography)</param>
        /// <param name="homeChannel">ホームチャンネルのUUID &#x60;00000000-0000-0000-0000-000000000000&#x60;を指定すると、ホームチャンネルが&#x60;null&#x60;に設定されます</param>
        [JsonConstructor]
        public PatchMeRequest(Option<string?> displayName = default, Option<string?> twitterId = default, Option<string?> bio = default, Option<Guid?> homeChannel = default)
        {
            DisplayNameOption = displayName;
            TwitterIdOption = twitterId;
            BioOption = bio;
            HomeChannelOption = homeChannel;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of DisplayName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DisplayNameOption { get; private set; }

        /// <summary>
        /// 新しい表示名
        /// </summary>
        /// <value>新しい表示名</value>
        [JsonPropertyName("displayName")]
        public string? DisplayName { get { return this.DisplayNameOption; } set { this.DisplayNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of TwitterId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TwitterIdOption { get; private set; }

        /// <summary>
        /// TwitterID
        /// </summary>
        /// <value>TwitterID</value>
        [JsonPropertyName("twitterId")]
        public string? TwitterId { get { return this.TwitterIdOption; } set { this.TwitterIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Bio
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BioOption { get; private set; }

        /// <summary>
        /// 自己紹介(biography)
        /// </summary>
        /// <value>自己紹介(biography)</value>
        [JsonPropertyName("bio")]
        public string? Bio { get { return this.BioOption; } set { this.BioOption = new(value); } }

        /// <summary>
        /// Used to track the state of HomeChannel
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> HomeChannelOption { get; private set; }

        /// <summary>
        /// ホームチャンネルのUUID &#x60;00000000-0000-0000-0000-000000000000&#x60;を指定すると、ホームチャンネルが&#x60;null&#x60;に設定されます
        /// </summary>
        /// <value>ホームチャンネルのUUID &#x60;00000000-0000-0000-0000-000000000000&#x60;を指定すると、ホームチャンネルが&#x60;null&#x60;に設定されます</value>
        [JsonPropertyName("homeChannel")]
        public Guid? HomeChannel { get { return this.HomeChannelOption; } set { this.HomeChannelOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PatchMeRequest {\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  TwitterId: ").Append(TwitterId).Append("\n");
            sb.Append("  Bio: ").Append(Bio).Append("\n");
            sb.Append("  HomeChannel: ").Append(HomeChannel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // DisplayName (string) maxLength
            if (this.DisplayName != null && this.DisplayName.Length > 32)
            {
                yield return new ValidationResult("Invalid value for DisplayName, length must be less than 32.", new [] { "DisplayName" });
            }

            // DisplayName (string) minLength
            if (this.DisplayName != null && this.DisplayName.Length < 0)
            {
                yield return new ValidationResult("Invalid value for DisplayName, length must be greater than 0.", new [] { "DisplayName" });
            }

            if (this.TwitterIdOption.Value != null) {
                // TwitterId (string) pattern
                Regex regexTwitterId = new Regex(@"^[a-zA-Z0-9_]{1,15}$", RegexOptions.CultureInvariant);

                if (this.TwitterIdOption.Value != null &&!regexTwitterId.Match(this.TwitterIdOption.Value).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TwitterId, must match a pattern of " + regexTwitterId, new [] { "TwitterId" });
                }
            }

            // Bio (string) maxLength
            if (this.Bio != null && this.Bio.Length > 1000)
            {
                yield return new ValidationResult("Invalid value for Bio, length must be less than 1000.", new [] { "Bio" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PatchMeRequest" />
    /// </summary>
    public class PatchMeRequestJsonConverter : JsonConverter<PatchMeRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="PatchMeRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PatchMeRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> displayName = default;
            Option<string?> twitterId = default;
            Option<string?> bio = default;
            Option<Guid?> homeChannel = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "displayName":
                            displayName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "twitterId":
                            twitterId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "bio":
                            bio = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "homeChannel":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                homeChannel = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (displayName.IsSet && displayName.Value == null)
                throw new ArgumentNullException(nameof(displayName), "Property is not nullable for class PatchMeRequest.");

            if (twitterId.IsSet && twitterId.Value == null)
                throw new ArgumentNullException(nameof(twitterId), "Property is not nullable for class PatchMeRequest.");

            if (bio.IsSet && bio.Value == null)
                throw new ArgumentNullException(nameof(bio), "Property is not nullable for class PatchMeRequest.");

            if (homeChannel.IsSet && homeChannel.Value == null)
                throw new ArgumentNullException(nameof(homeChannel), "Property is not nullable for class PatchMeRequest.");

            return new PatchMeRequest(displayName, twitterId, bio, homeChannel);
        }

        /// <summary>
        /// Serializes a <see cref="PatchMeRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="patchMeRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PatchMeRequest patchMeRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, patchMeRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PatchMeRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="patchMeRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PatchMeRequest patchMeRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (patchMeRequest.DisplayNameOption.IsSet && patchMeRequest.DisplayName == null)
                throw new ArgumentNullException(nameof(patchMeRequest.DisplayName), "Property is required for class PatchMeRequest.");

            if (patchMeRequest.TwitterIdOption.IsSet && patchMeRequest.TwitterId == null)
                throw new ArgumentNullException(nameof(patchMeRequest.TwitterId), "Property is required for class PatchMeRequest.");

            if (patchMeRequest.BioOption.IsSet && patchMeRequest.Bio == null)
                throw new ArgumentNullException(nameof(patchMeRequest.Bio), "Property is required for class PatchMeRequest.");

            if (patchMeRequest.DisplayNameOption.IsSet)
                writer.WriteString("displayName", patchMeRequest.DisplayName);

            if (patchMeRequest.TwitterIdOption.IsSet)
                writer.WriteString("twitterId", patchMeRequest.TwitterId);

            if (patchMeRequest.BioOption.IsSet)
                writer.WriteString("bio", patchMeRequest.Bio);

            if (patchMeRequest.HomeChannelOption.IsSet)
                writer.WriteString("homeChannel", patchMeRequest.HomeChannelOption.Value!.Value);
        }
    }

    /// <summary>
    /// The PatchMeRequestSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(PatchMeRequest))]
    public partial class PatchMeRequestSerializationContext : JsonSerializerContext { }
}
