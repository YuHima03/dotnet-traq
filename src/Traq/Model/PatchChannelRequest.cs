// <auto-generated>
/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Traq.Client;

namespace Traq.Model
{
    /// <summary>
    /// チャンネル情報変更リクエスト
    /// </summary>
    public partial class PatchChannelRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PatchChannelRequest" /> class.
        /// </summary>
        /// <param name="name">チャンネル名</param>
        /// <param name="archived">アーカイブされているかどうか</param>
        /// <param name="force">強制通知チャンネルかどうか</param>
        /// <param name="parent">親チャンネルUUID</param>
        [JsonConstructor]
        public PatchChannelRequest(Option<string?> name = default, Option<bool?> archived = default, Option<bool?> force = default, Option<Guid?> parent = default)
        {
            NameOption = name;
            ArchivedOption = archived;
            ForceOption = force;
            ParentOption = parent;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// チャンネル名
        /// </summary>
        /// <value>チャンネル名</value>
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Archived
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ArchivedOption { get; private set; }

        /// <summary>
        /// アーカイブされているかどうか
        /// </summary>
        /// <value>アーカイブされているかどうか</value>
        [JsonPropertyName("archived")]
        public bool? Archived { get { return this.ArchivedOption; } set { this.ArchivedOption = new(value); } }

        /// <summary>
        /// Used to track the state of Force
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ForceOption { get; private set; }

        /// <summary>
        /// 強制通知チャンネルかどうか
        /// </summary>
        /// <value>強制通知チャンネルかどうか</value>
        [JsonPropertyName("force")]
        public bool? Force { get { return this.ForceOption; } set { this.ForceOption = new(value); } }

        /// <summary>
        /// Used to track the state of Parent
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> ParentOption { get; private set; }

        /// <summary>
        /// 親チャンネルUUID
        /// </summary>
        /// <value>親チャンネルUUID</value>
        [JsonPropertyName("parent")]
        public Guid? Parent { get { return this.ParentOption; } set { this.ParentOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PatchChannelRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Archived: ").Append(Archived).Append("\n");
            sb.Append("  Force: ").Append(Force).Append("\n");
            sb.Append("  Parent: ").Append(Parent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.NameOption.Value != null) {
                // Name (string) pattern
                Regex regexName = new Regex(@"^[a-zA-Z0-9-_]{1,20}$", RegexOptions.CultureInvariant);

                if (this.NameOption.Value != null &&!regexName.Match(this.NameOption.Value).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, must match a pattern of " + regexName, new [] { "Name" });
                }
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PatchChannelRequest" />
    /// </summary>
    public class PatchChannelRequestJsonConverter : JsonConverter<PatchChannelRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="PatchChannelRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PatchChannelRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> name = default;
            Option<bool?> archived = default;
            Option<bool?> force = default;
            Option<Guid?> parent = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "archived":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                archived = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "force":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                force = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "parent":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                parent = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class PatchChannelRequest.");

            if (archived.IsSet && archived.Value == null)
                throw new ArgumentNullException(nameof(archived), "Property is not nullable for class PatchChannelRequest.");

            if (force.IsSet && force.Value == null)
                throw new ArgumentNullException(nameof(force), "Property is not nullable for class PatchChannelRequest.");

            if (parent.IsSet && parent.Value == null)
                throw new ArgumentNullException(nameof(parent), "Property is not nullable for class PatchChannelRequest.");

            return new PatchChannelRequest(name, archived, force, parent);
        }

        /// <summary>
        /// Serializes a <see cref="PatchChannelRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="patchChannelRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PatchChannelRequest patchChannelRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, patchChannelRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PatchChannelRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="patchChannelRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PatchChannelRequest patchChannelRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (patchChannelRequest.NameOption.IsSet && patchChannelRequest.Name == null)
                throw new ArgumentNullException(nameof(patchChannelRequest.Name), "Property is required for class PatchChannelRequest.");

            if (patchChannelRequest.NameOption.IsSet)
                writer.WriteString("name", patchChannelRequest.Name);

            if (patchChannelRequest.ArchivedOption.IsSet)
                writer.WriteBoolean("archived", patchChannelRequest.ArchivedOption.Value!.Value);

            if (patchChannelRequest.ForceOption.IsSet)
                writer.WriteBoolean("force", patchChannelRequest.ForceOption.Value!.Value);

            if (patchChannelRequest.ParentOption.IsSet)
                writer.WriteString("parent", patchChannelRequest.ParentOption.Value!.Value);
        }
    }

    /// <summary>
    /// The PatchChannelRequestSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(PatchChannelRequest))]
    public partial class PatchChannelRequestSerializationContext : JsonSerializerContext { }
}
