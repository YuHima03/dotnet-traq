// <auto-generated>
/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Traq.Client;

namespace Traq.Model
{
    /// <summary>
    /// サムネイル情報 サムネイルが存在しない場合はnullになります Deprecated: thumbnailsを参照してください
    /// </summary>
    public partial class FileInfoThumbnail : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FileInfoThumbnail" /> class.
        /// </summary>
        /// <param name="mime">MIMEタイプ</param>
        /// <param name="width">サムネイル幅</param>
        /// <param name="height">サムネイル高さ</param>
        [JsonConstructor]
        public FileInfoThumbnail(string mime, Option<int?> width = default, Option<int?> height = default)
        {
            Mime = mime;
            WidthOption = width;
            HeightOption = height;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// MIMEタイプ
        /// </summary>
        /// <value>MIMEタイプ</value>
        [JsonPropertyName("mime")]
        [Obsolete]
        public string Mime { get; set; }

        /// <summary>
        /// Used to track the state of Width
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> WidthOption { get; private set; }

        /// <summary>
        /// サムネイル幅
        /// </summary>
        /// <value>サムネイル幅</value>
        [JsonPropertyName("width")]
        [Obsolete]
        public int? Width { get { return this.WidthOption; } set { this.WidthOption = new(value); } }

        /// <summary>
        /// Used to track the state of Height
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> HeightOption { get; private set; }

        /// <summary>
        /// サムネイル高さ
        /// </summary>
        /// <value>サムネイル高さ</value>
        [JsonPropertyName("height")]
        [Obsolete]
        public int? Height { get { return this.HeightOption; } set { this.HeightOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FileInfoThumbnail {\n");
            sb.Append("  Mime: ").Append(Mime).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="FileInfoThumbnail" />
    /// </summary>
    public class FileInfoThumbnailJsonConverter : JsonConverter<FileInfoThumbnail>
    {
        /// <summary>
        /// Deserializes json to <see cref="FileInfoThumbnail" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override FileInfoThumbnail Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> mime = default;
            Option<int?> width = default;
            Option<int?> height = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "mime":
                            mime = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "width":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                width = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "height":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                height = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!mime.IsSet)
                throw new ArgumentException("Property is required for class FileInfoThumbnail.", nameof(mime));

            if (mime.IsSet && mime.Value == null)
                throw new ArgumentNullException(nameof(mime), "Property is not nullable for class FileInfoThumbnail.");

            if (width.IsSet && width.Value == null)
                throw new ArgumentNullException(nameof(width), "Property is not nullable for class FileInfoThumbnail.");

            if (height.IsSet && height.Value == null)
                throw new ArgumentNullException(nameof(height), "Property is not nullable for class FileInfoThumbnail.");

            return new FileInfoThumbnail(mime.Value!, width, height);
        }

        /// <summary>
        /// Serializes a <see cref="FileInfoThumbnail" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="fileInfoThumbnail"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, FileInfoThumbnail fileInfoThumbnail, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, fileInfoThumbnail, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="FileInfoThumbnail" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="fileInfoThumbnail"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, FileInfoThumbnail fileInfoThumbnail, JsonSerializerOptions jsonSerializerOptions)
        {
            if (fileInfoThumbnail.Mime == null)
                throw new ArgumentNullException(nameof(fileInfoThumbnail.Mime), "Property is required for class FileInfoThumbnail.");

            writer.WriteString("mime", fileInfoThumbnail.Mime);

            if (fileInfoThumbnail.WidthOption.IsSet)
                writer.WriteNumber("width", fileInfoThumbnail.WidthOption.Value!.Value);

            if (fileInfoThumbnail.HeightOption.IsSet)
                writer.WriteNumber("height", fileInfoThumbnail.HeightOption.Value!.Value);
        }
    }

    /// <summary>
    /// The FileInfoThumbnailSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(FileInfoThumbnail))]
    public partial class FileInfoThumbnailSerializationContext : JsonSerializerContext { }
}
