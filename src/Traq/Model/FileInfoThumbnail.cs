/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = DotnetTraq.Client.FileParameter;
using OpenAPIDateConverter = DotnetTraq.Client.OpenAPIDateConverter;

namespace DotnetTraq.Model
{
    /// <summary>
    /// サムネイル情報 サムネイルが存在しない場合はnullになります Deprecated: thumbnailsを参照してください
    /// </summary>
    [DataContract(Name = "FileInfo_thumbnail")]
    public partial class FileInfoThumbnail : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FileInfoThumbnail" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FileInfoThumbnail() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FileInfoThumbnail" /> class.
        /// </summary>
        /// <param name="mime">MIMEタイプ (required).</param>
        /// <param name="width">サムネイル幅.</param>
        /// <param name="height">サムネイル高さ.</param>
        public FileInfoThumbnail(string mime = default(string), int width = default(int), int height = default(int))
        {
            // to ensure "mime" is required (not null)
            if (mime == null)
            {
                throw new ArgumentNullException("mime is a required property for FileInfoThumbnail and cannot be null");
            }
            this.Mime = mime;
            this.Width = width;
            this.Height = height;
        }

        /// <summary>
        /// MIMEタイプ
        /// </summary>
        /// <value>MIMEタイプ</value>
        [DataMember(Name = "mime", IsRequired = true, EmitDefaultValue = true)]
        [Obsolete]
        public string Mime { get; set; }

        /// <summary>
        /// サムネイル幅
        /// </summary>
        /// <value>サムネイル幅</value>
        [DataMember(Name = "width", EmitDefaultValue = false)]
        [Obsolete]
        public int Width { get; set; }

        /// <summary>
        /// サムネイル高さ
        /// </summary>
        /// <value>サムネイル高さ</value>
        [DataMember(Name = "height", EmitDefaultValue = false)]
        [Obsolete]
        public int Height { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FileInfoThumbnail {\n");
            sb.Append("  Mime: ").Append(Mime).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
