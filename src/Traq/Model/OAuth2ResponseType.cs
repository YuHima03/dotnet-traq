// <auto-generated>
/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Traq.Client;

namespace Traq.Model
{
    /// <summary>
    /// Defines OAuth2ResponseType
    /// </summary>
    public enum OAuth2ResponseType
    {
        /// <summary>
        /// Enum Code for value: code
        /// </summary>
        Code = 1,

        /// <summary>
        /// Enum Token for value: token
        /// </summary>
        Token = 2,

        /// <summary>
        /// Enum None for value: none
        /// </summary>
        None = 3
    }

    /// <summary>
    /// Converts <see cref="OAuth2ResponseType"/> to and from the JSON value
    /// </summary>
    public static class OAuth2ResponseTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="OAuth2ResponseType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static OAuth2ResponseType FromString(string value)
        {
            if (value.Equals("code"))
                return OAuth2ResponseType.Code;

            if (value.Equals("token"))
                return OAuth2ResponseType.Token;

            if (value.Equals("none"))
                return OAuth2ResponseType.None;

            throw new NotImplementedException($"Could not convert value to type OAuth2ResponseType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="OAuth2ResponseType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static OAuth2ResponseType? FromStringOrDefault(string value)
        {
            if (value.Equals("code"))
                return OAuth2ResponseType.Code;

            if (value.Equals("token"))
                return OAuth2ResponseType.Token;

            if (value.Equals("none"))
                return OAuth2ResponseType.None;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="OAuth2ResponseType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(OAuth2ResponseType value)
        {
            if (value == OAuth2ResponseType.Code)
                return "code";

            if (value == OAuth2ResponseType.Token)
                return "token";

            if (value == OAuth2ResponseType.None)
                return "none";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="OAuth2ResponseType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class OAuth2ResponseTypeJsonConverter : JsonConverter<OAuth2ResponseType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override OAuth2ResponseType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            OAuth2ResponseType? result = rawValue == null
                ? null
                : OAuth2ResponseTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the OAuth2ResponseType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="oAuth2ResponseType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, OAuth2ResponseType oAuth2ResponseType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(oAuth2ResponseType.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="OAuth2ResponseType"/>
    /// </summary>
    public class OAuth2ResponseTypeNullableJsonConverter : JsonConverter<OAuth2ResponseType?>
    {
        /// <summary>
        /// Returns a OAuth2ResponseType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override OAuth2ResponseType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            OAuth2ResponseType? result = rawValue == null
                ? null
                : OAuth2ResponseTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="oAuth2ResponseType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, OAuth2ResponseType? oAuth2ResponseType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(oAuth2ResponseType?.ToString() ?? "null");
        }
    }


    /// <summary>
    /// The OAuth2ResponseTypeSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(OAuth2ResponseType))]
    public partial class OAuth2ResponseTypeSerializationContext : JsonSerializerContext { }
}
