// <auto-generated>
/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Traq.Client;

namespace Traq.Model
{
    /// <summary>
    /// スタンプパレット情報
    /// </summary>
    public partial class StampPalette : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StampPalette" /> class.
        /// </summary>
        /// <param name="id">スタンプパレットUUID</param>
        /// <param name="name">パレット名</param>
        /// <param name="stamps">パレット内のスタンプのUUID配列</param>
        /// <param name="creatorId">作成者UUID</param>
        /// <param name="createdAt">パレット作成日時</param>
        /// <param name="updatedAt">パレット更新日時</param>
        /// <param name="description">パレット説明</param>
        [JsonConstructor]
        public StampPalette(Guid id, string name, List<Guid> stamps, Guid creatorId, DateTimeOffset createdAt, DateTimeOffset updatedAt, string description)
        {
            Id = id;
            Name = name;
            Stamps = stamps;
            CreatorId = creatorId;
            CreatedAt = createdAt;
            UpdatedAt = updatedAt;
            Description = description;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// スタンプパレットUUID
        /// </summary>
        /// <value>スタンプパレットUUID</value>
        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        /// <summary>
        /// パレット名
        /// </summary>
        /// <value>パレット名</value>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// パレット内のスタンプのUUID配列
        /// </summary>
        /// <value>パレット内のスタンプのUUID配列</value>
        [JsonPropertyName("stamps")]
        public List<Guid> Stamps { get; set; }

        /// <summary>
        /// 作成者UUID
        /// </summary>
        /// <value>作成者UUID</value>
        [JsonPropertyName("creatorId")]
        public Guid CreatorId { get; set; }

        /// <summary>
        /// パレット作成日時
        /// </summary>
        /// <value>パレット作成日時</value>
        [JsonPropertyName("createdAt")]
        public DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// パレット更新日時
        /// </summary>
        /// <value>パレット更新日時</value>
        [JsonPropertyName("updatedAt")]
        public DateTimeOffset UpdatedAt { get; set; }

        /// <summary>
        /// パレット説明
        /// </summary>
        /// <value>パレット説明</value>
        [JsonPropertyName("description")]
        public string Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StampPalette {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Stamps: ").Append(Stamps).Append("\n");
            sb.Append("  CreatorId: ").Append(CreatorId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 30)
            {
                yield return new ValidationResult("Invalid value for Name, length must be less than 30.", new [] { "Name" });
            }

            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 1000)
            {
                yield return new ValidationResult("Invalid value for Description, length must be less than 1000.", new [] { "Description" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="StampPalette" />
    /// </summary>
    public class StampPaletteJsonConverter : JsonConverter<StampPalette>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdatedAt
        /// </summary>
        public static string UpdatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="StampPalette" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override StampPalette Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid?> id = default;
            Option<string?> name = default;
            Option<List<Guid>?> stamps = default;
            Option<Guid?> creatorId = default;
            Option<DateTimeOffset?> createdAt = default;
            Option<DateTimeOffset?> updatedAt = default;
            Option<string?> description = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "stamps":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                stamps = new Option<List<Guid>?>(JsonSerializer.Deserialize<List<Guid>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "creatorId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                creatorId = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        case "createdAt":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createdAt = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "updatedAt":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                updatedAt = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class StampPalette.", nameof(id));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class StampPalette.", nameof(name));

            if (!stamps.IsSet)
                throw new ArgumentException("Property is required for class StampPalette.", nameof(stamps));

            if (!creatorId.IsSet)
                throw new ArgumentException("Property is required for class StampPalette.", nameof(creatorId));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class StampPalette.", nameof(createdAt));

            if (!updatedAt.IsSet)
                throw new ArgumentException("Property is required for class StampPalette.", nameof(updatedAt));

            if (!description.IsSet)
                throw new ArgumentException("Property is required for class StampPalette.", nameof(description));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class StampPalette.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class StampPalette.");

            if (stamps.IsSet && stamps.Value == null)
                throw new ArgumentNullException(nameof(stamps), "Property is not nullable for class StampPalette.");

            if (creatorId.IsSet && creatorId.Value == null)
                throw new ArgumentNullException(nameof(creatorId), "Property is not nullable for class StampPalette.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class StampPalette.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class StampPalette.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class StampPalette.");

            return new StampPalette(id.Value!.Value!, name.Value!, stamps.Value!, creatorId.Value!.Value!, createdAt.Value!.Value!, updatedAt.Value!.Value!, description.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="StampPalette" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="stampPalette"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, StampPalette stampPalette, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, stampPalette, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="StampPalette" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="stampPalette"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, StampPalette stampPalette, JsonSerializerOptions jsonSerializerOptions)
        {
            if (stampPalette.Name == null)
                throw new ArgumentNullException(nameof(stampPalette.Name), "Property is required for class StampPalette.");

            if (stampPalette.Stamps == null)
                throw new ArgumentNullException(nameof(stampPalette.Stamps), "Property is required for class StampPalette.");

            if (stampPalette.Description == null)
                throw new ArgumentNullException(nameof(stampPalette.Description), "Property is required for class StampPalette.");

            writer.WriteString("id", stampPalette.Id);

            writer.WriteString("name", stampPalette.Name);

            writer.WritePropertyName("stamps");
            JsonSerializer.Serialize(writer, stampPalette.Stamps, jsonSerializerOptions);
            writer.WriteString("creatorId", stampPalette.CreatorId);

            writer.WriteString("createdAt", stampPalette.CreatedAt.ToString(CreatedAtFormat));

            writer.WriteString("updatedAt", stampPalette.UpdatedAt.ToString(UpdatedAtFormat));

            writer.WriteString("description", stampPalette.Description);
        }
    }

    /// <summary>
    /// The StampPaletteSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(StampPalette))]
    public partial class StampPaletteSerializationContext : JsonSerializerContext { }
}
