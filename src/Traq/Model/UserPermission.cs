// <auto-generated>
/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Traq.Client;

namespace Traq.Model
{
    /// <summary>
    /// ユーザー権限
    /// </summary>
    /// <value>ユーザー権限</value>
    public enum UserPermission
    {
        /// <summary>
        /// Enum GetWebhook for value: get_webhook
        /// </summary>
        GetWebhook = 1,

        /// <summary>
        /// Enum CreateWebhook for value: create_webhook
        /// </summary>
        CreateWebhook = 2,

        /// <summary>
        /// Enum EditWebhook for value: edit_webhook
        /// </summary>
        EditWebhook = 3,

        /// <summary>
        /// Enum DeleteWebhook for value: delete_webhook
        /// </summary>
        DeleteWebhook = 4,

        /// <summary>
        /// Enum AccessOthersWebhook for value: access_others_webhook
        /// </summary>
        AccessOthersWebhook = 5,

        /// <summary>
        /// Enum GetBot for value: get_bot
        /// </summary>
        GetBot = 6,

        /// <summary>
        /// Enum CreateBot for value: create_bot
        /// </summary>
        CreateBot = 7,

        /// <summary>
        /// Enum EditBot for value: edit_bot
        /// </summary>
        EditBot = 8,

        /// <summary>
        /// Enum DeleteBot for value: delete_bot
        /// </summary>
        DeleteBot = 9,

        /// <summary>
        /// Enum AccessOthersBot for value: access_others_bot
        /// </summary>
        AccessOthersBot = 10,

        /// <summary>
        /// Enum BotActionJoinChannel for value: bot_action_join_channel
        /// </summary>
        BotActionJoinChannel = 11,

        /// <summary>
        /// Enum BotActionLeaveChannel for value: bot_action_leave_channel
        /// </summary>
        BotActionLeaveChannel = 12,

        /// <summary>
        /// Enum CreateChannel for value: create_channel
        /// </summary>
        CreateChannel = 13,

        /// <summary>
        /// Enum GetChannel for value: get_channel
        /// </summary>
        GetChannel = 14,

        /// <summary>
        /// Enum EditChannel for value: edit_channel
        /// </summary>
        EditChannel = 15,

        /// <summary>
        /// Enum DeleteChannel for value: delete_channel
        /// </summary>
        DeleteChannel = 16,

        /// <summary>
        /// Enum ChangeParentChannel for value: change_parent_channel
        /// </summary>
        ChangeParentChannel = 17,

        /// <summary>
        /// Enum EditChannelTopic for value: edit_channel_topic
        /// </summary>
        EditChannelTopic = 18,

        /// <summary>
        /// Enum GetChannelStar for value: get_channel_star
        /// </summary>
        GetChannelStar = 19,

        /// <summary>
        /// Enum EditChannelStar for value: edit_channel_star
        /// </summary>
        EditChannelStar = 20,

        /// <summary>
        /// Enum GetMyTokens for value: get_my_tokens
        /// </summary>
        GetMyTokens = 21,

        /// <summary>
        /// Enum RevokeMyToken for value: revoke_my_token
        /// </summary>
        RevokeMyToken = 22,

        /// <summary>
        /// Enum GetClients for value: get_clients
        /// </summary>
        GetClients = 23,

        /// <summary>
        /// Enum CreateClient for value: create_client
        /// </summary>
        CreateClient = 24,

        /// <summary>
        /// Enum EditMyClient for value: edit_my_client
        /// </summary>
        EditMyClient = 25,

        /// <summary>
        /// Enum DeleteMyClient for value: delete_my_client
        /// </summary>
        DeleteMyClient = 26,

        /// <summary>
        /// Enum ManageOthersClient for value: manage_others_client
        /// </summary>
        ManageOthersClient = 27,

        /// <summary>
        /// Enum UploadFile for value: upload_file
        /// </summary>
        UploadFile = 28,

        /// <summary>
        /// Enum DownloadFile for value: download_file
        /// </summary>
        DownloadFile = 29,

        /// <summary>
        /// Enum DeleteFile for value: delete_file
        /// </summary>
        DeleteFile = 30,

        /// <summary>
        /// Enum GetMessage for value: get_message
        /// </summary>
        GetMessage = 31,

        /// <summary>
        /// Enum PostMessage for value: post_message
        /// </summary>
        PostMessage = 32,

        /// <summary>
        /// Enum EditMessage for value: edit_message
        /// </summary>
        EditMessage = 33,

        /// <summary>
        /// Enum DeleteMessage for value: delete_message
        /// </summary>
        DeleteMessage = 34,

        /// <summary>
        /// Enum ReportMessage for value: report_message
        /// </summary>
        ReportMessage = 35,

        /// <summary>
        /// Enum GetMessageReports for value: get_message_reports
        /// </summary>
        GetMessageReports = 36,

        /// <summary>
        /// Enum CreateMessagePin for value: create_message_pin
        /// </summary>
        CreateMessagePin = 37,

        /// <summary>
        /// Enum DeleteMessagePin for value: delete_message_pin
        /// </summary>
        DeleteMessagePin = 38,

        /// <summary>
        /// Enum GetChannelSubscription for value: get_channel_subscription
        /// </summary>
        GetChannelSubscription = 39,

        /// <summary>
        /// Enum EditChannelSubscription for value: edit_channel_subscription
        /// </summary>
        EditChannelSubscription = 40,

        /// <summary>
        /// Enum ConnectNotificationStream for value: connect_notification_stream
        /// </summary>
        ConnectNotificationStream = 41,

        /// <summary>
        /// Enum RegisterFCMDevice for value: register_fcm_device
        /// </summary>
        RegisterFCMDevice = 42,

        /// <summary>
        /// Enum GetStamp for value: get_stamp
        /// </summary>
        GetStamp = 43,

        /// <summary>
        /// Enum CreateStamp for value: create_stamp
        /// </summary>
        CreateStamp = 44,

        /// <summary>
        /// Enum EditStamp for value: edit_stamp
        /// </summary>
        EditStamp = 45,

        /// <summary>
        /// Enum EditStampCreatedByOthers for value: edit_stamp_created_by_others
        /// </summary>
        EditStampCreatedByOthers = 46,

        /// <summary>
        /// Enum DeleteStamp for value: delete_stamp
        /// </summary>
        DeleteStamp = 47,

        /// <summary>
        /// Enum DeleteMyStamp for value: delete_my_stamp
        /// </summary>
        DeleteMyStamp = 48,

        /// <summary>
        /// Enum AddMessageStamp for value: add_message_stamp
        /// </summary>
        AddMessageStamp = 49,

        /// <summary>
        /// Enum RemoveMessageStamp for value: remove_message_stamp
        /// </summary>
        RemoveMessageStamp = 50,

        /// <summary>
        /// Enum GetMyStampHistory for value: get_my_stamp_history
        /// </summary>
        GetMyStampHistory = 51,

        /// <summary>
        /// Enum GetStampPalette for value: get_stamp_palette
        /// </summary>
        GetStampPalette = 52,

        /// <summary>
        /// Enum CreateStampPalette for value: create_stamp_palette
        /// </summary>
        CreateStampPalette = 53,

        /// <summary>
        /// Enum EditStampPalette for value: edit_stamp_palette
        /// </summary>
        EditStampPalette = 54,

        /// <summary>
        /// Enum DeleteStampPalette for value: delete_stamp_palette
        /// </summary>
        DeleteStampPalette = 55,

        /// <summary>
        /// Enum GetUser for value: get_user
        /// </summary>
        GetUser = 56,

        /// <summary>
        /// Enum RegisterUser for value: register_user
        /// </summary>
        RegisterUser = 57,

        /// <summary>
        /// Enum GetMe for value: get_me
        /// </summary>
        GetMe = 58,

        /// <summary>
        /// Enum GetOIDCUserInfo for value: get_oidc_userinfo
        /// </summary>
        GetOIDCUserInfo = 59,

        /// <summary>
        /// Enum EditMe for value: edit_me
        /// </summary>
        EditMe = 60,

        /// <summary>
        /// Enum ChangeMyIcon for value: change_my_icon
        /// </summary>
        ChangeMyIcon = 61,

        /// <summary>
        /// Enum ChangeMyPassword for value: change_my_password
        /// </summary>
        ChangeMyPassword = 62,

        /// <summary>
        /// Enum EditOtherUsers for value: edit_other_users
        /// </summary>
        EditOtherUsers = 63,

        /// <summary>
        /// Enum GetUserQRCode for value: get_user_qr_code
        /// </summary>
        GetUserQRCode = 64,

        /// <summary>
        /// Enum GetUserTag for value: get_user_tag
        /// </summary>
        GetUserTag = 65,

        /// <summary>
        /// Enum EditUserTag for value: edit_user_tag
        /// </summary>
        EditUserTag = 66,

        /// <summary>
        /// Enum GetUserGroup for value: get_user_group
        /// </summary>
        GetUserGroup = 67,

        /// <summary>
        /// Enum CreateUserGroup for value: create_user_group
        /// </summary>
        CreateUserGroup = 68,

        /// <summary>
        /// Enum CreateSpecialUserGroup for value: create_special_user_group
        /// </summary>
        CreateSpecialUserGroup = 69,

        /// <summary>
        /// Enum EditUserGroup for value: edit_user_group
        /// </summary>
        EditUserGroup = 70,

        /// <summary>
        /// Enum DeleteUserGroup for value: delete_user_group
        /// </summary>
        DeleteUserGroup = 71,

        /// <summary>
        /// Enum AllUserGroupsAdmin for value: edit_others_user_group
        /// </summary>
        AllUserGroupsAdmin = 72,

        /// <summary>
        /// Enum WebRTC for value: web_rtc
        /// </summary>
        WebRTC = 73,

        /// <summary>
        /// Enum GetMySessions for value: get_my_sessions
        /// </summary>
        GetMySessions = 74,

        /// <summary>
        /// Enum DeleteMySessions for value: delete_my_sessions
        /// </summary>
        DeleteMySessions = 75,

        /// <summary>
        /// Enum GetMyExternalAccount for value: get_my_external_account
        /// </summary>
        GetMyExternalAccount = 76,

        /// <summary>
        /// Enum EditMyExternalAccount for value: edit_my_external_account
        /// </summary>
        EditMyExternalAccount = 77,

        /// <summary>
        /// Enum GetUnread for value: get_unread
        /// </summary>
        GetUnread = 78,

        /// <summary>
        /// Enum DeleteUnread for value: delete_unread
        /// </summary>
        DeleteUnread = 79,

        /// <summary>
        /// Enum GetClipFolder for value: get_clip_folder
        /// </summary>
        GetClipFolder = 80,

        /// <summary>
        /// Enum CreateClipFolder for value: create_clip_folder
        /// </summary>
        CreateClipFolder = 81,

        /// <summary>
        /// Enum EditClipFolder for value: edit_clip_folder
        /// </summary>
        EditClipFolder = 82,

        /// <summary>
        /// Enum DeleteClipFolder for value: delete_clip_folder
        /// </summary>
        DeleteClipFolder = 83
    }

    /// <summary>
    /// Converts <see cref="UserPermission"/> to and from the JSON value
    /// </summary>
    public static class UserPermissionValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="UserPermission"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static UserPermission FromString(string value)
        {
            if (value.Equals("get_webhook"))
                return UserPermission.GetWebhook;

            if (value.Equals("create_webhook"))
                return UserPermission.CreateWebhook;

            if (value.Equals("edit_webhook"))
                return UserPermission.EditWebhook;

            if (value.Equals("delete_webhook"))
                return UserPermission.DeleteWebhook;

            if (value.Equals("access_others_webhook"))
                return UserPermission.AccessOthersWebhook;

            if (value.Equals("get_bot"))
                return UserPermission.GetBot;

            if (value.Equals("create_bot"))
                return UserPermission.CreateBot;

            if (value.Equals("edit_bot"))
                return UserPermission.EditBot;

            if (value.Equals("delete_bot"))
                return UserPermission.DeleteBot;

            if (value.Equals("access_others_bot"))
                return UserPermission.AccessOthersBot;

            if (value.Equals("bot_action_join_channel"))
                return UserPermission.BotActionJoinChannel;

            if (value.Equals("bot_action_leave_channel"))
                return UserPermission.BotActionLeaveChannel;

            if (value.Equals("create_channel"))
                return UserPermission.CreateChannel;

            if (value.Equals("get_channel"))
                return UserPermission.GetChannel;

            if (value.Equals("edit_channel"))
                return UserPermission.EditChannel;

            if (value.Equals("delete_channel"))
                return UserPermission.DeleteChannel;

            if (value.Equals("change_parent_channel"))
                return UserPermission.ChangeParentChannel;

            if (value.Equals("edit_channel_topic"))
                return UserPermission.EditChannelTopic;

            if (value.Equals("get_channel_star"))
                return UserPermission.GetChannelStar;

            if (value.Equals("edit_channel_star"))
                return UserPermission.EditChannelStar;

            if (value.Equals("get_my_tokens"))
                return UserPermission.GetMyTokens;

            if (value.Equals("revoke_my_token"))
                return UserPermission.RevokeMyToken;

            if (value.Equals("get_clients"))
                return UserPermission.GetClients;

            if (value.Equals("create_client"))
                return UserPermission.CreateClient;

            if (value.Equals("edit_my_client"))
                return UserPermission.EditMyClient;

            if (value.Equals("delete_my_client"))
                return UserPermission.DeleteMyClient;

            if (value.Equals("manage_others_client"))
                return UserPermission.ManageOthersClient;

            if (value.Equals("upload_file"))
                return UserPermission.UploadFile;

            if (value.Equals("download_file"))
                return UserPermission.DownloadFile;

            if (value.Equals("delete_file"))
                return UserPermission.DeleteFile;

            if (value.Equals("get_message"))
                return UserPermission.GetMessage;

            if (value.Equals("post_message"))
                return UserPermission.PostMessage;

            if (value.Equals("edit_message"))
                return UserPermission.EditMessage;

            if (value.Equals("delete_message"))
                return UserPermission.DeleteMessage;

            if (value.Equals("report_message"))
                return UserPermission.ReportMessage;

            if (value.Equals("get_message_reports"))
                return UserPermission.GetMessageReports;

            if (value.Equals("create_message_pin"))
                return UserPermission.CreateMessagePin;

            if (value.Equals("delete_message_pin"))
                return UserPermission.DeleteMessagePin;

            if (value.Equals("get_channel_subscription"))
                return UserPermission.GetChannelSubscription;

            if (value.Equals("edit_channel_subscription"))
                return UserPermission.EditChannelSubscription;

            if (value.Equals("connect_notification_stream"))
                return UserPermission.ConnectNotificationStream;

            if (value.Equals("register_fcm_device"))
                return UserPermission.RegisterFCMDevice;

            if (value.Equals("get_stamp"))
                return UserPermission.GetStamp;

            if (value.Equals("create_stamp"))
                return UserPermission.CreateStamp;

            if (value.Equals("edit_stamp"))
                return UserPermission.EditStamp;

            if (value.Equals("edit_stamp_created_by_others"))
                return UserPermission.EditStampCreatedByOthers;

            if (value.Equals("delete_stamp"))
                return UserPermission.DeleteStamp;

            if (value.Equals("delete_my_stamp"))
                return UserPermission.DeleteMyStamp;

            if (value.Equals("add_message_stamp"))
                return UserPermission.AddMessageStamp;

            if (value.Equals("remove_message_stamp"))
                return UserPermission.RemoveMessageStamp;

            if (value.Equals("get_my_stamp_history"))
                return UserPermission.GetMyStampHistory;

            if (value.Equals("get_stamp_palette"))
                return UserPermission.GetStampPalette;

            if (value.Equals("create_stamp_palette"))
                return UserPermission.CreateStampPalette;

            if (value.Equals("edit_stamp_palette"))
                return UserPermission.EditStampPalette;

            if (value.Equals("delete_stamp_palette"))
                return UserPermission.DeleteStampPalette;

            if (value.Equals("get_user"))
                return UserPermission.GetUser;

            if (value.Equals("register_user"))
                return UserPermission.RegisterUser;

            if (value.Equals("get_me"))
                return UserPermission.GetMe;

            if (value.Equals("get_oidc_userinfo"))
                return UserPermission.GetOIDCUserInfo;

            if (value.Equals("edit_me"))
                return UserPermission.EditMe;

            if (value.Equals("change_my_icon"))
                return UserPermission.ChangeMyIcon;

            if (value.Equals("change_my_password"))
                return UserPermission.ChangeMyPassword;

            if (value.Equals("edit_other_users"))
                return UserPermission.EditOtherUsers;

            if (value.Equals("get_user_qr_code"))
                return UserPermission.GetUserQRCode;

            if (value.Equals("get_user_tag"))
                return UserPermission.GetUserTag;

            if (value.Equals("edit_user_tag"))
                return UserPermission.EditUserTag;

            if (value.Equals("get_user_group"))
                return UserPermission.GetUserGroup;

            if (value.Equals("create_user_group"))
                return UserPermission.CreateUserGroup;

            if (value.Equals("create_special_user_group"))
                return UserPermission.CreateSpecialUserGroup;

            if (value.Equals("edit_user_group"))
                return UserPermission.EditUserGroup;

            if (value.Equals("delete_user_group"))
                return UserPermission.DeleteUserGroup;

            if (value.Equals("edit_others_user_group"))
                return UserPermission.AllUserGroupsAdmin;

            if (value.Equals("web_rtc"))
                return UserPermission.WebRTC;

            if (value.Equals("get_my_sessions"))
                return UserPermission.GetMySessions;

            if (value.Equals("delete_my_sessions"))
                return UserPermission.DeleteMySessions;

            if (value.Equals("get_my_external_account"))
                return UserPermission.GetMyExternalAccount;

            if (value.Equals("edit_my_external_account"))
                return UserPermission.EditMyExternalAccount;

            if (value.Equals("get_unread"))
                return UserPermission.GetUnread;

            if (value.Equals("delete_unread"))
                return UserPermission.DeleteUnread;

            if (value.Equals("get_clip_folder"))
                return UserPermission.GetClipFolder;

            if (value.Equals("create_clip_folder"))
                return UserPermission.CreateClipFolder;

            if (value.Equals("edit_clip_folder"))
                return UserPermission.EditClipFolder;

            if (value.Equals("delete_clip_folder"))
                return UserPermission.DeleteClipFolder;

            throw new NotImplementedException($"Could not convert value to type UserPermission: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="UserPermission"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static UserPermission? FromStringOrDefault(string value)
        {
            if (value.Equals("get_webhook"))
                return UserPermission.GetWebhook;

            if (value.Equals("create_webhook"))
                return UserPermission.CreateWebhook;

            if (value.Equals("edit_webhook"))
                return UserPermission.EditWebhook;

            if (value.Equals("delete_webhook"))
                return UserPermission.DeleteWebhook;

            if (value.Equals("access_others_webhook"))
                return UserPermission.AccessOthersWebhook;

            if (value.Equals("get_bot"))
                return UserPermission.GetBot;

            if (value.Equals("create_bot"))
                return UserPermission.CreateBot;

            if (value.Equals("edit_bot"))
                return UserPermission.EditBot;

            if (value.Equals("delete_bot"))
                return UserPermission.DeleteBot;

            if (value.Equals("access_others_bot"))
                return UserPermission.AccessOthersBot;

            if (value.Equals("bot_action_join_channel"))
                return UserPermission.BotActionJoinChannel;

            if (value.Equals("bot_action_leave_channel"))
                return UserPermission.BotActionLeaveChannel;

            if (value.Equals("create_channel"))
                return UserPermission.CreateChannel;

            if (value.Equals("get_channel"))
                return UserPermission.GetChannel;

            if (value.Equals("edit_channel"))
                return UserPermission.EditChannel;

            if (value.Equals("delete_channel"))
                return UserPermission.DeleteChannel;

            if (value.Equals("change_parent_channel"))
                return UserPermission.ChangeParentChannel;

            if (value.Equals("edit_channel_topic"))
                return UserPermission.EditChannelTopic;

            if (value.Equals("get_channel_star"))
                return UserPermission.GetChannelStar;

            if (value.Equals("edit_channel_star"))
                return UserPermission.EditChannelStar;

            if (value.Equals("get_my_tokens"))
                return UserPermission.GetMyTokens;

            if (value.Equals("revoke_my_token"))
                return UserPermission.RevokeMyToken;

            if (value.Equals("get_clients"))
                return UserPermission.GetClients;

            if (value.Equals("create_client"))
                return UserPermission.CreateClient;

            if (value.Equals("edit_my_client"))
                return UserPermission.EditMyClient;

            if (value.Equals("delete_my_client"))
                return UserPermission.DeleteMyClient;

            if (value.Equals("manage_others_client"))
                return UserPermission.ManageOthersClient;

            if (value.Equals("upload_file"))
                return UserPermission.UploadFile;

            if (value.Equals("download_file"))
                return UserPermission.DownloadFile;

            if (value.Equals("delete_file"))
                return UserPermission.DeleteFile;

            if (value.Equals("get_message"))
                return UserPermission.GetMessage;

            if (value.Equals("post_message"))
                return UserPermission.PostMessage;

            if (value.Equals("edit_message"))
                return UserPermission.EditMessage;

            if (value.Equals("delete_message"))
                return UserPermission.DeleteMessage;

            if (value.Equals("report_message"))
                return UserPermission.ReportMessage;

            if (value.Equals("get_message_reports"))
                return UserPermission.GetMessageReports;

            if (value.Equals("create_message_pin"))
                return UserPermission.CreateMessagePin;

            if (value.Equals("delete_message_pin"))
                return UserPermission.DeleteMessagePin;

            if (value.Equals("get_channel_subscription"))
                return UserPermission.GetChannelSubscription;

            if (value.Equals("edit_channel_subscription"))
                return UserPermission.EditChannelSubscription;

            if (value.Equals("connect_notification_stream"))
                return UserPermission.ConnectNotificationStream;

            if (value.Equals("register_fcm_device"))
                return UserPermission.RegisterFCMDevice;

            if (value.Equals("get_stamp"))
                return UserPermission.GetStamp;

            if (value.Equals("create_stamp"))
                return UserPermission.CreateStamp;

            if (value.Equals("edit_stamp"))
                return UserPermission.EditStamp;

            if (value.Equals("edit_stamp_created_by_others"))
                return UserPermission.EditStampCreatedByOthers;

            if (value.Equals("delete_stamp"))
                return UserPermission.DeleteStamp;

            if (value.Equals("delete_my_stamp"))
                return UserPermission.DeleteMyStamp;

            if (value.Equals("add_message_stamp"))
                return UserPermission.AddMessageStamp;

            if (value.Equals("remove_message_stamp"))
                return UserPermission.RemoveMessageStamp;

            if (value.Equals("get_my_stamp_history"))
                return UserPermission.GetMyStampHistory;

            if (value.Equals("get_stamp_palette"))
                return UserPermission.GetStampPalette;

            if (value.Equals("create_stamp_palette"))
                return UserPermission.CreateStampPalette;

            if (value.Equals("edit_stamp_palette"))
                return UserPermission.EditStampPalette;

            if (value.Equals("delete_stamp_palette"))
                return UserPermission.DeleteStampPalette;

            if (value.Equals("get_user"))
                return UserPermission.GetUser;

            if (value.Equals("register_user"))
                return UserPermission.RegisterUser;

            if (value.Equals("get_me"))
                return UserPermission.GetMe;

            if (value.Equals("get_oidc_userinfo"))
                return UserPermission.GetOIDCUserInfo;

            if (value.Equals("edit_me"))
                return UserPermission.EditMe;

            if (value.Equals("change_my_icon"))
                return UserPermission.ChangeMyIcon;

            if (value.Equals("change_my_password"))
                return UserPermission.ChangeMyPassword;

            if (value.Equals("edit_other_users"))
                return UserPermission.EditOtherUsers;

            if (value.Equals("get_user_qr_code"))
                return UserPermission.GetUserQRCode;

            if (value.Equals("get_user_tag"))
                return UserPermission.GetUserTag;

            if (value.Equals("edit_user_tag"))
                return UserPermission.EditUserTag;

            if (value.Equals("get_user_group"))
                return UserPermission.GetUserGroup;

            if (value.Equals("create_user_group"))
                return UserPermission.CreateUserGroup;

            if (value.Equals("create_special_user_group"))
                return UserPermission.CreateSpecialUserGroup;

            if (value.Equals("edit_user_group"))
                return UserPermission.EditUserGroup;

            if (value.Equals("delete_user_group"))
                return UserPermission.DeleteUserGroup;

            if (value.Equals("edit_others_user_group"))
                return UserPermission.AllUserGroupsAdmin;

            if (value.Equals("web_rtc"))
                return UserPermission.WebRTC;

            if (value.Equals("get_my_sessions"))
                return UserPermission.GetMySessions;

            if (value.Equals("delete_my_sessions"))
                return UserPermission.DeleteMySessions;

            if (value.Equals("get_my_external_account"))
                return UserPermission.GetMyExternalAccount;

            if (value.Equals("edit_my_external_account"))
                return UserPermission.EditMyExternalAccount;

            if (value.Equals("get_unread"))
                return UserPermission.GetUnread;

            if (value.Equals("delete_unread"))
                return UserPermission.DeleteUnread;

            if (value.Equals("get_clip_folder"))
                return UserPermission.GetClipFolder;

            if (value.Equals("create_clip_folder"))
                return UserPermission.CreateClipFolder;

            if (value.Equals("edit_clip_folder"))
                return UserPermission.EditClipFolder;

            if (value.Equals("delete_clip_folder"))
                return UserPermission.DeleteClipFolder;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="UserPermission"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(UserPermission value)
        {
            if (value == UserPermission.GetWebhook)
                return "get_webhook";

            if (value == UserPermission.CreateWebhook)
                return "create_webhook";

            if (value == UserPermission.EditWebhook)
                return "edit_webhook";

            if (value == UserPermission.DeleteWebhook)
                return "delete_webhook";

            if (value == UserPermission.AccessOthersWebhook)
                return "access_others_webhook";

            if (value == UserPermission.GetBot)
                return "get_bot";

            if (value == UserPermission.CreateBot)
                return "create_bot";

            if (value == UserPermission.EditBot)
                return "edit_bot";

            if (value == UserPermission.DeleteBot)
                return "delete_bot";

            if (value == UserPermission.AccessOthersBot)
                return "access_others_bot";

            if (value == UserPermission.BotActionJoinChannel)
                return "bot_action_join_channel";

            if (value == UserPermission.BotActionLeaveChannel)
                return "bot_action_leave_channel";

            if (value == UserPermission.CreateChannel)
                return "create_channel";

            if (value == UserPermission.GetChannel)
                return "get_channel";

            if (value == UserPermission.EditChannel)
                return "edit_channel";

            if (value == UserPermission.DeleteChannel)
                return "delete_channel";

            if (value == UserPermission.ChangeParentChannel)
                return "change_parent_channel";

            if (value == UserPermission.EditChannelTopic)
                return "edit_channel_topic";

            if (value == UserPermission.GetChannelStar)
                return "get_channel_star";

            if (value == UserPermission.EditChannelStar)
                return "edit_channel_star";

            if (value == UserPermission.GetMyTokens)
                return "get_my_tokens";

            if (value == UserPermission.RevokeMyToken)
                return "revoke_my_token";

            if (value == UserPermission.GetClients)
                return "get_clients";

            if (value == UserPermission.CreateClient)
                return "create_client";

            if (value == UserPermission.EditMyClient)
                return "edit_my_client";

            if (value == UserPermission.DeleteMyClient)
                return "delete_my_client";

            if (value == UserPermission.ManageOthersClient)
                return "manage_others_client";

            if (value == UserPermission.UploadFile)
                return "upload_file";

            if (value == UserPermission.DownloadFile)
                return "download_file";

            if (value == UserPermission.DeleteFile)
                return "delete_file";

            if (value == UserPermission.GetMessage)
                return "get_message";

            if (value == UserPermission.PostMessage)
                return "post_message";

            if (value == UserPermission.EditMessage)
                return "edit_message";

            if (value == UserPermission.DeleteMessage)
                return "delete_message";

            if (value == UserPermission.ReportMessage)
                return "report_message";

            if (value == UserPermission.GetMessageReports)
                return "get_message_reports";

            if (value == UserPermission.CreateMessagePin)
                return "create_message_pin";

            if (value == UserPermission.DeleteMessagePin)
                return "delete_message_pin";

            if (value == UserPermission.GetChannelSubscription)
                return "get_channel_subscription";

            if (value == UserPermission.EditChannelSubscription)
                return "edit_channel_subscription";

            if (value == UserPermission.ConnectNotificationStream)
                return "connect_notification_stream";

            if (value == UserPermission.RegisterFCMDevice)
                return "register_fcm_device";

            if (value == UserPermission.GetStamp)
                return "get_stamp";

            if (value == UserPermission.CreateStamp)
                return "create_stamp";

            if (value == UserPermission.EditStamp)
                return "edit_stamp";

            if (value == UserPermission.EditStampCreatedByOthers)
                return "edit_stamp_created_by_others";

            if (value == UserPermission.DeleteStamp)
                return "delete_stamp";

            if (value == UserPermission.DeleteMyStamp)
                return "delete_my_stamp";

            if (value == UserPermission.AddMessageStamp)
                return "add_message_stamp";

            if (value == UserPermission.RemoveMessageStamp)
                return "remove_message_stamp";

            if (value == UserPermission.GetMyStampHistory)
                return "get_my_stamp_history";

            if (value == UserPermission.GetStampPalette)
                return "get_stamp_palette";

            if (value == UserPermission.CreateStampPalette)
                return "create_stamp_palette";

            if (value == UserPermission.EditStampPalette)
                return "edit_stamp_palette";

            if (value == UserPermission.DeleteStampPalette)
                return "delete_stamp_palette";

            if (value == UserPermission.GetUser)
                return "get_user";

            if (value == UserPermission.RegisterUser)
                return "register_user";

            if (value == UserPermission.GetMe)
                return "get_me";

            if (value == UserPermission.GetOIDCUserInfo)
                return "get_oidc_userinfo";

            if (value == UserPermission.EditMe)
                return "edit_me";

            if (value == UserPermission.ChangeMyIcon)
                return "change_my_icon";

            if (value == UserPermission.ChangeMyPassword)
                return "change_my_password";

            if (value == UserPermission.EditOtherUsers)
                return "edit_other_users";

            if (value == UserPermission.GetUserQRCode)
                return "get_user_qr_code";

            if (value == UserPermission.GetUserTag)
                return "get_user_tag";

            if (value == UserPermission.EditUserTag)
                return "edit_user_tag";

            if (value == UserPermission.GetUserGroup)
                return "get_user_group";

            if (value == UserPermission.CreateUserGroup)
                return "create_user_group";

            if (value == UserPermission.CreateSpecialUserGroup)
                return "create_special_user_group";

            if (value == UserPermission.EditUserGroup)
                return "edit_user_group";

            if (value == UserPermission.DeleteUserGroup)
                return "delete_user_group";

            if (value == UserPermission.AllUserGroupsAdmin)
                return "edit_others_user_group";

            if (value == UserPermission.WebRTC)
                return "web_rtc";

            if (value == UserPermission.GetMySessions)
                return "get_my_sessions";

            if (value == UserPermission.DeleteMySessions)
                return "delete_my_sessions";

            if (value == UserPermission.GetMyExternalAccount)
                return "get_my_external_account";

            if (value == UserPermission.EditMyExternalAccount)
                return "edit_my_external_account";

            if (value == UserPermission.GetUnread)
                return "get_unread";

            if (value == UserPermission.DeleteUnread)
                return "delete_unread";

            if (value == UserPermission.GetClipFolder)
                return "get_clip_folder";

            if (value == UserPermission.CreateClipFolder)
                return "create_clip_folder";

            if (value == UserPermission.EditClipFolder)
                return "edit_clip_folder";

            if (value == UserPermission.DeleteClipFolder)
                return "delete_clip_folder";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UserPermission"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class UserPermissionJsonConverter : JsonConverter<UserPermission>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override UserPermission Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            UserPermission? result = rawValue == null
                ? null
                : UserPermissionValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the UserPermission to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userPermission"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, UserPermission userPermission, JsonSerializerOptions options)
        {
            writer.WriteStringValue(userPermission.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UserPermission"/>
    /// </summary>
    public class UserPermissionNullableJsonConverter : JsonConverter<UserPermission?>
    {
        /// <summary>
        /// Returns a UserPermission from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override UserPermission? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            UserPermission? result = rawValue == null
                ? null
                : UserPermissionValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userPermission"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, UserPermission? userPermission, JsonSerializerOptions options)
        {
            writer.WriteStringValue(userPermission?.ToString() ?? "null");
        }
    }


    /// <summary>
    /// The UserPermissionSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(UserPermission))]
    public partial class UserPermissionSerializationContext : JsonSerializerContext { }
}
