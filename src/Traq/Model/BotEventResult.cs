// <auto-generated>
/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Traq.Client;

namespace Traq.Model
{
    /// <summary>
    /// イベント配送結果
    /// </summary>
    /// <value>イベント配送結果</value>
    public enum BotEventResult
    {
        /// <summary>
        /// Enum OK for value: ok
        /// </summary>
        OK = 1,

        /// <summary>
        /// Enum NG for value: ng
        /// </summary>
        NG = 2,

        /// <summary>
        /// Enum NetworkError for value: ne
        /// </summary>
        NetworkError = 3,

        /// <summary>
        /// Enum Dropped for value: dp
        /// </summary>
        Dropped = 4
    }

    /// <summary>
    /// Converts <see cref="BotEventResult"/> to and from the JSON value
    /// </summary>
    public static class BotEventResultValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="BotEventResult"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static BotEventResult FromString(string value)
        {
            if (value.Equals("ok"))
                return BotEventResult.OK;

            if (value.Equals("ng"))
                return BotEventResult.NG;

            if (value.Equals("ne"))
                return BotEventResult.NetworkError;

            if (value.Equals("dp"))
                return BotEventResult.Dropped;

            throw new NotImplementedException($"Could not convert value to type BotEventResult: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="BotEventResult"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static BotEventResult? FromStringOrDefault(string value)
        {
            if (value.Equals("ok"))
                return BotEventResult.OK;

            if (value.Equals("ng"))
                return BotEventResult.NG;

            if (value.Equals("ne"))
                return BotEventResult.NetworkError;

            if (value.Equals("dp"))
                return BotEventResult.Dropped;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="BotEventResult"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(BotEventResult value)
        {
            if (value == BotEventResult.OK)
                return "ok";

            if (value == BotEventResult.NG)
                return "ng";

            if (value == BotEventResult.NetworkError)
                return "ne";

            if (value == BotEventResult.Dropped)
                return "dp";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="BotEventResult"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class BotEventResultJsonConverter : JsonConverter<BotEventResult>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override BotEventResult Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            BotEventResult? result = rawValue == null
                ? null
                : BotEventResultValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the BotEventResult to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="botEventResult"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, BotEventResult botEventResult, JsonSerializerOptions options)
        {
            writer.WriteStringValue(botEventResult.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="BotEventResult"/>
    /// </summary>
    public class BotEventResultNullableJsonConverter : JsonConverter<BotEventResult?>
    {
        /// <summary>
        /// Returns a BotEventResult from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override BotEventResult? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            BotEventResult? result = rawValue == null
                ? null
                : BotEventResultValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="botEventResult"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, BotEventResult? botEventResult, JsonSerializerOptions options)
        {
            writer.WriteStringValue(botEventResult?.ToString() ?? "null");
        }
    }


    /// <summary>
    /// The BotEventResultSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(BotEventResult))]
    public partial class BotEventResultSerializationContext : JsonSerializerContext { }
}
