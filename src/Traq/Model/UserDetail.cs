// <auto-generated>
/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Traq.Client;

namespace Traq.Model
{
    /// <summary>
    /// ユーザー詳細情報
    /// </summary>
    public partial class UserDetail : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserDetail" /> class.
        /// </summary>
        /// <param name="id">ユーザーUUID</param>
        /// <param name="state">state</param>
        /// <param name="bot">BOTかどうか</param>
        /// <param name="iconFileId">アイコンファイルUUID</param>
        /// <param name="displayName">ユーザー表示名</param>
        /// <param name="name">ユーザー名</param>
        /// <param name="twitterId">Twitter ID</param>
        /// <param name="updatedAt">更新日時</param>
        /// <param name="tags">タグリスト</param>
        /// <param name="groups">所属グループのUUIDの配列</param>
        /// <param name="bio">自己紹介(biography)</param>
        /// <param name="lastOnline">最終オンライン日時</param>
        /// <param name="homeChannel">ホームチャンネル</param>
        [JsonConstructor]
        public UserDetail(Guid id, UserAccountState state, bool bot, Guid iconFileId, string displayName, string name, string twitterId, DateTimeOffset updatedAt, List<UserTag> tags, List<Guid> groups, string bio, DateTimeOffset? lastOnline = default, Guid? homeChannel = default)
        {
            Id = id;
            State = state;
            Bot = bot;
            IconFileId = iconFileId;
            DisplayName = displayName;
            Name = name;
            TwitterId = twitterId;
            UpdatedAt = updatedAt;
            Tags = tags;
            Groups = groups;
            Bio = bio;
            LastOnline = lastOnline;
            HomeChannel = homeChannel;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [JsonPropertyName("state")]
        public UserAccountState State { get; set; }

        /// <summary>
        /// ユーザーUUID
        /// </summary>
        /// <value>ユーザーUUID</value>
        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        /// <summary>
        /// BOTかどうか
        /// </summary>
        /// <value>BOTかどうか</value>
        [JsonPropertyName("bot")]
        public bool Bot { get; set; }

        /// <summary>
        /// アイコンファイルUUID
        /// </summary>
        /// <value>アイコンファイルUUID</value>
        [JsonPropertyName("iconFileId")]
        public Guid IconFileId { get; set; }

        /// <summary>
        /// ユーザー表示名
        /// </summary>
        /// <value>ユーザー表示名</value>
        [JsonPropertyName("displayName")]
        public string DisplayName { get; set; }

        /// <summary>
        /// ユーザー名
        /// </summary>
        /// <value>ユーザー名</value>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Twitter ID
        /// </summary>
        /// <value>Twitter ID</value>
        [JsonPropertyName("twitterId")]
        public string TwitterId { get; set; }

        /// <summary>
        /// 更新日時
        /// </summary>
        /// <value>更新日時</value>
        [JsonPropertyName("updatedAt")]
        public DateTimeOffset UpdatedAt { get; set; }

        /// <summary>
        /// タグリスト
        /// </summary>
        /// <value>タグリスト</value>
        [JsonPropertyName("tags")]
        public List<UserTag> Tags { get; set; }

        /// <summary>
        /// 所属グループのUUIDの配列
        /// </summary>
        /// <value>所属グループのUUIDの配列</value>
        [JsonPropertyName("groups")]
        public List<Guid> Groups { get; set; }

        /// <summary>
        /// 自己紹介(biography)
        /// </summary>
        /// <value>自己紹介(biography)</value>
        [JsonPropertyName("bio")]
        public string Bio { get; set; }

        /// <summary>
        /// 最終オンライン日時
        /// </summary>
        /// <value>最終オンライン日時</value>
        [JsonPropertyName("lastOnline")]
        public DateTimeOffset? LastOnline { get; set; }

        /// <summary>
        /// ホームチャンネル
        /// </summary>
        /// <value>ホームチャンネル</value>
        [JsonPropertyName("homeChannel")]
        public Guid? HomeChannel { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserDetail {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Bot: ").Append(Bot).Append("\n");
            sb.Append("  IconFileId: ").Append(IconFileId).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  TwitterId: ").Append(TwitterId).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Groups: ").Append(Groups).Append("\n");
            sb.Append("  Bio: ").Append(Bio).Append("\n");
            sb.Append("  LastOnline: ").Append(LastOnline).Append("\n");
            sb.Append("  HomeChannel: ").Append(HomeChannel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // DisplayName (string) maxLength
            if (this.DisplayName != null && this.DisplayName.Length > 32)
            {
                yield return new ValidationResult("Invalid value for DisplayName, length must be less than 32.", new [] { "DisplayName" });
            }

            // DisplayName (string) minLength
            if (this.DisplayName != null && this.DisplayName.Length < 0)
            {
                yield return new ValidationResult("Invalid value for DisplayName, length must be greater than 0.", new [] { "DisplayName" });
            }

            if (this.Name != null) {
                // Name (string) pattern
                Regex regexName = new Regex(@"^[a-zA-Z0-9_-]{1,32}$", RegexOptions.CultureInvariant);

                if (!regexName.Match(this.Name).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, must match a pattern of " + regexName, new [] { "Name" });
                }
            }

            if (this.TwitterId != null) {
                // TwitterId (string) pattern
                Regex regexTwitterId = new Regex(@"^[a-zA-Z0-9_]{0,15}$", RegexOptions.CultureInvariant);

                if (!regexTwitterId.Match(this.TwitterId).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TwitterId, must match a pattern of " + regexTwitterId, new [] { "TwitterId" });
                }
            }

            // Bio (string) maxLength
            if (this.Bio != null && this.Bio.Length > 1000)
            {
                yield return new ValidationResult("Invalid value for Bio, length must be less than 1000.", new [] { "Bio" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UserDetail" />
    /// </summary>
    public class UserDetailJsonConverter : JsonConverter<UserDetail>
    {
        /// <summary>
        /// The format to use to serialize UpdatedAt
        /// </summary>
        public static string UpdatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize LastOnline
        /// </summary>
        public static string LastOnlineFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="UserDetail" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UserDetail Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid?> id = default;
            Option<UserAccountState?> state = default;
            Option<bool?> bot = default;
            Option<Guid?> iconFileId = default;
            Option<string?> displayName = default;
            Option<string?> name = default;
            Option<string?> twitterId = default;
            Option<DateTimeOffset?> updatedAt = default;
            Option<List<UserTag>?> tags = default;
            Option<List<Guid>?> groups = default;
            Option<string?> bio = default;
            Option<DateTimeOffset?> lastOnline = default;
            Option<Guid?> homeChannel = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        case "state":
                            string? stateRawValue = utf8JsonReader.GetString();
                            if (stateRawValue != null)
                                state = new Option<UserAccountState?>(UserAccountStateValueConverter.FromStringOrDefault(stateRawValue));
                            break;
                        case "bot":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                bot = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "iconFileId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                iconFileId = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        case "displayName":
                            displayName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "twitterId":
                            twitterId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "updatedAt":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                updatedAt = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "tags":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                tags = new Option<List<UserTag>?>(JsonSerializer.Deserialize<List<UserTag>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "groups":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                groups = new Option<List<Guid>?>(JsonSerializer.Deserialize<List<Guid>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "bio":
                            bio = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "lastOnline":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                lastOnline = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime?>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "homeChannel":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                homeChannel = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class UserDetail.", nameof(id));

            if (!state.IsSet)
                throw new ArgumentException("Property is required for class UserDetail.", nameof(state));

            if (!bot.IsSet)
                throw new ArgumentException("Property is required for class UserDetail.", nameof(bot));

            if (!iconFileId.IsSet)
                throw new ArgumentException("Property is required for class UserDetail.", nameof(iconFileId));

            if (!displayName.IsSet)
                throw new ArgumentException("Property is required for class UserDetail.", nameof(displayName));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class UserDetail.", nameof(name));

            if (!twitterId.IsSet)
                throw new ArgumentException("Property is required for class UserDetail.", nameof(twitterId));

            if (!updatedAt.IsSet)
                throw new ArgumentException("Property is required for class UserDetail.", nameof(updatedAt));

            if (!tags.IsSet)
                throw new ArgumentException("Property is required for class UserDetail.", nameof(tags));

            if (!groups.IsSet)
                throw new ArgumentException("Property is required for class UserDetail.", nameof(groups));

            if (!bio.IsSet)
                throw new ArgumentException("Property is required for class UserDetail.", nameof(bio));

            if (!lastOnline.IsSet)
                throw new ArgumentException("Property is required for class UserDetail.", nameof(lastOnline));

            if (!homeChannel.IsSet)
                throw new ArgumentException("Property is required for class UserDetail.", nameof(homeChannel));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class UserDetail.");

            if (state.IsSet && state.Value == null)
                throw new ArgumentNullException(nameof(state), "Property is not nullable for class UserDetail.");

            if (bot.IsSet && bot.Value == null)
                throw new ArgumentNullException(nameof(bot), "Property is not nullable for class UserDetail.");

            if (iconFileId.IsSet && iconFileId.Value == null)
                throw new ArgumentNullException(nameof(iconFileId), "Property is not nullable for class UserDetail.");

            if (displayName.IsSet && displayName.Value == null)
                throw new ArgumentNullException(nameof(displayName), "Property is not nullable for class UserDetail.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class UserDetail.");

            if (twitterId.IsSet && twitterId.Value == null)
                throw new ArgumentNullException(nameof(twitterId), "Property is not nullable for class UserDetail.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class UserDetail.");

            if (tags.IsSet && tags.Value == null)
                throw new ArgumentNullException(nameof(tags), "Property is not nullable for class UserDetail.");

            if (groups.IsSet && groups.Value == null)
                throw new ArgumentNullException(nameof(groups), "Property is not nullable for class UserDetail.");

            if (bio.IsSet && bio.Value == null)
                throw new ArgumentNullException(nameof(bio), "Property is not nullable for class UserDetail.");

            return new UserDetail(id.Value!.Value!, state.Value!.Value!, bot.Value!.Value!, iconFileId.Value!.Value!, displayName.Value!, name.Value!, twitterId.Value!, updatedAt.Value!.Value!, tags.Value!, groups.Value!, bio.Value!, lastOnline.Value!, homeChannel.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="UserDetail" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userDetail"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UserDetail userDetail, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, userDetail, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UserDetail" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userDetail"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, UserDetail userDetail, JsonSerializerOptions jsonSerializerOptions)
        {
            if (userDetail.DisplayName == null)
                throw new ArgumentNullException(nameof(userDetail.DisplayName), "Property is required for class UserDetail.");

            if (userDetail.Name == null)
                throw new ArgumentNullException(nameof(userDetail.Name), "Property is required for class UserDetail.");

            if (userDetail.TwitterId == null)
                throw new ArgumentNullException(nameof(userDetail.TwitterId), "Property is required for class UserDetail.");

            if (userDetail.Tags == null)
                throw new ArgumentNullException(nameof(userDetail.Tags), "Property is required for class UserDetail.");

            if (userDetail.Groups == null)
                throw new ArgumentNullException(nameof(userDetail.Groups), "Property is required for class UserDetail.");

            if (userDetail.Bio == null)
                throw new ArgumentNullException(nameof(userDetail.Bio), "Property is required for class UserDetail.");

            writer.WriteString("id", userDetail.Id);

            var stateRawValue = UserAccountStateValueConverter.ToJsonValue(userDetail.State);
            writer.WriteNumber("state", stateRawValue);

            writer.WriteBoolean("bot", userDetail.Bot);

            writer.WriteString("iconFileId", userDetail.IconFileId);

            writer.WriteString("displayName", userDetail.DisplayName);

            writer.WriteString("name", userDetail.Name);

            writer.WriteString("twitterId", userDetail.TwitterId);

            writer.WriteString("updatedAt", userDetail.UpdatedAt.ToString(UpdatedAtFormat));

            writer.WritePropertyName("tags");
            JsonSerializer.Serialize(writer, userDetail.Tags, jsonSerializerOptions);
            writer.WritePropertyName("groups");
            JsonSerializer.Serialize(writer, userDetail.Groups, jsonSerializerOptions);
            writer.WriteString("bio", userDetail.Bio);

            if (userDetail.LastOnline != null)
                writer.WriteString("lastOnline", userDetail.LastOnline.Value.ToString(LastOnlineFormat));
            else
                writer.WriteNull("lastOnline");

            if (userDetail.HomeChannel != null)
                writer.WriteString("homeChannel", userDetail.HomeChannel.Value);
            else
                writer.WriteNull("homeChannel");
        }
    }

    /// <summary>
    /// The UserDetailSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(UserDetail))]
    public partial class UserDetailSerializationContext : JsonSerializerContext { }
}
