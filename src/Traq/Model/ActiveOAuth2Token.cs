// <auto-generated>
/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Traq.Client;

namespace Traq.Model
{
    /// <summary>
    /// 有効なOAuth2トークン情報
    /// </summary>
    public partial class ActiveOAuth2Token : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ActiveOAuth2Token" /> class.
        /// </summary>
        /// <param name="id">トークンUUID</param>
        /// <param name="clientId">OAuth2クライアントUUID</param>
        /// <param name="scopes">スコープ</param>
        /// <param name="issuedAt">発行日時</param>
        [JsonConstructor]
        public ActiveOAuth2Token(Guid id, string clientId, List<OAuth2Scope> scopes, DateTimeOffset issuedAt)
        {
            Id = id;
            ClientId = clientId;
            Scopes = scopes;
            IssuedAt = issuedAt;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// トークンUUID
        /// </summary>
        /// <value>トークンUUID</value>
        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        /// <summary>
        /// OAuth2クライアントUUID
        /// </summary>
        /// <value>OAuth2クライアントUUID</value>
        [JsonPropertyName("clientId")]
        public string ClientId { get; set; }

        /// <summary>
        /// スコープ
        /// </summary>
        /// <value>スコープ</value>
        [JsonPropertyName("scopes")]
        public List<OAuth2Scope> Scopes { get; set; }

        /// <summary>
        /// 発行日時
        /// </summary>
        /// <value>発行日時</value>
        [JsonPropertyName("issuedAt")]
        public DateTimeOffset IssuedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ActiveOAuth2Token {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  Scopes: ").Append(Scopes).Append("\n");
            sb.Append("  IssuedAt: ").Append(IssuedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ActiveOAuth2Token" />
    /// </summary>
    public class ActiveOAuth2TokenJsonConverter : JsonConverter<ActiveOAuth2Token>
    {
        /// <summary>
        /// The format to use to serialize IssuedAt
        /// </summary>
        public static string IssuedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="ActiveOAuth2Token" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ActiveOAuth2Token Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid?> id = default;
            Option<string?> clientId = default;
            Option<List<OAuth2Scope>?> scopes = default;
            Option<DateTimeOffset?> issuedAt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        case "clientId":
                            clientId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "scopes":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                scopes = new Option<List<OAuth2Scope>?>(JsonSerializer.Deserialize<List<OAuth2Scope>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "issuedAt":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                issuedAt = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class ActiveOAuth2Token.", nameof(id));

            if (!clientId.IsSet)
                throw new ArgumentException("Property is required for class ActiveOAuth2Token.", nameof(clientId));

            if (!scopes.IsSet)
                throw new ArgumentException("Property is required for class ActiveOAuth2Token.", nameof(scopes));

            if (!issuedAt.IsSet)
                throw new ArgumentException("Property is required for class ActiveOAuth2Token.", nameof(issuedAt));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class ActiveOAuth2Token.");

            if (clientId.IsSet && clientId.Value == null)
                throw new ArgumentNullException(nameof(clientId), "Property is not nullable for class ActiveOAuth2Token.");

            if (scopes.IsSet && scopes.Value == null)
                throw new ArgumentNullException(nameof(scopes), "Property is not nullable for class ActiveOAuth2Token.");

            if (issuedAt.IsSet && issuedAt.Value == null)
                throw new ArgumentNullException(nameof(issuedAt), "Property is not nullable for class ActiveOAuth2Token.");

            return new ActiveOAuth2Token(id.Value!.Value!, clientId.Value!, scopes.Value!, issuedAt.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="ActiveOAuth2Token" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="activeOAuth2Token"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ActiveOAuth2Token activeOAuth2Token, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, activeOAuth2Token, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ActiveOAuth2Token" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="activeOAuth2Token"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ActiveOAuth2Token activeOAuth2Token, JsonSerializerOptions jsonSerializerOptions)
        {
            if (activeOAuth2Token.ClientId == null)
                throw new ArgumentNullException(nameof(activeOAuth2Token.ClientId), "Property is required for class ActiveOAuth2Token.");

            if (activeOAuth2Token.Scopes == null)
                throw new ArgumentNullException(nameof(activeOAuth2Token.Scopes), "Property is required for class ActiveOAuth2Token.");

            writer.WriteString("id", activeOAuth2Token.Id);

            writer.WriteString("clientId", activeOAuth2Token.ClientId);

            writer.WritePropertyName("scopes");
            JsonSerializer.Serialize(writer, activeOAuth2Token.Scopes, jsonSerializerOptions);
            writer.WriteString("issuedAt", activeOAuth2Token.IssuedAt.ToString(IssuedAtFormat));
        }
    }

    /// <summary>
    /// The ActiveOAuth2TokenSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(ActiveOAuth2Token))]
    public partial class ActiveOAuth2TokenSerializationContext : JsonSerializerContext { }
}
