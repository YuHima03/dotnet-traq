/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Traq.Client.FileParameter;
using OpenAPIDateConverter = Traq.Client.OpenAPIDateConverter;

namespace Traq.Model
{
    /// <summary>
    /// 有効なOAuth2トークン情報
    /// </summary>
    [DataContract(Name = "ActiveOAuth2Token")]
    public partial class ActiveOAuth2Token : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ActiveOAuth2Token" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ActiveOAuth2Token() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ActiveOAuth2Token" /> class.
        /// </summary>
        /// <param name="id">トークンUUID (required).</param>
        /// <param name="clientId">OAuth2クライアントUUID (required).</param>
        /// <param name="scopes">スコープ (required).</param>
        /// <param name="issuedAt">発行日時 (required).</param>
        public ActiveOAuth2Token(Guid id = default(Guid), string clientId = default(string), List<OAuth2Scope> scopes = default(List<OAuth2Scope>), DateTimeOffset issuedAt = default(DateTimeOffset))
        {
            this.Id = id;
            // to ensure "clientId" is required (not null)
            if (clientId == null)
            {
                throw new ArgumentNullException("clientId is a required property for ActiveOAuth2Token and cannot be null");
            }
            this.ClientId = clientId;
            // to ensure "scopes" is required (not null)
            if (scopes == null)
            {
                throw new ArgumentNullException("scopes is a required property for ActiveOAuth2Token and cannot be null");
            }
            this.Scopes = scopes;
            this.IssuedAt = issuedAt;
        }

        /// <summary>
        /// トークンUUID
        /// </summary>
        /// <value>トークンUUID</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public Guid Id { get; set; }

        /// <summary>
        /// OAuth2クライアントUUID
        /// </summary>
        /// <value>OAuth2クライアントUUID</value>
        [DataMember(Name = "clientId", IsRequired = true, EmitDefaultValue = true)]
        public string ClientId { get; set; }

        /// <summary>
        /// スコープ
        /// </summary>
        /// <value>スコープ</value>
        [DataMember(Name = "scopes", IsRequired = true, EmitDefaultValue = true)]
        public List<OAuth2Scope> Scopes { get; set; }

        /// <summary>
        /// 発行日時
        /// </summary>
        /// <value>発行日時</value>
        [DataMember(Name = "issuedAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset IssuedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ActiveOAuth2Token {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  Scopes: ").Append(Scopes).Append("\n");
            sb.Append("  IssuedAt: ").Append(IssuedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
