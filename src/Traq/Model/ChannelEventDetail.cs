// <auto-generated>
/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Traq.Client;

namespace Traq.Model
{
    /// <summary>
    /// イベント内容
    /// </summary>
    public partial class ChannelEventDetail : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelEventDetail" /> class.
        /// </summary>
        /// <param name="topicChangedEvent"></param>
        public ChannelEventDetail(TopicChangedEvent topicChangedEvent)
        {
            TopicChangedEvent = topicChangedEvent;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelEventDetail" /> class.
        /// </summary>
        /// <param name="subscribersChangedEvent"></param>
        public ChannelEventDetail(SubscribersChangedEvent subscribersChangedEvent)
        {
            SubscribersChangedEvent = subscribersChangedEvent;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelEventDetail" /> class.
        /// </summary>
        /// <param name="pinAddedEvent"></param>
        public ChannelEventDetail(PinAddedEvent pinAddedEvent)
        {
            PinAddedEvent = pinAddedEvent;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelEventDetail" /> class.
        /// </summary>
        /// <param name="pinRemovedEvent"></param>
        public ChannelEventDetail(PinRemovedEvent pinRemovedEvent)
        {
            PinRemovedEvent = pinRemovedEvent;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelEventDetail" /> class.
        /// </summary>
        /// <param name="nameChangedEvent"></param>
        public ChannelEventDetail(NameChangedEvent nameChangedEvent)
        {
            NameChangedEvent = nameChangedEvent;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelEventDetail" /> class.
        /// </summary>
        /// <param name="parentChangedEvent"></param>
        public ChannelEventDetail(ParentChangedEvent parentChangedEvent)
        {
            ParentChangedEvent = parentChangedEvent;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelEventDetail" /> class.
        /// </summary>
        /// <param name="visibilityChangedEvent"></param>
        public ChannelEventDetail(VisibilityChangedEvent visibilityChangedEvent)
        {
            VisibilityChangedEvent = visibilityChangedEvent;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelEventDetail" /> class.
        /// </summary>
        /// <param name="forcedNotificationChangedEvent"></param>
        public ChannelEventDetail(ForcedNotificationChangedEvent forcedNotificationChangedEvent)
        {
            ForcedNotificationChangedEvent = forcedNotificationChangedEvent;
            OnCreated();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelEventDetail" /> class.
        /// </summary>
        /// <param name="childCreatedEvent"></param>
        public ChannelEventDetail(ChildCreatedEvent childCreatedEvent)
        {
            ChildCreatedEvent = childCreatedEvent;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets TopicChangedEvent
        /// </summary>
        public TopicChangedEvent? TopicChangedEvent { get; set; }

        /// <summary>
        /// Gets or Sets SubscribersChangedEvent
        /// </summary>
        public SubscribersChangedEvent? SubscribersChangedEvent { get; set; }

        /// <summary>
        /// Gets or Sets PinAddedEvent
        /// </summary>
        public PinAddedEvent? PinAddedEvent { get; set; }

        /// <summary>
        /// Gets or Sets PinRemovedEvent
        /// </summary>
        public PinRemovedEvent? PinRemovedEvent { get; set; }

        /// <summary>
        /// Gets or Sets NameChangedEvent
        /// </summary>
        public NameChangedEvent? NameChangedEvent { get; set; }

        /// <summary>
        /// Gets or Sets ParentChangedEvent
        /// </summary>
        public ParentChangedEvent? ParentChangedEvent { get; set; }

        /// <summary>
        /// Gets or Sets VisibilityChangedEvent
        /// </summary>
        public VisibilityChangedEvent? VisibilityChangedEvent { get; set; }

        /// <summary>
        /// Gets or Sets ForcedNotificationChangedEvent
        /// </summary>
        public ForcedNotificationChangedEvent? ForcedNotificationChangedEvent { get; set; }

        /// <summary>
        /// Gets or Sets ChildCreatedEvent
        /// </summary>
        public ChildCreatedEvent? ChildCreatedEvent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ChannelEventDetail {\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ChannelEventDetail" />
    /// </summary>
    public class ChannelEventDetailJsonConverter : JsonConverter<ChannelEventDetail>
    {
        /// <summary>
        /// Deserializes json to <see cref="ChannelEventDetail" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ChannelEventDetail Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            TopicChangedEvent? topicChangedEvent = default;
            SubscribersChangedEvent? subscribersChangedEvent = default;
            PinAddedEvent? pinAddedEvent = default;
            PinRemovedEvent? pinRemovedEvent = default;
            NameChangedEvent? nameChangedEvent = default;
            ParentChangedEvent? parentChangedEvent = default;
            VisibilityChangedEvent? visibilityChangedEvent = default;
            ForcedNotificationChangedEvent? forcedNotificationChangedEvent = default;
            ChildCreatedEvent? childCreatedEvent = default;

            Utf8JsonReader utf8JsonReaderOneOf = utf8JsonReader;
            while (utf8JsonReaderOneOf.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReaderOneOf.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReaderOneOf.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReaderOneOf.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReaderOneOf.CurrentDepth)
                    break;

                if (utf8JsonReaderOneOf.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReaderOneOf.CurrentDepth - 1)
                {
                    Utf8JsonReader utf8JsonReaderTopicChangedEvent = utf8JsonReader;
                    ClientUtils.TryDeserialize<TopicChangedEvent?>(ref utf8JsonReaderTopicChangedEvent, jsonSerializerOptions, out topicChangedEvent);

                    Utf8JsonReader utf8JsonReaderSubscribersChangedEvent = utf8JsonReader;
                    ClientUtils.TryDeserialize<SubscribersChangedEvent?>(ref utf8JsonReaderSubscribersChangedEvent, jsonSerializerOptions, out subscribersChangedEvent);

                    Utf8JsonReader utf8JsonReaderPinAddedEvent = utf8JsonReader;
                    ClientUtils.TryDeserialize<PinAddedEvent?>(ref utf8JsonReaderPinAddedEvent, jsonSerializerOptions, out pinAddedEvent);

                    Utf8JsonReader utf8JsonReaderPinRemovedEvent = utf8JsonReader;
                    ClientUtils.TryDeserialize<PinRemovedEvent?>(ref utf8JsonReaderPinRemovedEvent, jsonSerializerOptions, out pinRemovedEvent);

                    Utf8JsonReader utf8JsonReaderNameChangedEvent = utf8JsonReader;
                    ClientUtils.TryDeserialize<NameChangedEvent?>(ref utf8JsonReaderNameChangedEvent, jsonSerializerOptions, out nameChangedEvent);

                    Utf8JsonReader utf8JsonReaderParentChangedEvent = utf8JsonReader;
                    ClientUtils.TryDeserialize<ParentChangedEvent?>(ref utf8JsonReaderParentChangedEvent, jsonSerializerOptions, out parentChangedEvent);

                    Utf8JsonReader utf8JsonReaderVisibilityChangedEvent = utf8JsonReader;
                    ClientUtils.TryDeserialize<VisibilityChangedEvent?>(ref utf8JsonReaderVisibilityChangedEvent, jsonSerializerOptions, out visibilityChangedEvent);

                    Utf8JsonReader utf8JsonReaderForcedNotificationChangedEvent = utf8JsonReader;
                    ClientUtils.TryDeserialize<ForcedNotificationChangedEvent?>(ref utf8JsonReaderForcedNotificationChangedEvent, jsonSerializerOptions, out forcedNotificationChangedEvent);

                    Utf8JsonReader utf8JsonReaderChildCreatedEvent = utf8JsonReader;
                    ClientUtils.TryDeserialize<ChildCreatedEvent?>(ref utf8JsonReaderChildCreatedEvent, jsonSerializerOptions, out childCreatedEvent);
                }
            }

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        default:
                            break;
                    }
                }
            }

            if (topicChangedEvent != null)
                return new ChannelEventDetail(topicChangedEvent);

            if (subscribersChangedEvent != null)
                return new ChannelEventDetail(subscribersChangedEvent);

            if (pinAddedEvent != null)
                return new ChannelEventDetail(pinAddedEvent);

            if (pinRemovedEvent != null)
                return new ChannelEventDetail(pinRemovedEvent);

            if (nameChangedEvent != null)
                return new ChannelEventDetail(nameChangedEvent);

            if (parentChangedEvent != null)
                return new ChannelEventDetail(parentChangedEvent);

            if (visibilityChangedEvent != null)
                return new ChannelEventDetail(visibilityChangedEvent);

            if (forcedNotificationChangedEvent != null)
                return new ChannelEventDetail(forcedNotificationChangedEvent);

            if (childCreatedEvent != null)
                return new ChannelEventDetail(childCreatedEvent);

            throw new JsonException();
        }

        /// <summary>
        /// Serializes a <see cref="ChannelEventDetail" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="channelEventDetail"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ChannelEventDetail channelEventDetail, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, channelEventDetail, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ChannelEventDetail" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="channelEventDetail"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ChannelEventDetail channelEventDetail, JsonSerializerOptions jsonSerializerOptions)
        {

        }
    }

    /// <summary>
    /// The ChannelEventDetailSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(ChannelEventDetail))]
    public partial class ChannelEventDetailSerializationContext : JsonSerializerContext { }
}
