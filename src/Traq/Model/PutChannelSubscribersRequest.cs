/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Traq.Client.FileParameter;
using OpenAPIDateConverter = Traq.Client.OpenAPIDateConverter;

namespace Traq.Model
{
    /// <summary>
    /// 通知をオンにするユーザーのUUID配列
    /// </summary>
    [DataContract(Name = "PutChannelSubscribersRequest")]
    public partial class PutChannelSubscribersRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PutChannelSubscribersRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PutChannelSubscribersRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PutChannelSubscribersRequest" /> class.
        /// </summary>
        /// <param name="on">通知をオンにするユーザーのUUID配列 (required).</param>
        public PutChannelSubscribersRequest(List<Guid> on = default(List<Guid>))
        {
            // to ensure "on" is required (not null)
            if (on == null)
            {
                throw new ArgumentNullException("on is a required property for PutChannelSubscribersRequest and cannot be null");
            }
            this.On = on;
        }

        /// <summary>
        /// 通知をオンにするユーザーのUUID配列
        /// </summary>
        /// <value>通知をオンにするユーザーのUUID配列</value>
        [DataMember(Name = "on", IsRequired = true, EmitDefaultValue = true)]
        public List<Guid> On { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PutChannelSubscribersRequest {\n");
            sb.Append("  On: ").Append(On).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
