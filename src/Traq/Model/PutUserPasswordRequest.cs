// <auto-generated>
/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Traq.Client;

namespace Traq.Model
{
    /// <summary>
    /// ユーザーパスワード変更リクエスト
    /// </summary>
    public partial class PutUserPasswordRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PutUserPasswordRequest" /> class.
        /// </summary>
        /// <param name="newPassword">新しいパスワード</param>
        [JsonConstructor]
        public PutUserPasswordRequest(string newPassword)
        {
            NewPassword = newPassword;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// 新しいパスワード
        /// </summary>
        /// <value>新しいパスワード</value>
        [JsonPropertyName("newPassword")]
        public string NewPassword { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PutUserPasswordRequest {\n");
            sb.Append("  NewPassword: ").Append(NewPassword).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.NewPassword != null) {
                // NewPassword (string) pattern
                Regex regexNewPassword = new Regex(@"^[\x20-\x7E]{10,32}$", RegexOptions.CultureInvariant);

                if (!regexNewPassword.Match(this.NewPassword).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NewPassword, must match a pattern of " + regexNewPassword, new [] { "NewPassword" });
                }
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PutUserPasswordRequest" />
    /// </summary>
    public class PutUserPasswordRequestJsonConverter : JsonConverter<PutUserPasswordRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="PutUserPasswordRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PutUserPasswordRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> newPassword = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "newPassword":
                            newPassword = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!newPassword.IsSet)
                throw new ArgumentException("Property is required for class PutUserPasswordRequest.", nameof(newPassword));

            if (newPassword.IsSet && newPassword.Value == null)
                throw new ArgumentNullException(nameof(newPassword), "Property is not nullable for class PutUserPasswordRequest.");

            return new PutUserPasswordRequest(newPassword.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="PutUserPasswordRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="putUserPasswordRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PutUserPasswordRequest putUserPasswordRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, putUserPasswordRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PutUserPasswordRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="putUserPasswordRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PutUserPasswordRequest putUserPasswordRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (putUserPasswordRequest.NewPassword == null)
                throw new ArgumentNullException(nameof(putUserPasswordRequest.NewPassword), "Property is required for class PutUserPasswordRequest.");

            writer.WriteString("newPassword", putUserPasswordRequest.NewPassword);
        }
    }

    /// <summary>
    /// The PutUserPasswordRequestSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(PutUserPasswordRequest))]
    public partial class PutUserPasswordRequestSerializationContext : JsonSerializerContext { }
}
