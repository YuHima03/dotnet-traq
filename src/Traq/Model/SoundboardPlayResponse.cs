// <auto-generated>
/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Traq.Client;

namespace Traq.Model
{
    /// <summary>
    /// SoundboardPlayResponse
    /// </summary>
    public partial class SoundboardPlayResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SoundboardPlayResponse" /> class.
        /// </summary>
        /// <param name="ingressId">作成された Ingress のID</param>
        /// <param name="url">作成された Ingress のストリームURL等</param>
        /// <param name="streamKey">RTMP配信の場合のstream key</param>
        [JsonConstructor]
        public SoundboardPlayResponse(string ingressId, Option<string?> url = default, Option<string?> streamKey = default)
        {
            IngressId = ingressId;
            UrlOption = url;
            StreamKeyOption = streamKey;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// 作成された Ingress のID
        /// </summary>
        /// <value>作成された Ingress のID</value>
        [JsonPropertyName("ingressId")]
        public string IngressId { get; set; }

        /// <summary>
        /// Used to track the state of Url
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UrlOption { get; private set; }

        /// <summary>
        /// 作成された Ingress のストリームURL等
        /// </summary>
        /// <value>作成された Ingress のストリームURL等</value>
        [JsonPropertyName("url")]
        public string? Url { get { return this.UrlOption; } set { this.UrlOption = new(value); } }

        /// <summary>
        /// Used to track the state of StreamKey
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StreamKeyOption { get; private set; }

        /// <summary>
        /// RTMP配信の場合のstream key
        /// </summary>
        /// <value>RTMP配信の場合のstream key</value>
        [JsonPropertyName("streamKey")]
        public string? StreamKey { get { return this.StreamKeyOption; } set { this.StreamKeyOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SoundboardPlayResponse {\n");
            sb.Append("  IngressId: ").Append(IngressId).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  StreamKey: ").Append(StreamKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SoundboardPlayResponse" />
    /// </summary>
    public class SoundboardPlayResponseJsonConverter : JsonConverter<SoundboardPlayResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="SoundboardPlayResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SoundboardPlayResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> ingressId = default;
            Option<string?> url = default;
            Option<string?> streamKey = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "ingressId":
                            ingressId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "url":
                            url = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "streamKey":
                            streamKey = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!ingressId.IsSet)
                throw new ArgumentException("Property is required for class SoundboardPlayResponse.", nameof(ingressId));

            if (ingressId.IsSet && ingressId.Value == null)
                throw new ArgumentNullException(nameof(ingressId), "Property is not nullable for class SoundboardPlayResponse.");

            if (url.IsSet && url.Value == null)
                throw new ArgumentNullException(nameof(url), "Property is not nullable for class SoundboardPlayResponse.");

            if (streamKey.IsSet && streamKey.Value == null)
                throw new ArgumentNullException(nameof(streamKey), "Property is not nullable for class SoundboardPlayResponse.");

            return new SoundboardPlayResponse(ingressId.Value!, url, streamKey);
        }

        /// <summary>
        /// Serializes a <see cref="SoundboardPlayResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="soundboardPlayResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SoundboardPlayResponse soundboardPlayResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, soundboardPlayResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SoundboardPlayResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="soundboardPlayResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SoundboardPlayResponse soundboardPlayResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (soundboardPlayResponse.IngressId == null)
                throw new ArgumentNullException(nameof(soundboardPlayResponse.IngressId), "Property is required for class SoundboardPlayResponse.");

            if (soundboardPlayResponse.UrlOption.IsSet && soundboardPlayResponse.Url == null)
                throw new ArgumentNullException(nameof(soundboardPlayResponse.Url), "Property is required for class SoundboardPlayResponse.");

            if (soundboardPlayResponse.StreamKeyOption.IsSet && soundboardPlayResponse.StreamKey == null)
                throw new ArgumentNullException(nameof(soundboardPlayResponse.StreamKey), "Property is required for class SoundboardPlayResponse.");

            writer.WriteString("ingressId", soundboardPlayResponse.IngressId);

            if (soundboardPlayResponse.UrlOption.IsSet)
                writer.WriteString("url", soundboardPlayResponse.Url);

            if (soundboardPlayResponse.StreamKeyOption.IsSet)
                writer.WriteString("streamKey", soundboardPlayResponse.StreamKey);
        }
    }

    /// <summary>
    /// The SoundboardPlayResponseSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(SoundboardPlayResponse))]
    public partial class SoundboardPlayResponseSerializationContext : JsonSerializerContext { }
}
