// <auto-generated>
/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Traq.Client;

namespace Traq.Model
{
    /// <summary>
    /// クリップされたメッセージ
    /// </summary>
    public partial class ClippedMessage : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ClippedMessage" /> class.
        /// </summary>
        /// <param name="message">message</param>
        /// <param name="clippedAt">クリップした日時</param>
        [JsonConstructor]
        public ClippedMessage(Message message, DateTimeOffset clippedAt)
        {
            Message = message;
            ClippedAt = clippedAt;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [JsonPropertyName("message")]
        public Message Message { get; set; }

        /// <summary>
        /// クリップした日時
        /// </summary>
        /// <value>クリップした日時</value>
        [JsonPropertyName("clippedAt")]
        public DateTimeOffset ClippedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ClippedMessage {\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  ClippedAt: ").Append(ClippedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ClippedMessage" />
    /// </summary>
    public class ClippedMessageJsonConverter : JsonConverter<ClippedMessage>
    {
        /// <summary>
        /// The format to use to serialize ClippedAt
        /// </summary>
        public static string ClippedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="ClippedMessage" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ClippedMessage Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Message?> message = default;
            Option<DateTimeOffset?> clippedAt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "message":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                message = new Option<Message?>(JsonSerializer.Deserialize<Message>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "clippedAt":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                clippedAt = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!message.IsSet)
                throw new ArgumentException("Property is required for class ClippedMessage.", nameof(message));

            if (!clippedAt.IsSet)
                throw new ArgumentException("Property is required for class ClippedMessage.", nameof(clippedAt));

            if (message.IsSet && message.Value == null)
                throw new ArgumentNullException(nameof(message), "Property is not nullable for class ClippedMessage.");

            if (clippedAt.IsSet && clippedAt.Value == null)
                throw new ArgumentNullException(nameof(clippedAt), "Property is not nullable for class ClippedMessage.");

            return new ClippedMessage(message.Value!, clippedAt.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="ClippedMessage" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="clippedMessage"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ClippedMessage clippedMessage, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, clippedMessage, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ClippedMessage" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="clippedMessage"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ClippedMessage clippedMessage, JsonSerializerOptions jsonSerializerOptions)
        {
            if (clippedMessage.Message == null)
                throw new ArgumentNullException(nameof(clippedMessage.Message), "Property is required for class ClippedMessage.");

            writer.WritePropertyName("message");
            JsonSerializer.Serialize(writer, clippedMessage.Message, jsonSerializerOptions);
            writer.WriteString("clippedAt", clippedMessage.ClippedAt.ToString(ClippedAtFormat));
        }
    }

    /// <summary>
    /// The ClippedMessageSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(ClippedMessage))]
    public partial class ClippedMessageSerializationContext : JsonSerializerContext { }
}
