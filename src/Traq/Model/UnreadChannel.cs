// <auto-generated>
/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Traq.Client;

namespace Traq.Model
{
    /// <summary>
    /// 未読チャンネル情報
    /// </summary>
    public partial class UnreadChannel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UnreadChannel" /> class.
        /// </summary>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="count">未読メッセージ数</param>
        /// <param name="noticeable">自分宛てメッセージが含まれているかどうか</param>
        /// <param name="since">チャンネルの最古の未読メッセージの日時</param>
        /// <param name="updatedAt">チャンネルの最新の未読メッセージの日時</param>
        /// <param name="oldestMessageId">そのチャンネルの未読の中で最も古いメッセージのid</param>
        [JsonConstructor]
        public UnreadChannel(Guid channelId, int count, bool noticeable, DateTimeOffset since, DateTimeOffset updatedAt, Guid oldestMessageId)
        {
            ChannelId = channelId;
            Count = count;
            Noticeable = noticeable;
            Since = since;
            UpdatedAt = updatedAt;
            OldestMessageId = oldestMessageId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// チャンネルUUID
        /// </summary>
        /// <value>チャンネルUUID</value>
        [JsonPropertyName("channelId")]
        public Guid ChannelId { get; set; }

        /// <summary>
        /// 未読メッセージ数
        /// </summary>
        /// <value>未読メッセージ数</value>
        [JsonPropertyName("count")]
        public int Count { get; set; }

        /// <summary>
        /// 自分宛てメッセージが含まれているかどうか
        /// </summary>
        /// <value>自分宛てメッセージが含まれているかどうか</value>
        [JsonPropertyName("noticeable")]
        public bool Noticeable { get; set; }

        /// <summary>
        /// チャンネルの最古の未読メッセージの日時
        /// </summary>
        /// <value>チャンネルの最古の未読メッセージの日時</value>
        [JsonPropertyName("since")]
        public DateTimeOffset Since { get; set; }

        /// <summary>
        /// チャンネルの最新の未読メッセージの日時
        /// </summary>
        /// <value>チャンネルの最新の未読メッセージの日時</value>
        [JsonPropertyName("updatedAt")]
        public DateTimeOffset UpdatedAt { get; set; }

        /// <summary>
        /// そのチャンネルの未読の中で最も古いメッセージのid
        /// </summary>
        /// <value>そのチャンネルの未読の中で最も古いメッセージのid</value>
        [JsonPropertyName("oldestMessageId")]
        public Guid OldestMessageId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UnreadChannel {\n");
            sb.Append("  ChannelId: ").Append(ChannelId).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  Noticeable: ").Append(Noticeable).Append("\n");
            sb.Append("  Since: ").Append(Since).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  OldestMessageId: ").Append(OldestMessageId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UnreadChannel" />
    /// </summary>
    public class UnreadChannelJsonConverter : JsonConverter<UnreadChannel>
    {
        /// <summary>
        /// The format to use to serialize Since
        /// </summary>
        public static string SinceFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdatedAt
        /// </summary>
        public static string UpdatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="UnreadChannel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UnreadChannel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid?> channelId = default;
            Option<int?> count = default;
            Option<bool?> noticeable = default;
            Option<DateTimeOffset?> since = default;
            Option<DateTimeOffset?> updatedAt = default;
            Option<Guid?> oldestMessageId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "channelId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                channelId = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        case "count":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                count = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "noticeable":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                noticeable = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "since":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                since = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "updatedAt":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                updatedAt = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "oldestMessageId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                oldestMessageId = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!channelId.IsSet)
                throw new ArgumentException("Property is required for class UnreadChannel.", nameof(channelId));

            if (!count.IsSet)
                throw new ArgumentException("Property is required for class UnreadChannel.", nameof(count));

            if (!noticeable.IsSet)
                throw new ArgumentException("Property is required for class UnreadChannel.", nameof(noticeable));

            if (!since.IsSet)
                throw new ArgumentException("Property is required for class UnreadChannel.", nameof(since));

            if (!updatedAt.IsSet)
                throw new ArgumentException("Property is required for class UnreadChannel.", nameof(updatedAt));

            if (!oldestMessageId.IsSet)
                throw new ArgumentException("Property is required for class UnreadChannel.", nameof(oldestMessageId));

            if (channelId.IsSet && channelId.Value == null)
                throw new ArgumentNullException(nameof(channelId), "Property is not nullable for class UnreadChannel.");

            if (count.IsSet && count.Value == null)
                throw new ArgumentNullException(nameof(count), "Property is not nullable for class UnreadChannel.");

            if (noticeable.IsSet && noticeable.Value == null)
                throw new ArgumentNullException(nameof(noticeable), "Property is not nullable for class UnreadChannel.");

            if (since.IsSet && since.Value == null)
                throw new ArgumentNullException(nameof(since), "Property is not nullable for class UnreadChannel.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class UnreadChannel.");

            if (oldestMessageId.IsSet && oldestMessageId.Value == null)
                throw new ArgumentNullException(nameof(oldestMessageId), "Property is not nullable for class UnreadChannel.");

            return new UnreadChannel(channelId.Value!.Value!, count.Value!.Value!, noticeable.Value!.Value!, since.Value!.Value!, updatedAt.Value!.Value!, oldestMessageId.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="UnreadChannel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="unreadChannel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UnreadChannel unreadChannel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, unreadChannel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UnreadChannel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="unreadChannel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, UnreadChannel unreadChannel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteString("channelId", unreadChannel.ChannelId);

            writer.WriteNumber("count", unreadChannel.Count);

            writer.WriteBoolean("noticeable", unreadChannel.Noticeable);

            writer.WriteString("since", unreadChannel.Since.ToString(SinceFormat));

            writer.WriteString("updatedAt", unreadChannel.UpdatedAt.ToString(UpdatedAtFormat));

            writer.WriteString("oldestMessageId", unreadChannel.OldestMessageId);
        }
    }

    /// <summary>
    /// The UnreadChannelSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(UnreadChannel))]
    public partial class UnreadChannelSerializationContext : JsonSerializerContext { }
}
