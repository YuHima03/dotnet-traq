// <auto-generated>
/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Traq.Client;

namespace Traq.Model
{
    /// <summary>
    /// ユーザー情報編集リクエスト
    /// </summary>
    public partial class PatchUserRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PatchUserRequest" /> class.
        /// </summary>
        /// <param name="displayName">新しい表示名</param>
        /// <param name="twitterId">TwitterID</param>
        /// <param name="state">state</param>
        /// <param name="role">ユーザーロール</param>
        [JsonConstructor]
        public PatchUserRequest(Option<string?> displayName = default, Option<string?> twitterId = default, Option<UserAccountState?> state = default, Option<string?> role = default)
        {
            DisplayNameOption = displayName;
            TwitterIdOption = twitterId;
            StateOption = state;
            RoleOption = role;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of State
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<UserAccountState?> StateOption { get; private set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [JsonPropertyName("state")]
        public UserAccountState? State { get { return this.StateOption; } set { this.StateOption = new(value); } }

        /// <summary>
        /// Used to track the state of DisplayName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DisplayNameOption { get; private set; }

        /// <summary>
        /// 新しい表示名
        /// </summary>
        /// <value>新しい表示名</value>
        [JsonPropertyName("displayName")]
        public string? DisplayName { get { return this.DisplayNameOption; } set { this.DisplayNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of TwitterId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TwitterIdOption { get; private set; }

        /// <summary>
        /// TwitterID
        /// </summary>
        /// <value>TwitterID</value>
        [JsonPropertyName("twitterId")]
        public string? TwitterId { get { return this.TwitterIdOption; } set { this.TwitterIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Role
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RoleOption { get; private set; }

        /// <summary>
        /// ユーザーロール
        /// </summary>
        /// <value>ユーザーロール</value>
        [JsonPropertyName("role")]
        public string? Role { get { return this.RoleOption; } set { this.RoleOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PatchUserRequest {\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  TwitterId: ").Append(TwitterId).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // DisplayName (string) maxLength
            if (this.DisplayName != null && this.DisplayName.Length > 32)
            {
                yield return new ValidationResult("Invalid value for DisplayName, length must be less than 32.", new [] { "DisplayName" });
            }

            if (this.TwitterIdOption.Value != null) {
                // TwitterId (string) pattern
                Regex regexTwitterId = new Regex(@"^[a-zA-Z0-9_]{1,15}$", RegexOptions.CultureInvariant);

                if (this.TwitterIdOption.Value != null &&!regexTwitterId.Match(this.TwitterIdOption.Value).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TwitterId, must match a pattern of " + regexTwitterId, new [] { "TwitterId" });
                }
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PatchUserRequest" />
    /// </summary>
    public class PatchUserRequestJsonConverter : JsonConverter<PatchUserRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="PatchUserRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PatchUserRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> displayName = default;
            Option<string?> twitterId = default;
            Option<UserAccountState?> state = default;
            Option<string?> role = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "displayName":
                            displayName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "twitterId":
                            twitterId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "state":
                            string? stateRawValue = utf8JsonReader.GetString();
                            if (stateRawValue != null)
                                state = new Option<UserAccountState?>(UserAccountStateValueConverter.FromStringOrDefault(stateRawValue));
                            break;
                        case "role":
                            role = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (displayName.IsSet && displayName.Value == null)
                throw new ArgumentNullException(nameof(displayName), "Property is not nullable for class PatchUserRequest.");

            if (twitterId.IsSet && twitterId.Value == null)
                throw new ArgumentNullException(nameof(twitterId), "Property is not nullable for class PatchUserRequest.");

            if (state.IsSet && state.Value == null)
                throw new ArgumentNullException(nameof(state), "Property is not nullable for class PatchUserRequest.");

            if (role.IsSet && role.Value == null)
                throw new ArgumentNullException(nameof(role), "Property is not nullable for class PatchUserRequest.");

            return new PatchUserRequest(displayName, twitterId, state, role);
        }

        /// <summary>
        /// Serializes a <see cref="PatchUserRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="patchUserRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PatchUserRequest patchUserRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, patchUserRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PatchUserRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="patchUserRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PatchUserRequest patchUserRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (patchUserRequest.DisplayNameOption.IsSet && patchUserRequest.DisplayName == null)
                throw new ArgumentNullException(nameof(patchUserRequest.DisplayName), "Property is required for class PatchUserRequest.");

            if (patchUserRequest.TwitterIdOption.IsSet && patchUserRequest.TwitterId == null)
                throw new ArgumentNullException(nameof(patchUserRequest.TwitterId), "Property is required for class PatchUserRequest.");

            if (patchUserRequest.RoleOption.IsSet && patchUserRequest.Role == null)
                throw new ArgumentNullException(nameof(patchUserRequest.Role), "Property is required for class PatchUserRequest.");

            if (patchUserRequest.DisplayNameOption.IsSet)
                writer.WriteString("displayName", patchUserRequest.DisplayName);

            if (patchUserRequest.TwitterIdOption.IsSet)
                writer.WriteString("twitterId", patchUserRequest.TwitterId);

            if (patchUserRequest.StateOption.IsSet)
            {
                var stateRawValue = UserAccountStateValueConverter.ToJsonValue(patchUserRequest.State!.Value);
                writer.WriteNumber("state", stateRawValue);
            }
            if (patchUserRequest.RoleOption.IsSet)
                writer.WriteString("role", patchUserRequest.Role);
        }
    }

    /// <summary>
    /// The PatchUserRequestSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(PatchUserRequest))]
    public partial class PatchUserRequestSerializationContext : JsonSerializerContext { }
}
