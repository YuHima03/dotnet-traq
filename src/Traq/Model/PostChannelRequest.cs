/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Traq.Client.FileParameter;
using OpenAPIDateConverter = Traq.Client.OpenAPIDateConverter;

namespace Traq.Model
{
    /// <summary>
    /// チャンネル作成リクエスト
    /// </summary>
    [DataContract(Name = "PostChannelRequest")]
    public partial class PostChannelRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PostChannelRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PostChannelRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PostChannelRequest" /> class.
        /// </summary>
        /// <param name="name">チャンネル名 (required).</param>
        /// <param name="parent">親チャンネルのUUID ルートに作成する場合はnullを指定 (required).</param>
        public PostChannelRequest(string name = default(string), Guid? parent = default(Guid?))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for PostChannelRequest and cannot be null");
            }
            this.Name = name;
            // to ensure "parent" is required (not null)
            if (parent == null)
            {
                throw new ArgumentNullException("parent is a required property for PostChannelRequest and cannot be null");
            }
            this.Parent = parent;
        }

        /// <summary>
        /// チャンネル名
        /// </summary>
        /// <value>チャンネル名</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// 親チャンネルのUUID ルートに作成する場合はnullを指定
        /// </summary>
        /// <value>親チャンネルのUUID ルートに作成する場合はnullを指定</value>
        [DataMember(Name = "parent", IsRequired = true, EmitDefaultValue = true)]
        public Guid? Parent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PostChannelRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Parent: ").Append(Parent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.Name != null)
            {
                // Name (string) pattern
                Regex regexName = new Regex(@"^[a-zA-Z0-9-_]{1,20}$", RegexOptions.CultureInvariant);
                if (!regexName.Match(this.Name).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, must match a pattern of " + regexName, new[] { "Name" });
                }
            }

            yield break;
        }
    }

}
