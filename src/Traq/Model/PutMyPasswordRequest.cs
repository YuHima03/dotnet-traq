/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Traq.Client.FileParameter;
using OpenAPIDateConverter = Traq.Client.OpenAPIDateConverter;

namespace Traq.Model
{
    /// <summary>
    /// パスワード変更リクエスト
    /// </summary>
    [DataContract(Name = "PutMyPasswordRequest")]
    public partial class PutMyPasswordRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PutMyPasswordRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PutMyPasswordRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PutMyPasswordRequest" /> class.
        /// </summary>
        /// <param name="password">現在のパスワード (required).</param>
        /// <param name="newPassword">新しいパスワード (required).</param>
        public PutMyPasswordRequest(string password = default(string), string newPassword = default(string))
        {
            // to ensure "password" is required (not null)
            if (password == null)
            {
                throw new ArgumentNullException("password is a required property for PutMyPasswordRequest and cannot be null");
            }
            this.Password = password;
            // to ensure "newPassword" is required (not null)
            if (newPassword == null)
            {
                throw new ArgumentNullException("newPassword is a required property for PutMyPasswordRequest and cannot be null");
            }
            this.NewPassword = newPassword;
        }

        /// <summary>
        /// 現在のパスワード
        /// </summary>
        /// <value>現在のパスワード</value>
        [DataMember(Name = "password", IsRequired = true, EmitDefaultValue = true)]
        public string Password { get; set; }

        /// <summary>
        /// 新しいパスワード
        /// </summary>
        /// <value>新しいパスワード</value>
        [DataMember(Name = "newPassword", IsRequired = true, EmitDefaultValue = true)]
        public string NewPassword { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PutMyPasswordRequest {\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  NewPassword: ").Append(NewPassword).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.Password != null)
            {
                // Password (string) pattern
                Regex regexPassword = new Regex(@"^[\x20-\x7E]{10,32}$", RegexOptions.CultureInvariant);
                if (!regexPassword.Match(this.Password).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Password, must match a pattern of " + regexPassword, new[] { "Password" });
                }
            }

            if (this.NewPassword != null)
            {
                // NewPassword (string) pattern
                Regex regexNewPassword = new Regex(@"^[\x20-\x7E]{10,32}$", RegexOptions.CultureInvariant);
                if (!regexNewPassword.Match(this.NewPassword).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NewPassword, must match a pattern of " + regexNewPassword, new[] { "NewPassword" });
                }
            }

            yield break;
        }
    }

}
