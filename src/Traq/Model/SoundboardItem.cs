// <auto-generated>
/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Traq.Client;

namespace Traq.Model
{
    /// <summary>
    /// SoundboardItem
    /// </summary>
    public partial class SoundboardItem : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SoundboardItem" /> class.
        /// </summary>
        /// <param name="soundId">サーバが発行したサウンドID</param>
        /// <param name="soundName">ユーザが指定した表示用のサウンド名</param>
        /// <param name="stampId">任意のスタンプID等、サウンドに紐づく拡張情報</param>
        /// <param name="creatorId">作成者のユーザID</param>
        [JsonConstructor]
        public SoundboardItem(string soundId, string soundName, string stampId, string creatorId)
        {
            SoundId = soundId;
            SoundName = soundName;
            StampId = stampId;
            CreatorId = creatorId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// サーバが発行したサウンドID
        /// </summary>
        /// <value>サーバが発行したサウンドID</value>
        [JsonPropertyName("soundId")]
        public string SoundId { get; set; }

        /// <summary>
        /// ユーザが指定した表示用のサウンド名
        /// </summary>
        /// <value>ユーザが指定した表示用のサウンド名</value>
        [JsonPropertyName("soundName")]
        public string SoundName { get; set; }

        /// <summary>
        /// 任意のスタンプID等、サウンドに紐づく拡張情報
        /// </summary>
        /// <value>任意のスタンプID等、サウンドに紐づく拡張情報</value>
        [JsonPropertyName("stampId")]
        public string StampId { get; set; }

        /// <summary>
        /// 作成者のユーザID
        /// </summary>
        /// <value>作成者のユーザID</value>
        [JsonPropertyName("creatorId")]
        public string CreatorId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SoundboardItem {\n");
            sb.Append("  SoundId: ").Append(SoundId).Append("\n");
            sb.Append("  SoundName: ").Append(SoundName).Append("\n");
            sb.Append("  StampId: ").Append(StampId).Append("\n");
            sb.Append("  CreatorId: ").Append(CreatorId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SoundboardItem" />
    /// </summary>
    public class SoundboardItemJsonConverter : JsonConverter<SoundboardItem>
    {
        /// <summary>
        /// Deserializes json to <see cref="SoundboardItem" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SoundboardItem Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> soundId = default;
            Option<string?> soundName = default;
            Option<string?> stampId = default;
            Option<string?> creatorId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "soundId":
                            soundId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "soundName":
                            soundName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "stampId":
                            stampId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "creatorId":
                            creatorId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!soundId.IsSet)
                throw new ArgumentException("Property is required for class SoundboardItem.", nameof(soundId));

            if (!soundName.IsSet)
                throw new ArgumentException("Property is required for class SoundboardItem.", nameof(soundName));

            if (!stampId.IsSet)
                throw new ArgumentException("Property is required for class SoundboardItem.", nameof(stampId));

            if (!creatorId.IsSet)
                throw new ArgumentException("Property is required for class SoundboardItem.", nameof(creatorId));

            if (soundId.IsSet && soundId.Value == null)
                throw new ArgumentNullException(nameof(soundId), "Property is not nullable for class SoundboardItem.");

            if (soundName.IsSet && soundName.Value == null)
                throw new ArgumentNullException(nameof(soundName), "Property is not nullable for class SoundboardItem.");

            if (stampId.IsSet && stampId.Value == null)
                throw new ArgumentNullException(nameof(stampId), "Property is not nullable for class SoundboardItem.");

            if (creatorId.IsSet && creatorId.Value == null)
                throw new ArgumentNullException(nameof(creatorId), "Property is not nullable for class SoundboardItem.");

            return new SoundboardItem(soundId.Value!, soundName.Value!, stampId.Value!, creatorId.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="SoundboardItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="soundboardItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SoundboardItem soundboardItem, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, soundboardItem, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SoundboardItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="soundboardItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SoundboardItem soundboardItem, JsonSerializerOptions jsonSerializerOptions)
        {
            if (soundboardItem.SoundId == null)
                throw new ArgumentNullException(nameof(soundboardItem.SoundId), "Property is required for class SoundboardItem.");

            if (soundboardItem.SoundName == null)
                throw new ArgumentNullException(nameof(soundboardItem.SoundName), "Property is required for class SoundboardItem.");

            if (soundboardItem.StampId == null)
                throw new ArgumentNullException(nameof(soundboardItem.StampId), "Property is required for class SoundboardItem.");

            if (soundboardItem.CreatorId == null)
                throw new ArgumentNullException(nameof(soundboardItem.CreatorId), "Property is required for class SoundboardItem.");

            writer.WriteString("soundId", soundboardItem.SoundId);

            writer.WriteString("soundName", soundboardItem.SoundName);

            writer.WriteString("stampId", soundboardItem.StampId);

            writer.WriteString("creatorId", soundboardItem.CreatorId);
        }
    }

    /// <summary>
    /// The SoundboardItemSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(SoundboardItem))]
    public partial class SoundboardItemSerializationContext : JsonSerializerContext { }
}
