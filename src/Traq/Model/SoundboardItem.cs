/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Traq.Client.FileParameter;
using OpenAPIDateConverter = Traq.Client.OpenAPIDateConverter;

namespace Traq.Model
{
    /// <summary>
    /// SoundboardItem
    /// </summary>
    [DataContract(Name = "soundboardItem")]
    public partial class SoundboardItem : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SoundboardItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SoundboardItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SoundboardItem" /> class.
        /// </summary>
        /// <param name="soundId">サーバが発行したサウンドID (required).</param>
        /// <param name="soundName">ユーザが指定した表示用のサウンド名 (required).</param>
        /// <param name="stampId">任意のスタンプID等、サウンドに紐づく拡張情報 (required).</param>
        /// <param name="creatorId">作成者のユーザID (required).</param>
        public SoundboardItem(string soundId = default(string), string soundName = default(string), string stampId = default(string), string creatorId = default(string))
        {
            // to ensure "soundId" is required (not null)
            if (soundId == null)
            {
                throw new ArgumentNullException("soundId is a required property for SoundboardItem and cannot be null");
            }
            this.SoundId = soundId;
            // to ensure "soundName" is required (not null)
            if (soundName == null)
            {
                throw new ArgumentNullException("soundName is a required property for SoundboardItem and cannot be null");
            }
            this.SoundName = soundName;
            // to ensure "stampId" is required (not null)
            if (stampId == null)
            {
                throw new ArgumentNullException("stampId is a required property for SoundboardItem and cannot be null");
            }
            this.StampId = stampId;
            // to ensure "creatorId" is required (not null)
            if (creatorId == null)
            {
                throw new ArgumentNullException("creatorId is a required property for SoundboardItem and cannot be null");
            }
            this.CreatorId = creatorId;
        }

        /// <summary>
        /// サーバが発行したサウンドID
        /// </summary>
        /// <value>サーバが発行したサウンドID</value>
        [DataMember(Name = "soundId", IsRequired = true, EmitDefaultValue = true)]
        public string SoundId { get; set; }

        /// <summary>
        /// ユーザが指定した表示用のサウンド名
        /// </summary>
        /// <value>ユーザが指定した表示用のサウンド名</value>
        [DataMember(Name = "soundName", IsRequired = true, EmitDefaultValue = true)]
        public string SoundName { get; set; }

        /// <summary>
        /// 任意のスタンプID等、サウンドに紐づく拡張情報
        /// </summary>
        /// <value>任意のスタンプID等、サウンドに紐づく拡張情報</value>
        [DataMember(Name = "stampId", IsRequired = true, EmitDefaultValue = true)]
        public string StampId { get; set; }

        /// <summary>
        /// 作成者のユーザID
        /// </summary>
        /// <value>作成者のユーザID</value>
        [DataMember(Name = "creatorId", IsRequired = true, EmitDefaultValue = true)]
        public string CreatorId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SoundboardItem {\n");
            sb.Append("  SoundId: ").Append(SoundId).Append("\n");
            sb.Append("  SoundName: ").Append(SoundName).Append("\n");
            sb.Append("  StampId: ").Append(StampId).Append("\n");
            sb.Append("  CreatorId: ").Append(CreatorId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
