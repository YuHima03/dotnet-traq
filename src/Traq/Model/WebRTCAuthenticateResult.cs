// <auto-generated>
/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Traq.Client;

namespace Traq.Model
{
    /// <summary>
    /// skyway用認証リクエストリザルト
    /// </summary>
    public partial class WebRTCAuthenticateResult : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebRTCAuthenticateResult" /> class.
        /// </summary>
        /// <param name="peerId">ピアID</param>
        /// <param name="ttl">TTL</param>
        /// <param name="timestamp">タイムスタンプ</param>
        /// <param name="authToken">認証トークン</param>
        [JsonConstructor]
        public WebRTCAuthenticateResult(string peerId, int ttl, long timestamp, string authToken)
        {
            PeerId = peerId;
            Ttl = ttl;
            Timestamp = timestamp;
            AuthToken = authToken;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// ピアID
        /// </summary>
        /// <value>ピアID</value>
        [JsonPropertyName("peerId")]
        public string PeerId { get; set; }

        /// <summary>
        /// TTL
        /// </summary>
        /// <value>TTL</value>
        [JsonPropertyName("ttl")]
        public int Ttl { get; set; }

        /// <summary>
        /// タイムスタンプ
        /// </summary>
        /// <value>タイムスタンプ</value>
        [JsonPropertyName("timestamp")]
        public long Timestamp { get; set; }

        /// <summary>
        /// 認証トークン
        /// </summary>
        /// <value>認証トークン</value>
        [JsonPropertyName("authToken")]
        public string AuthToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebRTCAuthenticateResult {\n");
            sb.Append("  PeerId: ").Append(PeerId).Append("\n");
            sb.Append("  Ttl: ").Append(Ttl).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  AuthToken: ").Append(AuthToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WebRTCAuthenticateResult" />
    /// </summary>
    public class WebRTCAuthenticateResultJsonConverter : JsonConverter<WebRTCAuthenticateResult>
    {
        /// <summary>
        /// Deserializes json to <see cref="WebRTCAuthenticateResult" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WebRTCAuthenticateResult Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> peerId = default;
            Option<int?> ttl = default;
            Option<long?> timestamp = default;
            Option<string?> authToken = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "peerId":
                            peerId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "ttl":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                ttl = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "timestamp":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                timestamp = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "authToken":
                            authToken = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!peerId.IsSet)
                throw new ArgumentException("Property is required for class WebRTCAuthenticateResult.", nameof(peerId));

            if (!ttl.IsSet)
                throw new ArgumentException("Property is required for class WebRTCAuthenticateResult.", nameof(ttl));

            if (!timestamp.IsSet)
                throw new ArgumentException("Property is required for class WebRTCAuthenticateResult.", nameof(timestamp));

            if (!authToken.IsSet)
                throw new ArgumentException("Property is required for class WebRTCAuthenticateResult.", nameof(authToken));

            if (peerId.IsSet && peerId.Value == null)
                throw new ArgumentNullException(nameof(peerId), "Property is not nullable for class WebRTCAuthenticateResult.");

            if (ttl.IsSet && ttl.Value == null)
                throw new ArgumentNullException(nameof(ttl), "Property is not nullable for class WebRTCAuthenticateResult.");

            if (timestamp.IsSet && timestamp.Value == null)
                throw new ArgumentNullException(nameof(timestamp), "Property is not nullable for class WebRTCAuthenticateResult.");

            if (authToken.IsSet && authToken.Value == null)
                throw new ArgumentNullException(nameof(authToken), "Property is not nullable for class WebRTCAuthenticateResult.");

            return new WebRTCAuthenticateResult(peerId.Value!, ttl.Value!.Value!, timestamp.Value!.Value!, authToken.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="WebRTCAuthenticateResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webRTCAuthenticateResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WebRTCAuthenticateResult webRTCAuthenticateResult, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, webRTCAuthenticateResult, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WebRTCAuthenticateResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webRTCAuthenticateResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WebRTCAuthenticateResult webRTCAuthenticateResult, JsonSerializerOptions jsonSerializerOptions)
        {
            if (webRTCAuthenticateResult.PeerId == null)
                throw new ArgumentNullException(nameof(webRTCAuthenticateResult.PeerId), "Property is required for class WebRTCAuthenticateResult.");

            if (webRTCAuthenticateResult.AuthToken == null)
                throw new ArgumentNullException(nameof(webRTCAuthenticateResult.AuthToken), "Property is required for class WebRTCAuthenticateResult.");

            writer.WriteString("peerId", webRTCAuthenticateResult.PeerId);

            writer.WriteNumber("ttl", webRTCAuthenticateResult.Ttl);

            writer.WriteNumber("timestamp", webRTCAuthenticateResult.Timestamp);

            writer.WriteString("authToken", webRTCAuthenticateResult.AuthToken);
        }
    }

    /// <summary>
    /// The WebRTCAuthenticateResultSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(WebRTCAuthenticateResult))]
    public partial class WebRTCAuthenticateResultSerializationContext : JsonSerializerContext { }
}
