// <auto-generated>
/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Traq.Client;

namespace Traq.Model
{
    /// <summary>
    /// ユーザーグループ
    /// </summary>
    public partial class UserGroup : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserGroup" /> class.
        /// </summary>
        /// <param name="id">グループUUID</param>
        /// <param name="name">グループ名</param>
        /// <param name="description">グループ説明</param>
        /// <param name="type">グループタイプ</param>
        /// <param name="icon">グループアイコンUUID</param>
        /// <param name="members">グループメンバーの配列</param>
        /// <param name="createdAt">作成日時</param>
        /// <param name="updatedAt">更新日時</param>
        /// <param name="admins">グループ管理者のUUIDの配列</param>
        [JsonConstructor]
        public UserGroup(Guid id, string name, string description, string type, Guid icon, List<UserGroupMember> members, DateTimeOffset createdAt, DateTimeOffset updatedAt, List<Guid> admins)
        {
            Id = id;
            Name = name;
            Description = description;
            Type = type;
            Icon = icon;
            Members = members;
            CreatedAt = createdAt;
            UpdatedAt = updatedAt;
            Admins = admins;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// グループUUID
        /// </summary>
        /// <value>グループUUID</value>
        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        /// <summary>
        /// グループ名
        /// </summary>
        /// <value>グループ名</value>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// グループ説明
        /// </summary>
        /// <value>グループ説明</value>
        [JsonPropertyName("description")]
        public string Description { get; set; }

        /// <summary>
        /// グループタイプ
        /// </summary>
        /// <value>グループタイプ</value>
        [JsonPropertyName("type")]
        public string Type { get; set; }

        /// <summary>
        /// グループアイコンUUID
        /// </summary>
        /// <value>グループアイコンUUID</value>
        [JsonPropertyName("icon")]
        public Guid Icon { get; set; }

        /// <summary>
        /// グループメンバーの配列
        /// </summary>
        /// <value>グループメンバーの配列</value>
        [JsonPropertyName("members")]
        public List<UserGroupMember> Members { get; set; }

        /// <summary>
        /// 作成日時
        /// </summary>
        /// <value>作成日時</value>
        [JsonPropertyName("createdAt")]
        public DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// 更新日時
        /// </summary>
        /// <value>更新日時</value>
        [JsonPropertyName("updatedAt")]
        public DateTimeOffset UpdatedAt { get; set; }

        /// <summary>
        /// グループ管理者のUUIDの配列
        /// </summary>
        /// <value>グループ管理者のUUIDの配列</value>
        [JsonPropertyName("admins")]
        public List<Guid> Admins { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserGroup {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Icon: ").Append(Icon).Append("\n");
            sb.Append("  Members: ").Append(Members).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Admins: ").Append(Admins).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UserGroup" />
    /// </summary>
    public class UserGroupJsonConverter : JsonConverter<UserGroup>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdatedAt
        /// </summary>
        public static string UpdatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="UserGroup" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UserGroup Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid?> id = default;
            Option<string?> name = default;
            Option<string?> description = default;
            Option<string?> type = default;
            Option<Guid?> icon = default;
            Option<List<UserGroupMember>?> members = default;
            Option<DateTimeOffset?> createdAt = default;
            Option<DateTimeOffset?> updatedAt = default;
            Option<List<Guid>?> admins = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "type":
                            type = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "icon":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                icon = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        case "members":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                members = new Option<List<UserGroupMember>?>(JsonSerializer.Deserialize<List<UserGroupMember>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "createdAt":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createdAt = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "updatedAt":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                updatedAt = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "admins":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                admins = new Option<List<Guid>?>(JsonSerializer.Deserialize<List<Guid>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class UserGroup.", nameof(id));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class UserGroup.", nameof(name));

            if (!description.IsSet)
                throw new ArgumentException("Property is required for class UserGroup.", nameof(description));

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class UserGroup.", nameof(type));

            if (!icon.IsSet)
                throw new ArgumentException("Property is required for class UserGroup.", nameof(icon));

            if (!members.IsSet)
                throw new ArgumentException("Property is required for class UserGroup.", nameof(members));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class UserGroup.", nameof(createdAt));

            if (!updatedAt.IsSet)
                throw new ArgumentException("Property is required for class UserGroup.", nameof(updatedAt));

            if (!admins.IsSet)
                throw new ArgumentException("Property is required for class UserGroup.", nameof(admins));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class UserGroup.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class UserGroup.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class UserGroup.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class UserGroup.");

            if (icon.IsSet && icon.Value == null)
                throw new ArgumentNullException(nameof(icon), "Property is not nullable for class UserGroup.");

            if (members.IsSet && members.Value == null)
                throw new ArgumentNullException(nameof(members), "Property is not nullable for class UserGroup.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class UserGroup.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class UserGroup.");

            if (admins.IsSet && admins.Value == null)
                throw new ArgumentNullException(nameof(admins), "Property is not nullable for class UserGroup.");

            return new UserGroup(id.Value!.Value!, name.Value!, description.Value!, type.Value!, icon.Value!.Value!, members.Value!, createdAt.Value!.Value!, updatedAt.Value!.Value!, admins.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="UserGroup" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userGroup"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UserGroup userGroup, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, userGroup, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UserGroup" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userGroup"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, UserGroup userGroup, JsonSerializerOptions jsonSerializerOptions)
        {
            if (userGroup.Name == null)
                throw new ArgumentNullException(nameof(userGroup.Name), "Property is required for class UserGroup.");

            if (userGroup.Description == null)
                throw new ArgumentNullException(nameof(userGroup.Description), "Property is required for class UserGroup.");

            if (userGroup.Type == null)
                throw new ArgumentNullException(nameof(userGroup.Type), "Property is required for class UserGroup.");

            if (userGroup.Members == null)
                throw new ArgumentNullException(nameof(userGroup.Members), "Property is required for class UserGroup.");

            if (userGroup.Admins == null)
                throw new ArgumentNullException(nameof(userGroup.Admins), "Property is required for class UserGroup.");

            writer.WriteString("id", userGroup.Id);

            writer.WriteString("name", userGroup.Name);

            writer.WriteString("description", userGroup.Description);

            writer.WriteString("type", userGroup.Type);

            writer.WriteString("icon", userGroup.Icon);

            writer.WritePropertyName("members");
            JsonSerializer.Serialize(writer, userGroup.Members, jsonSerializerOptions);
            writer.WriteString("createdAt", userGroup.CreatedAt.ToString(CreatedAtFormat));

            writer.WriteString("updatedAt", userGroup.UpdatedAt.ToString(UpdatedAtFormat));

            writer.WritePropertyName("admins");
            JsonSerializer.Serialize(writer, userGroup.Admins, jsonSerializerOptions);
        }
    }

    /// <summary>
    /// The UserGroupSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(UserGroup))]
    public partial class UserGroupSerializationContext : JsonSerializerContext { }
}
