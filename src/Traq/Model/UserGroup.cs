/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Traq.Client.FileParameter;
using OpenAPIDateConverter = Traq.Client.OpenAPIDateConverter;

namespace Traq.Model
{
    /// <summary>
    /// ユーザーグループ
    /// </summary>
    [DataContract(Name = "UserGroup")]
    public partial class UserGroup : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserGroup" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UserGroup() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserGroup" /> class.
        /// </summary>
        /// <param name="id">グループUUID (required).</param>
        /// <param name="name">グループ名 (required).</param>
        /// <param name="description">グループ説明 (required).</param>
        /// <param name="type">グループタイプ (required).</param>
        /// <param name="icon">グループアイコンUUID (required).</param>
        /// <param name="members">グループメンバーの配列 (required).</param>
        /// <param name="createdAt">作成日時 (required).</param>
        /// <param name="updatedAt">更新日時 (required).</param>
        /// <param name="admins">グループ管理者のUUIDの配列 (required).</param>
        public UserGroup(Guid id = default(Guid), string name = default(string), string description = default(string), string type = default(string), Guid icon = default(Guid), List<UserGroupMember> members = default(List<UserGroupMember>), DateTimeOffset createdAt = default(DateTimeOffset), DateTimeOffset updatedAt = default(DateTimeOffset), List<Guid> admins = default(List<Guid>))
        {
            this.Id = id;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for UserGroup and cannot be null");
            }
            this.Name = name;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for UserGroup and cannot be null");
            }
            this.Description = description;
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for UserGroup and cannot be null");
            }
            this.Type = type;
            this.Icon = icon;
            // to ensure "members" is required (not null)
            if (members == null)
            {
                throw new ArgumentNullException("members is a required property for UserGroup and cannot be null");
            }
            this.Members = members;
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
            // to ensure "admins" is required (not null)
            if (admins == null)
            {
                throw new ArgumentNullException("admins is a required property for UserGroup and cannot be null");
            }
            this.Admins = admins;
        }

        /// <summary>
        /// グループUUID
        /// </summary>
        /// <value>グループUUID</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public Guid Id { get; set; }

        /// <summary>
        /// グループ名
        /// </summary>
        /// <value>グループ名</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// グループ説明
        /// </summary>
        /// <value>グループ説明</value>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// グループタイプ
        /// </summary>
        /// <value>グループタイプ</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// グループアイコンUUID
        /// </summary>
        /// <value>グループアイコンUUID</value>
        [DataMember(Name = "icon", IsRequired = true, EmitDefaultValue = true)]
        public Guid Icon { get; set; }

        /// <summary>
        /// グループメンバーの配列
        /// </summary>
        /// <value>グループメンバーの配列</value>
        [DataMember(Name = "members", IsRequired = true, EmitDefaultValue = true)]
        public List<UserGroupMember> Members { get; set; }

        /// <summary>
        /// 作成日時
        /// </summary>
        /// <value>作成日時</value>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// 更新日時
        /// </summary>
        /// <value>更新日時</value>
        [DataMember(Name = "updatedAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset UpdatedAt { get; set; }

        /// <summary>
        /// グループ管理者のUUIDの配列
        /// </summary>
        /// <value>グループ管理者のUUIDの配列</value>
        [DataMember(Name = "admins", IsRequired = true, EmitDefaultValue = true)]
        public List<Guid> Admins { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserGroup {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Icon: ").Append(Icon).Append("\n");
            sb.Append("  Members: ").Append(Members).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Admins: ").Append(Admins).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
