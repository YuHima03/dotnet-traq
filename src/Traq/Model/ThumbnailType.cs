// <auto-generated>
/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Traq.Client;

namespace Traq.Model
{
    /// <summary>
    /// サムネイル画像のタイプ 
    /// </summary>
    /// <value>サムネイル画像のタイプ </value>
    public enum ThumbnailType
    {
        /// <summary>
        /// Enum Image for value: image
        /// </summary>
        Image = 1,

        /// <summary>
        /// Enum Waveform for value: waveform
        /// </summary>
        Waveform = 2
    }

    /// <summary>
    /// Converts <see cref="ThumbnailType"/> to and from the JSON value
    /// </summary>
    public static class ThumbnailTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="ThumbnailType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ThumbnailType FromString(string value)
        {
            if (value.Equals("image"))
                return ThumbnailType.Image;

            if (value.Equals("waveform"))
                return ThumbnailType.Waveform;

            throw new NotImplementedException($"Could not convert value to type ThumbnailType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="ThumbnailType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ThumbnailType? FromStringOrDefault(string value)
        {
            if (value.Equals("image"))
                return ThumbnailType.Image;

            if (value.Equals("waveform"))
                return ThumbnailType.Waveform;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ThumbnailType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(ThumbnailType value)
        {
            if (value == ThumbnailType.Image)
                return "image";

            if (value == ThumbnailType.Waveform)
                return "waveform";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ThumbnailType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class ThumbnailTypeJsonConverter : JsonConverter<ThumbnailType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ThumbnailType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            ThumbnailType? result = rawValue == null
                ? null
                : ThumbnailTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the ThumbnailType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="thumbnailType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ThumbnailType thumbnailType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(thumbnailType.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ThumbnailType"/>
    /// </summary>
    public class ThumbnailTypeNullableJsonConverter : JsonConverter<ThumbnailType?>
    {
        /// <summary>
        /// Returns a ThumbnailType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ThumbnailType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            ThumbnailType? result = rawValue == null
                ? null
                : ThumbnailTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="thumbnailType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ThumbnailType? thumbnailType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(thumbnailType?.ToString() ?? "null");
        }
    }


    /// <summary>
    /// The ThumbnailTypeSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(ThumbnailType))]
    public partial class ThumbnailTypeSerializationContext : JsonSerializerContext { }
}
