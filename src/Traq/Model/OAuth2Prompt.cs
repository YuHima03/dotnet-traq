// <auto-generated>
/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Traq.Client;

namespace Traq.Model
{
    /// <summary>
    /// Defines OAuth2Prompt
    /// </summary>
    public enum OAuth2Prompt
    {
        /// <summary>
        /// Enum None for value: none
        /// </summary>
        None = 1
    }

    /// <summary>
    /// Converts <see cref="OAuth2Prompt"/> to and from the JSON value
    /// </summary>
    public static class OAuth2PromptValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="OAuth2Prompt"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static OAuth2Prompt FromString(string value)
        {
            if (value.Equals("none"))
                return OAuth2Prompt.None;

            throw new NotImplementedException($"Could not convert value to type OAuth2Prompt: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="OAuth2Prompt"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static OAuth2Prompt? FromStringOrDefault(string value)
        {
            if (value.Equals("none"))
                return OAuth2Prompt.None;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="OAuth2Prompt"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(OAuth2Prompt value)
        {
            if (value == OAuth2Prompt.None)
                return "none";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="OAuth2Prompt"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class OAuth2PromptJsonConverter : JsonConverter<OAuth2Prompt>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override OAuth2Prompt Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            OAuth2Prompt? result = rawValue == null
                ? null
                : OAuth2PromptValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the OAuth2Prompt to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="oAuth2Prompt"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, OAuth2Prompt oAuth2Prompt, JsonSerializerOptions options)
        {
            writer.WriteStringValue(oAuth2Prompt.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="OAuth2Prompt"/>
    /// </summary>
    public class OAuth2PromptNullableJsonConverter : JsonConverter<OAuth2Prompt?>
    {
        /// <summary>
        /// Returns a OAuth2Prompt from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override OAuth2Prompt? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            OAuth2Prompt? result = rawValue == null
                ? null
                : OAuth2PromptValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="oAuth2Prompt"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, OAuth2Prompt? oAuth2Prompt, JsonSerializerOptions options)
        {
            writer.WriteStringValue(oAuth2Prompt?.ToString() ?? "null");
        }
    }


    /// <summary>
    /// The OAuth2PromptSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(OAuth2Prompt))]
    public partial class OAuth2PromptSerializationContext : JsonSerializerContext { }
}
