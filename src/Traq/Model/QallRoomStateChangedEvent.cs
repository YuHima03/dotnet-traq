// <auto-generated>
/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Traq.Client;

namespace Traq.Model
{
    /// <summary>
    /// Qallのルーム状態が変更された
    /// </summary>
    public partial class QallRoomStateChangedEvent : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QallRoomStateChangedEvent" /> class.
        /// </summary>
        /// <param name="roomStates">roomStates</param>
        [JsonConstructor]
        public QallRoomStateChangedEvent(List<QallRoomStateChangedEventRoomStatesInner> roomStates)
        {
            RoomStates = roomStates;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets RoomStates
        /// </summary>
        [JsonPropertyName("roomStates")]
        public List<QallRoomStateChangedEventRoomStatesInner> RoomStates { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class QallRoomStateChangedEvent {\n");
            sb.Append("  RoomStates: ").Append(RoomStates).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="QallRoomStateChangedEvent" />
    /// </summary>
    public class QallRoomStateChangedEventJsonConverter : JsonConverter<QallRoomStateChangedEvent>
    {
        /// <summary>
        /// Deserializes json to <see cref="QallRoomStateChangedEvent" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override QallRoomStateChangedEvent Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<QallRoomStateChangedEventRoomStatesInner>?> roomStates = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "roomStates":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                roomStates = new Option<List<QallRoomStateChangedEventRoomStatesInner>?>(JsonSerializer.Deserialize<List<QallRoomStateChangedEventRoomStatesInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!roomStates.IsSet)
                throw new ArgumentException("Property is required for class QallRoomStateChangedEvent.", nameof(roomStates));

            if (roomStates.IsSet && roomStates.Value == null)
                throw new ArgumentNullException(nameof(roomStates), "Property is not nullable for class QallRoomStateChangedEvent.");

            return new QallRoomStateChangedEvent(roomStates.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="QallRoomStateChangedEvent" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="qallRoomStateChangedEvent"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, QallRoomStateChangedEvent qallRoomStateChangedEvent, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, qallRoomStateChangedEvent, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="QallRoomStateChangedEvent" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="qallRoomStateChangedEvent"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, QallRoomStateChangedEvent qallRoomStateChangedEvent, JsonSerializerOptions jsonSerializerOptions)
        {
            if (qallRoomStateChangedEvent.RoomStates == null)
                throw new ArgumentNullException(nameof(qallRoomStateChangedEvent.RoomStates), "Property is required for class QallRoomStateChangedEvent.");

            writer.WritePropertyName("roomStates");
            JsonSerializer.Serialize(writer, qallRoomStateChangedEvent.RoomStates, jsonSerializerOptions);
        }
    }

    /// <summary>
    /// The QallRoomStateChangedEventSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(QallRoomStateChangedEvent))]
    public partial class QallRoomStateChangedEventSerializationContext : JsonSerializerContext { }
}
