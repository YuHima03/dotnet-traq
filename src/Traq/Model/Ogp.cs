/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Traq.Client.FileParameter;
using OpenAPIDateConverter = Traq.Client.OpenAPIDateConverter;

namespace Traq.Model
{
    /// <summary>
    /// OGPの情報
    /// </summary>
    [DataContract(Name = "Ogp")]
    public partial class Ogp : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Ogp" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Ogp() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Ogp" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="title">title (required).</param>
        /// <param name="url">url (required).</param>
        /// <param name="images">images (required).</param>
        /// <param name="description">description (required).</param>
        /// <param name="videos">videos (required).</param>
        public Ogp(string type = default(string), string title = default(string), string url = default(string), List<OgpMedia> images = default(List<OgpMedia>), string description = default(string), List<OgpMedia> videos = default(List<OgpMedia>))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for Ogp and cannot be null");
            }
            this.Type = type;
            // to ensure "title" is required (not null)
            if (title == null)
            {
                throw new ArgumentNullException("title is a required property for Ogp and cannot be null");
            }
            this.Title = title;
            // to ensure "url" is required (not null)
            if (url == null)
            {
                throw new ArgumentNullException("url is a required property for Ogp and cannot be null");
            }
            this.Url = url;
            // to ensure "images" is required (not null)
            if (images == null)
            {
                throw new ArgumentNullException("images is a required property for Ogp and cannot be null");
            }
            this.Images = images;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for Ogp and cannot be null");
            }
            this.Description = description;
            // to ensure "videos" is required (not null)
            if (videos == null)
            {
                throw new ArgumentNullException("videos is a required property for Ogp and cannot be null");
            }
            this.Videos = videos;
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name = "title", IsRequired = true, EmitDefaultValue = true)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name = "url", IsRequired = true, EmitDefaultValue = true)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets Images
        /// </summary>
        [DataMember(Name = "images", IsRequired = true, EmitDefaultValue = true)]
        public List<OgpMedia> Images { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Videos
        /// </summary>
        [DataMember(Name = "videos", IsRequired = true, EmitDefaultValue = true)]
        public List<OgpMedia> Videos { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Ogp {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Images: ").Append(Images).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Videos: ").Append(Videos).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
