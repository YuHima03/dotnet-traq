// <auto-generated>
/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Traq.Client;

namespace Traq.Model
{
    /// <summary>
    /// OGPの情報
    /// </summary>
    public partial class Ogp : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Ogp" /> class.
        /// </summary>
        /// <param name="type">type</param>
        /// <param name="title">title</param>
        /// <param name="url">url</param>
        /// <param name="images">images</param>
        /// <param name="description">description</param>
        /// <param name="videos">videos</param>
        [JsonConstructor]
        public Ogp(string type, string title, string url, List<OgpMedia> images, string description, List<OgpMedia> videos)
        {
            Type = type;
            Title = title;
            Url = url;
            Images = images;
            Description = description;
            Videos = videos;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [JsonPropertyName("title")]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [JsonPropertyName("url")]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets Images
        /// </summary>
        [JsonPropertyName("images")]
        public List<OgpMedia> Images { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Videos
        /// </summary>
        [JsonPropertyName("videos")]
        public List<OgpMedia> Videos { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Ogp {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Images: ").Append(Images).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Videos: ").Append(Videos).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Ogp" />
    /// </summary>
    public class OgpJsonConverter : JsonConverter<Ogp>
    {
        /// <summary>
        /// Deserializes json to <see cref="Ogp" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Ogp Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> type = default;
            Option<string?> title = default;
            Option<string?> url = default;
            Option<List<OgpMedia>?> images = default;
            Option<string?> description = default;
            Option<List<OgpMedia>?> videos = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "type":
                            type = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "url":
                            url = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "images":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                images = new Option<List<OgpMedia>?>(JsonSerializer.Deserialize<List<OgpMedia>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "videos":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                videos = new Option<List<OgpMedia>?>(JsonSerializer.Deserialize<List<OgpMedia>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!type.IsSet)
                throw new ArgumentException("Property is required for class Ogp.", nameof(type));

            if (!title.IsSet)
                throw new ArgumentException("Property is required for class Ogp.", nameof(title));

            if (!url.IsSet)
                throw new ArgumentException("Property is required for class Ogp.", nameof(url));

            if (!images.IsSet)
                throw new ArgumentException("Property is required for class Ogp.", nameof(images));

            if (!description.IsSet)
                throw new ArgumentException("Property is required for class Ogp.", nameof(description));

            if (!videos.IsSet)
                throw new ArgumentException("Property is required for class Ogp.", nameof(videos));

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class Ogp.");

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class Ogp.");

            if (url.IsSet && url.Value == null)
                throw new ArgumentNullException(nameof(url), "Property is not nullable for class Ogp.");

            if (images.IsSet && images.Value == null)
                throw new ArgumentNullException(nameof(images), "Property is not nullable for class Ogp.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class Ogp.");

            if (videos.IsSet && videos.Value == null)
                throw new ArgumentNullException(nameof(videos), "Property is not nullable for class Ogp.");

            return new Ogp(type.Value!, title.Value!, url.Value!, images.Value!, description.Value!, videos.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="Ogp" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="ogp"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Ogp ogp, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, ogp, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Ogp" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="ogp"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Ogp ogp, JsonSerializerOptions jsonSerializerOptions)
        {
            if (ogp.Type == null)
                throw new ArgumentNullException(nameof(ogp.Type), "Property is required for class Ogp.");

            if (ogp.Title == null)
                throw new ArgumentNullException(nameof(ogp.Title), "Property is required for class Ogp.");

            if (ogp.Url == null)
                throw new ArgumentNullException(nameof(ogp.Url), "Property is required for class Ogp.");

            if (ogp.Images == null)
                throw new ArgumentNullException(nameof(ogp.Images), "Property is required for class Ogp.");

            if (ogp.Description == null)
                throw new ArgumentNullException(nameof(ogp.Description), "Property is required for class Ogp.");

            if (ogp.Videos == null)
                throw new ArgumentNullException(nameof(ogp.Videos), "Property is required for class Ogp.");

            writer.WriteString("type", ogp.Type);

            writer.WriteString("title", ogp.Title);

            writer.WriteString("url", ogp.Url);

            writer.WritePropertyName("images");
            JsonSerializer.Serialize(writer, ogp.Images, jsonSerializerOptions);
            writer.WriteString("description", ogp.Description);

            writer.WritePropertyName("videos");
            JsonSerializer.Serialize(writer, ogp.Videos, jsonSerializerOptions);
        }
    }

    /// <summary>
    /// The OgpSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(Ogp))]
    public partial class OgpSerializationContext : JsonSerializerContext { }
}
