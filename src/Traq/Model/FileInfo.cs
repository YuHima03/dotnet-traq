/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Traq.Client.FileParameter;
using OpenAPIDateConverter = Traq.Client.OpenAPIDateConverter;

namespace Traq.Model
{
    /// <summary>
    /// ファイル情報
    /// </summary>
    [DataContract(Name = "FileInfo")]
    public partial class FileInfo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FileInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FileInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FileInfo" /> class.
        /// </summary>
        /// <param name="id">ファイルUUID (required).</param>
        /// <param name="name">ファイル名 (required).</param>
        /// <param name="mime">MIMEタイプ (required).</param>
        /// <param name="size">ファイルサイズ (required).</param>
        /// <param name="md5">MD5ハッシュ (required).</param>
        /// <param name="isAnimatedImage">アニメーション画像かどうか (required).</param>
        /// <param name="createdAt">アップロード日時 (required).</param>
        /// <param name="thumbnails">thumbnails (required).</param>
        /// <param name="thumbnail">thumbnail (required).</param>
        /// <param name="channelId">属しているチャンネルUUID (required).</param>
        /// <param name="uploaderId">アップロード者UUID (required).</param>
        public FileInfo(Guid id = default(Guid), string name = default(string), string mime = default(string), long size = default(long), string md5 = default(string), bool isAnimatedImage = default(bool), DateTimeOffset createdAt = default(DateTimeOffset), List<ThumbnailInfo> thumbnails = default(List<ThumbnailInfo>), FileInfoThumbnail thumbnail = default(FileInfoThumbnail), Guid? channelId = default(Guid?), Guid? uploaderId = default(Guid?))
        {
            this.Id = id;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for FileInfo and cannot be null");
            }
            this.Name = name;
            // to ensure "mime" is required (not null)
            if (mime == null)
            {
                throw new ArgumentNullException("mime is a required property for FileInfo and cannot be null");
            }
            this.Mime = mime;
            this.Size = size;
            // to ensure "md5" is required (not null)
            if (md5 == null)
            {
                throw new ArgumentNullException("md5 is a required property for FileInfo and cannot be null");
            }
            this.Md5 = md5;
            this.IsAnimatedImage = isAnimatedImage;
            this.CreatedAt = createdAt;
            // to ensure "thumbnails" is required (not null)
            if (thumbnails == null)
            {
                throw new ArgumentNullException("thumbnails is a required property for FileInfo and cannot be null");
            }
            this.Thumbnails = thumbnails;
            // to ensure "thumbnail" is required (not null)
            if (thumbnail == null)
            {
                throw new ArgumentNullException("thumbnail is a required property for FileInfo and cannot be null");
            }
            this.Thumbnail = thumbnail;
            // to ensure "channelId" is required (not null)
            if (channelId == null)
            {
                throw new ArgumentNullException("channelId is a required property for FileInfo and cannot be null");
            }
            this.ChannelId = channelId;
            // to ensure "uploaderId" is required (not null)
            if (uploaderId == null)
            {
                throw new ArgumentNullException("uploaderId is a required property for FileInfo and cannot be null");
            }
            this.UploaderId = uploaderId;
        }

        /// <summary>
        /// ファイルUUID
        /// </summary>
        /// <value>ファイルUUID</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public Guid Id { get; set; }

        /// <summary>
        /// ファイル名
        /// </summary>
        /// <value>ファイル名</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// MIMEタイプ
        /// </summary>
        /// <value>MIMEタイプ</value>
        [DataMember(Name = "mime", IsRequired = true, EmitDefaultValue = true)]
        public string Mime { get; set; }

        /// <summary>
        /// ファイルサイズ
        /// </summary>
        /// <value>ファイルサイズ</value>
        [DataMember(Name = "size", IsRequired = true, EmitDefaultValue = true)]
        public long Size { get; set; }

        /// <summary>
        /// MD5ハッシュ
        /// </summary>
        /// <value>MD5ハッシュ</value>
        [DataMember(Name = "md5", IsRequired = true, EmitDefaultValue = true)]
        public string Md5 { get; set; }

        /// <summary>
        /// アニメーション画像かどうか
        /// </summary>
        /// <value>アニメーション画像かどうか</value>
        [DataMember(Name = "isAnimatedImage", IsRequired = true, EmitDefaultValue = true)]
        public bool IsAnimatedImage { get; set; }

        /// <summary>
        /// アップロード日時
        /// </summary>
        /// <value>アップロード日時</value>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Thumbnails
        /// </summary>
        [DataMember(Name = "thumbnails", IsRequired = true, EmitDefaultValue = true)]
        public List<ThumbnailInfo> Thumbnails { get; set; }

        /// <summary>
        /// Gets or Sets Thumbnail
        /// </summary>
        [DataMember(Name = "thumbnail", IsRequired = true, EmitDefaultValue = true)]
        [Obsolete]
        public FileInfoThumbnail Thumbnail { get; set; }

        /// <summary>
        /// 属しているチャンネルUUID
        /// </summary>
        /// <value>属しているチャンネルUUID</value>
        [DataMember(Name = "channelId", IsRequired = true, EmitDefaultValue = true)]
        public Guid? ChannelId { get; set; }

        /// <summary>
        /// アップロード者UUID
        /// </summary>
        /// <value>アップロード者UUID</value>
        [DataMember(Name = "uploaderId", IsRequired = true, EmitDefaultValue = true)]
        public Guid? UploaderId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FileInfo {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Mime: ").Append(Mime).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Md5: ").Append(Md5).Append("\n");
            sb.Append("  IsAnimatedImage: ").Append(IsAnimatedImage).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Thumbnails: ").Append(Thumbnails).Append("\n");
            sb.Append("  Thumbnail: ").Append(Thumbnail).Append("\n");
            sb.Append("  ChannelId: ").Append(ChannelId).Append("\n");
            sb.Append("  UploaderId: ").Append(UploaderId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
