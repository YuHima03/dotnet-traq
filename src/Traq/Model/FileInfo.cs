// <auto-generated>
/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Traq.Client;

namespace Traq.Model
{
    /// <summary>
    /// ファイル情報
    /// </summary>
    public partial class FileInfo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FileInfo" /> class.
        /// </summary>
        /// <param name="id">ファイルUUID</param>
        /// <param name="name">ファイル名</param>
        /// <param name="mime">MIMEタイプ</param>
        /// <param name="size">ファイルサイズ</param>
        /// <param name="md5">MD5ハッシュ</param>
        /// <param name="isAnimatedImage">アニメーション画像かどうか</param>
        /// <param name="createdAt">アップロード日時</param>
        /// <param name="thumbnails">thumbnails</param>
        /// <param name="thumbnail">thumbnail</param>
        /// <param name="channelId">属しているチャンネルUUID</param>
        /// <param name="uploaderId">アップロード者UUID</param>
        [JsonConstructor]
        public FileInfo(Guid id, string name, string mime, long size, string md5, bool isAnimatedImage, DateTimeOffset createdAt, List<ThumbnailInfo> thumbnails, FileInfoThumbnail? thumbnail = default, Guid? channelId = default, Guid? uploaderId = default)
        {
            Id = id;
            Name = name;
            Mime = mime;
            Size = size;
            Md5 = md5;
            IsAnimatedImage = isAnimatedImage;
            CreatedAt = createdAt;
            Thumbnails = thumbnails;
            Thumbnail = thumbnail;
            ChannelId = channelId;
            UploaderId = uploaderId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// ファイルUUID
        /// </summary>
        /// <value>ファイルUUID</value>
        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        /// <summary>
        /// ファイル名
        /// </summary>
        /// <value>ファイル名</value>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// MIMEタイプ
        /// </summary>
        /// <value>MIMEタイプ</value>
        [JsonPropertyName("mime")]
        public string Mime { get; set; }

        /// <summary>
        /// ファイルサイズ
        /// </summary>
        /// <value>ファイルサイズ</value>
        [JsonPropertyName("size")]
        public long Size { get; set; }

        /// <summary>
        /// MD5ハッシュ
        /// </summary>
        /// <value>MD5ハッシュ</value>
        [JsonPropertyName("md5")]
        public string Md5 { get; set; }

        /// <summary>
        /// アニメーション画像かどうか
        /// </summary>
        /// <value>アニメーション画像かどうか</value>
        [JsonPropertyName("isAnimatedImage")]
        public bool IsAnimatedImage { get; set; }

        /// <summary>
        /// アップロード日時
        /// </summary>
        /// <value>アップロード日時</value>
        [JsonPropertyName("createdAt")]
        public DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Thumbnails
        /// </summary>
        [JsonPropertyName("thumbnails")]
        public List<ThumbnailInfo> Thumbnails { get; set; }

        /// <summary>
        /// Gets or Sets Thumbnail
        /// </summary>
        [JsonPropertyName("thumbnail")]
        [Obsolete]
        public FileInfoThumbnail? Thumbnail { get; set; }

        /// <summary>
        /// 属しているチャンネルUUID
        /// </summary>
        /// <value>属しているチャンネルUUID</value>
        [JsonPropertyName("channelId")]
        public Guid? ChannelId { get; set; }

        /// <summary>
        /// アップロード者UUID
        /// </summary>
        /// <value>アップロード者UUID</value>
        [JsonPropertyName("uploaderId")]
        public Guid? UploaderId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FileInfo {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Mime: ").Append(Mime).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Md5: ").Append(Md5).Append("\n");
            sb.Append("  IsAnimatedImage: ").Append(IsAnimatedImage).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Thumbnails: ").Append(Thumbnails).Append("\n");
            sb.Append("  Thumbnail: ").Append(Thumbnail).Append("\n");
            sb.Append("  ChannelId: ").Append(ChannelId).Append("\n");
            sb.Append("  UploaderId: ").Append(UploaderId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="FileInfo" />
    /// </summary>
    public class FileInfoJsonConverter : JsonConverter<FileInfo>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="FileInfo" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override FileInfo Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid?> id = default;
            Option<string?> name = default;
            Option<string?> mime = default;
            Option<long?> size = default;
            Option<string?> md5 = default;
            Option<bool?> isAnimatedImage = default;
            Option<DateTimeOffset?> createdAt = default;
            Option<List<ThumbnailInfo>?> thumbnails = default;
            Option<FileInfoThumbnail?> thumbnail = default;
            Option<Guid?> channelId = default;
            Option<Guid?> uploaderId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "mime":
                            mime = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "size":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                size = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "md5":
                            md5 = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "isAnimatedImage":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isAnimatedImage = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "createdAt":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createdAt = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "thumbnails":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                thumbnails = new Option<List<ThumbnailInfo>?>(JsonSerializer.Deserialize<List<ThumbnailInfo>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "thumbnail":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                thumbnail = new Option<FileInfoThumbnail?>(JsonSerializer.Deserialize<FileInfoThumbnail>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "channelId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                channelId = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        case "uploaderId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                uploaderId = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class FileInfo.", nameof(id));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class FileInfo.", nameof(name));

            if (!mime.IsSet)
                throw new ArgumentException("Property is required for class FileInfo.", nameof(mime));

            if (!size.IsSet)
                throw new ArgumentException("Property is required for class FileInfo.", nameof(size));

            if (!md5.IsSet)
                throw new ArgumentException("Property is required for class FileInfo.", nameof(md5));

            if (!isAnimatedImage.IsSet)
                throw new ArgumentException("Property is required for class FileInfo.", nameof(isAnimatedImage));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class FileInfo.", nameof(createdAt));

            if (!thumbnails.IsSet)
                throw new ArgumentException("Property is required for class FileInfo.", nameof(thumbnails));

            if (!thumbnail.IsSet)
                throw new ArgumentException("Property is required for class FileInfo.", nameof(thumbnail));

            if (!channelId.IsSet)
                throw new ArgumentException("Property is required for class FileInfo.", nameof(channelId));

            if (!uploaderId.IsSet)
                throw new ArgumentException("Property is required for class FileInfo.", nameof(uploaderId));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class FileInfo.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class FileInfo.");

            if (mime.IsSet && mime.Value == null)
                throw new ArgumentNullException(nameof(mime), "Property is not nullable for class FileInfo.");

            if (size.IsSet && size.Value == null)
                throw new ArgumentNullException(nameof(size), "Property is not nullable for class FileInfo.");

            if (md5.IsSet && md5.Value == null)
                throw new ArgumentNullException(nameof(md5), "Property is not nullable for class FileInfo.");

            if (isAnimatedImage.IsSet && isAnimatedImage.Value == null)
                throw new ArgumentNullException(nameof(isAnimatedImage), "Property is not nullable for class FileInfo.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class FileInfo.");

            if (thumbnails.IsSet && thumbnails.Value == null)
                throw new ArgumentNullException(nameof(thumbnails), "Property is not nullable for class FileInfo.");

            return new FileInfo(id.Value!.Value!, name.Value!, mime.Value!, size.Value!.Value!, md5.Value!, isAnimatedImage.Value!.Value!, createdAt.Value!.Value!, thumbnails.Value!, thumbnail.Value!, channelId.Value!, uploaderId.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="FileInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="fileInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, FileInfo fileInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, fileInfo, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="FileInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="fileInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, FileInfo fileInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            if (fileInfo.Name == null)
                throw new ArgumentNullException(nameof(fileInfo.Name), "Property is required for class FileInfo.");

            if (fileInfo.Mime == null)
                throw new ArgumentNullException(nameof(fileInfo.Mime), "Property is required for class FileInfo.");

            if (fileInfo.Md5 == null)
                throw new ArgumentNullException(nameof(fileInfo.Md5), "Property is required for class FileInfo.");

            if (fileInfo.Thumbnails == null)
                throw new ArgumentNullException(nameof(fileInfo.Thumbnails), "Property is required for class FileInfo.");

            writer.WriteString("id", fileInfo.Id);

            writer.WriteString("name", fileInfo.Name);

            writer.WriteString("mime", fileInfo.Mime);

            writer.WriteNumber("size", fileInfo.Size);

            writer.WriteString("md5", fileInfo.Md5);

            writer.WriteBoolean("isAnimatedImage", fileInfo.IsAnimatedImage);

            writer.WriteString("createdAt", fileInfo.CreatedAt.ToString(CreatedAtFormat));

            writer.WritePropertyName("thumbnails");
            JsonSerializer.Serialize(writer, fileInfo.Thumbnails, jsonSerializerOptions);
            if (fileInfo.Thumbnail != null)
            {
                writer.WritePropertyName("thumbnail");
                JsonSerializer.Serialize(writer, fileInfo.Thumbnail, jsonSerializerOptions);
            }
            else
                writer.WriteNull("thumbnail");
            if (fileInfo.ChannelId != null)
                writer.WriteString("channelId", fileInfo.ChannelId.Value);
            else
                writer.WriteNull("channelId");

            if (fileInfo.UploaderId != null)
                writer.WriteString("uploaderId", fileInfo.UploaderId.Value);
            else
                writer.WriteNull("uploaderId");
        }
    }

    /// <summary>
    /// The FileInfoSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(FileInfo))]
    public partial class FileInfoSerializationContext : JsonSerializerContext { }
}
