// <auto-generated>
/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Traq.Client;

namespace Traq.Model
{
    /// <summary>
    /// メッセージ投稿リクエスト
    /// </summary>
    public partial class PostMessageRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PostMessageRequest" /> class.
        /// </summary>
        /// <param name="content">メッセージ本文</param>
        /// <param name="embed">メンション・チャンネルリンクを自動埋め込みするか (default to false)</param>
        [JsonConstructor]
        public PostMessageRequest(string content, Option<bool?> embed = default)
        {
            Content = content;
            EmbedOption = embed;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// メッセージ本文
        /// </summary>
        /// <value>メッセージ本文</value>
        [JsonPropertyName("content")]
        public string Content { get; set; }

        /// <summary>
        /// Used to track the state of Embed
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> EmbedOption { get; private set; }

        /// <summary>
        /// メンション・チャンネルリンクを自動埋め込みするか
        /// </summary>
        /// <value>メンション・チャンネルリンクを自動埋め込みするか</value>
        [JsonPropertyName("embed")]
        public bool? Embed { get { return this.EmbedOption; } set { this.EmbedOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PostMessageRequest {\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  Embed: ").Append(Embed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Content (string) maxLength
            if (this.Content != null && this.Content.Length > 10000)
            {
                yield return new ValidationResult("Invalid value for Content, length must be less than 10000.", new [] { "Content" });
            }

            // Content (string) minLength
            if (this.Content != null && this.Content.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Content, length must be greater than 1.", new [] { "Content" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PostMessageRequest" />
    /// </summary>
    public class PostMessageRequestJsonConverter : JsonConverter<PostMessageRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="PostMessageRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PostMessageRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> content = default;
            Option<bool?> embed = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "content":
                            content = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "embed":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                embed = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!content.IsSet)
                throw new ArgumentException("Property is required for class PostMessageRequest.", nameof(content));

            if (content.IsSet && content.Value == null)
                throw new ArgumentNullException(nameof(content), "Property is not nullable for class PostMessageRequest.");

            if (embed.IsSet && embed.Value == null)
                throw new ArgumentNullException(nameof(embed), "Property is not nullable for class PostMessageRequest.");

            return new PostMessageRequest(content.Value!, embed);
        }

        /// <summary>
        /// Serializes a <see cref="PostMessageRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="postMessageRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PostMessageRequest postMessageRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, postMessageRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PostMessageRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="postMessageRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PostMessageRequest postMessageRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (postMessageRequest.Content == null)
                throw new ArgumentNullException(nameof(postMessageRequest.Content), "Property is required for class PostMessageRequest.");

            writer.WriteString("content", postMessageRequest.Content);

            if (postMessageRequest.EmbedOption.IsSet)
                writer.WriteBoolean("embed", postMessageRequest.EmbedOption.Value!.Value);
        }
    }

    /// <summary>
    /// The PostMessageRequestSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(PostMessageRequest))]
    public partial class PostMessageRequestSerializationContext : JsonSerializerContext { }
}
