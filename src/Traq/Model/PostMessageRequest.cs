/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Traq.Client.FileParameter;
using OpenAPIDateConverter = Traq.Client.OpenAPIDateConverter;

namespace Traq.Model
{
    /// <summary>
    /// メッセージ投稿リクエスト
    /// </summary>
    [DataContract(Name = "PostMessageRequest")]
    public partial class PostMessageRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PostMessageRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PostMessageRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PostMessageRequest" /> class.
        /// </summary>
        /// <param name="content">メッセージ本文 (required).</param>
        /// <param name="embed">メンション・チャンネルリンクを自動埋め込みするか (default to false).</param>
        public PostMessageRequest(string content = default(string), bool embed = false)
        {
            // to ensure "content" is required (not null)
            if (content == null)
            {
                throw new ArgumentNullException("content is a required property for PostMessageRequest and cannot be null");
            }
            this.Content = content;
            this.Embed = embed;
        }

        /// <summary>
        /// メッセージ本文
        /// </summary>
        /// <value>メッセージ本文</value>
        [DataMember(Name = "content", IsRequired = true, EmitDefaultValue = true)]
        public string Content { get; set; }

        /// <summary>
        /// メンション・チャンネルリンクを自動埋め込みするか
        /// </summary>
        /// <value>メンション・チャンネルリンクを自動埋め込みするか</value>
        [DataMember(Name = "embed", EmitDefaultValue = true)]
        public bool Embed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PostMessageRequest {\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  Embed: ").Append(Embed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Content (string) maxLength
            if (this.Content != null && this.Content.Length > 10000)
            {
                yield return new ValidationResult("Invalid value for Content, length must be less than 10000.", new [] { "Content" });
            }

            // Content (string) minLength
            if (this.Content != null && this.Content.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Content, length must be greater than 1.", new [] { "Content" });
            }

            yield break;
        }
    }

}
