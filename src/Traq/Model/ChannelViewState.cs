// <auto-generated>
/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Traq.Client;

namespace Traq.Model
{
    /// <summary>
    /// 閲覧状態
    /// </summary>
    /// <value>閲覧状態</value>
    public enum ChannelViewState
    {
        /// <summary>
        /// Enum None for value: none
        /// </summary>
        None = 1,

        /// <summary>
        /// Enum Monitoring for value: monitoring
        /// </summary>
        Monitoring = 2,

        /// <summary>
        /// Enum Editing for value: editing
        /// </summary>
        Editing = 3
    }

    /// <summary>
    /// Converts <see cref="ChannelViewState"/> to and from the JSON value
    /// </summary>
    public static class ChannelViewStateValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="ChannelViewState"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ChannelViewState FromString(string value)
        {
            if (value.Equals("none"))
                return ChannelViewState.None;

            if (value.Equals("monitoring"))
                return ChannelViewState.Monitoring;

            if (value.Equals("editing"))
                return ChannelViewState.Editing;

            throw new NotImplementedException($"Could not convert value to type ChannelViewState: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="ChannelViewState"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ChannelViewState? FromStringOrDefault(string value)
        {
            if (value.Equals("none"))
                return ChannelViewState.None;

            if (value.Equals("monitoring"))
                return ChannelViewState.Monitoring;

            if (value.Equals("editing"))
                return ChannelViewState.Editing;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ChannelViewState"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(ChannelViewState value)
        {
            if (value == ChannelViewState.None)
                return "none";

            if (value == ChannelViewState.Monitoring)
                return "monitoring";

            if (value == ChannelViewState.Editing)
                return "editing";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ChannelViewState"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class ChannelViewStateJsonConverter : JsonConverter<ChannelViewState>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ChannelViewState Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            ChannelViewState? result = rawValue == null
                ? null
                : ChannelViewStateValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the ChannelViewState to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="channelViewState"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ChannelViewState channelViewState, JsonSerializerOptions options)
        {
            writer.WriteStringValue(channelViewState.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ChannelViewState"/>
    /// </summary>
    public class ChannelViewStateNullableJsonConverter : JsonConverter<ChannelViewState?>
    {
        /// <summary>
        /// Returns a ChannelViewState from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ChannelViewState? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            ChannelViewState? result = rawValue == null
                ? null
                : ChannelViewStateValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="channelViewState"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ChannelViewState? channelViewState, JsonSerializerOptions options)
        {
            writer.WriteStringValue(channelViewState?.ToString() ?? "null");
        }
    }


    /// <summary>
    /// The ChannelViewStateSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(ChannelViewState))]
    public partial class ChannelViewStateSerializationContext : JsonSerializerContext { }
}
