/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Traq.Client.FileParameter;
using OpenAPIDateConverter = Traq.Client.OpenAPIDateConverter;

namespace Traq.Model
{
    /// <summary>
    /// バージョン・サーバーフラグ情報
    /// </summary>
    [DataContract(Name = "varVersion")]
    public partial class ModelVersion : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelVersion" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ModelVersion() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelVersion" /> class.
        /// </summary>
        /// <param name="revision">traQ(サーバー)リビジョン (required).</param>
        /// <param name="varVersion">traQ(サーバー)バージョン (required).</param>
        /// <param name="flags">flags (required).</param>
        public ModelVersion(string revision = default(string), string varVersion = default(string), VersionFlags flags = default(VersionFlags))
        {
            // to ensure "revision" is required (not null)
            if (revision == null)
            {
                throw new ArgumentNullException("revision is a required property for ModelVersion and cannot be null");
            }
            this.Revision = revision;
            // to ensure "varVersion" is required (not null)
            if (varVersion == null)
            {
                throw new ArgumentNullException("varVersion is a required property for ModelVersion and cannot be null");
            }
            this.VarVersion = varVersion;
            // to ensure "flags" is required (not null)
            if (flags == null)
            {
                throw new ArgumentNullException("flags is a required property for ModelVersion and cannot be null");
            }
            this.Flags = flags;
        }

        /// <summary>
        /// traQ(サーバー)リビジョン
        /// </summary>
        /// <value>traQ(サーバー)リビジョン</value>
        [DataMember(Name = "revision", IsRequired = true, EmitDefaultValue = true)]
        public string Revision { get; set; }

        /// <summary>
        /// traQ(サーバー)バージョン
        /// </summary>
        /// <value>traQ(サーバー)バージョン</value>
        [DataMember(Name = "version", IsRequired = true, EmitDefaultValue = true)]
        public string VarVersion { get; set; }

        /// <summary>
        /// Gets or Sets Flags
        /// </summary>
        [DataMember(Name = "flags", IsRequired = true, EmitDefaultValue = true)]
        public VersionFlags Flags { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ModelVersion {\n");
            sb.Append("  Revision: ").Append(Revision).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  Flags: ").Append(Flags).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
