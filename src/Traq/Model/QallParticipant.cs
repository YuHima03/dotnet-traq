// <auto-generated>
/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Traq.Client;

namespace Traq.Model
{
    /// <summary>
    /// ルーム内の参加者一覧
    /// </summary>
    public partial class QallParticipant : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QallParticipant" /> class.
        /// </summary>
        /// <param name="identity">ユーザーID_RandomUUID</param>
        /// <param name="name">表示名</param>
        /// <param name="joinedAt">参加した時刻</param>
        /// <param name="attributes">ユーザーに関連付けられたカスタム属性</param>
        /// <param name="canPublish">発言権限</param>
        [JsonConstructor]
        public QallParticipant(Option<string?> identity = default, Option<string?> name = default, Option<DateTimeOffset?> joinedAt = default, Option<Dictionary<string, string>?> attributes = default, Option<bool?> canPublish = default)
        {
            IdentityOption = identity;
            NameOption = name;
            JoinedAtOption = joinedAt;
            AttributesOption = attributes;
            CanPublishOption = canPublish;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Identity
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdentityOption { get; private set; }

        /// <summary>
        /// ユーザーID_RandomUUID
        /// </summary>
        /// <value>ユーザーID_RandomUUID</value>
        [JsonPropertyName("identity")]
        public string? Identity { get { return this.IdentityOption; } set { this.IdentityOption = new(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// 表示名
        /// </summary>
        /// <value>表示名</value>
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of JoinedAt
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTimeOffset?> JoinedAtOption { get; private set; }

        /// <summary>
        /// 参加した時刻
        /// </summary>
        /// <value>参加した時刻</value>
        [JsonPropertyName("joinedAt")]
        public DateTimeOffset? JoinedAt { get { return this.JoinedAtOption; } set { this.JoinedAtOption = new(value); } }

        /// <summary>
        /// Used to track the state of Attributes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, string>?> AttributesOption { get; private set; }

        /// <summary>
        /// ユーザーに関連付けられたカスタム属性
        /// </summary>
        /// <value>ユーザーに関連付けられたカスタム属性</value>
        [JsonPropertyName("attributes")]
        public Dictionary<string, string>? Attributes { get { return this.AttributesOption; } set { this.AttributesOption = new(value); } }

        /// <summary>
        /// Used to track the state of CanPublish
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> CanPublishOption { get; private set; }

        /// <summary>
        /// 発言権限
        /// </summary>
        /// <value>発言権限</value>
        [JsonPropertyName("canPublish")]
        public bool? CanPublish { get { return this.CanPublishOption; } set { this.CanPublishOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class QallParticipant {\n");
            sb.Append("  Identity: ").Append(Identity).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  JoinedAt: ").Append(JoinedAt).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  CanPublish: ").Append(CanPublish).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="QallParticipant" />
    /// </summary>
    public class QallParticipantJsonConverter : JsonConverter<QallParticipant>
    {
        /// <summary>
        /// The format to use to serialize JoinedAt
        /// </summary>
        public static string JoinedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="QallParticipant" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override QallParticipant Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> identity = default;
            Option<string?> name = default;
            Option<DateTimeOffset?> joinedAt = default;
            Option<Dictionary<string, string>?> attributes = default;
            Option<bool?> canPublish = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "identity":
                            identity = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "joinedAt":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                joinedAt = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "attributes":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                attributes = new Option<Dictionary<string, string>?>(JsonSerializer.Deserialize<Dictionary<string, string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "canPublish":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                canPublish = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (identity.IsSet && identity.Value == null)
                throw new ArgumentNullException(nameof(identity), "Property is not nullable for class QallParticipant.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class QallParticipant.");

            if (joinedAt.IsSet && joinedAt.Value == null)
                throw new ArgumentNullException(nameof(joinedAt), "Property is not nullable for class QallParticipant.");

            if (attributes.IsSet && attributes.Value == null)
                throw new ArgumentNullException(nameof(attributes), "Property is not nullable for class QallParticipant.");

            if (canPublish.IsSet && canPublish.Value == null)
                throw new ArgumentNullException(nameof(canPublish), "Property is not nullable for class QallParticipant.");

            return new QallParticipant(identity, name, joinedAt, attributes, canPublish);
        }

        /// <summary>
        /// Serializes a <see cref="QallParticipant" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="qallParticipant"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, QallParticipant qallParticipant, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, qallParticipant, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="QallParticipant" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="qallParticipant"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, QallParticipant qallParticipant, JsonSerializerOptions jsonSerializerOptions)
        {
            if (qallParticipant.IdentityOption.IsSet && qallParticipant.Identity == null)
                throw new ArgumentNullException(nameof(qallParticipant.Identity), "Property is required for class QallParticipant.");

            if (qallParticipant.NameOption.IsSet && qallParticipant.Name == null)
                throw new ArgumentNullException(nameof(qallParticipant.Name), "Property is required for class QallParticipant.");

            if (qallParticipant.AttributesOption.IsSet && qallParticipant.Attributes == null)
                throw new ArgumentNullException(nameof(qallParticipant.Attributes), "Property is required for class QallParticipant.");

            if (qallParticipant.IdentityOption.IsSet)
                writer.WriteString("identity", qallParticipant.Identity);

            if (qallParticipant.NameOption.IsSet)
                writer.WriteString("name", qallParticipant.Name);

            if (qallParticipant.JoinedAtOption.IsSet)
                writer.WriteString("joinedAt", qallParticipant.JoinedAtOption.Value!.Value.ToString(JoinedAtFormat));

            if (qallParticipant.AttributesOption.IsSet)
            {
                writer.WritePropertyName("attributes");
                JsonSerializer.Serialize(writer, qallParticipant.Attributes, jsonSerializerOptions);
            }
            if (qallParticipant.CanPublishOption.IsSet)
                writer.WriteBoolean("canPublish", qallParticipant.CanPublishOption.Value!.Value);
        }
    }

    /// <summary>
    /// The QallParticipantSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(QallParticipant))]
    public partial class QallParticipantSerializationContext : JsonSerializerContext { }
}
