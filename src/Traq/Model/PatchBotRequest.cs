/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Traq.Client.FileParameter;
using OpenAPIDateConverter = Traq.Client.OpenAPIDateConverter;

namespace Traq.Model
{
    /// <summary>
    /// BOT情報変更リクエスト
    /// </summary>
    [DataContract(Name = "PatchBotRequest")]
    public partial class PatchBotRequest : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Mode
        /// </summary>
        [DataMember(Name = "mode", EmitDefaultValue = false)]
        public BotMode? Mode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PatchBotRequest" /> class.
        /// </summary>
        /// <param name="displayName">BOTユーザー表示名.</param>
        /// <param name="description">BOTの説明.</param>
        /// <param name="privileged">特権.</param>
        /// <param name="mode">mode.</param>
        /// <param name="endpoint">BOTサーバーエンドポイント.</param>
        /// <param name="developerId">移譲先の開発者UUID.</param>
        /// <param name="subscribeEvents">購読するイベント.</param>
        /// <param name="bio">自己紹介(biography).</param>
        public PatchBotRequest(string displayName = default(string), string description = default(string), bool privileged = default(bool), BotMode? mode = default(BotMode?), string endpoint = default(string), Guid developerId = default(Guid), List<string> subscribeEvents = default(List<string>), string bio = default(string))
        {
            this.DisplayName = displayName;
            this.Description = description;
            this.Privileged = privileged;
            this.Mode = mode;
            this.Endpoint = endpoint;
            this.DeveloperId = developerId;
            this.SubscribeEvents = subscribeEvents;
            this.Bio = bio;
        }

        /// <summary>
        /// BOTユーザー表示名
        /// </summary>
        /// <value>BOTユーザー表示名</value>
        [DataMember(Name = "displayName", EmitDefaultValue = false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// BOTの説明
        /// </summary>
        /// <value>BOTの説明</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// 特権
        /// </summary>
        /// <value>特権</value>
        [DataMember(Name = "privileged", EmitDefaultValue = true)]
        public bool Privileged { get; set; }

        /// <summary>
        /// BOTサーバーエンドポイント
        /// </summary>
        /// <value>BOTサーバーエンドポイント</value>
        [DataMember(Name = "endpoint", EmitDefaultValue = false)]
        public string Endpoint { get; set; }

        /// <summary>
        /// 移譲先の開発者UUID
        /// </summary>
        /// <value>移譲先の開発者UUID</value>
        [DataMember(Name = "developerId", EmitDefaultValue = false)]
        public Guid DeveloperId { get; set; }

        /// <summary>
        /// 購読するイベント
        /// </summary>
        /// <value>購読するイベント</value>
        [DataMember(Name = "subscribeEvents", EmitDefaultValue = false)]
        public List<string> SubscribeEvents { get; set; }

        /// <summary>
        /// 自己紹介(biography)
        /// </summary>
        /// <value>自己紹介(biography)</value>
        [DataMember(Name = "bio", EmitDefaultValue = false)]
        public string Bio { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PatchBotRequest {\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Privileged: ").Append(Privileged).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  Endpoint: ").Append(Endpoint).Append("\n");
            sb.Append("  DeveloperId: ").Append(DeveloperId).Append("\n");
            sb.Append("  SubscribeEvents: ").Append(SubscribeEvents).Append("\n");
            sb.Append("  Bio: ").Append(Bio).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // DisplayName (string) maxLength
            if (this.DisplayName != null && this.DisplayName.Length > 32)
            {
                yield return new ValidationResult("Invalid value for DisplayName, length must be less than 32.", new[] { "DisplayName" });
            }

            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 1000)
            {
                yield return new ValidationResult("Invalid value for Description, length must be less than 1000.", new[] { "Description" });
            }

            // Bio (string) maxLength
            if (this.Bio != null && this.Bio.Length > 1000)
            {
                yield return new ValidationResult("Invalid value for Bio, length must be less than 1000.", new[] { "Bio" });
            }

            yield break;
        }
    }

}
