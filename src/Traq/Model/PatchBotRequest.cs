// <auto-generated>
/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Traq.Client;

namespace Traq.Model
{
    /// <summary>
    /// BOT情報変更リクエスト
    /// </summary>
    public partial class PatchBotRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PatchBotRequest" /> class.
        /// </summary>
        /// <param name="displayName">BOTユーザー表示名</param>
        /// <param name="description">BOTの説明</param>
        /// <param name="privileged">特権</param>
        /// <param name="mode">mode</param>
        /// <param name="endpoint">BOTサーバーエンドポイント</param>
        /// <param name="developerId">移譲先の開発者UUID</param>
        /// <param name="subscribeEvents">購読するイベント</param>
        /// <param name="bio">自己紹介(biography)</param>
        [JsonConstructor]
        public PatchBotRequest(Option<string?> displayName = default, Option<string?> description = default, Option<bool?> privileged = default, Option<BotMode?> mode = default, Option<string?> endpoint = default, Option<Guid?> developerId = default, Option<List<string>?> subscribeEvents = default, Option<string?> bio = default)
        {
            DisplayNameOption = displayName;
            DescriptionOption = description;
            PrivilegedOption = privileged;
            ModeOption = mode;
            EndpointOption = endpoint;
            DeveloperIdOption = developerId;
            SubscribeEventsOption = subscribeEvents;
            BioOption = bio;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Mode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<BotMode?> ModeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Mode
        /// </summary>
        [JsonPropertyName("mode")]
        public BotMode? Mode { get { return this.ModeOption; } set { this.ModeOption = new(value); } }

        /// <summary>
        /// Used to track the state of DisplayName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DisplayNameOption { get; private set; }

        /// <summary>
        /// BOTユーザー表示名
        /// </summary>
        /// <value>BOTユーザー表示名</value>
        [JsonPropertyName("displayName")]
        public string? DisplayName { get { return this.DisplayNameOption; } set { this.DisplayNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// BOTの説明
        /// </summary>
        /// <value>BOTの説明</value>
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Privileged
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> PrivilegedOption { get; private set; }

        /// <summary>
        /// 特権
        /// </summary>
        /// <value>特権</value>
        [JsonPropertyName("privileged")]
        public bool? Privileged { get { return this.PrivilegedOption; } set { this.PrivilegedOption = new(value); } }

        /// <summary>
        /// Used to track the state of Endpoint
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EndpointOption { get; private set; }

        /// <summary>
        /// BOTサーバーエンドポイント
        /// </summary>
        /// <value>BOTサーバーエンドポイント</value>
        [JsonPropertyName("endpoint")]
        public string? Endpoint { get { return this.EndpointOption; } set { this.EndpointOption = new(value); } }

        /// <summary>
        /// Used to track the state of DeveloperId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Guid?> DeveloperIdOption { get; private set; }

        /// <summary>
        /// 移譲先の開発者UUID
        /// </summary>
        /// <value>移譲先の開発者UUID</value>
        [JsonPropertyName("developerId")]
        public Guid? DeveloperId { get { return this.DeveloperIdOption; } set { this.DeveloperIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of SubscribeEvents
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> SubscribeEventsOption { get; private set; }

        /// <summary>
        /// 購読するイベント
        /// </summary>
        /// <value>購読するイベント</value>
        [JsonPropertyName("subscribeEvents")]
        public List<string>? SubscribeEvents { get { return this.SubscribeEventsOption; } set { this.SubscribeEventsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Bio
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BioOption { get; private set; }

        /// <summary>
        /// 自己紹介(biography)
        /// </summary>
        /// <value>自己紹介(biography)</value>
        [JsonPropertyName("bio")]
        public string? Bio { get { return this.BioOption; } set { this.BioOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PatchBotRequest {\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Privileged: ").Append(Privileged).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  Endpoint: ").Append(Endpoint).Append("\n");
            sb.Append("  DeveloperId: ").Append(DeveloperId).Append("\n");
            sb.Append("  SubscribeEvents: ").Append(SubscribeEvents).Append("\n");
            sb.Append("  Bio: ").Append(Bio).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // DisplayName (string) maxLength
            if (this.DisplayName != null && this.DisplayName.Length > 32)
            {
                yield return new ValidationResult("Invalid value for DisplayName, length must be less than 32.", new [] { "DisplayName" });
            }

            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 1000)
            {
                yield return new ValidationResult("Invalid value for Description, length must be less than 1000.", new [] { "Description" });
            }

            // Bio (string) maxLength
            if (this.Bio != null && this.Bio.Length > 1000)
            {
                yield return new ValidationResult("Invalid value for Bio, length must be less than 1000.", new [] { "Bio" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PatchBotRequest" />
    /// </summary>
    public class PatchBotRequestJsonConverter : JsonConverter<PatchBotRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="PatchBotRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PatchBotRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> displayName = default;
            Option<string?> description = default;
            Option<bool?> privileged = default;
            Option<BotMode?> mode = default;
            Option<string?> endpoint = default;
            Option<Guid?> developerId = default;
            Option<List<string>?> subscribeEvents = default;
            Option<string?> bio = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "displayName":
                            displayName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "privileged":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                privileged = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "mode":
                            string? modeRawValue = utf8JsonReader.GetString();
                            if (modeRawValue != null)
                                mode = new Option<BotMode?>(BotModeValueConverter.FromStringOrDefault(modeRawValue));
                            break;
                        case "endpoint":
                            endpoint = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "developerId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                developerId = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        case "subscribeEvents":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                subscribeEvents = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "bio":
                            bio = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (displayName.IsSet && displayName.Value == null)
                throw new ArgumentNullException(nameof(displayName), "Property is not nullable for class PatchBotRequest.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class PatchBotRequest.");

            if (privileged.IsSet && privileged.Value == null)
                throw new ArgumentNullException(nameof(privileged), "Property is not nullable for class PatchBotRequest.");

            if (mode.IsSet && mode.Value == null)
                throw new ArgumentNullException(nameof(mode), "Property is not nullable for class PatchBotRequest.");

            if (endpoint.IsSet && endpoint.Value == null)
                throw new ArgumentNullException(nameof(endpoint), "Property is not nullable for class PatchBotRequest.");

            if (developerId.IsSet && developerId.Value == null)
                throw new ArgumentNullException(nameof(developerId), "Property is not nullable for class PatchBotRequest.");

            if (subscribeEvents.IsSet && subscribeEvents.Value == null)
                throw new ArgumentNullException(nameof(subscribeEvents), "Property is not nullable for class PatchBotRequest.");

            if (bio.IsSet && bio.Value == null)
                throw new ArgumentNullException(nameof(bio), "Property is not nullable for class PatchBotRequest.");

            return new PatchBotRequest(displayName, description, privileged, mode, endpoint, developerId, subscribeEvents, bio);
        }

        /// <summary>
        /// Serializes a <see cref="PatchBotRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="patchBotRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PatchBotRequest patchBotRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, patchBotRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PatchBotRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="patchBotRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PatchBotRequest patchBotRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (patchBotRequest.DisplayNameOption.IsSet && patchBotRequest.DisplayName == null)
                throw new ArgumentNullException(nameof(patchBotRequest.DisplayName), "Property is required for class PatchBotRequest.");

            if (patchBotRequest.DescriptionOption.IsSet && patchBotRequest.Description == null)
                throw new ArgumentNullException(nameof(patchBotRequest.Description), "Property is required for class PatchBotRequest.");

            if (patchBotRequest.EndpointOption.IsSet && patchBotRequest.Endpoint == null)
                throw new ArgumentNullException(nameof(patchBotRequest.Endpoint), "Property is required for class PatchBotRequest.");

            if (patchBotRequest.SubscribeEventsOption.IsSet && patchBotRequest.SubscribeEvents == null)
                throw new ArgumentNullException(nameof(patchBotRequest.SubscribeEvents), "Property is required for class PatchBotRequest.");

            if (patchBotRequest.BioOption.IsSet && patchBotRequest.Bio == null)
                throw new ArgumentNullException(nameof(patchBotRequest.Bio), "Property is required for class PatchBotRequest.");

            if (patchBotRequest.DisplayNameOption.IsSet)
                writer.WriteString("displayName", patchBotRequest.DisplayName);

            if (patchBotRequest.DescriptionOption.IsSet)
                writer.WriteString("description", patchBotRequest.Description);

            if (patchBotRequest.PrivilegedOption.IsSet)
                writer.WriteBoolean("privileged", patchBotRequest.PrivilegedOption.Value!.Value);

            if (patchBotRequest.ModeOption.IsSet)
            {
                var modeRawValue = BotModeValueConverter.ToJsonValue(patchBotRequest.Mode!.Value);
                writer.WriteString("mode", modeRawValue);
            }
            if (patchBotRequest.EndpointOption.IsSet)
                writer.WriteString("endpoint", patchBotRequest.Endpoint);

            if (patchBotRequest.DeveloperIdOption.IsSet)
                writer.WriteString("developerId", patchBotRequest.DeveloperIdOption.Value!.Value);

            if (patchBotRequest.SubscribeEventsOption.IsSet)
            {
                writer.WritePropertyName("subscribeEvents");
                JsonSerializer.Serialize(writer, patchBotRequest.SubscribeEvents, jsonSerializerOptions);
            }
            if (patchBotRequest.BioOption.IsSet)
                writer.WriteString("bio", patchBotRequest.Bio);
        }
    }

    /// <summary>
    /// The PatchBotRequestSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(PatchBotRequest))]
    public partial class PatchBotRequestSerializationContext : JsonSerializerContext { }
}
