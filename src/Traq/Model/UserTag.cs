// <auto-generated>
/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Traq.Client;

namespace Traq.Model
{
    /// <summary>
    /// ユーザータグ
    /// </summary>
    public partial class UserTag : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserTag" /> class.
        /// </summary>
        /// <param name="tagId">タグUUID</param>
        /// <param name="tag">タグ文字列</param>
        /// <param name="isLocked">タグがロックされているか</param>
        /// <param name="createdAt">タグ付与日時</param>
        /// <param name="updatedAt">タグ更新日時</param>
        [JsonConstructor]
        public UserTag(Guid tagId, string tag, bool isLocked, DateTimeOffset createdAt, DateTimeOffset updatedAt)
        {
            TagId = tagId;
            Tag = tag;
            IsLocked = isLocked;
            CreatedAt = createdAt;
            UpdatedAt = updatedAt;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// タグUUID
        /// </summary>
        /// <value>タグUUID</value>
        [JsonPropertyName("tagId")]
        public Guid TagId { get; set; }

        /// <summary>
        /// タグ文字列
        /// </summary>
        /// <value>タグ文字列</value>
        [JsonPropertyName("tag")]
        public string Tag { get; set; }

        /// <summary>
        /// タグがロックされているか
        /// </summary>
        /// <value>タグがロックされているか</value>
        [JsonPropertyName("isLocked")]
        public bool IsLocked { get; set; }

        /// <summary>
        /// タグ付与日時
        /// </summary>
        /// <value>タグ付与日時</value>
        [JsonPropertyName("createdAt")]
        public DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// タグ更新日時
        /// </summary>
        /// <value>タグ更新日時</value>
        [JsonPropertyName("updatedAt")]
        public DateTimeOffset UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserTag {\n");
            sb.Append("  TagId: ").Append(TagId).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  IsLocked: ").Append(IsLocked).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UserTag" />
    /// </summary>
    public class UserTagJsonConverter : JsonConverter<UserTag>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdatedAt
        /// </summary>
        public static string UpdatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="UserTag" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UserTag Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid?> tagId = default;
            Option<string?> tag = default;
            Option<bool?> isLocked = default;
            Option<DateTimeOffset?> createdAt = default;
            Option<DateTimeOffset?> updatedAt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "tagId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                tagId = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        case "tag":
                            tag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "isLocked":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isLocked = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "createdAt":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createdAt = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "updatedAt":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                updatedAt = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!tagId.IsSet)
                throw new ArgumentException("Property is required for class UserTag.", nameof(tagId));

            if (!tag.IsSet)
                throw new ArgumentException("Property is required for class UserTag.", nameof(tag));

            if (!isLocked.IsSet)
                throw new ArgumentException("Property is required for class UserTag.", nameof(isLocked));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class UserTag.", nameof(createdAt));

            if (!updatedAt.IsSet)
                throw new ArgumentException("Property is required for class UserTag.", nameof(updatedAt));

            if (tagId.IsSet && tagId.Value == null)
                throw new ArgumentNullException(nameof(tagId), "Property is not nullable for class UserTag.");

            if (tag.IsSet && tag.Value == null)
                throw new ArgumentNullException(nameof(tag), "Property is not nullable for class UserTag.");

            if (isLocked.IsSet && isLocked.Value == null)
                throw new ArgumentNullException(nameof(isLocked), "Property is not nullable for class UserTag.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class UserTag.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class UserTag.");

            return new UserTag(tagId.Value!.Value!, tag.Value!, isLocked.Value!.Value!, createdAt.Value!.Value!, updatedAt.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="UserTag" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userTag"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UserTag userTag, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, userTag, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UserTag" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="userTag"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, UserTag userTag, JsonSerializerOptions jsonSerializerOptions)
        {
            if (userTag.Tag == null)
                throw new ArgumentNullException(nameof(userTag.Tag), "Property is required for class UserTag.");

            writer.WriteString("tagId", userTag.TagId);

            writer.WriteString("tag", userTag.Tag);

            writer.WriteBoolean("isLocked", userTag.IsLocked);

            writer.WriteString("createdAt", userTag.CreatedAt.ToString(CreatedAtFormat));

            writer.WriteString("updatedAt", userTag.UpdatedAt.ToString(UpdatedAtFormat));
        }
    }

    /// <summary>
    /// The UserTagSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(UserTag))]
    public partial class UserTagSerializationContext : JsonSerializerContext { }
}
