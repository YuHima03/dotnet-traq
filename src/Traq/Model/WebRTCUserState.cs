// <auto-generated>
/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Traq.Client;

namespace Traq.Model
{
    /// <summary>
    /// WebRTC状態
    /// </summary>
    public partial class WebRTCUserState : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WebRTCUserState" /> class.
        /// </summary>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="sessions">セッションの配列</param>
        [JsonConstructor]
        public WebRTCUserState(Guid userId, Guid channelId, List<Session> sessions)
        {
            UserId = userId;
            ChannelId = channelId;
            Sessions = sessions;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// ユーザーUUID
        /// </summary>
        /// <value>ユーザーUUID</value>
        [JsonPropertyName("userId")]
        public Guid UserId { get; set; }

        /// <summary>
        /// チャンネルUUID
        /// </summary>
        /// <value>チャンネルUUID</value>
        [JsonPropertyName("channelId")]
        public Guid ChannelId { get; set; }

        /// <summary>
        /// セッションの配列
        /// </summary>
        /// <value>セッションの配列</value>
        [JsonPropertyName("sessions")]
        public List<Session> Sessions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebRTCUserState {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  ChannelId: ").Append(ChannelId).Append("\n");
            sb.Append("  Sessions: ").Append(Sessions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="WebRTCUserState" />
    /// </summary>
    public class WebRTCUserStateJsonConverter : JsonConverter<WebRTCUserState>
    {
        /// <summary>
        /// Deserializes json to <see cref="WebRTCUserState" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override WebRTCUserState Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid?> userId = default;
            Option<Guid?> channelId = default;
            Option<List<Session>?> sessions = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "userId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                userId = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        case "channelId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                channelId = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        case "sessions":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                sessions = new Option<List<Session>?>(JsonSerializer.Deserialize<List<Session>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!userId.IsSet)
                throw new ArgumentException("Property is required for class WebRTCUserState.", nameof(userId));

            if (!channelId.IsSet)
                throw new ArgumentException("Property is required for class WebRTCUserState.", nameof(channelId));

            if (!sessions.IsSet)
                throw new ArgumentException("Property is required for class WebRTCUserState.", nameof(sessions));

            if (userId.IsSet && userId.Value == null)
                throw new ArgumentNullException(nameof(userId), "Property is not nullable for class WebRTCUserState.");

            if (channelId.IsSet && channelId.Value == null)
                throw new ArgumentNullException(nameof(channelId), "Property is not nullable for class WebRTCUserState.");

            if (sessions.IsSet && sessions.Value == null)
                throw new ArgumentNullException(nameof(sessions), "Property is not nullable for class WebRTCUserState.");

            return new WebRTCUserState(userId.Value!.Value!, channelId.Value!.Value!, sessions.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="WebRTCUserState" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webRTCUserState"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, WebRTCUserState webRTCUserState, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, webRTCUserState, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="WebRTCUserState" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="webRTCUserState"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, WebRTCUserState webRTCUserState, JsonSerializerOptions jsonSerializerOptions)
        {
            if (webRTCUserState.Sessions == null)
                throw new ArgumentNullException(nameof(webRTCUserState.Sessions), "Property is required for class WebRTCUserState.");

            writer.WriteString("userId", webRTCUserState.UserId);

            writer.WriteString("channelId", webRTCUserState.ChannelId);

            writer.WritePropertyName("sessions");
            JsonSerializer.Serialize(writer, webRTCUserState.Sessions, jsonSerializerOptions);
        }
    }

    /// <summary>
    /// The WebRTCUserStateSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(WebRTCUserState))]
    public partial class WebRTCUserStateSerializationContext : JsonSerializerContext { }
}
