// <auto-generated>
/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Traq.Client;

namespace Traq.Model
{
    /// <summary>
    /// チャンネル購読レベル 0：無し 1：未読管理 2：未読管理+通知
    /// </summary>
    /// <value>チャンネル購読レベル 0：無し 1：未読管理 2：未読管理+通知</value>
    public enum ChannelSubscribeLevel
    {
        /// <summary>
        /// Enum none for value: 0
        /// </summary>
        none = 0,

        /// <summary>
        /// Enum subscribed for value: 1
        /// </summary>
        subscribed = 1,

        /// <summary>
        /// Enum notified for value: 2
        /// </summary>
        notified = 2
    }

    /// <summary>
    /// Converts <see cref="ChannelSubscribeLevel"/> to and from the JSON value
    /// </summary>
    public static class ChannelSubscribeLevelValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="ChannelSubscribeLevel"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ChannelSubscribeLevel FromString(string value)
        {
            if (value.Equals((0).ToString()))
                return ChannelSubscribeLevel.none;

            if (value.Equals((1).ToString()))
                return ChannelSubscribeLevel.subscribed;

            if (value.Equals((2).ToString()))
                return ChannelSubscribeLevel.notified;

            throw new NotImplementedException($"Could not convert value to type ChannelSubscribeLevel: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="ChannelSubscribeLevel"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ChannelSubscribeLevel? FromStringOrDefault(string value)
        {
            if (value.Equals((0).ToString()))
                return ChannelSubscribeLevel.none;

            if (value.Equals((1).ToString()))
                return ChannelSubscribeLevel.subscribed;

            if (value.Equals((2).ToString()))
                return ChannelSubscribeLevel.notified;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ChannelSubscribeLevel"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static int ToJsonValue(ChannelSubscribeLevel value)
        {
            return (int) value;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ChannelSubscribeLevel"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class ChannelSubscribeLevelJsonConverter : JsonConverter<ChannelSubscribeLevel>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ChannelSubscribeLevel Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            ChannelSubscribeLevel? result = rawValue == null
                ? null
                : ChannelSubscribeLevelValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the ChannelSubscribeLevel to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="channelSubscribeLevel"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ChannelSubscribeLevel channelSubscribeLevel, JsonSerializerOptions options)
        {
            writer.WriteStringValue(channelSubscribeLevel.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ChannelSubscribeLevel"/>
    /// </summary>
    public class ChannelSubscribeLevelNullableJsonConverter : JsonConverter<ChannelSubscribeLevel?>
    {
        /// <summary>
        /// Returns a ChannelSubscribeLevel from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override ChannelSubscribeLevel? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            ChannelSubscribeLevel? result = rawValue == null
                ? null
                : ChannelSubscribeLevelValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="channelSubscribeLevel"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, ChannelSubscribeLevel? channelSubscribeLevel, JsonSerializerOptions options)
        {
            writer.WriteStringValue(channelSubscribeLevel?.ToString() ?? "null");
        }
    }


    /// <summary>
    /// The ChannelSubscribeLevelSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(ChannelSubscribeLevel))]
    public partial class ChannelSubscribeLevelSerializationContext : JsonSerializerContext { }
}
