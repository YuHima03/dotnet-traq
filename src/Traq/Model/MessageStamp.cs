// <auto-generated>
/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Traq.Client;

namespace Traq.Model
{
    /// <summary>
    /// メッセージに押されたスタンプ
    /// </summary>
    public partial class MessageStamp : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MessageStamp" /> class.
        /// </summary>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="stampId">スタンプUUID</param>
        /// <param name="count">スタンプ数</param>
        /// <param name="createdAt">スタンプが最初に押された日時</param>
        /// <param name="updatedAt">スタンプが最後に押された日時</param>
        [JsonConstructor]
        public MessageStamp(Guid userId, Guid stampId, int count, DateTimeOffset createdAt, DateTimeOffset updatedAt)
        {
            UserId = userId;
            StampId = stampId;
            Count = count;
            CreatedAt = createdAt;
            UpdatedAt = updatedAt;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// ユーザーUUID
        /// </summary>
        /// <value>ユーザーUUID</value>
        [JsonPropertyName("userId")]
        public Guid UserId { get; set; }

        /// <summary>
        /// スタンプUUID
        /// </summary>
        /// <value>スタンプUUID</value>
        [JsonPropertyName("stampId")]
        public Guid StampId { get; set; }

        /// <summary>
        /// スタンプ数
        /// </summary>
        /// <value>スタンプ数</value>
        [JsonPropertyName("count")]
        public int Count { get; set; }

        /// <summary>
        /// スタンプが最初に押された日時
        /// </summary>
        /// <value>スタンプが最初に押された日時</value>
        [JsonPropertyName("createdAt")]
        public DateTimeOffset CreatedAt { get; set; }

        /// <summary>
        /// スタンプが最後に押された日時
        /// </summary>
        /// <value>スタンプが最後に押された日時</value>
        [JsonPropertyName("updatedAt")]
        public DateTimeOffset UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MessageStamp {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  StampId: ").Append(StampId).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="MessageStamp" />
    /// </summary>
    public class MessageStampJsonConverter : JsonConverter<MessageStamp>
    {
        /// <summary>
        /// The format to use to serialize CreatedAt
        /// </summary>
        public static string CreatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize UpdatedAt
        /// </summary>
        public static string UpdatedAtFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="MessageStamp" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override MessageStamp Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid?> userId = default;
            Option<Guid?> stampId = default;
            Option<int?> count = default;
            Option<DateTimeOffset?> createdAt = default;
            Option<DateTimeOffset?> updatedAt = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "userId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                userId = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        case "stampId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                stampId = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        case "count":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                count = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "createdAt":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                createdAt = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "updatedAt":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                updatedAt = new Option<DateTimeOffset?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!userId.IsSet)
                throw new ArgumentException("Property is required for class MessageStamp.", nameof(userId));

            if (!stampId.IsSet)
                throw new ArgumentException("Property is required for class MessageStamp.", nameof(stampId));

            if (!count.IsSet)
                throw new ArgumentException("Property is required for class MessageStamp.", nameof(count));

            if (!createdAt.IsSet)
                throw new ArgumentException("Property is required for class MessageStamp.", nameof(createdAt));

            if (!updatedAt.IsSet)
                throw new ArgumentException("Property is required for class MessageStamp.", nameof(updatedAt));

            if (userId.IsSet && userId.Value == null)
                throw new ArgumentNullException(nameof(userId), "Property is not nullable for class MessageStamp.");

            if (stampId.IsSet && stampId.Value == null)
                throw new ArgumentNullException(nameof(stampId), "Property is not nullable for class MessageStamp.");

            if (count.IsSet && count.Value == null)
                throw new ArgumentNullException(nameof(count), "Property is not nullable for class MessageStamp.");

            if (createdAt.IsSet && createdAt.Value == null)
                throw new ArgumentNullException(nameof(createdAt), "Property is not nullable for class MessageStamp.");

            if (updatedAt.IsSet && updatedAt.Value == null)
                throw new ArgumentNullException(nameof(updatedAt), "Property is not nullable for class MessageStamp.");

            return new MessageStamp(userId.Value!.Value!, stampId.Value!.Value!, count.Value!.Value!, createdAt.Value!.Value!, updatedAt.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="MessageStamp" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="messageStamp"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, MessageStamp messageStamp, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, messageStamp, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="MessageStamp" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="messageStamp"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, MessageStamp messageStamp, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteString("userId", messageStamp.UserId);

            writer.WriteString("stampId", messageStamp.StampId);

            writer.WriteNumber("count", messageStamp.Count);

            writer.WriteString("createdAt", messageStamp.CreatedAt.ToString(CreatedAtFormat));

            writer.WriteString("updatedAt", messageStamp.UpdatedAt.ToString(UpdatedAtFormat));
        }
    }

    /// <summary>
    /// The MessageStampSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(MessageStamp))]
    public partial class MessageStampSerializationContext : JsonSerializerContext { }
}
