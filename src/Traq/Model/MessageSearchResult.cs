// <auto-generated>
/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Traq.Client;

namespace Traq.Model
{
    /// <summary>
    /// メッセージ検索結果
    /// </summary>
    public partial class MessageSearchResult : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MessageSearchResult" /> class.
        /// </summary>
        /// <param name="totalHits">検索にヒットしたメッセージ件数</param>
        /// <param name="hits">検索にヒットしたメッセージの配列</param>
        [JsonConstructor]
        public MessageSearchResult(long totalHits, List<Message> hits)
        {
            TotalHits = totalHits;
            Hits = hits;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// 検索にヒットしたメッセージ件数
        /// </summary>
        /// <value>検索にヒットしたメッセージ件数</value>
        [JsonPropertyName("totalHits")]
        public long TotalHits { get; set; }

        /// <summary>
        /// 検索にヒットしたメッセージの配列
        /// </summary>
        /// <value>検索にヒットしたメッセージの配列</value>
        [JsonPropertyName("hits")]
        public List<Message> Hits { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MessageSearchResult {\n");
            sb.Append("  TotalHits: ").Append(TotalHits).Append("\n");
            sb.Append("  Hits: ").Append(Hits).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="MessageSearchResult" />
    /// </summary>
    public class MessageSearchResultJsonConverter : JsonConverter<MessageSearchResult>
    {
        /// <summary>
        /// Deserializes json to <see cref="MessageSearchResult" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override MessageSearchResult Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long?> totalHits = default;
            Option<List<Message>?> hits = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "totalHits":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                totalHits = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "hits":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                hits = new Option<List<Message>?>(JsonSerializer.Deserialize<List<Message>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!totalHits.IsSet)
                throw new ArgumentException("Property is required for class MessageSearchResult.", nameof(totalHits));

            if (!hits.IsSet)
                throw new ArgumentException("Property is required for class MessageSearchResult.", nameof(hits));

            if (totalHits.IsSet && totalHits.Value == null)
                throw new ArgumentNullException(nameof(totalHits), "Property is not nullable for class MessageSearchResult.");

            if (hits.IsSet && hits.Value == null)
                throw new ArgumentNullException(nameof(hits), "Property is not nullable for class MessageSearchResult.");

            return new MessageSearchResult(totalHits.Value!.Value!, hits.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="MessageSearchResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="messageSearchResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, MessageSearchResult messageSearchResult, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, messageSearchResult, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="MessageSearchResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="messageSearchResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, MessageSearchResult messageSearchResult, JsonSerializerOptions jsonSerializerOptions)
        {
            if (messageSearchResult.Hits == null)
                throw new ArgumentNullException(nameof(messageSearchResult.Hits), "Property is required for class MessageSearchResult.");

            writer.WriteNumber("totalHits", messageSearchResult.TotalHits);

            writer.WritePropertyName("hits");
            JsonSerializer.Serialize(writer, messageSearchResult.Hits, jsonSerializerOptions);
        }
    }

    /// <summary>
    /// The MessageSearchResultSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(MessageSearchResult))]
    public partial class MessageSearchResultSerializationContext : JsonSerializerContext { }
}
