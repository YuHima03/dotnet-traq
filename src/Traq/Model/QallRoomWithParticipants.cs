/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Traq.Client.FileParameter;
using OpenAPIDateConverter = Traq.Client.OpenAPIDateConverter;

namespace Traq.Model
{
    /// <summary>
    /// QallRoomWithParticipants
    /// </summary>
    [DataContract(Name = "qallRoomWithParticipants")]
    public partial class QallRoomWithParticipants : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QallRoomWithParticipants" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected QallRoomWithParticipants() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="QallRoomWithParticipants" /> class.
        /// </summary>
        /// <param name="roomId">ルームのID (required).</param>
        /// <param name="participants">participants (required).</param>
        /// <param name="isWebinar">ウェビナールームかどうか.</param>
        /// <param name="metadata">ルームに関連付けられたカスタム属性.</param>
        public QallRoomWithParticipants(Guid roomId = default(Guid), List<QallParticipant> participants = default(List<QallParticipant>), bool isWebinar = default(bool), string metadata = default(string))
        {
            this.RoomId = roomId;
            // to ensure "participants" is required (not null)
            if (participants == null)
            {
                throw new ArgumentNullException("participants is a required property for QallRoomWithParticipants and cannot be null");
            }
            this.Participants = participants;
            this.IsWebinar = isWebinar;
            this.Metadata = metadata;
        }

        /// <summary>
        /// ルームのID
        /// </summary>
        /// <value>ルームのID</value>
        [DataMember(Name = "roomId", IsRequired = true, EmitDefaultValue = true)]
        public Guid RoomId { get; set; }

        /// <summary>
        /// Gets or Sets Participants
        /// </summary>
        [DataMember(Name = "participants", IsRequired = true, EmitDefaultValue = true)]
        public List<QallParticipant> Participants { get; set; }

        /// <summary>
        /// ウェビナールームかどうか
        /// </summary>
        /// <value>ウェビナールームかどうか</value>
        [DataMember(Name = "isWebinar", EmitDefaultValue = true)]
        public bool IsWebinar { get; set; }

        /// <summary>
        /// ルームに関連付けられたカスタム属性
        /// </summary>
        /// <value>ルームに関連付けられたカスタム属性</value>
        [DataMember(Name = "metadata", EmitDefaultValue = false)]
        public string Metadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class QallRoomWithParticipants {\n");
            sb.Append("  RoomId: ").Append(RoomId).Append("\n");
            sb.Append("  Participants: ").Append(Participants).Append("\n");
            sb.Append("  IsWebinar: ").Append(IsWebinar).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
