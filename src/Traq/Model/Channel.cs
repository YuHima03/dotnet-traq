// <auto-generated>
/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Traq.Client;

namespace Traq.Model
{
    /// <summary>
    /// チャンネル
    /// </summary>
    public partial class Channel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Channel" /> class.
        /// </summary>
        /// <param name="id">チャンネルUUID</param>
        /// <param name="archived">チャンネルがアーカイブされているかどうか</param>
        /// <param name="force">強制通知チャンネルかどうか</param>
        /// <param name="topic">チャンネルトピック</param>
        /// <param name="name">チャンネル名</param>
        /// <param name="children">子チャンネルのUUID配列</param>
        /// <param name="parentId">親チャンネルUUID</param>
        [JsonConstructor]
        public Channel(Guid id, bool archived, bool force, string topic, string name, List<Guid> children, Guid? parentId = default)
        {
            Id = id;
            Archived = archived;
            Force = force;
            Topic = topic;
            Name = name;
            Children = children;
            ParentId = parentId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// チャンネルUUID
        /// </summary>
        /// <value>チャンネルUUID</value>
        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        /// <summary>
        /// チャンネルがアーカイブされているかどうか
        /// </summary>
        /// <value>チャンネルがアーカイブされているかどうか</value>
        [JsonPropertyName("archived")]
        public bool Archived { get; set; }

        /// <summary>
        /// 強制通知チャンネルかどうか
        /// </summary>
        /// <value>強制通知チャンネルかどうか</value>
        [JsonPropertyName("force")]
        public bool Force { get; set; }

        /// <summary>
        /// チャンネルトピック
        /// </summary>
        /// <value>チャンネルトピック</value>
        [JsonPropertyName("topic")]
        public string Topic { get; set; }

        /// <summary>
        /// チャンネル名
        /// </summary>
        /// <value>チャンネル名</value>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// 子チャンネルのUUID配列
        /// </summary>
        /// <value>子チャンネルのUUID配列</value>
        [JsonPropertyName("children")]
        public List<Guid> Children { get; set; }

        /// <summary>
        /// 親チャンネルUUID
        /// </summary>
        /// <value>親チャンネルUUID</value>
        [JsonPropertyName("parentId")]
        public Guid? ParentId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Channel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Archived: ").Append(Archived).Append("\n");
            sb.Append("  Force: ").Append(Force).Append("\n");
            sb.Append("  Topic: ").Append(Topic).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Children: ").Append(Children).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.Name != null) {
                // Name (string) pattern
                Regex regexName = new Regex(@"^[a-zA-Z0-9-_]{1,20}$", RegexOptions.CultureInvariant);

                if (!regexName.Match(this.Name).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, must match a pattern of " + regexName, new [] { "Name" });
                }
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Channel" />
    /// </summary>
    public class ChannelJsonConverter : JsonConverter<Channel>
    {
        /// <summary>
        /// Deserializes json to <see cref="Channel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Channel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid?> id = default;
            Option<bool?> archived = default;
            Option<bool?> force = default;
            Option<string?> topic = default;
            Option<string?> name = default;
            Option<List<Guid>?> children = default;
            Option<Guid?> parentId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        case "archived":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                archived = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "force":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                force = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "topic":
                            topic = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "children":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                children = new Option<List<Guid>?>(JsonSerializer.Deserialize<List<Guid>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "parentId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                parentId = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class Channel.", nameof(id));

            if (!archived.IsSet)
                throw new ArgumentException("Property is required for class Channel.", nameof(archived));

            if (!force.IsSet)
                throw new ArgumentException("Property is required for class Channel.", nameof(force));

            if (!topic.IsSet)
                throw new ArgumentException("Property is required for class Channel.", nameof(topic));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class Channel.", nameof(name));

            if (!children.IsSet)
                throw new ArgumentException("Property is required for class Channel.", nameof(children));

            if (!parentId.IsSet)
                throw new ArgumentException("Property is required for class Channel.", nameof(parentId));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class Channel.");

            if (archived.IsSet && archived.Value == null)
                throw new ArgumentNullException(nameof(archived), "Property is not nullable for class Channel.");

            if (force.IsSet && force.Value == null)
                throw new ArgumentNullException(nameof(force), "Property is not nullable for class Channel.");

            if (topic.IsSet && topic.Value == null)
                throw new ArgumentNullException(nameof(topic), "Property is not nullable for class Channel.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class Channel.");

            if (children.IsSet && children.Value == null)
                throw new ArgumentNullException(nameof(children), "Property is not nullable for class Channel.");

            return new Channel(id.Value!.Value!, archived.Value!.Value!, force.Value!.Value!, topic.Value!, name.Value!, children.Value!, parentId.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="Channel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="channel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Channel channel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, channel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Channel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="channel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Channel channel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (channel.Topic == null)
                throw new ArgumentNullException(nameof(channel.Topic), "Property is required for class Channel.");

            if (channel.Name == null)
                throw new ArgumentNullException(nameof(channel.Name), "Property is required for class Channel.");

            if (channel.Children == null)
                throw new ArgumentNullException(nameof(channel.Children), "Property is required for class Channel.");

            writer.WriteString("id", channel.Id);

            writer.WriteBoolean("archived", channel.Archived);

            writer.WriteBoolean("force", channel.Force);

            writer.WriteString("topic", channel.Topic);

            writer.WriteString("name", channel.Name);

            writer.WritePropertyName("children");
            JsonSerializer.Serialize(writer, channel.Children, jsonSerializerOptions);
            if (channel.ParentId != null)
                writer.WriteString("parentId", channel.ParentId.Value);
            else
                writer.WriteNull("parentId");
        }
    }

    /// <summary>
    /// The ChannelSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(Channel))]
    public partial class ChannelSerializationContext : JsonSerializerContext { }
}
