// <auto-generated>
/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Traq.Client;

namespace Traq.Model
{
    /// <summary>
    /// 自身のチャンネル閲覧状態
    /// </summary>
    public partial class MyChannelViewState : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MyChannelViewState" /> class.
        /// </summary>
        /// <param name="key">WSセッションの識別子</param>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="state">state</param>
        [JsonConstructor]
        public MyChannelViewState(string key, Guid channelId, ChannelViewState state)
        {
            Key = key;
            ChannelId = channelId;
            State = state;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [JsonPropertyName("state")]
        public ChannelViewState State { get; set; }

        /// <summary>
        /// WSセッションの識別子
        /// </summary>
        /// <value>WSセッションの識別子</value>
        [JsonPropertyName("key")]
        public string Key { get; set; }

        /// <summary>
        /// チャンネルUUID
        /// </summary>
        /// <value>チャンネルUUID</value>
        [JsonPropertyName("channelId")]
        public Guid ChannelId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MyChannelViewState {\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  ChannelId: ").Append(ChannelId).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="MyChannelViewState" />
    /// </summary>
    public class MyChannelViewStateJsonConverter : JsonConverter<MyChannelViewState>
    {
        /// <summary>
        /// Deserializes json to <see cref="MyChannelViewState" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override MyChannelViewState Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> key = default;
            Option<Guid?> channelId = default;
            Option<ChannelViewState?> state = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "key":
                            key = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "channelId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                channelId = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        case "state":
                            string? stateRawValue = utf8JsonReader.GetString();
                            if (stateRawValue != null)
                                state = new Option<ChannelViewState?>(ChannelViewStateValueConverter.FromStringOrDefault(stateRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!key.IsSet)
                throw new ArgumentException("Property is required for class MyChannelViewState.", nameof(key));

            if (!channelId.IsSet)
                throw new ArgumentException("Property is required for class MyChannelViewState.", nameof(channelId));

            if (!state.IsSet)
                throw new ArgumentException("Property is required for class MyChannelViewState.", nameof(state));

            if (key.IsSet && key.Value == null)
                throw new ArgumentNullException(nameof(key), "Property is not nullable for class MyChannelViewState.");

            if (channelId.IsSet && channelId.Value == null)
                throw new ArgumentNullException(nameof(channelId), "Property is not nullable for class MyChannelViewState.");

            if (state.IsSet && state.Value == null)
                throw new ArgumentNullException(nameof(state), "Property is not nullable for class MyChannelViewState.");

            return new MyChannelViewState(key.Value!, channelId.Value!.Value!, state.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="MyChannelViewState" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="myChannelViewState"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, MyChannelViewState myChannelViewState, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, myChannelViewState, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="MyChannelViewState" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="myChannelViewState"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, MyChannelViewState myChannelViewState, JsonSerializerOptions jsonSerializerOptions)
        {
            if (myChannelViewState.Key == null)
                throw new ArgumentNullException(nameof(myChannelViewState.Key), "Property is required for class MyChannelViewState.");

            writer.WriteString("key", myChannelViewState.Key);

            writer.WriteString("channelId", myChannelViewState.ChannelId);

            var stateRawValue = ChannelViewStateValueConverter.ToJsonValue(myChannelViewState.State);
            writer.WriteString("state", stateRawValue);
        }
    }

    /// <summary>
    /// The MyChannelViewStateSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(MyChannelViewState))]
    public partial class MyChannelViewStateSerializationContext : JsonSerializerContext { }
}
