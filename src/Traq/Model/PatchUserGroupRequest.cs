// <auto-generated>
/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Traq.Client;

namespace Traq.Model
{
    /// <summary>
    /// ユーザーグループ編集リクエスト
    /// </summary>
    public partial class PatchUserGroupRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PatchUserGroupRequest" /> class.
        /// </summary>
        /// <param name="name">グループ名</param>
        /// <param name="description">グループ説明</param>
        /// <param name="type">グループタイプ</param>
        [JsonConstructor]
        public PatchUserGroupRequest(Option<string?> name = default, Option<string?> description = default, Option<string?> type = default)
        {
            NameOption = name;
            DescriptionOption = description;
            TypeOption = type;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// グループ名
        /// </summary>
        /// <value>グループ名</value>
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// グループ説明
        /// </summary>
        /// <value>グループ説明</value>
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TypeOption { get; private set; }

        /// <summary>
        /// グループタイプ
        /// </summary>
        /// <value>グループタイプ</value>
        [JsonPropertyName("type")]
        public string? Type { get { return this.TypeOption; } set { this.TypeOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PatchUserGroupRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 100)
            {
                yield return new ValidationResult("Invalid value for Description, length must be less than 100.", new [] { "Description" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PatchUserGroupRequest" />
    /// </summary>
    public class PatchUserGroupRequestJsonConverter : JsonConverter<PatchUserGroupRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="PatchUserGroupRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PatchUserGroupRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> name = default;
            Option<string?> description = default;
            Option<string?> type = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "type":
                            type = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class PatchUserGroupRequest.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class PatchUserGroupRequest.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class PatchUserGroupRequest.");

            return new PatchUserGroupRequest(name, description, type);
        }

        /// <summary>
        /// Serializes a <see cref="PatchUserGroupRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="patchUserGroupRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PatchUserGroupRequest patchUserGroupRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, patchUserGroupRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PatchUserGroupRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="patchUserGroupRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PatchUserGroupRequest patchUserGroupRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (patchUserGroupRequest.NameOption.IsSet && patchUserGroupRequest.Name == null)
                throw new ArgumentNullException(nameof(patchUserGroupRequest.Name), "Property is required for class PatchUserGroupRequest.");

            if (patchUserGroupRequest.DescriptionOption.IsSet && patchUserGroupRequest.Description == null)
                throw new ArgumentNullException(nameof(patchUserGroupRequest.Description), "Property is required for class PatchUserGroupRequest.");

            if (patchUserGroupRequest.TypeOption.IsSet && patchUserGroupRequest.Type == null)
                throw new ArgumentNullException(nameof(patchUserGroupRequest.Type), "Property is required for class PatchUserGroupRequest.");

            if (patchUserGroupRequest.NameOption.IsSet)
                writer.WriteString("name", patchUserGroupRequest.Name);

            if (patchUserGroupRequest.DescriptionOption.IsSet)
                writer.WriteString("description", patchUserGroupRequest.Description);

            if (patchUserGroupRequest.TypeOption.IsSet)
                writer.WriteString("type", patchUserGroupRequest.Type);
        }
    }

    /// <summary>
    /// The PatchUserGroupRequestSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(PatchUserGroupRequest))]
    public partial class PatchUserGroupRequestSerializationContext : JsonSerializerContext { }
}
