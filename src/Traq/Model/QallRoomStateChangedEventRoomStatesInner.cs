// <auto-generated>
/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization.Metadata;
using Traq.Client;

namespace Traq.Model
{
    /// <summary>
    /// QallRoomStateChangedEventRoomStatesInner
    /// </summary>
    public partial class QallRoomStateChangedEventRoomStatesInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QallRoomStateChangedEventRoomStatesInner" /> class.
        /// </summary>
        /// <param name="roomId">ルームのID</param>
        /// <param name="participants">participants</param>
        /// <param name="isWebinar">ウェビナールームかどうか</param>
        /// <param name="metadata">ルームに関連付けられたカスタム属性</param>
        [JsonConstructor]
        public QallRoomStateChangedEventRoomStatesInner(Guid roomId, List<QallRoomStateChangedEventRoomStatesInnerParticipantsInner> participants, bool isWebinar, Option<string?> metadata = default)
        {
            RoomId = roomId;
            Participants = participants;
            IsWebinar = isWebinar;
            MetadataOption = metadata;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// ルームのID
        /// </summary>
        /// <value>ルームのID</value>
        [JsonPropertyName("roomId")]
        public Guid RoomId { get; set; }

        /// <summary>
        /// Gets or Sets Participants
        /// </summary>
        [JsonPropertyName("participants")]
        public List<QallRoomStateChangedEventRoomStatesInnerParticipantsInner> Participants { get; set; }

        /// <summary>
        /// ウェビナールームかどうか
        /// </summary>
        /// <value>ウェビナールームかどうか</value>
        [JsonPropertyName("isWebinar")]
        public bool IsWebinar { get; set; }

        /// <summary>
        /// Used to track the state of Metadata
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MetadataOption { get; private set; }

        /// <summary>
        /// ルームに関連付けられたカスタム属性
        /// </summary>
        /// <value>ルームに関連付けられたカスタム属性</value>
        [JsonPropertyName("metadata")]
        public string? Metadata { get { return this.MetadataOption; } set { this.MetadataOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class QallRoomStateChangedEventRoomStatesInner {\n");
            sb.Append("  RoomId: ").Append(RoomId).Append("\n");
            sb.Append("  Participants: ").Append(Participants).Append("\n");
            sb.Append("  IsWebinar: ").Append(IsWebinar).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="QallRoomStateChangedEventRoomStatesInner" />
    /// </summary>
    public class QallRoomStateChangedEventRoomStatesInnerJsonConverter : JsonConverter<QallRoomStateChangedEventRoomStatesInner>
    {
        /// <summary>
        /// Deserializes json to <see cref="QallRoomStateChangedEventRoomStatesInner" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override QallRoomStateChangedEventRoomStatesInner Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid?> roomId = default;
            Option<List<QallRoomStateChangedEventRoomStatesInnerParticipantsInner>?> participants = default;
            Option<bool?> isWebinar = default;
            Option<string?> metadata = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "roomId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                roomId = new Option<Guid?>(utf8JsonReader.GetGuid());
                            break;
                        case "participants":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                participants = new Option<List<QallRoomStateChangedEventRoomStatesInnerParticipantsInner>?>(JsonSerializer.Deserialize<List<QallRoomStateChangedEventRoomStatesInnerParticipantsInner>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "isWebinar":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isWebinar = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "metadata":
                            metadata = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!roomId.IsSet)
                throw new ArgumentException("Property is required for class QallRoomStateChangedEventRoomStatesInner.", nameof(roomId));

            if (!participants.IsSet)
                throw new ArgumentException("Property is required for class QallRoomStateChangedEventRoomStatesInner.", nameof(participants));

            if (!isWebinar.IsSet)
                throw new ArgumentException("Property is required for class QallRoomStateChangedEventRoomStatesInner.", nameof(isWebinar));

            if (roomId.IsSet && roomId.Value == null)
                throw new ArgumentNullException(nameof(roomId), "Property is not nullable for class QallRoomStateChangedEventRoomStatesInner.");

            if (participants.IsSet && participants.Value == null)
                throw new ArgumentNullException(nameof(participants), "Property is not nullable for class QallRoomStateChangedEventRoomStatesInner.");

            if (isWebinar.IsSet && isWebinar.Value == null)
                throw new ArgumentNullException(nameof(isWebinar), "Property is not nullable for class QallRoomStateChangedEventRoomStatesInner.");

            if (metadata.IsSet && metadata.Value == null)
                throw new ArgumentNullException(nameof(metadata), "Property is not nullable for class QallRoomStateChangedEventRoomStatesInner.");

            return new QallRoomStateChangedEventRoomStatesInner(roomId.Value!.Value!, participants.Value!, isWebinar.Value!.Value!, metadata);
        }

        /// <summary>
        /// Serializes a <see cref="QallRoomStateChangedEventRoomStatesInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="qallRoomStateChangedEventRoomStatesInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, QallRoomStateChangedEventRoomStatesInner qallRoomStateChangedEventRoomStatesInner, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, qallRoomStateChangedEventRoomStatesInner, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="QallRoomStateChangedEventRoomStatesInner" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="qallRoomStateChangedEventRoomStatesInner"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, QallRoomStateChangedEventRoomStatesInner qallRoomStateChangedEventRoomStatesInner, JsonSerializerOptions jsonSerializerOptions)
        {
            if (qallRoomStateChangedEventRoomStatesInner.Participants == null)
                throw new ArgumentNullException(nameof(qallRoomStateChangedEventRoomStatesInner.Participants), "Property is required for class QallRoomStateChangedEventRoomStatesInner.");

            if (qallRoomStateChangedEventRoomStatesInner.MetadataOption.IsSet && qallRoomStateChangedEventRoomStatesInner.Metadata == null)
                throw new ArgumentNullException(nameof(qallRoomStateChangedEventRoomStatesInner.Metadata), "Property is required for class QallRoomStateChangedEventRoomStatesInner.");

            writer.WriteString("roomId", qallRoomStateChangedEventRoomStatesInner.RoomId);

            writer.WritePropertyName("participants");
            JsonSerializer.Serialize(writer, qallRoomStateChangedEventRoomStatesInner.Participants, jsonSerializerOptions);
            writer.WriteBoolean("isWebinar", qallRoomStateChangedEventRoomStatesInner.IsWebinar);

            if (qallRoomStateChangedEventRoomStatesInner.MetadataOption.IsSet)
                writer.WriteString("metadata", qallRoomStateChangedEventRoomStatesInner.Metadata);
        }
    }

    /// <summary>
    /// The QallRoomStateChangedEventRoomStatesInnerSerializationContext
    /// </summary>
    [JsonSourceGenerationOptions(WriteIndented = true, GenerationMode = JsonSourceGenerationMode.Metadata | JsonSourceGenerationMode.Serialization)]
    [JsonSerializable(typeof(QallRoomStateChangedEventRoomStatesInner))]
    public partial class QallRoomStateChangedEventRoomStatesInnerSerializationContext : JsonSerializerContext { }
}
