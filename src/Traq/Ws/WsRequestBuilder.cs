// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System;
using System.Collections.Generic;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
namespace Traq.Ws
{
    /// <summary>
    /// Builds and executes requests for operations under \ws
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::Traq.Ws.WsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/ws", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Traq.Ws.WsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/ws", rawUrl)
        {
        }
        /// <summary>
        /// # WebSocketプロトコル## 送信`コマンド:引数1:引数2:...`のような形式のTextMessageをサーバーに送信することで、このWebSocketセッションに対する設定が実行できる。### `viewstate`コマンドこのWebSocketセッションが見ているチャンネル(イベントを受け取るチャンネル)を設定する。現時点では1つのセッションに対して1つのチャンネルしか設定できない。`viewstate:{チャンネルID}:{閲覧状態}`+ チャンネルID: 対象のチャンネルID+ 閲覧状態: `none`, `monitoring`, `editing`最初の`viewstate`コマンドを送る前、または`viewstate:null`, `viewstate:`を送信した後は、このセッションはどこのチャンネルも見ていないことになる。### `rtcstate`コマンド自分のWebRTC状態を変更する。他のコネクションが既に状態を保持している場合、変更することができません。`rtcstate:{チャンネルID}:({状態}:{セッションID})*`コネクションが切断された場合、自分のWebRTC状態はリセットされます。### `timeline_streaming`コマンド全てのパブリックチャンネルの`MESSAGE_CREATED`イベントを受け取るかどうかを設定する。初期状態は`off`です。`timeline_streaming:(on|off|true|false)`## 受信TextMessageとして各種イベントが`type`と`body`を持つJSONとして非同期に送られます。例:```json{&quot;type&quot;:&quot;USER_ONLINE&quot;,&quot;body&quot;:{&quot;id&quot;:&quot;7dd8e07f-7f5d-4331-9176-b56a4299768b&quot;}}```## イベント一覧### `USER_JOINED`ユーザーが新規登録された。対象: 全員+ `id`: 登録されたユーザーのId### `USER_UPDATED`ユーザーの情報が更新された。対象: 全員+ `id`: 情報が更新されたユーザーのId### `USER_TAGS_UPDATED`ユーザーのタグが更新された。対象: 全員+ `id`: タグが更新されたユーザーのId+ `tag_id`: 更新されたタグのId### `USER_ICON_UPDATED`ユーザーのアイコンが更新された。対象: 全員+ `id`: アイコンが更新されたユーザーのId### `USER_WEBRTC_STATE_CHANGED`ユーザーのWebRTCの状態が変化した対象: 全員+ `user_id`: 変更があったユーザーのId+ `channel_id`: ユーザーの変更後の接続チャンネルのId+ `sessions`: ユーザーの変更後の状態(配列)  + `state`: 状態  + `sessionId`: セッションID### `USER_VIEWSTATE_CHANGED`ユーザーのチャンネルの閲覧状態が変化した対象: 変化したWSセッションを含めた、該当ユーザーのWSセッション全て+ `view_states`: 変化したWSセッションを含めた、該当ユーザーの変更後の状態(配列)  + `key`: WSセッションの識別子  + `channel_id`: 閲覧しているチャンネルId  + `state`: 閲覧状態### `USER_ONLINE`ユーザーがオンラインになった。対象: 全員+ `id`: オンラインになったユーザーのId### `USER_OFFLINE`ユーザーがオフラインになった。対象: 全員+ `id`: オフラインになったユーザーのId### `USER_GROUP_CREATED`ユーザーグループが作成された対象: 全員+ `id`: 作成されたユーザーグループのId### `USER_GROUP_UPDATED`ユーザーグループが更新された対象: 全員+ `id`: 作成されたユーザーグループのId### `USER_GROUP_DELETED`ユーザーグループが削除された対象: 全員+ `id`: 削除されたユーザーグループのId### `CHANNEL_CREATED`チャンネルが新規作成された。対象: 該当チャンネルを閲覧可能な全員+ `id`: 作成されたチャンネルのId+ `dm_user_id`: (DMの場合のみ) DM相手のユーザーId### `CHANNEL_UPDATED`チャンネルの情報が変更された。対象: 該当チャンネルを閲覧可能な全員+ `id`: 変更があったチャンネルのId+ `dm_user_id`: (DMの場合のみ) DM相手のユーザーId### `CHANNEL_DELETED`チャンネルが削除された。対象: 該当チャンネルを閲覧可能な全員+ `id`: 削除されたチャンネルのId+ `dm_user_id`: (DMの場合のみ) DM相手のユーザーId### `CHANNEL_STARED`自分がチャンネルをスターした。対象: 自分+ `id`: スターしたチャンネルのId### `CHANNEL_UNSTARED`自分がチャンネルのスターを解除した。対象: 自分+ `id`: スターしたチャンネルのId### `CHANNEL_VIEWERS_CHANGED`チャンネルの閲覧者が変化した。対象: 該当チャンネルを閲覧しているユーザー+ `id`: 変化したチャンネルのId+ `viewers`: 変化後の閲覧者(配列)  + `userId`: ユーザーId  + `state`: 閲覧状態  + `updatedAt`: 閲覧状態の更新日時### `CHANNEL_SUBSCRIBERS_CHANGED`チャンネルの購読者が変化した。対象: 該当チャンネルを閲覧しているユーザー+ `id`: 変化したチャンネルのId### `MESSAGE_CREATED`メッセージが投稿された。対象: 投稿チャンネルを閲覧しているユーザー・投稿チャンネルに通知をつけているユーザー・メンションを受けたユーザー+ `id`: 投稿されたメッセージのId+ `is_citing`: 投稿されたメッセージがWebSocketを接続しているユーザーの投稿を引用しているかどうか### `MESSAGE_UPDATED`メッセージが更新された。対象: 投稿チャンネルを閲覧しているユーザー+ `id`: 更新されたメッセージのId### `MESSAGE_DELETED`メッセージが削除された。対象: 投稿チャンネルを閲覧しているユーザー+ `id`: 削除されたメッセージのId### `MESSAGE_STAMPED`メッセージにスタンプが押された。対象: 投稿チャンネルを閲覧しているユーザー+ `message_id`: メッセージId+ `user_id`: スタンプを押したユーザーのId+ `stamp_id`: スタンプのId+ `count`: そのユーザーが押した数+ `created_at`: そのユーザーがそのスタンプをそのメッセージに最初に押した日時### `MESSAGE_UNSTAMPED`メッセージからスタンプが外された。対象: 投稿チャンネルを閲覧しているユーザー+ `message_id`: メッセージId+ `user_id`: スタンプを押したユーザーのId+ `stamp_id`: スタンプのId### `MESSAGE_PINNED`メッセージがピン留めされた。対象: 投稿チャンネルを閲覧しているユーザー+ `message_id`: ピンされたメッセージのID+ `channel_id`: ピンされたメッセージのチャンネルID### `MESSAGE_UNPINNED`ピン留めされたメッセージのピンが外された。対象: 投稿チャンネルを閲覧しているユーザー+ `message_id`: ピンが外されたメッセージのID+ `channel_id`: ピンが外されたメッセージのチャンネルID### `MESSAGE_READ`自分があるチャンネルのメッセージを読んだ。対象: 自分+ `id`: 読んだチャンネルId### `STAMP_CREATED`スタンプが新しく追加された。対象: 全員+ `id`: 作成されたスタンプのId### `STAMP_UPDATED`スタンプが修正された。対象: 全員+ `id`: 修正されたスタンプのId### `STAMP_DELETED`スタンプが削除された。対象: 全員+ `id`: 削除されたスタンプのId### `STAMP_PALETTE_CREATED`スタンプパレットが新しく追加された。対象: 自分+ `id`: 作成されたスタンプパレットのId### `STAMP_PALETTE_UPDATED`スタンプパレットが修正された。対象: 自分+ `id`: 修正されたスタンプパレットのId### `STAMP_PALETTE_DELETED`スタンプパレットが削除された。対象: 自分+ `id`: 削除されたスタンプパレットのId### `CLIP_FOLDER_CREATED`クリップフォルダーが作成された。対象：自分+ `id`: 作成されたクリップフォルダーのId### `CLIP_FOLDER_UPDATED`クリップフォルダーが修正された。対象: 自分+ `id`: 更新されたクリップフォルダーのId### `CLIP_FOLDER_DELETED`クリップフォルダーが削除された。対象: 自分+ `id`: 削除されたクリップフォルダーのId### `CLIP_FOLDER_MESSAGE_DELETED`クリップフォルダーからメッセージが除外された。対象: 自分+ `folder_id`: メッセージが除外されたクリップフォルダーのId+ `message_id`: クリップフォルダーから除外されたメッセージのId### `CLIP_FOLDER_MESSAGE_ADDED`クリップフォルダーにメッセージが追加された。対象: 自分+ `folder_id`: メッセージが追加されたクリップフォルダーのId+ `message_id`: クリップフォルダーに追加されたメッセージのId### `QALL_ROOM_STATE_CHANGED`ルーム状態が変更された。対象: 全員+ `room_id`: 変更されたルームのId+ `state`: 変更後のルーム状態  + `roomId`: ルームのID  + `participants`: ルーム内の参加者(配列)    + `identity`: ユーザーID_RandomUUID    + `name`: 表示名    + `joinedAt`: 参加した時刻    + `attributes`: ユーザーに関連付けられたカスタム属性    + `canPublish`: 発言権限  + `isWebinar`: ウェビナールームかどうか  + `metadata`: ルームに関連付けられたカスタム属性### `QALL_SOUNDBOARD_ITEM_CREATED`サウンドボードアイテムが作成された。対象: 全員+ `sound_id`: 作成されたサウンドのId+ `name`: サウンド名+ `creator_id`: 作成者のId### `QALL_SOUNDBOARD_ITEM_DELETED`サウンドボードアイテムが削除された。対象: 全員+ `sound_id`: 削除されたサウンドのId
        /// </summary>
        /// <returns>A <see cref="Stream"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<Stream?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<Stream> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendPrimitiveAsync<Stream>(requestInfo, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// # WebSocketプロトコル## 送信`コマンド:引数1:引数2:...`のような形式のTextMessageをサーバーに送信することで、このWebSocketセッションに対する設定が実行できる。### `viewstate`コマンドこのWebSocketセッションが見ているチャンネル(イベントを受け取るチャンネル)を設定する。現時点では1つのセッションに対して1つのチャンネルしか設定できない。`viewstate:{チャンネルID}:{閲覧状態}`+ チャンネルID: 対象のチャンネルID+ 閲覧状態: `none`, `monitoring`, `editing`最初の`viewstate`コマンドを送る前、または`viewstate:null`, `viewstate:`を送信した後は、このセッションはどこのチャンネルも見ていないことになる。### `rtcstate`コマンド自分のWebRTC状態を変更する。他のコネクションが既に状態を保持している場合、変更することができません。`rtcstate:{チャンネルID}:({状態}:{セッションID})*`コネクションが切断された場合、自分のWebRTC状態はリセットされます。### `timeline_streaming`コマンド全てのパブリックチャンネルの`MESSAGE_CREATED`イベントを受け取るかどうかを設定する。初期状態は`off`です。`timeline_streaming:(on|off|true|false)`## 受信TextMessageとして各種イベントが`type`と`body`を持つJSONとして非同期に送られます。例:```json{&quot;type&quot;:&quot;USER_ONLINE&quot;,&quot;body&quot;:{&quot;id&quot;:&quot;7dd8e07f-7f5d-4331-9176-b56a4299768b&quot;}}```## イベント一覧### `USER_JOINED`ユーザーが新規登録された。対象: 全員+ `id`: 登録されたユーザーのId### `USER_UPDATED`ユーザーの情報が更新された。対象: 全員+ `id`: 情報が更新されたユーザーのId### `USER_TAGS_UPDATED`ユーザーのタグが更新された。対象: 全員+ `id`: タグが更新されたユーザーのId+ `tag_id`: 更新されたタグのId### `USER_ICON_UPDATED`ユーザーのアイコンが更新された。対象: 全員+ `id`: アイコンが更新されたユーザーのId### `USER_WEBRTC_STATE_CHANGED`ユーザーのWebRTCの状態が変化した対象: 全員+ `user_id`: 変更があったユーザーのId+ `channel_id`: ユーザーの変更後の接続チャンネルのId+ `sessions`: ユーザーの変更後の状態(配列)  + `state`: 状態  + `sessionId`: セッションID### `USER_VIEWSTATE_CHANGED`ユーザーのチャンネルの閲覧状態が変化した対象: 変化したWSセッションを含めた、該当ユーザーのWSセッション全て+ `view_states`: 変化したWSセッションを含めた、該当ユーザーの変更後の状態(配列)  + `key`: WSセッションの識別子  + `channel_id`: 閲覧しているチャンネルId  + `state`: 閲覧状態### `USER_ONLINE`ユーザーがオンラインになった。対象: 全員+ `id`: オンラインになったユーザーのId### `USER_OFFLINE`ユーザーがオフラインになった。対象: 全員+ `id`: オフラインになったユーザーのId### `USER_GROUP_CREATED`ユーザーグループが作成された対象: 全員+ `id`: 作成されたユーザーグループのId### `USER_GROUP_UPDATED`ユーザーグループが更新された対象: 全員+ `id`: 作成されたユーザーグループのId### `USER_GROUP_DELETED`ユーザーグループが削除された対象: 全員+ `id`: 削除されたユーザーグループのId### `CHANNEL_CREATED`チャンネルが新規作成された。対象: 該当チャンネルを閲覧可能な全員+ `id`: 作成されたチャンネルのId+ `dm_user_id`: (DMの場合のみ) DM相手のユーザーId### `CHANNEL_UPDATED`チャンネルの情報が変更された。対象: 該当チャンネルを閲覧可能な全員+ `id`: 変更があったチャンネルのId+ `dm_user_id`: (DMの場合のみ) DM相手のユーザーId### `CHANNEL_DELETED`チャンネルが削除された。対象: 該当チャンネルを閲覧可能な全員+ `id`: 削除されたチャンネルのId+ `dm_user_id`: (DMの場合のみ) DM相手のユーザーId### `CHANNEL_STARED`自分がチャンネルをスターした。対象: 自分+ `id`: スターしたチャンネルのId### `CHANNEL_UNSTARED`自分がチャンネルのスターを解除した。対象: 自分+ `id`: スターしたチャンネルのId### `CHANNEL_VIEWERS_CHANGED`チャンネルの閲覧者が変化した。対象: 該当チャンネルを閲覧しているユーザー+ `id`: 変化したチャンネルのId+ `viewers`: 変化後の閲覧者(配列)  + `userId`: ユーザーId  + `state`: 閲覧状態  + `updatedAt`: 閲覧状態の更新日時### `CHANNEL_SUBSCRIBERS_CHANGED`チャンネルの購読者が変化した。対象: 該当チャンネルを閲覧しているユーザー+ `id`: 変化したチャンネルのId### `MESSAGE_CREATED`メッセージが投稿された。対象: 投稿チャンネルを閲覧しているユーザー・投稿チャンネルに通知をつけているユーザー・メンションを受けたユーザー+ `id`: 投稿されたメッセージのId+ `is_citing`: 投稿されたメッセージがWebSocketを接続しているユーザーの投稿を引用しているかどうか### `MESSAGE_UPDATED`メッセージが更新された。対象: 投稿チャンネルを閲覧しているユーザー+ `id`: 更新されたメッセージのId### `MESSAGE_DELETED`メッセージが削除された。対象: 投稿チャンネルを閲覧しているユーザー+ `id`: 削除されたメッセージのId### `MESSAGE_STAMPED`メッセージにスタンプが押された。対象: 投稿チャンネルを閲覧しているユーザー+ `message_id`: メッセージId+ `user_id`: スタンプを押したユーザーのId+ `stamp_id`: スタンプのId+ `count`: そのユーザーが押した数+ `created_at`: そのユーザーがそのスタンプをそのメッセージに最初に押した日時### `MESSAGE_UNSTAMPED`メッセージからスタンプが外された。対象: 投稿チャンネルを閲覧しているユーザー+ `message_id`: メッセージId+ `user_id`: スタンプを押したユーザーのId+ `stamp_id`: スタンプのId### `MESSAGE_PINNED`メッセージがピン留めされた。対象: 投稿チャンネルを閲覧しているユーザー+ `message_id`: ピンされたメッセージのID+ `channel_id`: ピンされたメッセージのチャンネルID### `MESSAGE_UNPINNED`ピン留めされたメッセージのピンが外された。対象: 投稿チャンネルを閲覧しているユーザー+ `message_id`: ピンが外されたメッセージのID+ `channel_id`: ピンが外されたメッセージのチャンネルID### `MESSAGE_READ`自分があるチャンネルのメッセージを読んだ。対象: 自分+ `id`: 読んだチャンネルId### `STAMP_CREATED`スタンプが新しく追加された。対象: 全員+ `id`: 作成されたスタンプのId### `STAMP_UPDATED`スタンプが修正された。対象: 全員+ `id`: 修正されたスタンプのId### `STAMP_DELETED`スタンプが削除された。対象: 全員+ `id`: 削除されたスタンプのId### `STAMP_PALETTE_CREATED`スタンプパレットが新しく追加された。対象: 自分+ `id`: 作成されたスタンプパレットのId### `STAMP_PALETTE_UPDATED`スタンプパレットが修正された。対象: 自分+ `id`: 修正されたスタンプパレットのId### `STAMP_PALETTE_DELETED`スタンプパレットが削除された。対象: 自分+ `id`: 削除されたスタンプパレットのId### `CLIP_FOLDER_CREATED`クリップフォルダーが作成された。対象：自分+ `id`: 作成されたクリップフォルダーのId### `CLIP_FOLDER_UPDATED`クリップフォルダーが修正された。対象: 自分+ `id`: 更新されたクリップフォルダーのId### `CLIP_FOLDER_DELETED`クリップフォルダーが削除された。対象: 自分+ `id`: 削除されたクリップフォルダーのId### `CLIP_FOLDER_MESSAGE_DELETED`クリップフォルダーからメッセージが除外された。対象: 自分+ `folder_id`: メッセージが除外されたクリップフォルダーのId+ `message_id`: クリップフォルダーから除外されたメッセージのId### `CLIP_FOLDER_MESSAGE_ADDED`クリップフォルダーにメッセージが追加された。対象: 自分+ `folder_id`: メッセージが追加されたクリップフォルダーのId+ `message_id`: クリップフォルダーに追加されたメッセージのId### `QALL_ROOM_STATE_CHANGED`ルーム状態が変更された。対象: 全員+ `room_id`: 変更されたルームのId+ `state`: 変更後のルーム状態  + `roomId`: ルームのID  + `participants`: ルーム内の参加者(配列)    + `identity`: ユーザーID_RandomUUID    + `name`: 表示名    + `joinedAt`: 参加した時刻    + `attributes`: ユーザーに関連付けられたカスタム属性    + `canPublish`: 発言権限  + `isWebinar`: ウェビナールームかどうか  + `metadata`: ルームに関連付けられたカスタム属性### `QALL_SOUNDBOARD_ITEM_CREATED`サウンドボードアイテムが作成された。対象: 全員+ `sound_id`: 作成されたサウンドのId+ `name`: サウンド名+ `creator_id`: 作成者のId### `QALL_SOUNDBOARD_ITEM_DELETED`サウンドボードアイテムが削除された。対象: 全員+ `sound_id`: 削除されたサウンドのId
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Traq.Ws.WsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Traq.Ws.WsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Traq.Ws.WsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WsRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
