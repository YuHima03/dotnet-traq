// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System;
using System.Collections.Generic;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
namespace Traq.Bots.Ws
{
    /// <summary>
    /// Builds and executes requests for operations under \bots\ws
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::Traq.Bots.Ws.WsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/bots/ws", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Traq.Bots.Ws.WsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/bots/ws", rawUrl)
        {
        }
        /// <summary>
        /// # BOT WebSocketプロトコル## 送信`コマンド:引数1:引数2:...` のような形式のTextMessageをサーバーに送信することで、このWebSocketセッションに対する設定が実行できます。### `rtcstate`コマンド自分のWebRTC状態を変更します。他のコネクションが既に状態を保持している場合、変更することができません。`rtcstate:{チャンネルID}:({状態}:{セッションID})*`チャンネルIDにnullもしくは空文字を指定するか、状態にnullもしくは空文字を指定した場合、WebRTC状態はリセットされます。`rtcstate:null`, `rtcstate:`, `rtcstate:channelId:null`, `rtcstate:channelId:`コネクションが切断された場合、自分のWebRTC状態はリセットされます。## 受信TextMessageとして各種イベントが`type`、`reqId`、`body`を持つJSONとして非同期に送られます。`body`の内容はHTTP Modeの場合のRequest Bodyと同様です。例外として`ERROR`イベントは`reqId`を持ちません。例: PINGイベント`{&quot;type&quot;:&quot;PING&quot;,&quot;reqId&quot;:&quot;requestId&quot;,&quot;body&quot;:{&quot;eventTime&quot;:&quot;2019-05-07T04:50:48.582586882Z&quot;}}`### `ERROR`コマンドの引数が不正などの理由でコマンドが受理されなかった場合に送られます。非同期に送られるため、必ずしもコマンドとの対応関係を確定できないことに注意してください。本番環境ではERRORが送られないようにすることが望ましいです。`{&quot;type&quot;:&quot;ERROR&quot;,&quot;body&quot;:&quot;message&quot;}`
        /// </summary>
        /// <returns>A <see cref="Stream"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<Stream?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<Stream> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendPrimitiveAsync<Stream>(requestInfo, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// # BOT WebSocketプロトコル## 送信`コマンド:引数1:引数2:...` のような形式のTextMessageをサーバーに送信することで、このWebSocketセッションに対する設定が実行できます。### `rtcstate`コマンド自分のWebRTC状態を変更します。他のコネクションが既に状態を保持している場合、変更することができません。`rtcstate:{チャンネルID}:({状態}:{セッションID})*`チャンネルIDにnullもしくは空文字を指定するか、状態にnullもしくは空文字を指定した場合、WebRTC状態はリセットされます。`rtcstate:null`, `rtcstate:`, `rtcstate:channelId:null`, `rtcstate:channelId:`コネクションが切断された場合、自分のWebRTC状態はリセットされます。## 受信TextMessageとして各種イベントが`type`、`reqId`、`body`を持つJSONとして非同期に送られます。`body`の内容はHTTP Modeの場合のRequest Bodyと同様です。例外として`ERROR`イベントは`reqId`を持ちません。例: PINGイベント`{&quot;type&quot;:&quot;PING&quot;,&quot;reqId&quot;:&quot;requestId&quot;,&quot;body&quot;:{&quot;eventTime&quot;:&quot;2019-05-07T04:50:48.582586882Z&quot;}}`### `ERROR`コマンドの引数が不正などの理由でコマンドが受理されなかった場合に送られます。非同期に送られるため、必ずしもコマンドとの対応関係を確定できないことに注意してください。本番環境ではERRORが送られないようにすることが望ましいです。`{&quot;type&quot;:&quot;ERROR&quot;,&quot;body&quot;:&quot;message&quot;}`
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Traq.Bots.Ws.WsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Traq.Bots.Ws.WsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Traq.Bots.Ws.WsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WsRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
