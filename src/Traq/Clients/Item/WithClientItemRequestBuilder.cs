// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System;
using System.Collections.Generic;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Traq.Clients.Item.Tokens;
using Traq.Models;
namespace Traq.Clients.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \clients\{clientId}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WithClientItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The tokens property</summary>
        public global::Traq.Clients.Item.Tokens.TokensRequestBuilder Tokens
        {
            get => new global::Traq.Clients.Item.Tokens.TokensRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Traq.Clients.Item.WithClientItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithClientItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/clients/{clientId}{?detail*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Traq.Clients.Item.WithClientItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithClientItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/clients/{clientId}{?detail*}", rawUrl)
        {
        }
        /// <summary>
        /// 指定したOAuth2クライアントを削除します。対象のクライアントの管理権限が必要です。正常に削除された場合、このクライアントに対する認可は全て取り消されます。
        /// </summary>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToDeleteRequestInformation(requestConfiguration);
            await RequestAdapter.SendNoContentAsync(requestInfo, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// 指定したOAuth2クライアントの情報を取得します。詳細情報の取得には対象のクライアントの管理権限が必要です。
        /// </summary>
        /// <returns>A <see cref="global::Traq.Clients.Item.WithClientItemRequestBuilder.WithClientGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Traq.Clients.Item.WithClientItemRequestBuilder.WithClientGetResponse?> GetAsWithClientGetResponseAsync(Action<RequestConfiguration<global::Traq.Clients.Item.WithClientItemRequestBuilder.WithClientItemRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Traq.Clients.Item.WithClientItemRequestBuilder.WithClientGetResponse> GetAsWithClientGetResponseAsync(Action<RequestConfiguration<global::Traq.Clients.Item.WithClientItemRequestBuilder.WithClientItemRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::Traq.Clients.Item.WithClientItemRequestBuilder.WithClientGetResponse>(requestInfo, global::Traq.Clients.Item.WithClientItemRequestBuilder.WithClientGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// 指定したOAuth2クライアントの情報を取得します。詳細情報の取得には対象のクライアントの管理権限が必要です。
        /// </summary>
        /// <returns>A <see cref="global::Traq.Clients.Item.WithClientItemRequestBuilder.WithClientResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("This method is obsolete. Use GetAsWithClientGetResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Traq.Clients.Item.WithClientItemRequestBuilder.WithClientResponse?> GetAsync(Action<RequestConfiguration<global::Traq.Clients.Item.WithClientItemRequestBuilder.WithClientItemRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Traq.Clients.Item.WithClientItemRequestBuilder.WithClientResponse> GetAsync(Action<RequestConfiguration<global::Traq.Clients.Item.WithClientItemRequestBuilder.WithClientItemRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::Traq.Clients.Item.WithClientItemRequestBuilder.WithClientResponse>(requestInfo, global::Traq.Clients.Item.WithClientItemRequestBuilder.WithClientResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// 指定したOAuth2クライアントの情報を変更します。対象のクライアントの管理権限が必要です。クライアント開発者UUIDを変更した場合は、変更先ユーザーにクライアント管理権限が移譲され、自分自身は権限を失います。
        /// </summary>
        /// <param name="body">OAuth2クライアント情報変更リクエスト</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task PatchAsync(global::Traq.Models.PatchClientRequest body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task PatchAsync(global::Traq.Models.PatchClientRequest body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPatchRequestInformation(body, requestConfiguration);
            await RequestAdapter.SendNoContentAsync(requestInfo, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// 指定したOAuth2クライアントを削除します。対象のクライアントの管理権限が必要です。正常に削除された場合、このクライアントに対する認可は全て取り消されます。
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.DELETE, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            return requestInfo;
        }
        /// <summary>
        /// 指定したOAuth2クライアントの情報を取得します。詳細情報の取得には対象のクライアントの管理権限が必要です。
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Traq.Clients.Item.WithClientItemRequestBuilder.WithClientItemRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Traq.Clients.Item.WithClientItemRequestBuilder.WithClientItemRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// 指定したOAuth2クライアントの情報を変更します。対象のクライアントの管理権限が必要です。クライアント開発者UUIDを変更した場合は、変更先ユーザーにクライアント管理権限が移譲され、自分自身は権限を失います。
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">OAuth2クライアント情報変更リクエスト</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPatchRequestInformation(global::Traq.Models.PatchClientRequest body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPatchRequestInformation(global::Traq.Models.PatchClientRequest body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.PATCH, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Traq.Clients.Item.WithClientItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Traq.Clients.Item.WithClientItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Traq.Clients.Item.WithClientItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Traq.Models.OAuth2Client"/>, <see cref="global::Traq.Models.OAuth2ClientDetail"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithClientGetResponse : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Traq.Models.OAuth2Client"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Traq.Models.OAuth2Client? OAuth2Client { get; set; }
#nullable restore
#else
            public global::Traq.Models.OAuth2Client OAuth2Client { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Traq.Models.OAuth2ClientDetail"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Traq.Models.OAuth2ClientDetail? OAuth2ClientDetail { get; set; }
#nullable restore
#else
            public global::Traq.Models.OAuth2ClientDetail OAuth2ClientDetail { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Traq.Clients.Item.WithClientItemRequestBuilder.WithClientGetResponse"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Traq.Clients.Item.WithClientItemRequestBuilder.WithClientGetResponse CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new global::Traq.Clients.Item.WithClientItemRequestBuilder.WithClientGetResponse();
                if ("OAuth2Client".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.OAuth2Client = new global::Traq.Models.OAuth2Client();
                }
                else if ("OAuth2ClientDetail".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.OAuth2ClientDetail = new global::Traq.Models.OAuth2ClientDetail();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if (OAuth2Client != null)
                {
                    return OAuth2Client.GetFieldDeserializers();
                }
                else if (OAuth2ClientDetail != null)
                {
                    return OAuth2ClientDetail.GetFieldDeserializers();
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if (OAuth2Client != null)
                {
                    writer.WriteObjectValue<global::Traq.Models.OAuth2Client>(null, OAuth2Client);
                }
                else if (OAuth2ClientDetail != null)
                {
                    writer.WriteObjectValue<global::Traq.Models.OAuth2ClientDetail>(null, OAuth2ClientDetail);
                }
            }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithClientItemRequestBuilderDeleteRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// 指定したOAuth2クライアントの情報を取得します。詳細情報の取得には対象のクライアントの管理権限が必要です。
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithClientItemRequestBuilderGetQueryParameters
        {
            /// <summary>詳細情報を含めるかどうか</summary>
            [QueryParameter("detail")]
            public bool? Detail { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithClientItemRequestBuilderGetRequestConfiguration : RequestConfiguration<global::Traq.Clients.Item.WithClientItemRequestBuilder.WithClientItemRequestBuilderGetQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithClientItemRequestBuilderPatchRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Traq.Models.OAuth2Client"/>, <see cref="global::Traq.Models.OAuth2ClientDetail"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithClientResponse : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Traq.Models.OAuth2Client"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Traq.Models.OAuth2Client? OAuth2Client { get; set; }
#nullable restore
#else
            public global::Traq.Models.OAuth2Client OAuth2Client { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Traq.Models.OAuth2ClientDetail"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Traq.Models.OAuth2ClientDetail? OAuth2ClientDetail { get; set; }
#nullable restore
#else
            public global::Traq.Models.OAuth2ClientDetail OAuth2ClientDetail { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Traq.Clients.Item.WithClientItemRequestBuilder.WithClientResponse"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Traq.Clients.Item.WithClientItemRequestBuilder.WithClientResponse CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new global::Traq.Clients.Item.WithClientItemRequestBuilder.WithClientResponse();
                if ("OAuth2Client".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.OAuth2Client = new global::Traq.Models.OAuth2Client();
                }
                else if ("OAuth2ClientDetail".Equals(mappingValue, StringComparison.OrdinalIgnoreCase))
                {
                    result.OAuth2ClientDetail = new global::Traq.Models.OAuth2ClientDetail();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if (OAuth2Client != null)
                {
                    return OAuth2Client.GetFieldDeserializers();
                }
                else if (OAuth2ClientDetail != null)
                {
                    return OAuth2ClientDetail.GetFieldDeserializers();
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if (OAuth2Client != null)
                {
                    writer.WriteObjectValue<global::Traq.Models.OAuth2Client>(null, OAuth2Client);
                }
                else if (OAuth2ClientDetail != null)
                {
                    writer.WriteObjectValue<global::Traq.Models.OAuth2ClientDetail>(null, OAuth2ClientDetail);
                }
            }
        }
    }
}
#pragma warning restore CS0618
