// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System;
using System.Collections.Generic;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Traq.Channels.Item.Bots;
using Traq.Channels.Item.Events;
using Traq.Channels.Item.Messages;
using Traq.Channels.Item.PathNamespace;
using Traq.Channels.Item.Pins;
using Traq.Channels.Item.Stats;
using Traq.Channels.Item.Subscribers;
using Traq.Channels.Item.Topic;
using Traq.Channels.Item.Viewers;
using Traq.Models;
namespace Traq.Channels.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \channels\{channelId}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WithChannelItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The bots property</summary>
        public global::Traq.Channels.Item.Bots.BotsRequestBuilder Bots
        {
            get => new global::Traq.Channels.Item.Bots.BotsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The events property</summary>
        public global::Traq.Channels.Item.Events.EventsRequestBuilder Events
        {
            get => new global::Traq.Channels.Item.Events.EventsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The messages property</summary>
        public global::Traq.Channels.Item.Messages.MessagesRequestBuilder Messages
        {
            get => new global::Traq.Channels.Item.Messages.MessagesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The path property</summary>
        public global::Traq.Channels.Item.PathNamespace.PathRequestBuilder Path
        {
            get => new global::Traq.Channels.Item.PathNamespace.PathRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The pins property</summary>
        public global::Traq.Channels.Item.Pins.PinsRequestBuilder Pins
        {
            get => new global::Traq.Channels.Item.Pins.PinsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The stats property</summary>
        public global::Traq.Channels.Item.Stats.StatsRequestBuilder Stats
        {
            get => new global::Traq.Channels.Item.Stats.StatsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The subscribers property</summary>
        public global::Traq.Channels.Item.Subscribers.SubscribersRequestBuilder Subscribers
        {
            get => new global::Traq.Channels.Item.Subscribers.SubscribersRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The topic property</summary>
        public global::Traq.Channels.Item.Topic.TopicRequestBuilder Topic
        {
            get => new global::Traq.Channels.Item.Topic.TopicRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The viewers property</summary>
        public global::Traq.Channels.Item.Viewers.ViewersRequestBuilder Viewers
        {
            get => new global::Traq.Channels.Item.Viewers.ViewersRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Traq.Channels.Item.WithChannelItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithChannelItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/channels/{channelId}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Traq.Channels.Item.WithChannelItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithChannelItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/channels/{channelId}", rawUrl)
        {
        }
        /// <summary>
        /// 指定したチャンネルの情報を取得します。
        /// </summary>
        /// <returns>A <see cref="global::Traq.Models.Channel"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Traq.Models.Channel?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Traq.Models.Channel> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::Traq.Models.Channel>(requestInfo, global::Traq.Models.Channel.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// 指定したチャンネルの情報を変更します。変更には権限が必要です。ルートチャンネルに移動させる場合は、`parent`に`00000000-0000-0000-0000-000000000000`を指定してください。
        /// </summary>
        /// <param name="body">チャンネル情報変更リクエスト</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task PatchAsync(global::Traq.Models.PatchChannelRequest body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task PatchAsync(global::Traq.Models.PatchChannelRequest body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPatchRequestInformation(body, requestConfiguration);
            await RequestAdapter.SendNoContentAsync(requestInfo, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// 指定したチャンネルの情報を取得します。
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// 指定したチャンネルの情報を変更します。変更には権限が必要です。ルートチャンネルに移動させる場合は、`parent`に`00000000-0000-0000-0000-000000000000`を指定してください。
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">チャンネル情報変更リクエスト</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPatchRequestInformation(global::Traq.Models.PatchChannelRequest body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPatchRequestInformation(global::Traq.Models.PatchChannelRequest body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.PATCH, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Traq.Channels.Item.WithChannelItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Traq.Channels.Item.WithChannelItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Traq.Channels.Item.WithChannelItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithChannelItemRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class WithChannelItemRequestBuilderPatchRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
