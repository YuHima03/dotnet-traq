// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
using Traq.Models;
namespace Traq.Channels.Item.Events
{
    /// <summary>
    /// Builds and executes requests for operations under \channels\{channelId}\events
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class EventsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::Traq.Channels.Item.Events.EventsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public EventsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/channels/{channelId}/events{?inclusive*,limit*,offset*,order*,since*,until*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Traq.Channels.Item.Events.EventsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public EventsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/channels/{channelId}/events{?inclusive*,limit*,offset*,order*,since*,until*}", rawUrl)
        {
        }
        /// <summary>
        /// 指定したチャンネルのイベントリストを取得します。
        /// </summary>
        /// <returns>A List&lt;global::Traq.Models.ChannelEvent&gt;</returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<global::Traq.Models.ChannelEvent>?> GetAsync(Action<RequestConfiguration<global::Traq.Channels.Item.Events.EventsRequestBuilder.EventsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<global::Traq.Models.ChannelEvent>> GetAsync(Action<RequestConfiguration<global::Traq.Channels.Item.Events.EventsRequestBuilder.EventsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var collectionResult = await RequestAdapter.SendCollectionAsync<global::Traq.Models.ChannelEvent>(requestInfo, global::Traq.Models.ChannelEvent.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <summary>
        /// 指定したチャンネルのイベントリストを取得します。
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Traq.Channels.Item.Events.EventsRequestBuilder.EventsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::Traq.Channels.Item.Events.EventsRequestBuilder.EventsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Traq.Channels.Item.Events.EventsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Traq.Channels.Item.Events.EventsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Traq.Channels.Item.Events.EventsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// 指定したチャンネルのイベントリストを取得します。
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class EventsRequestBuilderGetQueryParameters 
        {
            /// <summary>範囲の端を含めるかどうか</summary>
            [QueryParameter("inclusive")]
            public bool? Inclusive { get; set; }
            /// <summary>取得する件数</summary>
            [QueryParameter("limit")]
            public int? Limit { get; set; }
            /// <summary>取得するオフセット</summary>
            [QueryParameter("offset")]
            public int? Offset { get; set; }
            /// <summary>昇順か降順か</summary>
            [Obsolete("This property is deprecated, use OrderAsGetOrderQueryParameterType instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("order")]
            public string? Order { get; set; }
#nullable restore
#else
            [QueryParameter("order")]
            public string Order { get; set; }
#endif
            /// <summary>昇順か降順か</summary>
            [QueryParameter("order")]
            public global::Traq.Channels.Item.Events.GetOrderQueryParameterType? OrderAsGetOrderQueryParameterType { get; set; }
            /// <summary>取得する時間範囲の開始日時</summary>
            [QueryParameter("since")]
            public DateTimeOffset? Since { get; set; }
            /// <summary>取得する時間範囲の終了日時</summary>
            [QueryParameter("until")]
            public DateTimeOffset? Until { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class EventsRequestBuilderGetRequestConfiguration : RequestConfiguration<global::Traq.Channels.Item.Events.EventsRequestBuilder.EventsRequestBuilderGetQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
