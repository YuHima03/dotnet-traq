// <auto-generated>
/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Traq.Client;
using Traq.Model;
using System.Diagnostics.CodeAnalysis;

namespace Traq.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IWebrtcApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        WebrtcApiEvents Events { get; }

        /// <summary>
        /// WebRTC状態を取得
        /// </summary>
        /// <remarks>
        /// 現在のWebRTC状態を取得します。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetWebRTCStateApiResponse"/>&gt;</returns>
        Task<IGetWebRTCStateApiResponse> GetWebRTCStateAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// WebRTC状態を取得
        /// </summary>
        /// <remarks>
        /// 現在のWebRTC状態を取得します。
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetWebRTCStateApiResponse"/>?&gt;</returns>
        Task<IGetWebRTCStateApiResponse?> GetWebRTCStateOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Skyway用認証API
        /// </summary>
        /// <remarks>
        /// Skyway WebRTC用の認証API
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="postWebRTCAuthenticateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostWebRTCAuthenticateApiResponse"/>&gt;</returns>
        Task<IPostWebRTCAuthenticateApiResponse> PostWebRTCAuthenticateAsync(Option<PostWebRTCAuthenticateRequest> postWebRTCAuthenticateRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Skyway用認証API
        /// </summary>
        /// <remarks>
        /// Skyway WebRTC用の認証API
        /// </remarks>
        /// <param name="postWebRTCAuthenticateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostWebRTCAuthenticateApiResponse"/>?&gt;</returns>
        Task<IPostWebRTCAuthenticateApiResponse?> PostWebRTCAuthenticateOrDefaultAsync(Option<PostWebRTCAuthenticateRequest> postWebRTCAuthenticateRequest = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IGetWebRTCStateApiResponse"/>
    /// </summary>
    public interface IGetWebRTCStateApiResponse : Traq.Client.IApiResponse, IOk<List<WebRTCUserState>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IPostWebRTCAuthenticateApiResponse"/>
    /// </summary>
    public interface IPostWebRTCAuthenticateApiResponse : Traq.Client.IApiResponse, IOk<Traq.Model.WebRTCAuthenticateResult?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 503 ServiceUnavailable
        /// </summary>
        /// <returns></returns>
        bool IsServiceUnavailable { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class WebrtcApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetWebRTCState;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetWebRTCState;

        internal void ExecuteOnGetWebRTCState(WebrtcApi.GetWebRTCStateApiResponse apiResponse)
        {
            OnGetWebRTCState?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetWebRTCState(Exception exception)
        {
            OnErrorGetWebRTCState?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPostWebRTCAuthenticate;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPostWebRTCAuthenticate;

        internal void ExecuteOnPostWebRTCAuthenticate(WebrtcApi.PostWebRTCAuthenticateApiResponse apiResponse)
        {
            OnPostWebRTCAuthenticate?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPostWebRTCAuthenticate(Exception exception)
        {
            OnErrorPostWebRTCAuthenticate?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class WebrtcApi : IWebrtcApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<WebrtcApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public WebrtcApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// A token provider of type <see cref="OauthTokenProvider"/>
        /// </summary>
        public TokenProvider<OAuthToken> OauthTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="WebrtcApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WebrtcApi(ILogger<WebrtcApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, WebrtcApiEvents webrtcApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider,
            TokenProvider<BearerToken> bearerTokenProvider,
            TokenProvider<OAuthToken> oauthTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<WebrtcApi>();
            HttpClient = httpClient;
            Events = webrtcApiEvents;
            ApiKeyProvider = apiKeyProvider;
            BearerTokenProvider = bearerTokenProvider;
            OauthTokenProvider = oauthTokenProvider;
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetWebRTCStateDefaultImplementation(IGetWebRTCStateApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetWebRTCState(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetWebRTCState(ref bool suppressDefaultLog, IGetWebRTCStateApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        private void OnErrorGetWebRTCStateDefaultImplementation(Exception exception, string pathFormat, string path)
        {
            bool suppressDefaultLog = false;
            OnErrorGetWebRTCState(ref suppressDefaultLog, exception, pathFormat, path);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        partial void OnErrorGetWebRTCState(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path);

        /// <summary>
        /// WebRTC状態を取得 現在のWebRTC状態を取得します。
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetWebRTCStateApiResponse"/>&gt;</returns>
        public async Task<IGetWebRTCStateApiResponse?> GetWebRTCStateOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetWebRTCStateAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// WebRTC状態を取得 現在のWebRTC状態を取得します。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetWebRTCStateApiResponse"/>&gt;</returns>
        public async Task<IGetWebRTCStateApiResponse> GetWebRTCStateAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/webrtc/state";

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetWebRTCStateApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetWebRTCStateApiResponse>();

                        GetWebRTCStateApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/webrtc/state", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetWebRTCStateDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetWebRTCState(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetWebRTCStateDefaultImplementation(e, "/webrtc/state", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetWebRTCState(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetWebRTCStateApiResponse"/>
        /// </summary>
        public partial class GetWebRTCStateApiResponse : Traq.Client.ApiResponse, IGetWebRTCStateApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetWebRTCStateApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetWebRTCStateApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetWebRTCStateApiResponse(ILogger<GetWebRTCStateApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<WebRTCUserState>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<WebRTCUserState>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<WebRTCUserState>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPostWebRTCAuthenticate(Option<PostWebRTCAuthenticateRequest> postWebRTCAuthenticateRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="postWebRTCAuthenticateRequest"></param>
        /// <returns></returns>
        private void ValidatePostWebRTCAuthenticate(Option<PostWebRTCAuthenticateRequest> postWebRTCAuthenticateRequest)
        {
            if (postWebRTCAuthenticateRequest.IsSet && postWebRTCAuthenticateRequest.Value == null)
                throw new ArgumentNullException(nameof(postWebRTCAuthenticateRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="postWebRTCAuthenticateRequest"></param>
        private void AfterPostWebRTCAuthenticateDefaultImplementation(IPostWebRTCAuthenticateApiResponse apiResponseLocalVar, Option<PostWebRTCAuthenticateRequest> postWebRTCAuthenticateRequest)
        {
            bool suppressDefaultLog = false;
            AfterPostWebRTCAuthenticate(ref suppressDefaultLog, apiResponseLocalVar, postWebRTCAuthenticateRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="postWebRTCAuthenticateRequest"></param>
        partial void AfterPostWebRTCAuthenticate(ref bool suppressDefaultLog, IPostWebRTCAuthenticateApiResponse apiResponseLocalVar, Option<PostWebRTCAuthenticateRequest> postWebRTCAuthenticateRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="postWebRTCAuthenticateRequest"></param>
        private void OnErrorPostWebRTCAuthenticateDefaultImplementation(Exception exception, string pathFormat, string path, Option<PostWebRTCAuthenticateRequest> postWebRTCAuthenticateRequest)
        {
            bool suppressDefaultLog = false;
            OnErrorPostWebRTCAuthenticate(ref suppressDefaultLog, exception, pathFormat, path, postWebRTCAuthenticateRequest);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="postWebRTCAuthenticateRequest"></param>
        partial void OnErrorPostWebRTCAuthenticate(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<PostWebRTCAuthenticateRequest> postWebRTCAuthenticateRequest);

        /// <summary>
        /// Skyway用認証API Skyway WebRTC用の認証API
        /// </summary>
        /// <param name="postWebRTCAuthenticateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostWebRTCAuthenticateApiResponse"/>&gt;</returns>
        public async Task<IPostWebRTCAuthenticateApiResponse?> PostWebRTCAuthenticateOrDefaultAsync(Option<PostWebRTCAuthenticateRequest> postWebRTCAuthenticateRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PostWebRTCAuthenticateAsync(postWebRTCAuthenticateRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Skyway用認証API Skyway WebRTC用の認証API
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="postWebRTCAuthenticateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostWebRTCAuthenticateApiResponse"/>&gt;</returns>
        public async Task<IPostWebRTCAuthenticateApiResponse> PostWebRTCAuthenticateAsync(Option<PostWebRTCAuthenticateRequest> postWebRTCAuthenticateRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePostWebRTCAuthenticate(postWebRTCAuthenticateRequest);

                FormatPostWebRTCAuthenticate(postWebRTCAuthenticateRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/webrtc/authenticate";

                    if (postWebRTCAuthenticateRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (postWebRTCAuthenticateRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(postWebRTCAuthenticateRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PostWebRTCAuthenticateApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PostWebRTCAuthenticateApiResponse>();

                        PostWebRTCAuthenticateApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/webrtc/authenticate", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPostWebRTCAuthenticateDefaultImplementation(apiResponseLocalVar, postWebRTCAuthenticateRequest);

                        Events.ExecuteOnPostWebRTCAuthenticate(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPostWebRTCAuthenticateDefaultImplementation(e, "/webrtc/authenticate", uriBuilderLocalVar.Path, postWebRTCAuthenticateRequest);
                Events.ExecuteOnErrorPostWebRTCAuthenticate(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PostWebRTCAuthenticateApiResponse"/>
        /// </summary>
        public partial class PostWebRTCAuthenticateApiResponse : Traq.Client.ApiResponse, IPostWebRTCAuthenticateApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PostWebRTCAuthenticateApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PostWebRTCAuthenticateApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PostWebRTCAuthenticateApiResponse(ILogger<PostWebRTCAuthenticateApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Traq.Model.WebRTCAuthenticateResult? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Traq.Model.WebRTCAuthenticateResult>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Traq.Model.WebRTCAuthenticateResult? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 503 ServiceUnavailable
            /// </summary>
            /// <returns></returns>
            public bool IsServiceUnavailable => 503 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
