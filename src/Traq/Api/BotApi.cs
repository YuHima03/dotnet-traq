// <auto-generated>
/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Traq.Client;
using Traq.Model;
using System.Diagnostics.CodeAnalysis;

namespace Traq.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IBotApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        BotApiEvents Events { get; }

        /// <summary>
        /// BOTをアクティベート
        /// </summary>
        /// <remarks>
        /// 指定したBOTを有効化します。 対象のBOTの管理権限が必要です。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="botId">BOTUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IActivateBotApiResponse"/>&gt;</returns>
        Task<IActivateBotApiResponse> ActivateBotAsync(Guid botId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// BOTをアクティベート
        /// </summary>
        /// <remarks>
        /// 指定したBOTを有効化します。 対象のBOTの管理権限が必要です。
        /// </remarks>
        /// <param name="botId">BOTUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IActivateBotApiResponse"/>?&gt;</returns>
        Task<IActivateBotApiResponse?> ActivateBotOrDefaultAsync(Guid botId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// BOTのアイコン画像を変更
        /// </summary>
        /// <remarks>
        /// 指定したBOTのアイコン画像を変更を変更します。 対象のBOTの管理権限が必要です。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="botId">BOTUUID</param>
        /// <param name="file">アイコン画像(2MBまでのpng, jpeg, gif)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IChangeBotIconApiResponse"/>&gt;</returns>
        Task<IChangeBotIconApiResponse> ChangeBotIconAsync(Guid botId, System.IO.Stream file, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// BOTのアイコン画像を変更
        /// </summary>
        /// <remarks>
        /// 指定したBOTのアイコン画像を変更を変更します。 対象のBOTの管理権限が必要です。
        /// </remarks>
        /// <param name="botId">BOTUUID</param>
        /// <param name="file">アイコン画像(2MBまでのpng, jpeg, gif)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IChangeBotIconApiResponse"/>?&gt;</returns>
        Task<IChangeBotIconApiResponse?> ChangeBotIconOrDefaultAsync(Guid botId, System.IO.Stream file, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// WebSocket Mode BOT用通知ストリームに接続します
        /// </summary>
        /// <remarks>
        /// # BOT WebSocketプロトコル  ## 送信  &#x60;コマンド:引数1:引数2:...&#x60; のような形式のTextMessageをサーバーに送信することで、このWebSocketセッションに対する設定が実行できます。  ### &#x60;rtcstate&#x60;コマンド 自分のWebRTC状態を変更します。 他のコネクションが既に状態を保持している場合、変更することができません。  &#x60;rtcstate:{チャンネルID}:({状態}:{セッションID})*&#x60;  チャンネルIDにnullもしくは空文字を指定するか、状態にnullもしくは空文字を指定した場合、WebRTC状態はリセットされます。  &#x60;rtcstate:null&#x60;, &#x60;rtcstate:&#x60;, &#x60;rtcstate:channelId:null&#x60;, &#x60;rtcstate:channelId:&#x60;  コネクションが切断された場合、自分のWebRTC状態はリセットされます。  ## 受信  TextMessageとして各種イベントが&#x60;type&#x60;、&#x60;reqId&#x60;、&#x60;body&#x60;を持つJSONとして非同期に送られます。 &#x60;body&#x60;の内容はHTTP Modeの場合のRequest Bodyと同様です。 例外として&#x60;ERROR&#x60;イベントは&#x60;reqId&#x60;を持ちません。  例: PINGイベント &#x60;{\&quot;type\&quot;:\&quot;PING\&quot;,\&quot;reqId\&quot;:\&quot;requestId\&quot;,\&quot;body\&quot;:{\&quot;eventTime\&quot;:\&quot;2019-05-07T04:50:48.582586882Z\&quot;}}&#x60;  ### &#x60;ERROR&#x60;  コマンドの引数が不正などの理由でコマンドが受理されなかった場合に送られます。 非同期に送られるため、必ずしもコマンドとの対応関係を確定できないことに注意してください。 本番環境ではERRORが送られないようにすることが望ましいです。  &#x60;{\&quot;type\&quot;:\&quot;ERROR\&quot;,\&quot;body\&quot;:\&quot;message\&quot;}&#x60;
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IConnectBotWSApiResponse"/>&gt;</returns>
        Task<IConnectBotWSApiResponse> ConnectBotWSAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// WebSocket Mode BOT用通知ストリームに接続します
        /// </summary>
        /// <remarks>
        /// # BOT WebSocketプロトコル  ## 送信  &#x60;コマンド:引数1:引数2:...&#x60; のような形式のTextMessageをサーバーに送信することで、このWebSocketセッションに対する設定が実行できます。  ### &#x60;rtcstate&#x60;コマンド 自分のWebRTC状態を変更します。 他のコネクションが既に状態を保持している場合、変更することができません。  &#x60;rtcstate:{チャンネルID}:({状態}:{セッションID})*&#x60;  チャンネルIDにnullもしくは空文字を指定するか、状態にnullもしくは空文字を指定した場合、WebRTC状態はリセットされます。  &#x60;rtcstate:null&#x60;, &#x60;rtcstate:&#x60;, &#x60;rtcstate:channelId:null&#x60;, &#x60;rtcstate:channelId:&#x60;  コネクションが切断された場合、自分のWebRTC状態はリセットされます。  ## 受信  TextMessageとして各種イベントが&#x60;type&#x60;、&#x60;reqId&#x60;、&#x60;body&#x60;を持つJSONとして非同期に送られます。 &#x60;body&#x60;の内容はHTTP Modeの場合のRequest Bodyと同様です。 例外として&#x60;ERROR&#x60;イベントは&#x60;reqId&#x60;を持ちません。  例: PINGイベント &#x60;{\&quot;type\&quot;:\&quot;PING\&quot;,\&quot;reqId\&quot;:\&quot;requestId\&quot;,\&quot;body\&quot;:{\&quot;eventTime\&quot;:\&quot;2019-05-07T04:50:48.582586882Z\&quot;}}&#x60;  ### &#x60;ERROR&#x60;  コマンドの引数が不正などの理由でコマンドが受理されなかった場合に送られます。 非同期に送られるため、必ずしもコマンドとの対応関係を確定できないことに注意してください。 本番環境ではERRORが送られないようにすることが望ましいです。  &#x60;{\&quot;type\&quot;:\&quot;ERROR\&quot;,\&quot;body\&quot;:\&quot;message\&quot;}&#x60;
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IConnectBotWSApiResponse"/>?&gt;</returns>
        Task<IConnectBotWSApiResponse?> ConnectBotWSOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// BOTを作成
        /// </summary>
        /// <remarks>
        /// BOTを作成します。 作成後に購読イベントの設定を行う必要があります。 さらにHTTP Modeの場合はアクティベーションを行う必要があります。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBotRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateBotApiResponse"/>&gt;</returns>
        Task<ICreateBotApiResponse> CreateBotAsync(Option<PostBotRequest> postBotRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// BOTを作成
        /// </summary>
        /// <remarks>
        /// BOTを作成します。 作成後に購読イベントの設定を行う必要があります。 さらにHTTP Modeの場合はアクティベーションを行う必要があります。
        /// </remarks>
        /// <param name="postBotRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateBotApiResponse"/>?&gt;</returns>
        Task<ICreateBotApiResponse?> CreateBotOrDefaultAsync(Option<PostBotRequest> postBotRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// BOTを削除
        /// </summary>
        /// <remarks>
        /// 指定したBOTを削除します。 対象のBOTの管理権限が必要です。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="botId">BOTUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteBotApiResponse"/>&gt;</returns>
        Task<IDeleteBotApiResponse> DeleteBotAsync(Guid botId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// BOTを削除
        /// </summary>
        /// <remarks>
        /// 指定したBOTを削除します。 対象のBOTの管理権限が必要です。
        /// </remarks>
        /// <param name="botId">BOTUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteBotApiResponse"/>?&gt;</returns>
        Task<IDeleteBotApiResponse?> DeleteBotOrDefaultAsync(Guid botId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// BOT情報を変更
        /// </summary>
        /// <remarks>
        /// 指定したBOTの情報を変更します。 対象のBOTの管理権限が必要です。 BOT開発者UUIDを変更した場合は、変更先ユーザーにBOT管理権限が移譲され、自分自身は権限を失います。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="botId">BOTUUID</param>
        /// <param name="patchBotRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEditBotApiResponse"/>&gt;</returns>
        Task<IEditBotApiResponse> EditBotAsync(Guid botId, Option<PatchBotRequest> patchBotRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// BOT情報を変更
        /// </summary>
        /// <remarks>
        /// 指定したBOTの情報を変更します。 対象のBOTの管理権限が必要です。 BOT開発者UUIDを変更した場合は、変更先ユーザーにBOT管理権限が移譲され、自分自身は権限を失います。
        /// </remarks>
        /// <param name="botId">BOTUUID</param>
        /// <param name="patchBotRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEditBotApiResponse"/>?&gt;</returns>
        Task<IEditBotApiResponse?> EditBotOrDefaultAsync(Guid botId, Option<PatchBotRequest> patchBotRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// BOT情報を取得
        /// </summary>
        /// <remarks>
        /// 指定したBOTのBOT情報を取得します。 BOT詳細情報を取得する場合は、対象のBOTの管理権限が必要です。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="botId">BOTUUID</param>
        /// <param name="detail">詳細情報を含めるかどうか (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetBotApiResponse"/>&gt;</returns>
        Task<IGetBotApiResponse> GetBotAsync(Guid botId, Option<bool> detail = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// BOT情報を取得
        /// </summary>
        /// <remarks>
        /// 指定したBOTのBOT情報を取得します。 BOT詳細情報を取得する場合は、対象のBOTの管理権限が必要です。
        /// </remarks>
        /// <param name="botId">BOTUUID</param>
        /// <param name="detail">詳細情報を含めるかどうか (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetBotApiResponse"/>?&gt;</returns>
        Task<IGetBotApiResponse?> GetBotOrDefaultAsync(Guid botId, Option<bool> detail = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// BOTのアイコン画像を取得
        /// </summary>
        /// <remarks>
        /// 指定したBOTのアイコン画像を取得を取得します。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="botId">BOTUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetBotIconApiResponse"/>&gt;</returns>
        Task<IGetBotIconApiResponse> GetBotIconAsync(Guid botId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// BOTのアイコン画像を取得
        /// </summary>
        /// <remarks>
        /// 指定したBOTのアイコン画像を取得を取得します。
        /// </remarks>
        /// <param name="botId">BOTUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetBotIconApiResponse"/>?&gt;</returns>
        Task<IGetBotIconApiResponse?> GetBotIconOrDefaultAsync(Guid botId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// BOTのイベントログを取得
        /// </summary>
        /// <remarks>
        /// 指定したBOTのイベントログを取得します。 対象のBOTの管理権限が必要です。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="botId">BOTUUID</param>
        /// <param name="limit">取得する件数 (optional)</param>
        /// <param name="offset">取得するオフセット (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetBotLogsApiResponse"/>&gt;</returns>
        Task<IGetBotLogsApiResponse> GetBotLogsAsync(Guid botId, Option<int> limit = default, Option<int> offset = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// BOTのイベントログを取得
        /// </summary>
        /// <remarks>
        /// 指定したBOTのイベントログを取得します。 対象のBOTの管理権限が必要です。
        /// </remarks>
        /// <param name="botId">BOTUUID</param>
        /// <param name="limit">取得する件数 (optional)</param>
        /// <param name="offset">取得するオフセット (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetBotLogsApiResponse"/>?&gt;</returns>
        Task<IGetBotLogsApiResponse?> GetBotLogsOrDefaultAsync(Guid botId, Option<int> limit = default, Option<int> offset = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// BOTリストを取得
        /// </summary>
        /// <remarks>
        /// BOT情報のリストを取得します。 allを指定しない場合、自分が開発者のBOTのみを返します。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="all">全てのBOTを取得するかどうか (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetBotsApiResponse"/>&gt;</returns>
        Task<IGetBotsApiResponse> GetBotsAsync(Option<bool> all = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// BOTリストを取得
        /// </summary>
        /// <remarks>
        /// BOT情報のリストを取得します。 allを指定しない場合、自分が開発者のBOTのみを返します。
        /// </remarks>
        /// <param name="all">全てのBOTを取得するかどうか (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetBotsApiResponse"/>?&gt;</returns>
        Task<IGetBotsApiResponse?> GetBotsOrDefaultAsync(Option<bool> all = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// チャンネル参加中のBOTのリストを取得
        /// </summary>
        /// <remarks>
        /// 指定したチャンネルに参加しているBOTのリストを取得します。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChannelBotsApiResponse"/>&gt;</returns>
        Task<IGetChannelBotsApiResponse> GetChannelBotsAsync(Guid channelId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// チャンネル参加中のBOTのリストを取得
        /// </summary>
        /// <remarks>
        /// 指定したチャンネルに参加しているBOTのリストを取得します。
        /// </remarks>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChannelBotsApiResponse"/>?&gt;</returns>
        Task<IGetChannelBotsApiResponse?> GetChannelBotsOrDefaultAsync(Guid channelId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// BOTをインアクティベート
        /// </summary>
        /// <remarks>
        /// 指定したBOTを無効化します。対象のBOTの管理権限が必要です。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="botId">BOTUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInactivateBotApiResponse"/>&gt;</returns>
        Task<IInactivateBotApiResponse> InactivateBotAsync(Guid botId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// BOTをインアクティベート
        /// </summary>
        /// <remarks>
        /// 指定したBOTを無効化します。対象のBOTの管理権限が必要です。
        /// </remarks>
        /// <param name="botId">BOTUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInactivateBotApiResponse"/>?&gt;</returns>
        Task<IInactivateBotApiResponse?> InactivateBotOrDefaultAsync(Guid botId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// BOTをチャンネルに参加させる
        /// </summary>
        /// <remarks>
        /// 指定したBOTを指定したチャンネルに参加させます。 チャンネルに参加したBOTは、そのチャンネルの各種イベントを受け取るようになります。 対象のBOTの管理権限が必要です。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="botId">BOTUUID</param>
        /// <param name="postBotActionJoinRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILetBotJoinChannelApiResponse"/>&gt;</returns>
        Task<ILetBotJoinChannelApiResponse> LetBotJoinChannelAsync(Guid botId, Option<PostBotActionJoinRequest> postBotActionJoinRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// BOTをチャンネルに参加させる
        /// </summary>
        /// <remarks>
        /// 指定したBOTを指定したチャンネルに参加させます。 チャンネルに参加したBOTは、そのチャンネルの各種イベントを受け取るようになります。 対象のBOTの管理権限が必要です。
        /// </remarks>
        /// <param name="botId">BOTUUID</param>
        /// <param name="postBotActionJoinRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILetBotJoinChannelApiResponse"/>?&gt;</returns>
        Task<ILetBotJoinChannelApiResponse?> LetBotJoinChannelOrDefaultAsync(Guid botId, Option<PostBotActionJoinRequest> postBotActionJoinRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// BOTをチャンネルから退出させる
        /// </summary>
        /// <remarks>
        /// 指定したBOTを指定したチャンネルから退出させます。 対象のBOTの管理権限が必要です。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="botId">BOTUUID</param>
        /// <param name="postBotActionLeaveRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILetBotLeaveChannelApiResponse"/>&gt;</returns>
        Task<ILetBotLeaveChannelApiResponse> LetBotLeaveChannelAsync(Guid botId, Option<PostBotActionLeaveRequest> postBotActionLeaveRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// BOTをチャンネルから退出させる
        /// </summary>
        /// <remarks>
        /// 指定したBOTを指定したチャンネルから退出させます。 対象のBOTの管理権限が必要です。
        /// </remarks>
        /// <param name="botId">BOTUUID</param>
        /// <param name="postBotActionLeaveRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILetBotLeaveChannelApiResponse"/>?&gt;</returns>
        Task<ILetBotLeaveChannelApiResponse?> LetBotLeaveChannelOrDefaultAsync(Guid botId, Option<PostBotActionLeaveRequest> postBotActionLeaveRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// BOTのトークンを再発行
        /// </summary>
        /// <remarks>
        /// 指定したBOTの現在の各種トークンを無効化し、再発行を行います。 対象のBOTの管理権限が必要です。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="botId">BOTUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IReissueBotApiResponse"/>&gt;</returns>
        Task<IReissueBotApiResponse> ReissueBotAsync(Guid botId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// BOTのトークンを再発行
        /// </summary>
        /// <remarks>
        /// 指定したBOTの現在の各種トークンを無効化し、再発行を行います。 対象のBOTの管理権限が必要です。
        /// </remarks>
        /// <param name="botId">BOTUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IReissueBotApiResponse"/>?&gt;</returns>
        Task<IReissueBotApiResponse?> ReissueBotOrDefaultAsync(Guid botId, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IActivateBotApiResponse"/>
    /// </summary>
    public interface IActivateBotApiResponse : Traq.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 202 Accepted
        /// </summary>
        /// <returns></returns>
        bool IsAccepted { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IChangeBotIconApiResponse"/>
    /// </summary>
    public interface IChangeBotIconApiResponse : Traq.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 413 ContentTooLarge
        /// </summary>
        /// <returns></returns>
        bool IsContentTooLarge { get; }
    }

    /// <summary>
    /// The <see cref="IConnectBotWSApiResponse"/>
    /// </summary>
    public interface IConnectBotWSApiResponse : Traq.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 101 SwitchingProtocols
        /// </summary>
        /// <returns></returns>
        bool IsSwitchingProtocols { get; }
    }

    /// <summary>
    /// The <see cref="ICreateBotApiResponse"/>
    /// </summary>
    public interface ICreateBotApiResponse : Traq.Client.IApiResponse, ICreated<Traq.Model.BotDetail?>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteBotApiResponse"/>
    /// </summary>
    public interface IDeleteBotApiResponse : Traq.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IEditBotApiResponse"/>
    /// </summary>
    public interface IEditBotApiResponse : Traq.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetBotApiResponse"/>
    /// </summary>
    public interface IGetBotApiResponse : Traq.Client.IApiResponse, IOk<Traq.Model.GetBot200Response?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetBotIconApiResponse"/>
    /// </summary>
    public interface IGetBotIconApiResponse : Traq.Client.IApiResponse, IOk<System.IO.Stream?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetBotLogsApiResponse"/>
    /// </summary>
    public interface IGetBotLogsApiResponse : Traq.Client.IApiResponse, IOk<List<BotEventLog>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetBotsApiResponse"/>
    /// </summary>
    public interface IGetBotsApiResponse : Traq.Client.IApiResponse, IOk<List<Bot>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetChannelBotsApiResponse"/>
    /// </summary>
    public interface IGetChannelBotsApiResponse : Traq.Client.IApiResponse, IOk<List<BotUser>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IInactivateBotApiResponse"/>
    /// </summary>
    public interface IInactivateBotApiResponse : Traq.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="ILetBotJoinChannelApiResponse"/>
    /// </summary>
    public interface ILetBotJoinChannelApiResponse : Traq.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="ILetBotLeaveChannelApiResponse"/>
    /// </summary>
    public interface ILetBotLeaveChannelApiResponse : Traq.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IReissueBotApiResponse"/>
    /// </summary>
    public interface IReissueBotApiResponse : Traq.Client.IApiResponse, IOk<Traq.Model.BotTokens?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class BotApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnActivateBot;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorActivateBot;

        internal void ExecuteOnActivateBot(BotApi.ActivateBotApiResponse apiResponse)
        {
            OnActivateBot?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorActivateBot(Exception exception)
        {
            OnErrorActivateBot?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnChangeBotIcon;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorChangeBotIcon;

        internal void ExecuteOnChangeBotIcon(BotApi.ChangeBotIconApiResponse apiResponse)
        {
            OnChangeBotIcon?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorChangeBotIcon(Exception exception)
        {
            OnErrorChangeBotIcon?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnConnectBotWS;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorConnectBotWS;

        internal void ExecuteOnConnectBotWS(BotApi.ConnectBotWSApiResponse apiResponse)
        {
            OnConnectBotWS?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorConnectBotWS(Exception exception)
        {
            OnErrorConnectBotWS?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateBot;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateBot;

        internal void ExecuteOnCreateBot(BotApi.CreateBotApiResponse apiResponse)
        {
            OnCreateBot?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateBot(Exception exception)
        {
            OnErrorCreateBot?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteBot;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteBot;

        internal void ExecuteOnDeleteBot(BotApi.DeleteBotApiResponse apiResponse)
        {
            OnDeleteBot?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteBot(Exception exception)
        {
            OnErrorDeleteBot?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEditBot;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEditBot;

        internal void ExecuteOnEditBot(BotApi.EditBotApiResponse apiResponse)
        {
            OnEditBot?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEditBot(Exception exception)
        {
            OnErrorEditBot?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetBot;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetBot;

        internal void ExecuteOnGetBot(BotApi.GetBotApiResponse apiResponse)
        {
            OnGetBot?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetBot(Exception exception)
        {
            OnErrorGetBot?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetBotIcon;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetBotIcon;

        internal void ExecuteOnGetBotIcon(BotApi.GetBotIconApiResponse apiResponse)
        {
            OnGetBotIcon?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetBotIcon(Exception exception)
        {
            OnErrorGetBotIcon?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetBotLogs;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetBotLogs;

        internal void ExecuteOnGetBotLogs(BotApi.GetBotLogsApiResponse apiResponse)
        {
            OnGetBotLogs?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetBotLogs(Exception exception)
        {
            OnErrorGetBotLogs?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetBots;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetBots;

        internal void ExecuteOnGetBots(BotApi.GetBotsApiResponse apiResponse)
        {
            OnGetBots?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetBots(Exception exception)
        {
            OnErrorGetBots?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetChannelBots;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetChannelBots;

        internal void ExecuteOnGetChannelBots(BotApi.GetChannelBotsApiResponse apiResponse)
        {
            OnGetChannelBots?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetChannelBots(Exception exception)
        {
            OnErrorGetChannelBots?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnInactivateBot;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorInactivateBot;

        internal void ExecuteOnInactivateBot(BotApi.InactivateBotApiResponse apiResponse)
        {
            OnInactivateBot?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorInactivateBot(Exception exception)
        {
            OnErrorInactivateBot?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnLetBotJoinChannel;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorLetBotJoinChannel;

        internal void ExecuteOnLetBotJoinChannel(BotApi.LetBotJoinChannelApiResponse apiResponse)
        {
            OnLetBotJoinChannel?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorLetBotJoinChannel(Exception exception)
        {
            OnErrorLetBotJoinChannel?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnLetBotLeaveChannel;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorLetBotLeaveChannel;

        internal void ExecuteOnLetBotLeaveChannel(BotApi.LetBotLeaveChannelApiResponse apiResponse)
        {
            OnLetBotLeaveChannel?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorLetBotLeaveChannel(Exception exception)
        {
            OnErrorLetBotLeaveChannel?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnReissueBot;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorReissueBot;

        internal void ExecuteOnReissueBot(BotApi.ReissueBotApiResponse apiResponse)
        {
            OnReissueBot?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorReissueBot(Exception exception)
        {
            OnErrorReissueBot?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class BotApi : IBotApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<BotApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public BotApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// A token provider of type <see cref="OauthTokenProvider"/>
        /// </summary>
        public TokenProvider<OAuthToken> OauthTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="BotApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BotApi(ILogger<BotApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, BotApiEvents botApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider,
            TokenProvider<BearerToken> bearerTokenProvider,
            TokenProvider<OAuthToken> oauthTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<BotApi>();
            HttpClient = httpClient;
            Events = botApiEvents;
            ApiKeyProvider = apiKeyProvider;
            BearerTokenProvider = bearerTokenProvider;
            OauthTokenProvider = oauthTokenProvider;
        }

        partial void FormatActivateBot(ref Guid botId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="botId"></param>
        private void AfterActivateBotDefaultImplementation(IActivateBotApiResponse apiResponseLocalVar, Guid botId)
        {
            bool suppressDefaultLog = false;
            AfterActivateBot(ref suppressDefaultLog, apiResponseLocalVar, botId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="botId"></param>
        partial void AfterActivateBot(ref bool suppressDefaultLog, IActivateBotApiResponse apiResponseLocalVar, Guid botId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="botId"></param>
        private void OnErrorActivateBotDefaultImplementation(Exception exception, string pathFormat, string path, Guid botId)
        {
            bool suppressDefaultLog = false;
            OnErrorActivateBot(ref suppressDefaultLog, exception, pathFormat, path, botId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="botId"></param>
        partial void OnErrorActivateBot(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Guid botId);

        /// <summary>
        /// BOTをアクティベート 指定したBOTを有効化します。 対象のBOTの管理権限が必要です。
        /// </summary>
        /// <param name="botId">BOTUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IActivateBotApiResponse"/>&gt;</returns>
        public async Task<IActivateBotApiResponse?> ActivateBotOrDefaultAsync(Guid botId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ActivateBotAsync(botId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// BOTをアクティベート 指定したBOTを有効化します。 対象のBOTの管理権限が必要です。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="botId">BOTUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IActivateBotApiResponse"/>&gt;</returns>
        public async Task<IActivateBotApiResponse> ActivateBotAsync(Guid botId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatActivateBot(ref botId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/bots/{botId}/actions/activate";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BbotId%7D", Uri.EscapeDataString(botId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ActivateBotApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ActivateBotApiResponse>();

                        ActivateBotApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/bots/{botId}/actions/activate", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterActivateBotDefaultImplementation(apiResponseLocalVar, botId);

                        Events.ExecuteOnActivateBot(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorActivateBotDefaultImplementation(e, "/bots/{botId}/actions/activate", uriBuilderLocalVar.Path, botId);
                Events.ExecuteOnErrorActivateBot(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ActivateBotApiResponse"/>
        /// </summary>
        public partial class ActivateBotApiResponse : Traq.Client.ApiResponse, IActivateBotApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ActivateBotApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ActivateBotApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ActivateBotApiResponse(ILogger<ActivateBotApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 202 Accepted
            /// </summary>
            /// <returns></returns>
            public bool IsAccepted => 202 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatChangeBotIcon(ref Guid botId, ref System.IO.Stream file);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="file"></param>
        /// <returns></returns>
        private void ValidateChangeBotIcon(System.IO.Stream file)
        {
            if (file == null)
                throw new ArgumentNullException(nameof(file));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="botId"></param>
        /// <param name="file"></param>
        private void AfterChangeBotIconDefaultImplementation(IChangeBotIconApiResponse apiResponseLocalVar, Guid botId, System.IO.Stream file)
        {
            bool suppressDefaultLog = false;
            AfterChangeBotIcon(ref suppressDefaultLog, apiResponseLocalVar, botId, file);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="botId"></param>
        /// <param name="file"></param>
        partial void AfterChangeBotIcon(ref bool suppressDefaultLog, IChangeBotIconApiResponse apiResponseLocalVar, Guid botId, System.IO.Stream file);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="botId"></param>
        /// <param name="file"></param>
        private void OnErrorChangeBotIconDefaultImplementation(Exception exception, string pathFormat, string path, Guid botId, System.IO.Stream file)
        {
            bool suppressDefaultLog = false;
            OnErrorChangeBotIcon(ref suppressDefaultLog, exception, pathFormat, path, botId, file);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="botId"></param>
        /// <param name="file"></param>
        partial void OnErrorChangeBotIcon(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Guid botId, System.IO.Stream file);

        /// <summary>
        /// BOTのアイコン画像を変更 指定したBOTのアイコン画像を変更を変更します。 対象のBOTの管理権限が必要です。
        /// </summary>
        /// <param name="botId">BOTUUID</param>
        /// <param name="file">アイコン画像(2MBまでのpng, jpeg, gif)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IChangeBotIconApiResponse"/>&gt;</returns>
        public async Task<IChangeBotIconApiResponse?> ChangeBotIconOrDefaultAsync(Guid botId, System.IO.Stream file, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ChangeBotIconAsync(botId, file, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// BOTのアイコン画像を変更 指定したBOTのアイコン画像を変更を変更します。 対象のBOTの管理権限が必要です。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="botId">BOTUUID</param>
        /// <param name="file">アイコン画像(2MBまでのpng, jpeg, gif)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IChangeBotIconApiResponse"/>&gt;</returns>
        public async Task<IChangeBotIconApiResponse> ChangeBotIconAsync(Guid botId, System.IO.Stream file, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateChangeBotIcon(file);

                FormatChangeBotIcon(ref botId, ref file);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/bots/{botId}/icon";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BbotId%7D", Uri.EscapeDataString(botId.ToString()));

                    MultipartContent multipartContentLocalVar = new MultipartContent();

                    httpRequestMessageLocalVar.Content = multipartContentLocalVar;

                    List<KeyValuePair<string?, string?>> formParameterLocalVars = new List<KeyValuePair<string?, string?>>();

                    multipartContentLocalVar.Add(new FormUrlEncodedContent(formParameterLocalVars));                    multipartContentLocalVar.Add(new StreamContent(file));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "multipart/form-data"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ChangeBotIconApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ChangeBotIconApiResponse>();

                        ChangeBotIconApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/bots/{botId}/icon", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterChangeBotIconDefaultImplementation(apiResponseLocalVar, botId, file);

                        Events.ExecuteOnChangeBotIcon(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorChangeBotIconDefaultImplementation(e, "/bots/{botId}/icon", uriBuilderLocalVar.Path, botId, file);
                Events.ExecuteOnErrorChangeBotIcon(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ChangeBotIconApiResponse"/>
        /// </summary>
        public partial class ChangeBotIconApiResponse : Traq.Client.ApiResponse, IChangeBotIconApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ChangeBotIconApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ChangeBotIconApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ChangeBotIconApiResponse(ILogger<ChangeBotIconApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 413 ContentTooLarge
            /// </summary>
            /// <returns></returns>
            public bool IsContentTooLarge => 413 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterConnectBotWSDefaultImplementation(IConnectBotWSApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterConnectBotWS(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterConnectBotWS(ref bool suppressDefaultLog, IConnectBotWSApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        private void OnErrorConnectBotWSDefaultImplementation(Exception exception, string pathFormat, string path)
        {
            bool suppressDefaultLog = false;
            OnErrorConnectBotWS(ref suppressDefaultLog, exception, pathFormat, path);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        partial void OnErrorConnectBotWS(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path);

        /// <summary>
        /// WebSocket Mode BOT用通知ストリームに接続します # BOT WebSocketプロトコル  ## 送信  &#x60;コマンド:引数1:引数2:...&#x60; のような形式のTextMessageをサーバーに送信することで、このWebSocketセッションに対する設定が実行できます。  ### &#x60;rtcstate&#x60;コマンド 自分のWebRTC状態を変更します。 他のコネクションが既に状態を保持している場合、変更することができません。  &#x60;rtcstate:{チャンネルID}:({状態}:{セッションID})*&#x60;  チャンネルIDにnullもしくは空文字を指定するか、状態にnullもしくは空文字を指定した場合、WebRTC状態はリセットされます。  &#x60;rtcstate:null&#x60;, &#x60;rtcstate:&#x60;, &#x60;rtcstate:channelId:null&#x60;, &#x60;rtcstate:channelId:&#x60;  コネクションが切断された場合、自分のWebRTC状態はリセットされます。  ## 受信  TextMessageとして各種イベントが&#x60;type&#x60;、&#x60;reqId&#x60;、&#x60;body&#x60;を持つJSONとして非同期に送られます。 &#x60;body&#x60;の内容はHTTP Modeの場合のRequest Bodyと同様です。 例外として&#x60;ERROR&#x60;イベントは&#x60;reqId&#x60;を持ちません。  例: PINGイベント &#x60;{\&quot;type\&quot;:\&quot;PING\&quot;,\&quot;reqId\&quot;:\&quot;requestId\&quot;,\&quot;body\&quot;:{\&quot;eventTime\&quot;:\&quot;2019-05-07T04:50:48.582586882Z\&quot;}}&#x60;  ### &#x60;ERROR&#x60;  コマンドの引数が不正などの理由でコマンドが受理されなかった場合に送られます。 非同期に送られるため、必ずしもコマンドとの対応関係を確定できないことに注意してください。 本番環境ではERRORが送られないようにすることが望ましいです。  &#x60;{\&quot;type\&quot;:\&quot;ERROR\&quot;,\&quot;body\&quot;:\&quot;message\&quot;}&#x60;
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IConnectBotWSApiResponse"/>&gt;</returns>
        public async Task<IConnectBotWSApiResponse?> ConnectBotWSOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ConnectBotWSAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// WebSocket Mode BOT用通知ストリームに接続します # BOT WebSocketプロトコル  ## 送信  &#x60;コマンド:引数1:引数2:...&#x60; のような形式のTextMessageをサーバーに送信することで、このWebSocketセッションに対する設定が実行できます。  ### &#x60;rtcstate&#x60;コマンド 自分のWebRTC状態を変更します。 他のコネクションが既に状態を保持している場合、変更することができません。  &#x60;rtcstate:{チャンネルID}:({状態}:{セッションID})*&#x60;  チャンネルIDにnullもしくは空文字を指定するか、状態にnullもしくは空文字を指定した場合、WebRTC状態はリセットされます。  &#x60;rtcstate:null&#x60;, &#x60;rtcstate:&#x60;, &#x60;rtcstate:channelId:null&#x60;, &#x60;rtcstate:channelId:&#x60;  コネクションが切断された場合、自分のWebRTC状態はリセットされます。  ## 受信  TextMessageとして各種イベントが&#x60;type&#x60;、&#x60;reqId&#x60;、&#x60;body&#x60;を持つJSONとして非同期に送られます。 &#x60;body&#x60;の内容はHTTP Modeの場合のRequest Bodyと同様です。 例外として&#x60;ERROR&#x60;イベントは&#x60;reqId&#x60;を持ちません。  例: PINGイベント &#x60;{\&quot;type\&quot;:\&quot;PING\&quot;,\&quot;reqId\&quot;:\&quot;requestId\&quot;,\&quot;body\&quot;:{\&quot;eventTime\&quot;:\&quot;2019-05-07T04:50:48.582586882Z\&quot;}}&#x60;  ### &#x60;ERROR&#x60;  コマンドの引数が不正などの理由でコマンドが受理されなかった場合に送られます。 非同期に送られるため、必ずしもコマンドとの対応関係を確定できないことに注意してください。 本番環境ではERRORが送られないようにすることが望ましいです。  &#x60;{\&quot;type\&quot;:\&quot;ERROR\&quot;,\&quot;body\&quot;:\&quot;message\&quot;}&#x60;
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IConnectBotWSApiResponse"/>&gt;</returns>
        public async Task<IConnectBotWSApiResponse> ConnectBotWSAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/bots/ws";

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ConnectBotWSApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ConnectBotWSApiResponse>();

                        ConnectBotWSApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/bots/ws", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterConnectBotWSDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnConnectBotWS(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorConnectBotWSDefaultImplementation(e, "/bots/ws", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorConnectBotWS(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ConnectBotWSApiResponse"/>
        /// </summary>
        public partial class ConnectBotWSApiResponse : Traq.Client.ApiResponse, IConnectBotWSApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ConnectBotWSApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ConnectBotWSApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ConnectBotWSApiResponse(ILogger<ConnectBotWSApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 101 SwitchingProtocols
            /// </summary>
            /// <returns></returns>
            public bool IsSwitchingProtocols => 101 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCreateBot(Option<PostBotRequest> postBotRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="postBotRequest"></param>
        /// <returns></returns>
        private void ValidateCreateBot(Option<PostBotRequest> postBotRequest)
        {
            if (postBotRequest.IsSet && postBotRequest.Value == null)
                throw new ArgumentNullException(nameof(postBotRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="postBotRequest"></param>
        private void AfterCreateBotDefaultImplementation(ICreateBotApiResponse apiResponseLocalVar, Option<PostBotRequest> postBotRequest)
        {
            bool suppressDefaultLog = false;
            AfterCreateBot(ref suppressDefaultLog, apiResponseLocalVar, postBotRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="postBotRequest"></param>
        partial void AfterCreateBot(ref bool suppressDefaultLog, ICreateBotApiResponse apiResponseLocalVar, Option<PostBotRequest> postBotRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="postBotRequest"></param>
        private void OnErrorCreateBotDefaultImplementation(Exception exception, string pathFormat, string path, Option<PostBotRequest> postBotRequest)
        {
            bool suppressDefaultLog = false;
            OnErrorCreateBot(ref suppressDefaultLog, exception, pathFormat, path, postBotRequest);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="postBotRequest"></param>
        partial void OnErrorCreateBot(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<PostBotRequest> postBotRequest);

        /// <summary>
        /// BOTを作成 BOTを作成します。 作成後に購読イベントの設定を行う必要があります。 さらにHTTP Modeの場合はアクティベーションを行う必要があります。
        /// </summary>
        /// <param name="postBotRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateBotApiResponse"/>&gt;</returns>
        public async Task<ICreateBotApiResponse?> CreateBotOrDefaultAsync(Option<PostBotRequest> postBotRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateBotAsync(postBotRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// BOTを作成 BOTを作成します。 作成後に購読イベントの設定を行う必要があります。 さらにHTTP Modeの場合はアクティベーションを行う必要があります。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="postBotRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateBotApiResponse"/>&gt;</returns>
        public async Task<ICreateBotApiResponse> CreateBotAsync(Option<PostBotRequest> postBotRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateBot(postBotRequest);

                FormatCreateBot(postBotRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/bots";

                    if (postBotRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (postBotRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(postBotRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateBotApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateBotApiResponse>();

                        CreateBotApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/bots", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateBotDefaultImplementation(apiResponseLocalVar, postBotRequest);

                        Events.ExecuteOnCreateBot(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateBotDefaultImplementation(e, "/bots", uriBuilderLocalVar.Path, postBotRequest);
                Events.ExecuteOnErrorCreateBot(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateBotApiResponse"/>
        /// </summary>
        public partial class CreateBotApiResponse : Traq.Client.ApiResponse, ICreateBotApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateBotApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateBotApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateBotApiResponse(ILogger<CreateBotApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public Traq.Model.BotDetail? Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<Traq.Model.BotDetail>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out Traq.Model.BotDetail? result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteBot(ref Guid botId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="botId"></param>
        private void AfterDeleteBotDefaultImplementation(IDeleteBotApiResponse apiResponseLocalVar, Guid botId)
        {
            bool suppressDefaultLog = false;
            AfterDeleteBot(ref suppressDefaultLog, apiResponseLocalVar, botId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="botId"></param>
        partial void AfterDeleteBot(ref bool suppressDefaultLog, IDeleteBotApiResponse apiResponseLocalVar, Guid botId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="botId"></param>
        private void OnErrorDeleteBotDefaultImplementation(Exception exception, string pathFormat, string path, Guid botId)
        {
            bool suppressDefaultLog = false;
            OnErrorDeleteBot(ref suppressDefaultLog, exception, pathFormat, path, botId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="botId"></param>
        partial void OnErrorDeleteBot(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Guid botId);

        /// <summary>
        /// BOTを削除 指定したBOTを削除します。 対象のBOTの管理権限が必要です。
        /// </summary>
        /// <param name="botId">BOTUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteBotApiResponse"/>&gt;</returns>
        public async Task<IDeleteBotApiResponse?> DeleteBotOrDefaultAsync(Guid botId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteBotAsync(botId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// BOTを削除 指定したBOTを削除します。 対象のBOTの管理権限が必要です。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="botId">BOTUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteBotApiResponse"/>&gt;</returns>
        public async Task<IDeleteBotApiResponse> DeleteBotAsync(Guid botId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatDeleteBot(ref botId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/bots/{botId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BbotId%7D", Uri.EscapeDataString(botId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteBotApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteBotApiResponse>();

                        DeleteBotApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/bots/{botId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteBotDefaultImplementation(apiResponseLocalVar, botId);

                        Events.ExecuteOnDeleteBot(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteBotDefaultImplementation(e, "/bots/{botId}", uriBuilderLocalVar.Path, botId);
                Events.ExecuteOnErrorDeleteBot(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteBotApiResponse"/>
        /// </summary>
        public partial class DeleteBotApiResponse : Traq.Client.ApiResponse, IDeleteBotApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteBotApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteBotApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteBotApiResponse(ILogger<DeleteBotApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEditBot(ref Guid botId, Option<PatchBotRequest> patchBotRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="patchBotRequest"></param>
        /// <returns></returns>
        private void ValidateEditBot(Option<PatchBotRequest> patchBotRequest)
        {
            if (patchBotRequest.IsSet && patchBotRequest.Value == null)
                throw new ArgumentNullException(nameof(patchBotRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="botId"></param>
        /// <param name="patchBotRequest"></param>
        private void AfterEditBotDefaultImplementation(IEditBotApiResponse apiResponseLocalVar, Guid botId, Option<PatchBotRequest> patchBotRequest)
        {
            bool suppressDefaultLog = false;
            AfterEditBot(ref suppressDefaultLog, apiResponseLocalVar, botId, patchBotRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="botId"></param>
        /// <param name="patchBotRequest"></param>
        partial void AfterEditBot(ref bool suppressDefaultLog, IEditBotApiResponse apiResponseLocalVar, Guid botId, Option<PatchBotRequest> patchBotRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="botId"></param>
        /// <param name="patchBotRequest"></param>
        private void OnErrorEditBotDefaultImplementation(Exception exception, string pathFormat, string path, Guid botId, Option<PatchBotRequest> patchBotRequest)
        {
            bool suppressDefaultLog = false;
            OnErrorEditBot(ref suppressDefaultLog, exception, pathFormat, path, botId, patchBotRequest);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="botId"></param>
        /// <param name="patchBotRequest"></param>
        partial void OnErrorEditBot(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Guid botId, Option<PatchBotRequest> patchBotRequest);

        /// <summary>
        /// BOT情報を変更 指定したBOTの情報を変更します。 対象のBOTの管理権限が必要です。 BOT開発者UUIDを変更した場合は、変更先ユーザーにBOT管理権限が移譲され、自分自身は権限を失います。
        /// </summary>
        /// <param name="botId">BOTUUID</param>
        /// <param name="patchBotRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEditBotApiResponse"/>&gt;</returns>
        public async Task<IEditBotApiResponse?> EditBotOrDefaultAsync(Guid botId, Option<PatchBotRequest> patchBotRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EditBotAsync(botId, patchBotRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// BOT情報を変更 指定したBOTの情報を変更します。 対象のBOTの管理権限が必要です。 BOT開発者UUIDを変更した場合は、変更先ユーザーにBOT管理権限が移譲され、自分自身は権限を失います。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="botId">BOTUUID</param>
        /// <param name="patchBotRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEditBotApiResponse"/>&gt;</returns>
        public async Task<IEditBotApiResponse> EditBotAsync(Guid botId, Option<PatchBotRequest> patchBotRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEditBot(patchBotRequest);

                FormatEditBot(ref botId, patchBotRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/bots/{botId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BbotId%7D", Uri.EscapeDataString(botId.ToString()));

                    if (patchBotRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (patchBotRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(patchBotRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Patch;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EditBotApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EditBotApiResponse>();

                        EditBotApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/bots/{botId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEditBotDefaultImplementation(apiResponseLocalVar, botId, patchBotRequest);

                        Events.ExecuteOnEditBot(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEditBotDefaultImplementation(e, "/bots/{botId}", uriBuilderLocalVar.Path, botId, patchBotRequest);
                Events.ExecuteOnErrorEditBot(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EditBotApiResponse"/>
        /// </summary>
        public partial class EditBotApiResponse : Traq.Client.ApiResponse, IEditBotApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EditBotApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EditBotApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EditBotApiResponse(ILogger<EditBotApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetBot(ref Guid botId, ref Option<bool> detail);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="botId"></param>
        /// <param name="detail"></param>
        private void AfterGetBotDefaultImplementation(IGetBotApiResponse apiResponseLocalVar, Guid botId, Option<bool> detail)
        {
            bool suppressDefaultLog = false;
            AfterGetBot(ref suppressDefaultLog, apiResponseLocalVar, botId, detail);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="botId"></param>
        /// <param name="detail"></param>
        partial void AfterGetBot(ref bool suppressDefaultLog, IGetBotApiResponse apiResponseLocalVar, Guid botId, Option<bool> detail);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="botId"></param>
        /// <param name="detail"></param>
        private void OnErrorGetBotDefaultImplementation(Exception exception, string pathFormat, string path, Guid botId, Option<bool> detail)
        {
            bool suppressDefaultLog = false;
            OnErrorGetBot(ref suppressDefaultLog, exception, pathFormat, path, botId, detail);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="botId"></param>
        /// <param name="detail"></param>
        partial void OnErrorGetBot(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Guid botId, Option<bool> detail);

        /// <summary>
        /// BOT情報を取得 指定したBOTのBOT情報を取得します。 BOT詳細情報を取得する場合は、対象のBOTの管理権限が必要です。
        /// </summary>
        /// <param name="botId">BOTUUID</param>
        /// <param name="detail">詳細情報を含めるかどうか (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetBotApiResponse"/>&gt;</returns>
        public async Task<IGetBotApiResponse?> GetBotOrDefaultAsync(Guid botId, Option<bool> detail = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetBotAsync(botId, detail, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// BOT情報を取得 指定したBOTのBOT情報を取得します。 BOT詳細情報を取得する場合は、対象のBOTの管理権限が必要です。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="botId">BOTUUID</param>
        /// <param name="detail">詳細情報を含めるかどうか (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetBotApiResponse"/>&gt;</returns>
        public async Task<IGetBotApiResponse> GetBotAsync(Guid botId, Option<bool> detail = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetBot(ref botId, ref detail);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/bots/{botId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BbotId%7D", Uri.EscapeDataString(botId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (detail.IsSet)
                        parseQueryStringLocalVar["detail"] = ClientUtils.ParameterToString(detail.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetBotApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetBotApiResponse>();

                        GetBotApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/bots/{botId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetBotDefaultImplementation(apiResponseLocalVar, botId, detail);

                        Events.ExecuteOnGetBot(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetBotDefaultImplementation(e, "/bots/{botId}", uriBuilderLocalVar.Path, botId, detail);
                Events.ExecuteOnErrorGetBot(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetBotApiResponse"/>
        /// </summary>
        public partial class GetBotApiResponse : Traq.Client.ApiResponse, IGetBotApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetBotApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetBotApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetBotApiResponse(ILogger<GetBotApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Traq.Model.GetBot200Response? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Traq.Model.GetBot200Response>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Traq.Model.GetBot200Response? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetBotIcon(ref Guid botId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="botId"></param>
        private void AfterGetBotIconDefaultImplementation(IGetBotIconApiResponse apiResponseLocalVar, Guid botId)
        {
            bool suppressDefaultLog = false;
            AfterGetBotIcon(ref suppressDefaultLog, apiResponseLocalVar, botId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="botId"></param>
        partial void AfterGetBotIcon(ref bool suppressDefaultLog, IGetBotIconApiResponse apiResponseLocalVar, Guid botId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="botId"></param>
        private void OnErrorGetBotIconDefaultImplementation(Exception exception, string pathFormat, string path, Guid botId)
        {
            bool suppressDefaultLog = false;
            OnErrorGetBotIcon(ref suppressDefaultLog, exception, pathFormat, path, botId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="botId"></param>
        partial void OnErrorGetBotIcon(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Guid botId);

        /// <summary>
        /// BOTのアイコン画像を取得 指定したBOTのアイコン画像を取得を取得します。
        /// </summary>
        /// <param name="botId">BOTUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetBotIconApiResponse"/>&gt;</returns>
        public async Task<IGetBotIconApiResponse?> GetBotIconOrDefaultAsync(Guid botId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetBotIconAsync(botId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// BOTのアイコン画像を取得 指定したBOTのアイコン画像を取得を取得します。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="botId">BOTUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetBotIconApiResponse"/>&gt;</returns>
        public async Task<IGetBotIconApiResponse> GetBotIconAsync(Guid botId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetBotIcon(ref botId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/bots/{botId}/icon";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BbotId%7D", Uri.EscapeDataString(botId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "image/jpeg",
                        "image/gif",
                        "image/png"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetBotIconApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetBotIconApiResponse>();

                        GetBotIconApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/bots/{botId}/icon", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetBotIconDefaultImplementation(apiResponseLocalVar, botId);

                        Events.ExecuteOnGetBotIcon(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetBotIconDefaultImplementation(e, "/bots/{botId}/icon", uriBuilderLocalVar.Path, botId);
                Events.ExecuteOnErrorGetBotIcon(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetBotIconApiResponse"/>
        /// </summary>
        public partial class GetBotIconApiResponse : Traq.Client.ApiResponse, IGetBotIconApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetBotIconApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetBotIconApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetBotIconApiResponse(ILogger<GetBotIconApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public System.IO.Stream? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<System.IO.Stream>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out System.IO.Stream? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetBotLogs(ref Guid botId, ref Option<int> limit, ref Option<int> offset);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="botId"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        private void AfterGetBotLogsDefaultImplementation(IGetBotLogsApiResponse apiResponseLocalVar, Guid botId, Option<int> limit, Option<int> offset)
        {
            bool suppressDefaultLog = false;
            AfterGetBotLogs(ref suppressDefaultLog, apiResponseLocalVar, botId, limit, offset);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="botId"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        partial void AfterGetBotLogs(ref bool suppressDefaultLog, IGetBotLogsApiResponse apiResponseLocalVar, Guid botId, Option<int> limit, Option<int> offset);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="botId"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        private void OnErrorGetBotLogsDefaultImplementation(Exception exception, string pathFormat, string path, Guid botId, Option<int> limit, Option<int> offset)
        {
            bool suppressDefaultLog = false;
            OnErrorGetBotLogs(ref suppressDefaultLog, exception, pathFormat, path, botId, limit, offset);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="botId"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        partial void OnErrorGetBotLogs(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Guid botId, Option<int> limit, Option<int> offset);

        /// <summary>
        /// BOTのイベントログを取得 指定したBOTのイベントログを取得します。 対象のBOTの管理権限が必要です。
        /// </summary>
        /// <param name="botId">BOTUUID</param>
        /// <param name="limit">取得する件数 (optional)</param>
        /// <param name="offset">取得するオフセット (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetBotLogsApiResponse"/>&gt;</returns>
        public async Task<IGetBotLogsApiResponse?> GetBotLogsOrDefaultAsync(Guid botId, Option<int> limit = default, Option<int> offset = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetBotLogsAsync(botId, limit, offset, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// BOTのイベントログを取得 指定したBOTのイベントログを取得します。 対象のBOTの管理権限が必要です。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="botId">BOTUUID</param>
        /// <param name="limit">取得する件数 (optional)</param>
        /// <param name="offset">取得するオフセット (optional, default to 0)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetBotLogsApiResponse"/>&gt;</returns>
        public async Task<IGetBotLogsApiResponse> GetBotLogsAsync(Guid botId, Option<int> limit = default, Option<int> offset = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetBotLogs(ref botId, ref limit, ref offset);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/bots/{botId}/logs";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BbotId%7D", Uri.EscapeDataString(botId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetBotLogsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetBotLogsApiResponse>();

                        GetBotLogsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/bots/{botId}/logs", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetBotLogsDefaultImplementation(apiResponseLocalVar, botId, limit, offset);

                        Events.ExecuteOnGetBotLogs(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetBotLogsDefaultImplementation(e, "/bots/{botId}/logs", uriBuilderLocalVar.Path, botId, limit, offset);
                Events.ExecuteOnErrorGetBotLogs(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetBotLogsApiResponse"/>
        /// </summary>
        public partial class GetBotLogsApiResponse : Traq.Client.ApiResponse, IGetBotLogsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetBotLogsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetBotLogsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetBotLogsApiResponse(ILogger<GetBotLogsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<BotEventLog>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<BotEventLog>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<BotEventLog>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetBots(ref Option<bool> all);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="all"></param>
        private void AfterGetBotsDefaultImplementation(IGetBotsApiResponse apiResponseLocalVar, Option<bool> all)
        {
            bool suppressDefaultLog = false;
            AfterGetBots(ref suppressDefaultLog, apiResponseLocalVar, all);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="all"></param>
        partial void AfterGetBots(ref bool suppressDefaultLog, IGetBotsApiResponse apiResponseLocalVar, Option<bool> all);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="all"></param>
        private void OnErrorGetBotsDefaultImplementation(Exception exception, string pathFormat, string path, Option<bool> all)
        {
            bool suppressDefaultLog = false;
            OnErrorGetBots(ref suppressDefaultLog, exception, pathFormat, path, all);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="all"></param>
        partial void OnErrorGetBots(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<bool> all);

        /// <summary>
        /// BOTリストを取得 BOT情報のリストを取得します。 allを指定しない場合、自分が開発者のBOTのみを返します。
        /// </summary>
        /// <param name="all">全てのBOTを取得するかどうか (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetBotsApiResponse"/>&gt;</returns>
        public async Task<IGetBotsApiResponse?> GetBotsOrDefaultAsync(Option<bool> all = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetBotsAsync(all, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// BOTリストを取得 BOT情報のリストを取得します。 allを指定しない場合、自分が開発者のBOTのみを返します。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="all">全てのBOTを取得するかどうか (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetBotsApiResponse"/>&gt;</returns>
        public async Task<IGetBotsApiResponse> GetBotsAsync(Option<bool> all = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetBots(ref all);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/bots";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (all.IsSet)
                        parseQueryStringLocalVar["all"] = ClientUtils.ParameterToString(all.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetBotsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetBotsApiResponse>();

                        GetBotsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/bots", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetBotsDefaultImplementation(apiResponseLocalVar, all);

                        Events.ExecuteOnGetBots(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetBotsDefaultImplementation(e, "/bots", uriBuilderLocalVar.Path, all);
                Events.ExecuteOnErrorGetBots(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetBotsApiResponse"/>
        /// </summary>
        public partial class GetBotsApiResponse : Traq.Client.ApiResponse, IGetBotsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetBotsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetBotsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetBotsApiResponse(ILogger<GetBotsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<Bot>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<Bot>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<Bot>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetChannelBots(ref Guid channelId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="channelId"></param>
        private void AfterGetChannelBotsDefaultImplementation(IGetChannelBotsApiResponse apiResponseLocalVar, Guid channelId)
        {
            bool suppressDefaultLog = false;
            AfterGetChannelBots(ref suppressDefaultLog, apiResponseLocalVar, channelId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="channelId"></param>
        partial void AfterGetChannelBots(ref bool suppressDefaultLog, IGetChannelBotsApiResponse apiResponseLocalVar, Guid channelId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="channelId"></param>
        private void OnErrorGetChannelBotsDefaultImplementation(Exception exception, string pathFormat, string path, Guid channelId)
        {
            bool suppressDefaultLog = false;
            OnErrorGetChannelBots(ref suppressDefaultLog, exception, pathFormat, path, channelId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="channelId"></param>
        partial void OnErrorGetChannelBots(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Guid channelId);

        /// <summary>
        /// チャンネル参加中のBOTのリストを取得 指定したチャンネルに参加しているBOTのリストを取得します。
        /// </summary>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChannelBotsApiResponse"/>&gt;</returns>
        public async Task<IGetChannelBotsApiResponse?> GetChannelBotsOrDefaultAsync(Guid channelId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetChannelBotsAsync(channelId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// チャンネル参加中のBOTのリストを取得 指定したチャンネルに参加しているBOTのリストを取得します。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChannelBotsApiResponse"/>&gt;</returns>
        public async Task<IGetChannelBotsApiResponse> GetChannelBotsAsync(Guid channelId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetChannelBots(ref channelId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/channels/{channelId}/bots";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BchannelId%7D", Uri.EscapeDataString(channelId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetChannelBotsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetChannelBotsApiResponse>();

                        GetChannelBotsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/channels/{channelId}/bots", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetChannelBotsDefaultImplementation(apiResponseLocalVar, channelId);

                        Events.ExecuteOnGetChannelBots(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetChannelBotsDefaultImplementation(e, "/channels/{channelId}/bots", uriBuilderLocalVar.Path, channelId);
                Events.ExecuteOnErrorGetChannelBots(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetChannelBotsApiResponse"/>
        /// </summary>
        public partial class GetChannelBotsApiResponse : Traq.Client.ApiResponse, IGetChannelBotsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetChannelBotsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetChannelBotsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetChannelBotsApiResponse(ILogger<GetChannelBotsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<BotUser>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<BotUser>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<BotUser>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatInactivateBot(ref Guid botId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="botId"></param>
        private void AfterInactivateBotDefaultImplementation(IInactivateBotApiResponse apiResponseLocalVar, Guid botId)
        {
            bool suppressDefaultLog = false;
            AfterInactivateBot(ref suppressDefaultLog, apiResponseLocalVar, botId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="botId"></param>
        partial void AfterInactivateBot(ref bool suppressDefaultLog, IInactivateBotApiResponse apiResponseLocalVar, Guid botId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="botId"></param>
        private void OnErrorInactivateBotDefaultImplementation(Exception exception, string pathFormat, string path, Guid botId)
        {
            bool suppressDefaultLog = false;
            OnErrorInactivateBot(ref suppressDefaultLog, exception, pathFormat, path, botId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="botId"></param>
        partial void OnErrorInactivateBot(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Guid botId);

        /// <summary>
        /// BOTをインアクティベート 指定したBOTを無効化します。対象のBOTの管理権限が必要です。
        /// </summary>
        /// <param name="botId">BOTUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInactivateBotApiResponse"/>&gt;</returns>
        public async Task<IInactivateBotApiResponse?> InactivateBotOrDefaultAsync(Guid botId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await InactivateBotAsync(botId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// BOTをインアクティベート 指定したBOTを無効化します。対象のBOTの管理権限が必要です。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="botId">BOTUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IInactivateBotApiResponse"/>&gt;</returns>
        public async Task<IInactivateBotApiResponse> InactivateBotAsync(Guid botId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatInactivateBot(ref botId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/bots/{botId}/actions/inactivate";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BbotId%7D", Uri.EscapeDataString(botId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<InactivateBotApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<InactivateBotApiResponse>();

                        InactivateBotApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/bots/{botId}/actions/inactivate", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterInactivateBotDefaultImplementation(apiResponseLocalVar, botId);

                        Events.ExecuteOnInactivateBot(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorInactivateBotDefaultImplementation(e, "/bots/{botId}/actions/inactivate", uriBuilderLocalVar.Path, botId);
                Events.ExecuteOnErrorInactivateBot(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="InactivateBotApiResponse"/>
        /// </summary>
        public partial class InactivateBotApiResponse : Traq.Client.ApiResponse, IInactivateBotApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<InactivateBotApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="InactivateBotApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public InactivateBotApiResponse(ILogger<InactivateBotApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatLetBotJoinChannel(ref Guid botId, Option<PostBotActionJoinRequest> postBotActionJoinRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="postBotActionJoinRequest"></param>
        /// <returns></returns>
        private void ValidateLetBotJoinChannel(Option<PostBotActionJoinRequest> postBotActionJoinRequest)
        {
            if (postBotActionJoinRequest.IsSet && postBotActionJoinRequest.Value == null)
                throw new ArgumentNullException(nameof(postBotActionJoinRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="botId"></param>
        /// <param name="postBotActionJoinRequest"></param>
        private void AfterLetBotJoinChannelDefaultImplementation(ILetBotJoinChannelApiResponse apiResponseLocalVar, Guid botId, Option<PostBotActionJoinRequest> postBotActionJoinRequest)
        {
            bool suppressDefaultLog = false;
            AfterLetBotJoinChannel(ref suppressDefaultLog, apiResponseLocalVar, botId, postBotActionJoinRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="botId"></param>
        /// <param name="postBotActionJoinRequest"></param>
        partial void AfterLetBotJoinChannel(ref bool suppressDefaultLog, ILetBotJoinChannelApiResponse apiResponseLocalVar, Guid botId, Option<PostBotActionJoinRequest> postBotActionJoinRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="botId"></param>
        /// <param name="postBotActionJoinRequest"></param>
        private void OnErrorLetBotJoinChannelDefaultImplementation(Exception exception, string pathFormat, string path, Guid botId, Option<PostBotActionJoinRequest> postBotActionJoinRequest)
        {
            bool suppressDefaultLog = false;
            OnErrorLetBotJoinChannel(ref suppressDefaultLog, exception, pathFormat, path, botId, postBotActionJoinRequest);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="botId"></param>
        /// <param name="postBotActionJoinRequest"></param>
        partial void OnErrorLetBotJoinChannel(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Guid botId, Option<PostBotActionJoinRequest> postBotActionJoinRequest);

        /// <summary>
        /// BOTをチャンネルに参加させる 指定したBOTを指定したチャンネルに参加させます。 チャンネルに参加したBOTは、そのチャンネルの各種イベントを受け取るようになります。 対象のBOTの管理権限が必要です。
        /// </summary>
        /// <param name="botId">BOTUUID</param>
        /// <param name="postBotActionJoinRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILetBotJoinChannelApiResponse"/>&gt;</returns>
        public async Task<ILetBotJoinChannelApiResponse?> LetBotJoinChannelOrDefaultAsync(Guid botId, Option<PostBotActionJoinRequest> postBotActionJoinRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await LetBotJoinChannelAsync(botId, postBotActionJoinRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// BOTをチャンネルに参加させる 指定したBOTを指定したチャンネルに参加させます。 チャンネルに参加したBOTは、そのチャンネルの各種イベントを受け取るようになります。 対象のBOTの管理権限が必要です。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="botId">BOTUUID</param>
        /// <param name="postBotActionJoinRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILetBotJoinChannelApiResponse"/>&gt;</returns>
        public async Task<ILetBotJoinChannelApiResponse> LetBotJoinChannelAsync(Guid botId, Option<PostBotActionJoinRequest> postBotActionJoinRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateLetBotJoinChannel(postBotActionJoinRequest);

                FormatLetBotJoinChannel(ref botId, postBotActionJoinRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/bots/{botId}/actions/join";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BbotId%7D", Uri.EscapeDataString(botId.ToString()));

                    if (postBotActionJoinRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (postBotActionJoinRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(postBotActionJoinRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<LetBotJoinChannelApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<LetBotJoinChannelApiResponse>();

                        LetBotJoinChannelApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/bots/{botId}/actions/join", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterLetBotJoinChannelDefaultImplementation(apiResponseLocalVar, botId, postBotActionJoinRequest);

                        Events.ExecuteOnLetBotJoinChannel(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorLetBotJoinChannelDefaultImplementation(e, "/bots/{botId}/actions/join", uriBuilderLocalVar.Path, botId, postBotActionJoinRequest);
                Events.ExecuteOnErrorLetBotJoinChannel(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="LetBotJoinChannelApiResponse"/>
        /// </summary>
        public partial class LetBotJoinChannelApiResponse : Traq.Client.ApiResponse, ILetBotJoinChannelApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<LetBotJoinChannelApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="LetBotJoinChannelApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public LetBotJoinChannelApiResponse(ILogger<LetBotJoinChannelApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatLetBotLeaveChannel(ref Guid botId, Option<PostBotActionLeaveRequest> postBotActionLeaveRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="postBotActionLeaveRequest"></param>
        /// <returns></returns>
        private void ValidateLetBotLeaveChannel(Option<PostBotActionLeaveRequest> postBotActionLeaveRequest)
        {
            if (postBotActionLeaveRequest.IsSet && postBotActionLeaveRequest.Value == null)
                throw new ArgumentNullException(nameof(postBotActionLeaveRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="botId"></param>
        /// <param name="postBotActionLeaveRequest"></param>
        private void AfterLetBotLeaveChannelDefaultImplementation(ILetBotLeaveChannelApiResponse apiResponseLocalVar, Guid botId, Option<PostBotActionLeaveRequest> postBotActionLeaveRequest)
        {
            bool suppressDefaultLog = false;
            AfterLetBotLeaveChannel(ref suppressDefaultLog, apiResponseLocalVar, botId, postBotActionLeaveRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="botId"></param>
        /// <param name="postBotActionLeaveRequest"></param>
        partial void AfterLetBotLeaveChannel(ref bool suppressDefaultLog, ILetBotLeaveChannelApiResponse apiResponseLocalVar, Guid botId, Option<PostBotActionLeaveRequest> postBotActionLeaveRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="botId"></param>
        /// <param name="postBotActionLeaveRequest"></param>
        private void OnErrorLetBotLeaveChannelDefaultImplementation(Exception exception, string pathFormat, string path, Guid botId, Option<PostBotActionLeaveRequest> postBotActionLeaveRequest)
        {
            bool suppressDefaultLog = false;
            OnErrorLetBotLeaveChannel(ref suppressDefaultLog, exception, pathFormat, path, botId, postBotActionLeaveRequest);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="botId"></param>
        /// <param name="postBotActionLeaveRequest"></param>
        partial void OnErrorLetBotLeaveChannel(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Guid botId, Option<PostBotActionLeaveRequest> postBotActionLeaveRequest);

        /// <summary>
        /// BOTをチャンネルから退出させる 指定したBOTを指定したチャンネルから退出させます。 対象のBOTの管理権限が必要です。
        /// </summary>
        /// <param name="botId">BOTUUID</param>
        /// <param name="postBotActionLeaveRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILetBotLeaveChannelApiResponse"/>&gt;</returns>
        public async Task<ILetBotLeaveChannelApiResponse?> LetBotLeaveChannelOrDefaultAsync(Guid botId, Option<PostBotActionLeaveRequest> postBotActionLeaveRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await LetBotLeaveChannelAsync(botId, postBotActionLeaveRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// BOTをチャンネルから退出させる 指定したBOTを指定したチャンネルから退出させます。 対象のBOTの管理権限が必要です。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="botId">BOTUUID</param>
        /// <param name="postBotActionLeaveRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILetBotLeaveChannelApiResponse"/>&gt;</returns>
        public async Task<ILetBotLeaveChannelApiResponse> LetBotLeaveChannelAsync(Guid botId, Option<PostBotActionLeaveRequest> postBotActionLeaveRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateLetBotLeaveChannel(postBotActionLeaveRequest);

                FormatLetBotLeaveChannel(ref botId, postBotActionLeaveRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/bots/{botId}/actions/leave";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BbotId%7D", Uri.EscapeDataString(botId.ToString()));

                    if (postBotActionLeaveRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (postBotActionLeaveRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(postBotActionLeaveRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<LetBotLeaveChannelApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<LetBotLeaveChannelApiResponse>();

                        LetBotLeaveChannelApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/bots/{botId}/actions/leave", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterLetBotLeaveChannelDefaultImplementation(apiResponseLocalVar, botId, postBotActionLeaveRequest);

                        Events.ExecuteOnLetBotLeaveChannel(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorLetBotLeaveChannelDefaultImplementation(e, "/bots/{botId}/actions/leave", uriBuilderLocalVar.Path, botId, postBotActionLeaveRequest);
                Events.ExecuteOnErrorLetBotLeaveChannel(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="LetBotLeaveChannelApiResponse"/>
        /// </summary>
        public partial class LetBotLeaveChannelApiResponse : Traq.Client.ApiResponse, ILetBotLeaveChannelApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<LetBotLeaveChannelApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="LetBotLeaveChannelApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public LetBotLeaveChannelApiResponse(ILogger<LetBotLeaveChannelApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatReissueBot(ref Guid botId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="botId"></param>
        private void AfterReissueBotDefaultImplementation(IReissueBotApiResponse apiResponseLocalVar, Guid botId)
        {
            bool suppressDefaultLog = false;
            AfterReissueBot(ref suppressDefaultLog, apiResponseLocalVar, botId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="botId"></param>
        partial void AfterReissueBot(ref bool suppressDefaultLog, IReissueBotApiResponse apiResponseLocalVar, Guid botId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="botId"></param>
        private void OnErrorReissueBotDefaultImplementation(Exception exception, string pathFormat, string path, Guid botId)
        {
            bool suppressDefaultLog = false;
            OnErrorReissueBot(ref suppressDefaultLog, exception, pathFormat, path, botId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="botId"></param>
        partial void OnErrorReissueBot(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Guid botId);

        /// <summary>
        /// BOTのトークンを再発行 指定したBOTの現在の各種トークンを無効化し、再発行を行います。 対象のBOTの管理権限が必要です。
        /// </summary>
        /// <param name="botId">BOTUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IReissueBotApiResponse"/>&gt;</returns>
        public async Task<IReissueBotApiResponse?> ReissueBotOrDefaultAsync(Guid botId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ReissueBotAsync(botId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// BOTのトークンを再発行 指定したBOTの現在の各種トークンを無効化し、再発行を行います。 対象のBOTの管理権限が必要です。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="botId">BOTUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IReissueBotApiResponse"/>&gt;</returns>
        public async Task<IReissueBotApiResponse> ReissueBotAsync(Guid botId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatReissueBot(ref botId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/bots/{botId}/actions/reissue";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BbotId%7D", Uri.EscapeDataString(botId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ReissueBotApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ReissueBotApiResponse>();

                        ReissueBotApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/bots/{botId}/actions/reissue", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterReissueBotDefaultImplementation(apiResponseLocalVar, botId);

                        Events.ExecuteOnReissueBot(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorReissueBotDefaultImplementation(e, "/bots/{botId}/actions/reissue", uriBuilderLocalVar.Path, botId);
                Events.ExecuteOnErrorReissueBot(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ReissueBotApiResponse"/>
        /// </summary>
        public partial class ReissueBotApiResponse : Traq.Client.ApiResponse, IReissueBotApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ReissueBotApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ReissueBotApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ReissueBotApiResponse(ILogger<ReissueBotApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Traq.Model.BotTokens? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Traq.Model.BotTokens>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Traq.Model.BotTokens? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
