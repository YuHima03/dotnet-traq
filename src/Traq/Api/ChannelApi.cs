// <auto-generated>
/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Traq.Client;
using Traq.Model;
using System.Diagnostics.CodeAnalysis;

namespace Traq.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IChannelApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        ChannelApiEvents Events { get; }

        /// <summary>
        /// チャンネルを作成
        /// </summary>
        /// <remarks>
        /// チャンネルを作成します。 階層が6以上になるチャンネルは作成できません。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="postChannelRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateChannelApiResponse"/>&gt;</returns>
        Task<ICreateChannelApiResponse> CreateChannelAsync(Option<PostChannelRequest> postChannelRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// チャンネルを作成
        /// </summary>
        /// <remarks>
        /// チャンネルを作成します。 階層が6以上になるチャンネルは作成できません。
        /// </remarks>
        /// <param name="postChannelRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateChannelApiResponse"/>?&gt;</returns>
        Task<ICreateChannelApiResponse?> CreateChannelOrDefaultAsync(Option<PostChannelRequest> postChannelRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// チャンネル情報を変更
        /// </summary>
        /// <remarks>
        /// 指定したチャンネルの情報を変更します。 変更には権限が必要です。 ルートチャンネルに移動させる場合は、&#x60;parent&#x60;に&#x60;00000000-0000-0000-0000-000000000000&#x60;を指定してください。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="patchChannelRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEditChannelApiResponse"/>&gt;</returns>
        Task<IEditChannelApiResponse> EditChannelAsync(Guid channelId, Option<PatchChannelRequest> patchChannelRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// チャンネル情報を変更
        /// </summary>
        /// <remarks>
        /// 指定したチャンネルの情報を変更します。 変更には権限が必要です。 ルートチャンネルに移動させる場合は、&#x60;parent&#x60;に&#x60;00000000-0000-0000-0000-000000000000&#x60;を指定してください。
        /// </remarks>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="patchChannelRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEditChannelApiResponse"/>?&gt;</returns>
        Task<IEditChannelApiResponse?> EditChannelOrDefaultAsync(Guid channelId, Option<PatchChannelRequest> patchChannelRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// チャンネルの通知購読者を編集
        /// </summary>
        /// <remarks>
        /// 指定したチャンネルの通知購読者を編集します。 リクエストに含めなかったユーザーの通知購読状態は変更しません。 また、存在しないユーザーを指定した場合は無視されます。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="patchChannelSubscribersRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEditChannelSubscribersApiResponse"/>&gt;</returns>
        Task<IEditChannelSubscribersApiResponse> EditChannelSubscribersAsync(Guid channelId, Option<PatchChannelSubscribersRequest> patchChannelSubscribersRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// チャンネルの通知購読者を編集
        /// </summary>
        /// <remarks>
        /// 指定したチャンネルの通知購読者を編集します。 リクエストに含めなかったユーザーの通知購読状態は変更しません。 また、存在しないユーザーを指定した場合は無視されます。
        /// </remarks>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="patchChannelSubscribersRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEditChannelSubscribersApiResponse"/>?&gt;</returns>
        Task<IEditChannelSubscribersApiResponse?> EditChannelSubscribersOrDefaultAsync(Guid channelId, Option<PatchChannelSubscribersRequest> patchChannelSubscribersRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// チャンネルトピックを編集
        /// </summary>
        /// <remarks>
        /// 指定したチャンネルのトピックを編集します。 アーカイブされているチャンネルのトピックは編集できません。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="putChannelTopicRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEditChannelTopicApiResponse"/>&gt;</returns>
        Task<IEditChannelTopicApiResponse> EditChannelTopicAsync(Guid channelId, Option<PutChannelTopicRequest> putChannelTopicRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// チャンネルトピックを編集
        /// </summary>
        /// <remarks>
        /// 指定したチャンネルのトピックを編集します。 アーカイブされているチャンネルのトピックは編集できません。
        /// </remarks>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="putChannelTopicRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEditChannelTopicApiResponse"/>?&gt;</returns>
        Task<IEditChannelTopicApiResponse?> EditChannelTopicOrDefaultAsync(Guid channelId, Option<PutChannelTopicRequest> putChannelTopicRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// チャンネル情報を取得
        /// </summary>
        /// <remarks>
        /// 指定したチャンネルの情報を取得します。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChannelApiResponse"/>&gt;</returns>
        Task<IGetChannelApiResponse> GetChannelAsync(Guid channelId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// チャンネル情報を取得
        /// </summary>
        /// <remarks>
        /// 指定したチャンネルの情報を取得します。
        /// </remarks>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChannelApiResponse"/>?&gt;</returns>
        Task<IGetChannelApiResponse?> GetChannelOrDefaultAsync(Guid channelId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// チャンネル参加中のBOTのリストを取得
        /// </summary>
        /// <remarks>
        /// 指定したチャンネルに参加しているBOTのリストを取得します。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChannelBotsApiResponse"/>&gt;</returns>
        Task<IGetChannelBotsApiResponse> GetChannelBotsAsync(Guid channelId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// チャンネル参加中のBOTのリストを取得
        /// </summary>
        /// <remarks>
        /// 指定したチャンネルに参加しているBOTのリストを取得します。
        /// </remarks>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChannelBotsApiResponse"/>?&gt;</returns>
        Task<IGetChannelBotsApiResponse?> GetChannelBotsOrDefaultAsync(Guid channelId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// チャンネルイベントのリストを取得
        /// </summary>
        /// <remarks>
        /// 指定したチャンネルのイベントリストを取得します。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="limit">取得する件数 (optional)</param>
        /// <param name="offset">取得するオフセット (optional, default to 0)</param>
        /// <param name="since">取得する時間範囲の開始日時 (optional, default to &quot;0000-01-01T00:00Z&quot;)</param>
        /// <param name="until">取得する時間範囲の終了日時 (optional)</param>
        /// <param name="inclusive">範囲の端を含めるかどうか (optional, default to false)</param>
        /// <param name="order">昇順か降順か (optional, default to desc)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChannelEventsApiResponse"/>&gt;</returns>
        Task<IGetChannelEventsApiResponse> GetChannelEventsAsync(Guid channelId, Option<int> limit = default, Option<int> offset = default, Option<DateTimeOffset> since = default, Option<DateTimeOffset> until = default, Option<bool> inclusive = default, Option<string> order = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// チャンネルイベントのリストを取得
        /// </summary>
        /// <remarks>
        /// 指定したチャンネルのイベントリストを取得します。
        /// </remarks>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="limit">取得する件数 (optional)</param>
        /// <param name="offset">取得するオフセット (optional, default to 0)</param>
        /// <param name="since">取得する時間範囲の開始日時 (optional, default to &quot;0000-01-01T00:00Z&quot;)</param>
        /// <param name="until">取得する時間範囲の終了日時 (optional)</param>
        /// <param name="inclusive">範囲の端を含めるかどうか (optional, default to false)</param>
        /// <param name="order">昇順か降順か (optional, default to desc)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChannelEventsApiResponse"/>?&gt;</returns>
        Task<IGetChannelEventsApiResponse?> GetChannelEventsOrDefaultAsync(Guid channelId, Option<int> limit = default, Option<int> offset = default, Option<DateTimeOffset> since = default, Option<DateTimeOffset> until = default, Option<bool> inclusive = default, Option<string> order = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 指定したチャンネルパスを取得
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChannelPathApiResponse"/>&gt;</returns>
        Task<IGetChannelPathApiResponse> GetChannelPathAsync(Guid channelId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 指定したチャンネルパスを取得
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChannelPathApiResponse"/>?&gt;</returns>
        Task<IGetChannelPathApiResponse?> GetChannelPathOrDefaultAsync(Guid channelId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// チャンネルピンのリストを取得
        /// </summary>
        /// <remarks>
        /// 指定したチャンネルにピン留めされているピンメッセージのリストを取得します。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChannelPinsApiResponse"/>&gt;</returns>
        Task<IGetChannelPinsApiResponse> GetChannelPinsAsync(Guid channelId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// チャンネルピンのリストを取得
        /// </summary>
        /// <remarks>
        /// 指定したチャンネルにピン留めされているピンメッセージのリストを取得します。
        /// </remarks>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChannelPinsApiResponse"/>?&gt;</returns>
        Task<IGetChannelPinsApiResponse?> GetChannelPinsOrDefaultAsync(Guid channelId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// チャンネル統計情報を取得
        /// </summary>
        /// <remarks>
        /// 指定したチャンネルの統計情報を取得します。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="excludeDeletedMessages">削除されたメッセージを除外するかどうか(デフォルト false) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChannelStatsApiResponse"/>&gt;</returns>
        Task<IGetChannelStatsApiResponse> GetChannelStatsAsync(Guid channelId, Option<bool> excludeDeletedMessages = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// チャンネル統計情報を取得
        /// </summary>
        /// <remarks>
        /// 指定したチャンネルの統計情報を取得します。
        /// </remarks>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="excludeDeletedMessages">削除されたメッセージを除外するかどうか(デフォルト false) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChannelStatsApiResponse"/>?&gt;</returns>
        Task<IGetChannelStatsApiResponse?> GetChannelStatsOrDefaultAsync(Guid channelId, Option<bool> excludeDeletedMessages = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// チャンネルの通知購読者のリストを取得
        /// </summary>
        /// <remarks>
        /// 指定したチャンネルを通知購読しているユーザーのUUIDのリストを取得します。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChannelSubscribersApiResponse"/>&gt;</returns>
        Task<IGetChannelSubscribersApiResponse> GetChannelSubscribersAsync(Guid channelId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// チャンネルの通知購読者のリストを取得
        /// </summary>
        /// <remarks>
        /// 指定したチャンネルを通知購読しているユーザーのUUIDのリストを取得します。
        /// </remarks>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChannelSubscribersApiResponse"/>?&gt;</returns>
        Task<IGetChannelSubscribersApiResponse?> GetChannelSubscribersOrDefaultAsync(Guid channelId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// チャンネルトピックを取得
        /// </summary>
        /// <remarks>
        /// 指定したチャンネルのトピックを取得します。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChannelTopicApiResponse"/>&gt;</returns>
        Task<IGetChannelTopicApiResponse> GetChannelTopicAsync(Guid channelId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// チャンネルトピックを取得
        /// </summary>
        /// <remarks>
        /// 指定したチャンネルのトピックを取得します。
        /// </remarks>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChannelTopicApiResponse"/>?&gt;</returns>
        Task<IGetChannelTopicApiResponse?> GetChannelTopicOrDefaultAsync(Guid channelId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// チャンネル閲覧者リストを取得
        /// </summary>
        /// <remarks>
        /// 指定したチャンネルの閲覧者のリストを取得します。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChannelViewersApiResponse"/>&gt;</returns>
        Task<IGetChannelViewersApiResponse> GetChannelViewersAsync(Guid channelId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// チャンネル閲覧者リストを取得
        /// </summary>
        /// <remarks>
        /// 指定したチャンネルの閲覧者のリストを取得します。
        /// </remarks>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChannelViewersApiResponse"/>?&gt;</returns>
        Task<IGetChannelViewersApiResponse?> GetChannelViewersOrDefaultAsync(Guid channelId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// チャンネルリストを取得
        /// </summary>
        /// <remarks>
        /// チャンネルのリストを取得します。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeDm">ダイレクトメッセージチャンネルをレスポンスに含めるかどうか (optional, default to false)</param>
        /// <param name="path">パスが一致するチャンネルのみを取得する (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChannelsApiResponse"/>&gt;</returns>
        Task<IGetChannelsApiResponse> GetChannelsAsync(Option<bool> includeDm = default, Option<string> path = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// チャンネルリストを取得
        /// </summary>
        /// <remarks>
        /// チャンネルのリストを取得します。
        /// </remarks>
        /// <param name="includeDm">ダイレクトメッセージチャンネルをレスポンスに含めるかどうか (optional, default to false)</param>
        /// <param name="path">パスが一致するチャンネルのみを取得する (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChannelsApiResponse"/>?&gt;</returns>
        Task<IGetChannelsApiResponse?> GetChannelsOrDefaultAsync(Option<bool> includeDm = default, Option<string> path = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// チャンネルメッセージのリストを取得
        /// </summary>
        /// <remarks>
        /// 指定したチャンネルのメッセージのリストを取得します。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="limit">取得する件数 (optional)</param>
        /// <param name="offset">取得するオフセット (optional, default to 0)</param>
        /// <param name="since">取得する時間範囲の開始日時 (optional, default to &quot;0000-01-01T00:00Z&quot;)</param>
        /// <param name="until">取得する時間範囲の終了日時 (optional)</param>
        /// <param name="inclusive">範囲の端を含めるかどうか (optional, default to false)</param>
        /// <param name="order">昇順か降順か (optional, default to desc)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMessagesApiResponse"/>&gt;</returns>
        Task<IGetMessagesApiResponse> GetMessagesAsync(Guid channelId, Option<int> limit = default, Option<int> offset = default, Option<DateTimeOffset> since = default, Option<DateTimeOffset> until = default, Option<bool> inclusive = default, Option<string> order = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// チャンネルメッセージのリストを取得
        /// </summary>
        /// <remarks>
        /// 指定したチャンネルのメッセージのリストを取得します。
        /// </remarks>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="limit">取得する件数 (optional)</param>
        /// <param name="offset">取得するオフセット (optional, default to 0)</param>
        /// <param name="since">取得する時間範囲の開始日時 (optional, default to &quot;0000-01-01T00:00Z&quot;)</param>
        /// <param name="until">取得する時間範囲の終了日時 (optional)</param>
        /// <param name="inclusive">範囲の端を含めるかどうか (optional, default to false)</param>
        /// <param name="order">昇順か降順か (optional, default to desc)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMessagesApiResponse"/>?&gt;</returns>
        Task<IGetMessagesApiResponse?> GetMessagesOrDefaultAsync(Guid channelId, Option<int> limit = default, Option<int> offset = default, Option<DateTimeOffset> since = default, Option<DateTimeOffset> until = default, Option<bool> inclusive = default, Option<string> order = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// DMチャンネル情報を取得
        /// </summary>
        /// <remarks>
        /// 指定したユーザーとのダイレクトメッセージチャンネルの情報を返します。 ダイレクトメッセージチャンネルが存在しなかった場合、自動的に作成されます。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserDMChannelApiResponse"/>&gt;</returns>
        Task<IGetUserDMChannelApiResponse> GetUserDMChannelAsync(Guid userId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// DMチャンネル情報を取得
        /// </summary>
        /// <remarks>
        /// 指定したユーザーとのダイレクトメッセージチャンネルの情報を返します。 ダイレクトメッセージチャンネルが存在しなかった場合、自動的に作成されます。
        /// </remarks>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserDMChannelApiResponse"/>?&gt;</returns>
        Task<IGetUserDMChannelApiResponse?> GetUserDMChannelOrDefaultAsync(Guid userId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// チャンネルにメッセージを投稿
        /// </summary>
        /// <remarks>
        /// 指定したチャンネルにメッセージを投稿します。 embedをtrueに指定すると、メッセージ埋め込みが自動で行われます。 アーカイブされているチャンネルに投稿することはできません。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="postMessageRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostMessageApiResponse"/>&gt;</returns>
        Task<IPostMessageApiResponse> PostMessageAsync(Guid channelId, Option<PostMessageRequest> postMessageRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// チャンネルにメッセージを投稿
        /// </summary>
        /// <remarks>
        /// 指定したチャンネルにメッセージを投稿します。 embedをtrueに指定すると、メッセージ埋め込みが自動で行われます。 アーカイブされているチャンネルに投稿することはできません。
        /// </remarks>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="postMessageRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostMessageApiResponse"/>?&gt;</returns>
        Task<IPostMessageApiResponse?> PostMessageOrDefaultAsync(Guid channelId, Option<PostMessageRequest> postMessageRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// チャンネルの通知購読者を設定
        /// </summary>
        /// <remarks>
        /// 指定したチャンネルの通知購読者を設定します。 リクエストに含めなかったユーザーの通知購読状態はオフになります。 また、存在しないユーザーを指定した場合は無視されます。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="putChannelSubscribersRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISetChannelSubscribersApiResponse"/>&gt;</returns>
        Task<ISetChannelSubscribersApiResponse> SetChannelSubscribersAsync(Guid channelId, Option<PutChannelSubscribersRequest> putChannelSubscribersRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// チャンネルの通知購読者を設定
        /// </summary>
        /// <remarks>
        /// 指定したチャンネルの通知購読者を設定します。 リクエストに含めなかったユーザーの通知購読状態はオフになります。 また、存在しないユーザーを指定した場合は無視されます。
        /// </remarks>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="putChannelSubscribersRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISetChannelSubscribersApiResponse"/>?&gt;</returns>
        Task<ISetChannelSubscribersApiResponse?> SetChannelSubscribersOrDefaultAsync(Guid channelId, Option<PutChannelSubscribersRequest> putChannelSubscribersRequest = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="ICreateChannelApiResponse"/>
    /// </summary>
    public interface ICreateChannelApiResponse : Traq.Client.IApiResponse, ICreated<Traq.Model.Channel?>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }
    }

    /// <summary>
    /// The <see cref="IEditChannelApiResponse"/>
    /// </summary>
    public interface IEditChannelApiResponse : Traq.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }
    }

    /// <summary>
    /// The <see cref="IEditChannelSubscribersApiResponse"/>
    /// </summary>
    public interface IEditChannelSubscribersApiResponse : Traq.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IEditChannelTopicApiResponse"/>
    /// </summary>
    public interface IEditChannelTopicApiResponse : Traq.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetChannelApiResponse"/>
    /// </summary>
    public interface IGetChannelApiResponse : Traq.Client.IApiResponse, IOk<Traq.Model.Channel?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetChannelBotsApiResponse"/>
    /// </summary>
    public interface IGetChannelBotsApiResponse : Traq.Client.IApiResponse, IOk<List<BotUser>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetChannelEventsApiResponse"/>
    /// </summary>
    public interface IGetChannelEventsApiResponse : Traq.Client.IApiResponse, IOk<List<ChannelEvent>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetChannelPathApiResponse"/>
    /// </summary>
    public interface IGetChannelPathApiResponse : Traq.Client.IApiResponse, IOk<Traq.Model.ChannelPath?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetChannelPinsApiResponse"/>
    /// </summary>
    public interface IGetChannelPinsApiResponse : Traq.Client.IApiResponse, IOk<List<Pin>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetChannelStatsApiResponse"/>
    /// </summary>
    public interface IGetChannelStatsApiResponse : Traq.Client.IApiResponse, IOk<Traq.Model.ChannelStats?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetChannelSubscribersApiResponse"/>
    /// </summary>
    public interface IGetChannelSubscribersApiResponse : Traq.Client.IApiResponse, IOk<List<Guid>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetChannelTopicApiResponse"/>
    /// </summary>
    public interface IGetChannelTopicApiResponse : Traq.Client.IApiResponse, IOk<Traq.Model.ChannelTopic?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetChannelViewersApiResponse"/>
    /// </summary>
    public interface IGetChannelViewersApiResponse : Traq.Client.IApiResponse, IOk<List<ChannelViewer>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetChannelsApiResponse"/>
    /// </summary>
    public interface IGetChannelsApiResponse : Traq.Client.IApiResponse, IOk<Traq.Model.ChannelList?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetMessagesApiResponse"/>
    /// </summary>
    public interface IGetMessagesApiResponse : Traq.Client.IApiResponse, IOk<List<Message>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetUserDMChannelApiResponse"/>
    /// </summary>
    public interface IGetUserDMChannelApiResponse : Traq.Client.IApiResponse, IOk<Traq.Model.DMChannel?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IPostMessageApiResponse"/>
    /// </summary>
    public interface IPostMessageApiResponse : Traq.Client.IApiResponse, ICreated<Traq.Model.Message?>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="ISetChannelSubscribersApiResponse"/>
    /// </summary>
    public interface ISetChannelSubscribersApiResponse : Traq.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class ChannelApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateChannel;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateChannel;

        internal void ExecuteOnCreateChannel(ChannelApi.CreateChannelApiResponse apiResponse)
        {
            OnCreateChannel?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateChannel(Exception exception)
        {
            OnErrorCreateChannel?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEditChannel;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEditChannel;

        internal void ExecuteOnEditChannel(ChannelApi.EditChannelApiResponse apiResponse)
        {
            OnEditChannel?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEditChannel(Exception exception)
        {
            OnErrorEditChannel?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEditChannelSubscribers;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEditChannelSubscribers;

        internal void ExecuteOnEditChannelSubscribers(ChannelApi.EditChannelSubscribersApiResponse apiResponse)
        {
            OnEditChannelSubscribers?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEditChannelSubscribers(Exception exception)
        {
            OnErrorEditChannelSubscribers?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEditChannelTopic;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEditChannelTopic;

        internal void ExecuteOnEditChannelTopic(ChannelApi.EditChannelTopicApiResponse apiResponse)
        {
            OnEditChannelTopic?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEditChannelTopic(Exception exception)
        {
            OnErrorEditChannelTopic?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetChannel;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetChannel;

        internal void ExecuteOnGetChannel(ChannelApi.GetChannelApiResponse apiResponse)
        {
            OnGetChannel?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetChannel(Exception exception)
        {
            OnErrorGetChannel?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetChannelBots;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetChannelBots;

        internal void ExecuteOnGetChannelBots(ChannelApi.GetChannelBotsApiResponse apiResponse)
        {
            OnGetChannelBots?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetChannelBots(Exception exception)
        {
            OnErrorGetChannelBots?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetChannelEvents;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetChannelEvents;

        internal void ExecuteOnGetChannelEvents(ChannelApi.GetChannelEventsApiResponse apiResponse)
        {
            OnGetChannelEvents?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetChannelEvents(Exception exception)
        {
            OnErrorGetChannelEvents?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetChannelPath;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetChannelPath;

        internal void ExecuteOnGetChannelPath(ChannelApi.GetChannelPathApiResponse apiResponse)
        {
            OnGetChannelPath?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetChannelPath(Exception exception)
        {
            OnErrorGetChannelPath?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetChannelPins;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetChannelPins;

        internal void ExecuteOnGetChannelPins(ChannelApi.GetChannelPinsApiResponse apiResponse)
        {
            OnGetChannelPins?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetChannelPins(Exception exception)
        {
            OnErrorGetChannelPins?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetChannelStats;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetChannelStats;

        internal void ExecuteOnGetChannelStats(ChannelApi.GetChannelStatsApiResponse apiResponse)
        {
            OnGetChannelStats?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetChannelStats(Exception exception)
        {
            OnErrorGetChannelStats?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetChannelSubscribers;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetChannelSubscribers;

        internal void ExecuteOnGetChannelSubscribers(ChannelApi.GetChannelSubscribersApiResponse apiResponse)
        {
            OnGetChannelSubscribers?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetChannelSubscribers(Exception exception)
        {
            OnErrorGetChannelSubscribers?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetChannelTopic;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetChannelTopic;

        internal void ExecuteOnGetChannelTopic(ChannelApi.GetChannelTopicApiResponse apiResponse)
        {
            OnGetChannelTopic?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetChannelTopic(Exception exception)
        {
            OnErrorGetChannelTopic?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetChannelViewers;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetChannelViewers;

        internal void ExecuteOnGetChannelViewers(ChannelApi.GetChannelViewersApiResponse apiResponse)
        {
            OnGetChannelViewers?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetChannelViewers(Exception exception)
        {
            OnErrorGetChannelViewers?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetChannels;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetChannels;

        internal void ExecuteOnGetChannels(ChannelApi.GetChannelsApiResponse apiResponse)
        {
            OnGetChannels?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetChannels(Exception exception)
        {
            OnErrorGetChannels?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetMessages;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetMessages;

        internal void ExecuteOnGetMessages(ChannelApi.GetMessagesApiResponse apiResponse)
        {
            OnGetMessages?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetMessages(Exception exception)
        {
            OnErrorGetMessages?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetUserDMChannel;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetUserDMChannel;

        internal void ExecuteOnGetUserDMChannel(ChannelApi.GetUserDMChannelApiResponse apiResponse)
        {
            OnGetUserDMChannel?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetUserDMChannel(Exception exception)
        {
            OnErrorGetUserDMChannel?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPostMessage;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPostMessage;

        internal void ExecuteOnPostMessage(ChannelApi.PostMessageApiResponse apiResponse)
        {
            OnPostMessage?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPostMessage(Exception exception)
        {
            OnErrorPostMessage?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnSetChannelSubscribers;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorSetChannelSubscribers;

        internal void ExecuteOnSetChannelSubscribers(ChannelApi.SetChannelSubscribersApiResponse apiResponse)
        {
            OnSetChannelSubscribers?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSetChannelSubscribers(Exception exception)
        {
            OnErrorSetChannelSubscribers?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class ChannelApi : IChannelApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<ChannelApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public ChannelApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// A token provider of type <see cref="OauthTokenProvider"/>
        /// </summary>
        public TokenProvider<OAuthToken> OauthTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ChannelApi(ILogger<ChannelApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, ChannelApiEvents channelApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider,
            TokenProvider<BearerToken> bearerTokenProvider,
            TokenProvider<OAuthToken> oauthTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<ChannelApi>();
            HttpClient = httpClient;
            Events = channelApiEvents;
            ApiKeyProvider = apiKeyProvider;
            BearerTokenProvider = bearerTokenProvider;
            OauthTokenProvider = oauthTokenProvider;
        }

        partial void FormatCreateChannel(Option<PostChannelRequest> postChannelRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="postChannelRequest"></param>
        /// <returns></returns>
        private void ValidateCreateChannel(Option<PostChannelRequest> postChannelRequest)
        {
            if (postChannelRequest.IsSet && postChannelRequest.Value == null)
                throw new ArgumentNullException(nameof(postChannelRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="postChannelRequest"></param>
        private void AfterCreateChannelDefaultImplementation(ICreateChannelApiResponse apiResponseLocalVar, Option<PostChannelRequest> postChannelRequest)
        {
            bool suppressDefaultLog = false;
            AfterCreateChannel(ref suppressDefaultLog, apiResponseLocalVar, postChannelRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="postChannelRequest"></param>
        partial void AfterCreateChannel(ref bool suppressDefaultLog, ICreateChannelApiResponse apiResponseLocalVar, Option<PostChannelRequest> postChannelRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="postChannelRequest"></param>
        private void OnErrorCreateChannelDefaultImplementation(Exception exception, string pathFormat, string path, Option<PostChannelRequest> postChannelRequest)
        {
            bool suppressDefaultLog = false;
            OnErrorCreateChannel(ref suppressDefaultLog, exception, pathFormat, path, postChannelRequest);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="postChannelRequest"></param>
        partial void OnErrorCreateChannel(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<PostChannelRequest> postChannelRequest);

        /// <summary>
        /// チャンネルを作成 チャンネルを作成します。 階層が6以上になるチャンネルは作成できません。
        /// </summary>
        /// <param name="postChannelRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateChannelApiResponse"/>&gt;</returns>
        public async Task<ICreateChannelApiResponse?> CreateChannelOrDefaultAsync(Option<PostChannelRequest> postChannelRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateChannelAsync(postChannelRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// チャンネルを作成 チャンネルを作成します。 階層が6以上になるチャンネルは作成できません。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="postChannelRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateChannelApiResponse"/>&gt;</returns>
        public async Task<ICreateChannelApiResponse> CreateChannelAsync(Option<PostChannelRequest> postChannelRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateChannel(postChannelRequest);

                FormatCreateChannel(postChannelRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/channels";

                    if (postChannelRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (postChannelRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(postChannelRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateChannelApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateChannelApiResponse>();

                        CreateChannelApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/channels", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateChannelDefaultImplementation(apiResponseLocalVar, postChannelRequest);

                        Events.ExecuteOnCreateChannel(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateChannelDefaultImplementation(e, "/channels", uriBuilderLocalVar.Path, postChannelRequest);
                Events.ExecuteOnErrorCreateChannel(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateChannelApiResponse"/>
        /// </summary>
        public partial class CreateChannelApiResponse : Traq.Client.ApiResponse, ICreateChannelApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateChannelApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateChannelApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateChannelApiResponse(ILogger<CreateChannelApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public Traq.Model.Channel? Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<Traq.Model.Channel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out Traq.Model.Channel? result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEditChannel(ref Guid channelId, Option<PatchChannelRequest> patchChannelRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="patchChannelRequest"></param>
        /// <returns></returns>
        private void ValidateEditChannel(Option<PatchChannelRequest> patchChannelRequest)
        {
            if (patchChannelRequest.IsSet && patchChannelRequest.Value == null)
                throw new ArgumentNullException(nameof(patchChannelRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="channelId"></param>
        /// <param name="patchChannelRequest"></param>
        private void AfterEditChannelDefaultImplementation(IEditChannelApiResponse apiResponseLocalVar, Guid channelId, Option<PatchChannelRequest> patchChannelRequest)
        {
            bool suppressDefaultLog = false;
            AfterEditChannel(ref suppressDefaultLog, apiResponseLocalVar, channelId, patchChannelRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="channelId"></param>
        /// <param name="patchChannelRequest"></param>
        partial void AfterEditChannel(ref bool suppressDefaultLog, IEditChannelApiResponse apiResponseLocalVar, Guid channelId, Option<PatchChannelRequest> patchChannelRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="channelId"></param>
        /// <param name="patchChannelRequest"></param>
        private void OnErrorEditChannelDefaultImplementation(Exception exception, string pathFormat, string path, Guid channelId, Option<PatchChannelRequest> patchChannelRequest)
        {
            bool suppressDefaultLog = false;
            OnErrorEditChannel(ref suppressDefaultLog, exception, pathFormat, path, channelId, patchChannelRequest);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="channelId"></param>
        /// <param name="patchChannelRequest"></param>
        partial void OnErrorEditChannel(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Guid channelId, Option<PatchChannelRequest> patchChannelRequest);

        /// <summary>
        /// チャンネル情報を変更 指定したチャンネルの情報を変更します。 変更には権限が必要です。 ルートチャンネルに移動させる場合は、&#x60;parent&#x60;に&#x60;00000000-0000-0000-0000-000000000000&#x60;を指定してください。
        /// </summary>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="patchChannelRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEditChannelApiResponse"/>&gt;</returns>
        public async Task<IEditChannelApiResponse?> EditChannelOrDefaultAsync(Guid channelId, Option<PatchChannelRequest> patchChannelRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EditChannelAsync(channelId, patchChannelRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// チャンネル情報を変更 指定したチャンネルの情報を変更します。 変更には権限が必要です。 ルートチャンネルに移動させる場合は、&#x60;parent&#x60;に&#x60;00000000-0000-0000-0000-000000000000&#x60;を指定してください。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="patchChannelRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEditChannelApiResponse"/>&gt;</returns>
        public async Task<IEditChannelApiResponse> EditChannelAsync(Guid channelId, Option<PatchChannelRequest> patchChannelRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEditChannel(patchChannelRequest);

                FormatEditChannel(ref channelId, patchChannelRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/channels/{channelId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BchannelId%7D", Uri.EscapeDataString(channelId.ToString()));

                    if (patchChannelRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (patchChannelRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(patchChannelRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Patch;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EditChannelApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EditChannelApiResponse>();

                        EditChannelApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/channels/{channelId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEditChannelDefaultImplementation(apiResponseLocalVar, channelId, patchChannelRequest);

                        Events.ExecuteOnEditChannel(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEditChannelDefaultImplementation(e, "/channels/{channelId}", uriBuilderLocalVar.Path, channelId, patchChannelRequest);
                Events.ExecuteOnErrorEditChannel(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EditChannelApiResponse"/>
        /// </summary>
        public partial class EditChannelApiResponse : Traq.Client.ApiResponse, IEditChannelApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EditChannelApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EditChannelApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EditChannelApiResponse(ILogger<EditChannelApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEditChannelSubscribers(ref Guid channelId, Option<PatchChannelSubscribersRequest> patchChannelSubscribersRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="patchChannelSubscribersRequest"></param>
        /// <returns></returns>
        private void ValidateEditChannelSubscribers(Option<PatchChannelSubscribersRequest> patchChannelSubscribersRequest)
        {
            if (patchChannelSubscribersRequest.IsSet && patchChannelSubscribersRequest.Value == null)
                throw new ArgumentNullException(nameof(patchChannelSubscribersRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="channelId"></param>
        /// <param name="patchChannelSubscribersRequest"></param>
        private void AfterEditChannelSubscribersDefaultImplementation(IEditChannelSubscribersApiResponse apiResponseLocalVar, Guid channelId, Option<PatchChannelSubscribersRequest> patchChannelSubscribersRequest)
        {
            bool suppressDefaultLog = false;
            AfterEditChannelSubscribers(ref suppressDefaultLog, apiResponseLocalVar, channelId, patchChannelSubscribersRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="channelId"></param>
        /// <param name="patchChannelSubscribersRequest"></param>
        partial void AfterEditChannelSubscribers(ref bool suppressDefaultLog, IEditChannelSubscribersApiResponse apiResponseLocalVar, Guid channelId, Option<PatchChannelSubscribersRequest> patchChannelSubscribersRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="channelId"></param>
        /// <param name="patchChannelSubscribersRequest"></param>
        private void OnErrorEditChannelSubscribersDefaultImplementation(Exception exception, string pathFormat, string path, Guid channelId, Option<PatchChannelSubscribersRequest> patchChannelSubscribersRequest)
        {
            bool suppressDefaultLog = false;
            OnErrorEditChannelSubscribers(ref suppressDefaultLog, exception, pathFormat, path, channelId, patchChannelSubscribersRequest);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="channelId"></param>
        /// <param name="patchChannelSubscribersRequest"></param>
        partial void OnErrorEditChannelSubscribers(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Guid channelId, Option<PatchChannelSubscribersRequest> patchChannelSubscribersRequest);

        /// <summary>
        /// チャンネルの通知購読者を編集 指定したチャンネルの通知購読者を編集します。 リクエストに含めなかったユーザーの通知購読状態は変更しません。 また、存在しないユーザーを指定した場合は無視されます。
        /// </summary>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="patchChannelSubscribersRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEditChannelSubscribersApiResponse"/>&gt;</returns>
        public async Task<IEditChannelSubscribersApiResponse?> EditChannelSubscribersOrDefaultAsync(Guid channelId, Option<PatchChannelSubscribersRequest> patchChannelSubscribersRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EditChannelSubscribersAsync(channelId, patchChannelSubscribersRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// チャンネルの通知購読者を編集 指定したチャンネルの通知購読者を編集します。 リクエストに含めなかったユーザーの通知購読状態は変更しません。 また、存在しないユーザーを指定した場合は無視されます。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="patchChannelSubscribersRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEditChannelSubscribersApiResponse"/>&gt;</returns>
        public async Task<IEditChannelSubscribersApiResponse> EditChannelSubscribersAsync(Guid channelId, Option<PatchChannelSubscribersRequest> patchChannelSubscribersRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEditChannelSubscribers(patchChannelSubscribersRequest);

                FormatEditChannelSubscribers(ref channelId, patchChannelSubscribersRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/channels/{channelId}/subscribers";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BchannelId%7D", Uri.EscapeDataString(channelId.ToString()));

                    if (patchChannelSubscribersRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (patchChannelSubscribersRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(patchChannelSubscribersRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Patch;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EditChannelSubscribersApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EditChannelSubscribersApiResponse>();

                        EditChannelSubscribersApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/channels/{channelId}/subscribers", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEditChannelSubscribersDefaultImplementation(apiResponseLocalVar, channelId, patchChannelSubscribersRequest);

                        Events.ExecuteOnEditChannelSubscribers(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEditChannelSubscribersDefaultImplementation(e, "/channels/{channelId}/subscribers", uriBuilderLocalVar.Path, channelId, patchChannelSubscribersRequest);
                Events.ExecuteOnErrorEditChannelSubscribers(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EditChannelSubscribersApiResponse"/>
        /// </summary>
        public partial class EditChannelSubscribersApiResponse : Traq.Client.ApiResponse, IEditChannelSubscribersApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EditChannelSubscribersApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EditChannelSubscribersApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EditChannelSubscribersApiResponse(ILogger<EditChannelSubscribersApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEditChannelTopic(ref Guid channelId, Option<PutChannelTopicRequest> putChannelTopicRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="putChannelTopicRequest"></param>
        /// <returns></returns>
        private void ValidateEditChannelTopic(Option<PutChannelTopicRequest> putChannelTopicRequest)
        {
            if (putChannelTopicRequest.IsSet && putChannelTopicRequest.Value == null)
                throw new ArgumentNullException(nameof(putChannelTopicRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="channelId"></param>
        /// <param name="putChannelTopicRequest"></param>
        private void AfterEditChannelTopicDefaultImplementation(IEditChannelTopicApiResponse apiResponseLocalVar, Guid channelId, Option<PutChannelTopicRequest> putChannelTopicRequest)
        {
            bool suppressDefaultLog = false;
            AfterEditChannelTopic(ref suppressDefaultLog, apiResponseLocalVar, channelId, putChannelTopicRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="channelId"></param>
        /// <param name="putChannelTopicRequest"></param>
        partial void AfterEditChannelTopic(ref bool suppressDefaultLog, IEditChannelTopicApiResponse apiResponseLocalVar, Guid channelId, Option<PutChannelTopicRequest> putChannelTopicRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="channelId"></param>
        /// <param name="putChannelTopicRequest"></param>
        private void OnErrorEditChannelTopicDefaultImplementation(Exception exception, string pathFormat, string path, Guid channelId, Option<PutChannelTopicRequest> putChannelTopicRequest)
        {
            bool suppressDefaultLog = false;
            OnErrorEditChannelTopic(ref suppressDefaultLog, exception, pathFormat, path, channelId, putChannelTopicRequest);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="channelId"></param>
        /// <param name="putChannelTopicRequest"></param>
        partial void OnErrorEditChannelTopic(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Guid channelId, Option<PutChannelTopicRequest> putChannelTopicRequest);

        /// <summary>
        /// チャンネルトピックを編集 指定したチャンネルのトピックを編集します。 アーカイブされているチャンネルのトピックは編集できません。
        /// </summary>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="putChannelTopicRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEditChannelTopicApiResponse"/>&gt;</returns>
        public async Task<IEditChannelTopicApiResponse?> EditChannelTopicOrDefaultAsync(Guid channelId, Option<PutChannelTopicRequest> putChannelTopicRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EditChannelTopicAsync(channelId, putChannelTopicRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// チャンネルトピックを編集 指定したチャンネルのトピックを編集します。 アーカイブされているチャンネルのトピックは編集できません。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="putChannelTopicRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEditChannelTopicApiResponse"/>&gt;</returns>
        public async Task<IEditChannelTopicApiResponse> EditChannelTopicAsync(Guid channelId, Option<PutChannelTopicRequest> putChannelTopicRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEditChannelTopic(putChannelTopicRequest);

                FormatEditChannelTopic(ref channelId, putChannelTopicRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/channels/{channelId}/topic";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BchannelId%7D", Uri.EscapeDataString(channelId.ToString()));

                    if (putChannelTopicRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (putChannelTopicRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(putChannelTopicRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EditChannelTopicApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EditChannelTopicApiResponse>();

                        EditChannelTopicApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/channels/{channelId}/topic", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEditChannelTopicDefaultImplementation(apiResponseLocalVar, channelId, putChannelTopicRequest);

                        Events.ExecuteOnEditChannelTopic(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEditChannelTopicDefaultImplementation(e, "/channels/{channelId}/topic", uriBuilderLocalVar.Path, channelId, putChannelTopicRequest);
                Events.ExecuteOnErrorEditChannelTopic(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EditChannelTopicApiResponse"/>
        /// </summary>
        public partial class EditChannelTopicApiResponse : Traq.Client.ApiResponse, IEditChannelTopicApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EditChannelTopicApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EditChannelTopicApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EditChannelTopicApiResponse(ILogger<EditChannelTopicApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetChannel(ref Guid channelId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="channelId"></param>
        private void AfterGetChannelDefaultImplementation(IGetChannelApiResponse apiResponseLocalVar, Guid channelId)
        {
            bool suppressDefaultLog = false;
            AfterGetChannel(ref suppressDefaultLog, apiResponseLocalVar, channelId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="channelId"></param>
        partial void AfterGetChannel(ref bool suppressDefaultLog, IGetChannelApiResponse apiResponseLocalVar, Guid channelId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="channelId"></param>
        private void OnErrorGetChannelDefaultImplementation(Exception exception, string pathFormat, string path, Guid channelId)
        {
            bool suppressDefaultLog = false;
            OnErrorGetChannel(ref suppressDefaultLog, exception, pathFormat, path, channelId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="channelId"></param>
        partial void OnErrorGetChannel(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Guid channelId);

        /// <summary>
        /// チャンネル情報を取得 指定したチャンネルの情報を取得します。
        /// </summary>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChannelApiResponse"/>&gt;</returns>
        public async Task<IGetChannelApiResponse?> GetChannelOrDefaultAsync(Guid channelId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetChannelAsync(channelId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// チャンネル情報を取得 指定したチャンネルの情報を取得します。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChannelApiResponse"/>&gt;</returns>
        public async Task<IGetChannelApiResponse> GetChannelAsync(Guid channelId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetChannel(ref channelId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/channels/{channelId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BchannelId%7D", Uri.EscapeDataString(channelId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetChannelApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetChannelApiResponse>();

                        GetChannelApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/channels/{channelId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetChannelDefaultImplementation(apiResponseLocalVar, channelId);

                        Events.ExecuteOnGetChannel(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetChannelDefaultImplementation(e, "/channels/{channelId}", uriBuilderLocalVar.Path, channelId);
                Events.ExecuteOnErrorGetChannel(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetChannelApiResponse"/>
        /// </summary>
        public partial class GetChannelApiResponse : Traq.Client.ApiResponse, IGetChannelApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetChannelApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetChannelApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetChannelApiResponse(ILogger<GetChannelApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Traq.Model.Channel? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Traq.Model.Channel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Traq.Model.Channel? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetChannelBots(ref Guid channelId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="channelId"></param>
        private void AfterGetChannelBotsDefaultImplementation(IGetChannelBotsApiResponse apiResponseLocalVar, Guid channelId)
        {
            bool suppressDefaultLog = false;
            AfterGetChannelBots(ref suppressDefaultLog, apiResponseLocalVar, channelId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="channelId"></param>
        partial void AfterGetChannelBots(ref bool suppressDefaultLog, IGetChannelBotsApiResponse apiResponseLocalVar, Guid channelId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="channelId"></param>
        private void OnErrorGetChannelBotsDefaultImplementation(Exception exception, string pathFormat, string path, Guid channelId)
        {
            bool suppressDefaultLog = false;
            OnErrorGetChannelBots(ref suppressDefaultLog, exception, pathFormat, path, channelId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="channelId"></param>
        partial void OnErrorGetChannelBots(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Guid channelId);

        /// <summary>
        /// チャンネル参加中のBOTのリストを取得 指定したチャンネルに参加しているBOTのリストを取得します。
        /// </summary>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChannelBotsApiResponse"/>&gt;</returns>
        public async Task<IGetChannelBotsApiResponse?> GetChannelBotsOrDefaultAsync(Guid channelId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetChannelBotsAsync(channelId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// チャンネル参加中のBOTのリストを取得 指定したチャンネルに参加しているBOTのリストを取得します。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChannelBotsApiResponse"/>&gt;</returns>
        public async Task<IGetChannelBotsApiResponse> GetChannelBotsAsync(Guid channelId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetChannelBots(ref channelId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/channels/{channelId}/bots";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BchannelId%7D", Uri.EscapeDataString(channelId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetChannelBotsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetChannelBotsApiResponse>();

                        GetChannelBotsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/channels/{channelId}/bots", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetChannelBotsDefaultImplementation(apiResponseLocalVar, channelId);

                        Events.ExecuteOnGetChannelBots(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetChannelBotsDefaultImplementation(e, "/channels/{channelId}/bots", uriBuilderLocalVar.Path, channelId);
                Events.ExecuteOnErrorGetChannelBots(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetChannelBotsApiResponse"/>
        /// </summary>
        public partial class GetChannelBotsApiResponse : Traq.Client.ApiResponse, IGetChannelBotsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetChannelBotsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetChannelBotsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetChannelBotsApiResponse(ILogger<GetChannelBotsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<BotUser>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<BotUser>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<BotUser>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetChannelEvents(ref Guid channelId, ref Option<int> limit, ref Option<int> offset, ref Option<DateTimeOffset> since, ref Option<DateTimeOffset> until, ref Option<bool> inclusive, ref Option<string> order);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="order"></param>
        /// <returns></returns>
        private void ValidateGetChannelEvents(Option<string> order)
        {
            if (order.IsSet && order.Value == null)
                throw new ArgumentNullException(nameof(order));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="channelId"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <param name="since"></param>
        /// <param name="until"></param>
        /// <param name="inclusive"></param>
        /// <param name="order"></param>
        private void AfterGetChannelEventsDefaultImplementation(IGetChannelEventsApiResponse apiResponseLocalVar, Guid channelId, Option<int> limit, Option<int> offset, Option<DateTimeOffset> since, Option<DateTimeOffset> until, Option<bool> inclusive, Option<string> order)
        {
            bool suppressDefaultLog = false;
            AfterGetChannelEvents(ref suppressDefaultLog, apiResponseLocalVar, channelId, limit, offset, since, until, inclusive, order);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="channelId"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <param name="since"></param>
        /// <param name="until"></param>
        /// <param name="inclusive"></param>
        /// <param name="order"></param>
        partial void AfterGetChannelEvents(ref bool suppressDefaultLog, IGetChannelEventsApiResponse apiResponseLocalVar, Guid channelId, Option<int> limit, Option<int> offset, Option<DateTimeOffset> since, Option<DateTimeOffset> until, Option<bool> inclusive, Option<string> order);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="channelId"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <param name="since"></param>
        /// <param name="until"></param>
        /// <param name="inclusive"></param>
        /// <param name="order"></param>
        private void OnErrorGetChannelEventsDefaultImplementation(Exception exception, string pathFormat, string path, Guid channelId, Option<int> limit, Option<int> offset, Option<DateTimeOffset> since, Option<DateTimeOffset> until, Option<bool> inclusive, Option<string> order)
        {
            bool suppressDefaultLog = false;
            OnErrorGetChannelEvents(ref suppressDefaultLog, exception, pathFormat, path, channelId, limit, offset, since, until, inclusive, order);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="channelId"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <param name="since"></param>
        /// <param name="until"></param>
        /// <param name="inclusive"></param>
        /// <param name="order"></param>
        partial void OnErrorGetChannelEvents(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Guid channelId, Option<int> limit, Option<int> offset, Option<DateTimeOffset> since, Option<DateTimeOffset> until, Option<bool> inclusive, Option<string> order);

        /// <summary>
        /// チャンネルイベントのリストを取得 指定したチャンネルのイベントリストを取得します。
        /// </summary>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="limit">取得する件数 (optional)</param>
        /// <param name="offset">取得するオフセット (optional, default to 0)</param>
        /// <param name="since">取得する時間範囲の開始日時 (optional, default to &quot;0000-01-01T00:00Z&quot;)</param>
        /// <param name="until">取得する時間範囲の終了日時 (optional)</param>
        /// <param name="inclusive">範囲の端を含めるかどうか (optional, default to false)</param>
        /// <param name="order">昇順か降順か (optional, default to desc)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChannelEventsApiResponse"/>&gt;</returns>
        public async Task<IGetChannelEventsApiResponse?> GetChannelEventsOrDefaultAsync(Guid channelId, Option<int> limit = default, Option<int> offset = default, Option<DateTimeOffset> since = default, Option<DateTimeOffset> until = default, Option<bool> inclusive = default, Option<string> order = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetChannelEventsAsync(channelId, limit, offset, since, until, inclusive, order, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// チャンネルイベントのリストを取得 指定したチャンネルのイベントリストを取得します。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="limit">取得する件数 (optional)</param>
        /// <param name="offset">取得するオフセット (optional, default to 0)</param>
        /// <param name="since">取得する時間範囲の開始日時 (optional, default to &quot;0000-01-01T00:00Z&quot;)</param>
        /// <param name="until">取得する時間範囲の終了日時 (optional)</param>
        /// <param name="inclusive">範囲の端を含めるかどうか (optional, default to false)</param>
        /// <param name="order">昇順か降順か (optional, default to desc)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChannelEventsApiResponse"/>&gt;</returns>
        public async Task<IGetChannelEventsApiResponse> GetChannelEventsAsync(Guid channelId, Option<int> limit = default, Option<int> offset = default, Option<DateTimeOffset> since = default, Option<DateTimeOffset> until = default, Option<bool> inclusive = default, Option<string> order = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetChannelEvents(order);

                FormatGetChannelEvents(ref channelId, ref limit, ref offset, ref since, ref until, ref inclusive, ref order);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/channels/{channelId}/events";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BchannelId%7D", Uri.EscapeDataString(channelId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (since.IsSet)
                        parseQueryStringLocalVar["since"] = ClientUtils.ParameterToString(since.Value);

                    if (until.IsSet)
                        parseQueryStringLocalVar["until"] = ClientUtils.ParameterToString(until.Value);

                    if (inclusive.IsSet)
                        parseQueryStringLocalVar["inclusive"] = ClientUtils.ParameterToString(inclusive.Value);

                    if (order.IsSet)
                        parseQueryStringLocalVar["order"] = ClientUtils.ParameterToString(order.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetChannelEventsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetChannelEventsApiResponse>();

                        GetChannelEventsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/channels/{channelId}/events", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetChannelEventsDefaultImplementation(apiResponseLocalVar, channelId, limit, offset, since, until, inclusive, order);

                        Events.ExecuteOnGetChannelEvents(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetChannelEventsDefaultImplementation(e, "/channels/{channelId}/events", uriBuilderLocalVar.Path, channelId, limit, offset, since, until, inclusive, order);
                Events.ExecuteOnErrorGetChannelEvents(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetChannelEventsApiResponse"/>
        /// </summary>
        public partial class GetChannelEventsApiResponse : Traq.Client.ApiResponse, IGetChannelEventsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetChannelEventsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetChannelEventsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetChannelEventsApiResponse(ILogger<GetChannelEventsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<ChannelEvent>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<ChannelEvent>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<ChannelEvent>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetChannelPath(ref Guid channelId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="channelId"></param>
        private void AfterGetChannelPathDefaultImplementation(IGetChannelPathApiResponse apiResponseLocalVar, Guid channelId)
        {
            bool suppressDefaultLog = false;
            AfterGetChannelPath(ref suppressDefaultLog, apiResponseLocalVar, channelId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="channelId"></param>
        partial void AfterGetChannelPath(ref bool suppressDefaultLog, IGetChannelPathApiResponse apiResponseLocalVar, Guid channelId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="channelId"></param>
        private void OnErrorGetChannelPathDefaultImplementation(Exception exception, string pathFormat, string path, Guid channelId)
        {
            bool suppressDefaultLog = false;
            OnErrorGetChannelPath(ref suppressDefaultLog, exception, pathFormat, path, channelId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="channelId"></param>
        partial void OnErrorGetChannelPath(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Guid channelId);

        /// <summary>
        /// 指定したチャンネルパスを取得 
        /// </summary>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChannelPathApiResponse"/>&gt;</returns>
        public async Task<IGetChannelPathApiResponse?> GetChannelPathOrDefaultAsync(Guid channelId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetChannelPathAsync(channelId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 指定したチャンネルパスを取得 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChannelPathApiResponse"/>&gt;</returns>
        public async Task<IGetChannelPathApiResponse> GetChannelPathAsync(Guid channelId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetChannelPath(ref channelId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/channels/{channelId}/path";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BchannelId%7D", Uri.EscapeDataString(channelId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetChannelPathApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetChannelPathApiResponse>();

                        GetChannelPathApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/channels/{channelId}/path", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetChannelPathDefaultImplementation(apiResponseLocalVar, channelId);

                        Events.ExecuteOnGetChannelPath(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetChannelPathDefaultImplementation(e, "/channels/{channelId}/path", uriBuilderLocalVar.Path, channelId);
                Events.ExecuteOnErrorGetChannelPath(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetChannelPathApiResponse"/>
        /// </summary>
        public partial class GetChannelPathApiResponse : Traq.Client.ApiResponse, IGetChannelPathApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetChannelPathApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetChannelPathApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetChannelPathApiResponse(ILogger<GetChannelPathApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Traq.Model.ChannelPath? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Traq.Model.ChannelPath>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Traq.Model.ChannelPath? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetChannelPins(ref Guid channelId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="channelId"></param>
        private void AfterGetChannelPinsDefaultImplementation(IGetChannelPinsApiResponse apiResponseLocalVar, Guid channelId)
        {
            bool suppressDefaultLog = false;
            AfterGetChannelPins(ref suppressDefaultLog, apiResponseLocalVar, channelId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="channelId"></param>
        partial void AfterGetChannelPins(ref bool suppressDefaultLog, IGetChannelPinsApiResponse apiResponseLocalVar, Guid channelId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="channelId"></param>
        private void OnErrorGetChannelPinsDefaultImplementation(Exception exception, string pathFormat, string path, Guid channelId)
        {
            bool suppressDefaultLog = false;
            OnErrorGetChannelPins(ref suppressDefaultLog, exception, pathFormat, path, channelId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="channelId"></param>
        partial void OnErrorGetChannelPins(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Guid channelId);

        /// <summary>
        /// チャンネルピンのリストを取得 指定したチャンネルにピン留めされているピンメッセージのリストを取得します。
        /// </summary>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChannelPinsApiResponse"/>&gt;</returns>
        public async Task<IGetChannelPinsApiResponse?> GetChannelPinsOrDefaultAsync(Guid channelId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetChannelPinsAsync(channelId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// チャンネルピンのリストを取得 指定したチャンネルにピン留めされているピンメッセージのリストを取得します。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChannelPinsApiResponse"/>&gt;</returns>
        public async Task<IGetChannelPinsApiResponse> GetChannelPinsAsync(Guid channelId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetChannelPins(ref channelId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/channels/{channelId}/pins";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BchannelId%7D", Uri.EscapeDataString(channelId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetChannelPinsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetChannelPinsApiResponse>();

                        GetChannelPinsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/channels/{channelId}/pins", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetChannelPinsDefaultImplementation(apiResponseLocalVar, channelId);

                        Events.ExecuteOnGetChannelPins(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetChannelPinsDefaultImplementation(e, "/channels/{channelId}/pins", uriBuilderLocalVar.Path, channelId);
                Events.ExecuteOnErrorGetChannelPins(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetChannelPinsApiResponse"/>
        /// </summary>
        public partial class GetChannelPinsApiResponse : Traq.Client.ApiResponse, IGetChannelPinsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetChannelPinsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetChannelPinsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetChannelPinsApiResponse(ILogger<GetChannelPinsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<Pin>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<Pin>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<Pin>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetChannelStats(ref Guid channelId, ref Option<bool> excludeDeletedMessages);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="channelId"></param>
        /// <param name="excludeDeletedMessages"></param>
        private void AfterGetChannelStatsDefaultImplementation(IGetChannelStatsApiResponse apiResponseLocalVar, Guid channelId, Option<bool> excludeDeletedMessages)
        {
            bool suppressDefaultLog = false;
            AfterGetChannelStats(ref suppressDefaultLog, apiResponseLocalVar, channelId, excludeDeletedMessages);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="channelId"></param>
        /// <param name="excludeDeletedMessages"></param>
        partial void AfterGetChannelStats(ref bool suppressDefaultLog, IGetChannelStatsApiResponse apiResponseLocalVar, Guid channelId, Option<bool> excludeDeletedMessages);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="channelId"></param>
        /// <param name="excludeDeletedMessages"></param>
        private void OnErrorGetChannelStatsDefaultImplementation(Exception exception, string pathFormat, string path, Guid channelId, Option<bool> excludeDeletedMessages)
        {
            bool suppressDefaultLog = false;
            OnErrorGetChannelStats(ref suppressDefaultLog, exception, pathFormat, path, channelId, excludeDeletedMessages);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="channelId"></param>
        /// <param name="excludeDeletedMessages"></param>
        partial void OnErrorGetChannelStats(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Guid channelId, Option<bool> excludeDeletedMessages);

        /// <summary>
        /// チャンネル統計情報を取得 指定したチャンネルの統計情報を取得します。
        /// </summary>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="excludeDeletedMessages">削除されたメッセージを除外するかどうか(デフォルト false) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChannelStatsApiResponse"/>&gt;</returns>
        public async Task<IGetChannelStatsApiResponse?> GetChannelStatsOrDefaultAsync(Guid channelId, Option<bool> excludeDeletedMessages = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetChannelStatsAsync(channelId, excludeDeletedMessages, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// チャンネル統計情報を取得 指定したチャンネルの統計情報を取得します。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="excludeDeletedMessages">削除されたメッセージを除外するかどうか(デフォルト false) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChannelStatsApiResponse"/>&gt;</returns>
        public async Task<IGetChannelStatsApiResponse> GetChannelStatsAsync(Guid channelId, Option<bool> excludeDeletedMessages = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetChannelStats(ref channelId, ref excludeDeletedMessages);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/channels/{channelId}/stats";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BchannelId%7D", Uri.EscapeDataString(channelId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (excludeDeletedMessages.IsSet)
                        parseQueryStringLocalVar["exclude-deleted-messages"] = ClientUtils.ParameterToString(excludeDeletedMessages.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetChannelStatsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetChannelStatsApiResponse>();

                        GetChannelStatsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/channels/{channelId}/stats", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetChannelStatsDefaultImplementation(apiResponseLocalVar, channelId, excludeDeletedMessages);

                        Events.ExecuteOnGetChannelStats(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetChannelStatsDefaultImplementation(e, "/channels/{channelId}/stats", uriBuilderLocalVar.Path, channelId, excludeDeletedMessages);
                Events.ExecuteOnErrorGetChannelStats(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetChannelStatsApiResponse"/>
        /// </summary>
        public partial class GetChannelStatsApiResponse : Traq.Client.ApiResponse, IGetChannelStatsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetChannelStatsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetChannelStatsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetChannelStatsApiResponse(ILogger<GetChannelStatsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Traq.Model.ChannelStats? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Traq.Model.ChannelStats>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Traq.Model.ChannelStats? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetChannelSubscribers(ref Guid channelId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="channelId"></param>
        private void AfterGetChannelSubscribersDefaultImplementation(IGetChannelSubscribersApiResponse apiResponseLocalVar, Guid channelId)
        {
            bool suppressDefaultLog = false;
            AfterGetChannelSubscribers(ref suppressDefaultLog, apiResponseLocalVar, channelId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="channelId"></param>
        partial void AfterGetChannelSubscribers(ref bool suppressDefaultLog, IGetChannelSubscribersApiResponse apiResponseLocalVar, Guid channelId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="channelId"></param>
        private void OnErrorGetChannelSubscribersDefaultImplementation(Exception exception, string pathFormat, string path, Guid channelId)
        {
            bool suppressDefaultLog = false;
            OnErrorGetChannelSubscribers(ref suppressDefaultLog, exception, pathFormat, path, channelId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="channelId"></param>
        partial void OnErrorGetChannelSubscribers(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Guid channelId);

        /// <summary>
        /// チャンネルの通知購読者のリストを取得 指定したチャンネルを通知購読しているユーザーのUUIDのリストを取得します。
        /// </summary>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChannelSubscribersApiResponse"/>&gt;</returns>
        public async Task<IGetChannelSubscribersApiResponse?> GetChannelSubscribersOrDefaultAsync(Guid channelId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetChannelSubscribersAsync(channelId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// チャンネルの通知購読者のリストを取得 指定したチャンネルを通知購読しているユーザーのUUIDのリストを取得します。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChannelSubscribersApiResponse"/>&gt;</returns>
        public async Task<IGetChannelSubscribersApiResponse> GetChannelSubscribersAsync(Guid channelId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetChannelSubscribers(ref channelId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/channels/{channelId}/subscribers";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BchannelId%7D", Uri.EscapeDataString(channelId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetChannelSubscribersApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetChannelSubscribersApiResponse>();

                        GetChannelSubscribersApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/channels/{channelId}/subscribers", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetChannelSubscribersDefaultImplementation(apiResponseLocalVar, channelId);

                        Events.ExecuteOnGetChannelSubscribers(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetChannelSubscribersDefaultImplementation(e, "/channels/{channelId}/subscribers", uriBuilderLocalVar.Path, channelId);
                Events.ExecuteOnErrorGetChannelSubscribers(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetChannelSubscribersApiResponse"/>
        /// </summary>
        public partial class GetChannelSubscribersApiResponse : Traq.Client.ApiResponse, IGetChannelSubscribersApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetChannelSubscribersApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetChannelSubscribersApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetChannelSubscribersApiResponse(ILogger<GetChannelSubscribersApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<Guid>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<Guid>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<Guid>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetChannelTopic(ref Guid channelId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="channelId"></param>
        private void AfterGetChannelTopicDefaultImplementation(IGetChannelTopicApiResponse apiResponseLocalVar, Guid channelId)
        {
            bool suppressDefaultLog = false;
            AfterGetChannelTopic(ref suppressDefaultLog, apiResponseLocalVar, channelId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="channelId"></param>
        partial void AfterGetChannelTopic(ref bool suppressDefaultLog, IGetChannelTopicApiResponse apiResponseLocalVar, Guid channelId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="channelId"></param>
        private void OnErrorGetChannelTopicDefaultImplementation(Exception exception, string pathFormat, string path, Guid channelId)
        {
            bool suppressDefaultLog = false;
            OnErrorGetChannelTopic(ref suppressDefaultLog, exception, pathFormat, path, channelId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="channelId"></param>
        partial void OnErrorGetChannelTopic(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Guid channelId);

        /// <summary>
        /// チャンネルトピックを取得 指定したチャンネルのトピックを取得します。
        /// </summary>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChannelTopicApiResponse"/>&gt;</returns>
        public async Task<IGetChannelTopicApiResponse?> GetChannelTopicOrDefaultAsync(Guid channelId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetChannelTopicAsync(channelId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// チャンネルトピックを取得 指定したチャンネルのトピックを取得します。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChannelTopicApiResponse"/>&gt;</returns>
        public async Task<IGetChannelTopicApiResponse> GetChannelTopicAsync(Guid channelId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetChannelTopic(ref channelId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/channels/{channelId}/topic";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BchannelId%7D", Uri.EscapeDataString(channelId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetChannelTopicApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetChannelTopicApiResponse>();

                        GetChannelTopicApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/channels/{channelId}/topic", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetChannelTopicDefaultImplementation(apiResponseLocalVar, channelId);

                        Events.ExecuteOnGetChannelTopic(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetChannelTopicDefaultImplementation(e, "/channels/{channelId}/topic", uriBuilderLocalVar.Path, channelId);
                Events.ExecuteOnErrorGetChannelTopic(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetChannelTopicApiResponse"/>
        /// </summary>
        public partial class GetChannelTopicApiResponse : Traq.Client.ApiResponse, IGetChannelTopicApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetChannelTopicApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetChannelTopicApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetChannelTopicApiResponse(ILogger<GetChannelTopicApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Traq.Model.ChannelTopic? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Traq.Model.ChannelTopic>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Traq.Model.ChannelTopic? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetChannelViewers(ref Guid channelId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="channelId"></param>
        private void AfterGetChannelViewersDefaultImplementation(IGetChannelViewersApiResponse apiResponseLocalVar, Guid channelId)
        {
            bool suppressDefaultLog = false;
            AfterGetChannelViewers(ref suppressDefaultLog, apiResponseLocalVar, channelId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="channelId"></param>
        partial void AfterGetChannelViewers(ref bool suppressDefaultLog, IGetChannelViewersApiResponse apiResponseLocalVar, Guid channelId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="channelId"></param>
        private void OnErrorGetChannelViewersDefaultImplementation(Exception exception, string pathFormat, string path, Guid channelId)
        {
            bool suppressDefaultLog = false;
            OnErrorGetChannelViewers(ref suppressDefaultLog, exception, pathFormat, path, channelId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="channelId"></param>
        partial void OnErrorGetChannelViewers(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Guid channelId);

        /// <summary>
        /// チャンネル閲覧者リストを取得 指定したチャンネルの閲覧者のリストを取得します。
        /// </summary>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChannelViewersApiResponse"/>&gt;</returns>
        public async Task<IGetChannelViewersApiResponse?> GetChannelViewersOrDefaultAsync(Guid channelId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetChannelViewersAsync(channelId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// チャンネル閲覧者リストを取得 指定したチャンネルの閲覧者のリストを取得します。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChannelViewersApiResponse"/>&gt;</returns>
        public async Task<IGetChannelViewersApiResponse> GetChannelViewersAsync(Guid channelId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetChannelViewers(ref channelId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/channels/{channelId}/viewers";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BchannelId%7D", Uri.EscapeDataString(channelId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetChannelViewersApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetChannelViewersApiResponse>();

                        GetChannelViewersApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/channels/{channelId}/viewers", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetChannelViewersDefaultImplementation(apiResponseLocalVar, channelId);

                        Events.ExecuteOnGetChannelViewers(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetChannelViewersDefaultImplementation(e, "/channels/{channelId}/viewers", uriBuilderLocalVar.Path, channelId);
                Events.ExecuteOnErrorGetChannelViewers(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetChannelViewersApiResponse"/>
        /// </summary>
        public partial class GetChannelViewersApiResponse : Traq.Client.ApiResponse, IGetChannelViewersApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetChannelViewersApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetChannelViewersApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetChannelViewersApiResponse(ILogger<GetChannelViewersApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<ChannelViewer>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<ChannelViewer>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<ChannelViewer>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetChannels(ref Option<bool> includeDm, ref Option<string> path);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="path"></param>
        /// <returns></returns>
        private void ValidateGetChannels(Option<string> path)
        {
            if (path.IsSet && path.Value == null)
                throw new ArgumentNullException(nameof(path));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="includeDm"></param>
        /// <param name="path"></param>
        private void AfterGetChannelsDefaultImplementation(IGetChannelsApiResponse apiResponseLocalVar, Option<bool> includeDm, Option<string> path)
        {
            bool suppressDefaultLog = false;
            AfterGetChannels(ref suppressDefaultLog, apiResponseLocalVar, includeDm, path);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="includeDm"></param>
        /// <param name="path"></param>
        partial void AfterGetChannels(ref bool suppressDefaultLog, IGetChannelsApiResponse apiResponseLocalVar, Option<bool> includeDm, Option<string> path);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="includeDm"></param>
        /// <param name="path"></param>
        private void OnErrorGetChannelsDefaultImplementation(Exception exception, string pathFormat, string path, Option<bool> includeDm, Option<string> path)
        {
            bool suppressDefaultLog = false;
            OnErrorGetChannels(ref suppressDefaultLog, exception, pathFormat, path, includeDm, path);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="includeDm"></param>
        /// <param name="path"></param>
        partial void OnErrorGetChannels(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<bool> includeDm, Option<string> path);

        /// <summary>
        /// チャンネルリストを取得 チャンネルのリストを取得します。
        /// </summary>
        /// <param name="includeDm">ダイレクトメッセージチャンネルをレスポンスに含めるかどうか (optional, default to false)</param>
        /// <param name="path">パスが一致するチャンネルのみを取得する (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChannelsApiResponse"/>&gt;</returns>
        public async Task<IGetChannelsApiResponse?> GetChannelsOrDefaultAsync(Option<bool> includeDm = default, Option<string> path = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetChannelsAsync(includeDm, path, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// チャンネルリストを取得 チャンネルのリストを取得します。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeDm">ダイレクトメッセージチャンネルをレスポンスに含めるかどうか (optional, default to false)</param>
        /// <param name="path">パスが一致するチャンネルのみを取得する (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetChannelsApiResponse"/>&gt;</returns>
        public async Task<IGetChannelsApiResponse> GetChannelsAsync(Option<bool> includeDm = default, Option<string> path = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetChannels(path);

                FormatGetChannels(ref includeDm, ref path);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/channels";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (includeDm.IsSet)
                        parseQueryStringLocalVar["include-dm"] = ClientUtils.ParameterToString(includeDm.Value);

                    if (path.IsSet)
                        parseQueryStringLocalVar["path"] = ClientUtils.ParameterToString(path.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetChannelsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetChannelsApiResponse>();

                        GetChannelsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/channels", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetChannelsDefaultImplementation(apiResponseLocalVar, includeDm, path);

                        Events.ExecuteOnGetChannels(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetChannelsDefaultImplementation(e, "/channels", uriBuilderLocalVar.Path, includeDm, path);
                Events.ExecuteOnErrorGetChannels(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetChannelsApiResponse"/>
        /// </summary>
        public partial class GetChannelsApiResponse : Traq.Client.ApiResponse, IGetChannelsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetChannelsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetChannelsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetChannelsApiResponse(ILogger<GetChannelsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Traq.Model.ChannelList? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Traq.Model.ChannelList>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Traq.Model.ChannelList? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetMessages(ref Guid channelId, ref Option<int> limit, ref Option<int> offset, ref Option<DateTimeOffset> since, ref Option<DateTimeOffset> until, ref Option<bool> inclusive, ref Option<string> order);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="order"></param>
        /// <returns></returns>
        private void ValidateGetMessages(Option<string> order)
        {
            if (order.IsSet && order.Value == null)
                throw new ArgumentNullException(nameof(order));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="channelId"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <param name="since"></param>
        /// <param name="until"></param>
        /// <param name="inclusive"></param>
        /// <param name="order"></param>
        private void AfterGetMessagesDefaultImplementation(IGetMessagesApiResponse apiResponseLocalVar, Guid channelId, Option<int> limit, Option<int> offset, Option<DateTimeOffset> since, Option<DateTimeOffset> until, Option<bool> inclusive, Option<string> order)
        {
            bool suppressDefaultLog = false;
            AfterGetMessages(ref suppressDefaultLog, apiResponseLocalVar, channelId, limit, offset, since, until, inclusive, order);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="channelId"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <param name="since"></param>
        /// <param name="until"></param>
        /// <param name="inclusive"></param>
        /// <param name="order"></param>
        partial void AfterGetMessages(ref bool suppressDefaultLog, IGetMessagesApiResponse apiResponseLocalVar, Guid channelId, Option<int> limit, Option<int> offset, Option<DateTimeOffset> since, Option<DateTimeOffset> until, Option<bool> inclusive, Option<string> order);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="channelId"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <param name="since"></param>
        /// <param name="until"></param>
        /// <param name="inclusive"></param>
        /// <param name="order"></param>
        private void OnErrorGetMessagesDefaultImplementation(Exception exception, string pathFormat, string path, Guid channelId, Option<int> limit, Option<int> offset, Option<DateTimeOffset> since, Option<DateTimeOffset> until, Option<bool> inclusive, Option<string> order)
        {
            bool suppressDefaultLog = false;
            OnErrorGetMessages(ref suppressDefaultLog, exception, pathFormat, path, channelId, limit, offset, since, until, inclusive, order);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="channelId"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <param name="since"></param>
        /// <param name="until"></param>
        /// <param name="inclusive"></param>
        /// <param name="order"></param>
        partial void OnErrorGetMessages(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Guid channelId, Option<int> limit, Option<int> offset, Option<DateTimeOffset> since, Option<DateTimeOffset> until, Option<bool> inclusive, Option<string> order);

        /// <summary>
        /// チャンネルメッセージのリストを取得 指定したチャンネルのメッセージのリストを取得します。
        /// </summary>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="limit">取得する件数 (optional)</param>
        /// <param name="offset">取得するオフセット (optional, default to 0)</param>
        /// <param name="since">取得する時間範囲の開始日時 (optional, default to &quot;0000-01-01T00:00Z&quot;)</param>
        /// <param name="until">取得する時間範囲の終了日時 (optional)</param>
        /// <param name="inclusive">範囲の端を含めるかどうか (optional, default to false)</param>
        /// <param name="order">昇順か降順か (optional, default to desc)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMessagesApiResponse"/>&gt;</returns>
        public async Task<IGetMessagesApiResponse?> GetMessagesOrDefaultAsync(Guid channelId, Option<int> limit = default, Option<int> offset = default, Option<DateTimeOffset> since = default, Option<DateTimeOffset> until = default, Option<bool> inclusive = default, Option<string> order = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetMessagesAsync(channelId, limit, offset, since, until, inclusive, order, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// チャンネルメッセージのリストを取得 指定したチャンネルのメッセージのリストを取得します。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="limit">取得する件数 (optional)</param>
        /// <param name="offset">取得するオフセット (optional, default to 0)</param>
        /// <param name="since">取得する時間範囲の開始日時 (optional, default to &quot;0000-01-01T00:00Z&quot;)</param>
        /// <param name="until">取得する時間範囲の終了日時 (optional)</param>
        /// <param name="inclusive">範囲の端を含めるかどうか (optional, default to false)</param>
        /// <param name="order">昇順か降順か (optional, default to desc)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMessagesApiResponse"/>&gt;</returns>
        public async Task<IGetMessagesApiResponse> GetMessagesAsync(Guid channelId, Option<int> limit = default, Option<int> offset = default, Option<DateTimeOffset> since = default, Option<DateTimeOffset> until = default, Option<bool> inclusive = default, Option<string> order = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetMessages(order);

                FormatGetMessages(ref channelId, ref limit, ref offset, ref since, ref until, ref inclusive, ref order);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/channels/{channelId}/messages";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BchannelId%7D", Uri.EscapeDataString(channelId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (since.IsSet)
                        parseQueryStringLocalVar["since"] = ClientUtils.ParameterToString(since.Value);

                    if (until.IsSet)
                        parseQueryStringLocalVar["until"] = ClientUtils.ParameterToString(until.Value);

                    if (inclusive.IsSet)
                        parseQueryStringLocalVar["inclusive"] = ClientUtils.ParameterToString(inclusive.Value);

                    if (order.IsSet)
                        parseQueryStringLocalVar["order"] = ClientUtils.ParameterToString(order.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetMessagesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetMessagesApiResponse>();

                        GetMessagesApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/channels/{channelId}/messages", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetMessagesDefaultImplementation(apiResponseLocalVar, channelId, limit, offset, since, until, inclusive, order);

                        Events.ExecuteOnGetMessages(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetMessagesDefaultImplementation(e, "/channels/{channelId}/messages", uriBuilderLocalVar.Path, channelId, limit, offset, since, until, inclusive, order);
                Events.ExecuteOnErrorGetMessages(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetMessagesApiResponse"/>
        /// </summary>
        public partial class GetMessagesApiResponse : Traq.Client.ApiResponse, IGetMessagesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetMessagesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetMessagesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetMessagesApiResponse(ILogger<GetMessagesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<Message>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<Message>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<Message>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetUserDMChannel(ref Guid userId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="userId"></param>
        private void AfterGetUserDMChannelDefaultImplementation(IGetUserDMChannelApiResponse apiResponseLocalVar, Guid userId)
        {
            bool suppressDefaultLog = false;
            AfterGetUserDMChannel(ref suppressDefaultLog, apiResponseLocalVar, userId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="userId"></param>
        partial void AfterGetUserDMChannel(ref bool suppressDefaultLog, IGetUserDMChannelApiResponse apiResponseLocalVar, Guid userId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="userId"></param>
        private void OnErrorGetUserDMChannelDefaultImplementation(Exception exception, string pathFormat, string path, Guid userId)
        {
            bool suppressDefaultLog = false;
            OnErrorGetUserDMChannel(ref suppressDefaultLog, exception, pathFormat, path, userId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="userId"></param>
        partial void OnErrorGetUserDMChannel(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Guid userId);

        /// <summary>
        /// DMチャンネル情報を取得 指定したユーザーとのダイレクトメッセージチャンネルの情報を返します。 ダイレクトメッセージチャンネルが存在しなかった場合、自動的に作成されます。
        /// </summary>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserDMChannelApiResponse"/>&gt;</returns>
        public async Task<IGetUserDMChannelApiResponse?> GetUserDMChannelOrDefaultAsync(Guid userId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetUserDMChannelAsync(userId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// DMチャンネル情報を取得 指定したユーザーとのダイレクトメッセージチャンネルの情報を返します。 ダイレクトメッセージチャンネルが存在しなかった場合、自動的に作成されます。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserDMChannelApiResponse"/>&gt;</returns>
        public async Task<IGetUserDMChannelApiResponse> GetUserDMChannelAsync(Guid userId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetUserDMChannel(ref userId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/users/{userId}/dm-channel";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BuserId%7D", Uri.EscapeDataString(userId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetUserDMChannelApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetUserDMChannelApiResponse>();

                        GetUserDMChannelApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/users/{userId}/dm-channel", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetUserDMChannelDefaultImplementation(apiResponseLocalVar, userId);

                        Events.ExecuteOnGetUserDMChannel(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetUserDMChannelDefaultImplementation(e, "/users/{userId}/dm-channel", uriBuilderLocalVar.Path, userId);
                Events.ExecuteOnErrorGetUserDMChannel(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetUserDMChannelApiResponse"/>
        /// </summary>
        public partial class GetUserDMChannelApiResponse : Traq.Client.ApiResponse, IGetUserDMChannelApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetUserDMChannelApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetUserDMChannelApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetUserDMChannelApiResponse(ILogger<GetUserDMChannelApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Traq.Model.DMChannel? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Traq.Model.DMChannel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Traq.Model.DMChannel? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPostMessage(ref Guid channelId, Option<PostMessageRequest> postMessageRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="postMessageRequest"></param>
        /// <returns></returns>
        private void ValidatePostMessage(Option<PostMessageRequest> postMessageRequest)
        {
            if (postMessageRequest.IsSet && postMessageRequest.Value == null)
                throw new ArgumentNullException(nameof(postMessageRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="channelId"></param>
        /// <param name="postMessageRequest"></param>
        private void AfterPostMessageDefaultImplementation(IPostMessageApiResponse apiResponseLocalVar, Guid channelId, Option<PostMessageRequest> postMessageRequest)
        {
            bool suppressDefaultLog = false;
            AfterPostMessage(ref suppressDefaultLog, apiResponseLocalVar, channelId, postMessageRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="channelId"></param>
        /// <param name="postMessageRequest"></param>
        partial void AfterPostMessage(ref bool suppressDefaultLog, IPostMessageApiResponse apiResponseLocalVar, Guid channelId, Option<PostMessageRequest> postMessageRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="channelId"></param>
        /// <param name="postMessageRequest"></param>
        private void OnErrorPostMessageDefaultImplementation(Exception exception, string pathFormat, string path, Guid channelId, Option<PostMessageRequest> postMessageRequest)
        {
            bool suppressDefaultLog = false;
            OnErrorPostMessage(ref suppressDefaultLog, exception, pathFormat, path, channelId, postMessageRequest);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="channelId"></param>
        /// <param name="postMessageRequest"></param>
        partial void OnErrorPostMessage(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Guid channelId, Option<PostMessageRequest> postMessageRequest);

        /// <summary>
        /// チャンネルにメッセージを投稿 指定したチャンネルにメッセージを投稿します。 embedをtrueに指定すると、メッセージ埋め込みが自動で行われます。 アーカイブされているチャンネルに投稿することはできません。
        /// </summary>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="postMessageRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostMessageApiResponse"/>&gt;</returns>
        public async Task<IPostMessageApiResponse?> PostMessageOrDefaultAsync(Guid channelId, Option<PostMessageRequest> postMessageRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PostMessageAsync(channelId, postMessageRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// チャンネルにメッセージを投稿 指定したチャンネルにメッセージを投稿します。 embedをtrueに指定すると、メッセージ埋め込みが自動で行われます。 アーカイブされているチャンネルに投稿することはできません。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="postMessageRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostMessageApiResponse"/>&gt;</returns>
        public async Task<IPostMessageApiResponse> PostMessageAsync(Guid channelId, Option<PostMessageRequest> postMessageRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePostMessage(postMessageRequest);

                FormatPostMessage(ref channelId, postMessageRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/channels/{channelId}/messages";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BchannelId%7D", Uri.EscapeDataString(channelId.ToString()));

                    if (postMessageRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (postMessageRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(postMessageRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PostMessageApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PostMessageApiResponse>();

                        PostMessageApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/channels/{channelId}/messages", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPostMessageDefaultImplementation(apiResponseLocalVar, channelId, postMessageRequest);

                        Events.ExecuteOnPostMessage(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPostMessageDefaultImplementation(e, "/channels/{channelId}/messages", uriBuilderLocalVar.Path, channelId, postMessageRequest);
                Events.ExecuteOnErrorPostMessage(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PostMessageApiResponse"/>
        /// </summary>
        public partial class PostMessageApiResponse : Traq.Client.ApiResponse, IPostMessageApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PostMessageApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PostMessageApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PostMessageApiResponse(ILogger<PostMessageApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public Traq.Model.Message? Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<Traq.Model.Message>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out Traq.Model.Message? result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSetChannelSubscribers(ref Guid channelId, Option<PutChannelSubscribersRequest> putChannelSubscribersRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="putChannelSubscribersRequest"></param>
        /// <returns></returns>
        private void ValidateSetChannelSubscribers(Option<PutChannelSubscribersRequest> putChannelSubscribersRequest)
        {
            if (putChannelSubscribersRequest.IsSet && putChannelSubscribersRequest.Value == null)
                throw new ArgumentNullException(nameof(putChannelSubscribersRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="channelId"></param>
        /// <param name="putChannelSubscribersRequest"></param>
        private void AfterSetChannelSubscribersDefaultImplementation(ISetChannelSubscribersApiResponse apiResponseLocalVar, Guid channelId, Option<PutChannelSubscribersRequest> putChannelSubscribersRequest)
        {
            bool suppressDefaultLog = false;
            AfterSetChannelSubscribers(ref suppressDefaultLog, apiResponseLocalVar, channelId, putChannelSubscribersRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="channelId"></param>
        /// <param name="putChannelSubscribersRequest"></param>
        partial void AfterSetChannelSubscribers(ref bool suppressDefaultLog, ISetChannelSubscribersApiResponse apiResponseLocalVar, Guid channelId, Option<PutChannelSubscribersRequest> putChannelSubscribersRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="channelId"></param>
        /// <param name="putChannelSubscribersRequest"></param>
        private void OnErrorSetChannelSubscribersDefaultImplementation(Exception exception, string pathFormat, string path, Guid channelId, Option<PutChannelSubscribersRequest> putChannelSubscribersRequest)
        {
            bool suppressDefaultLog = false;
            OnErrorSetChannelSubscribers(ref suppressDefaultLog, exception, pathFormat, path, channelId, putChannelSubscribersRequest);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="channelId"></param>
        /// <param name="putChannelSubscribersRequest"></param>
        partial void OnErrorSetChannelSubscribers(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Guid channelId, Option<PutChannelSubscribersRequest> putChannelSubscribersRequest);

        /// <summary>
        /// チャンネルの通知購読者を設定 指定したチャンネルの通知購読者を設定します。 リクエストに含めなかったユーザーの通知購読状態はオフになります。 また、存在しないユーザーを指定した場合は無視されます。
        /// </summary>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="putChannelSubscribersRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISetChannelSubscribersApiResponse"/>&gt;</returns>
        public async Task<ISetChannelSubscribersApiResponse?> SetChannelSubscribersOrDefaultAsync(Guid channelId, Option<PutChannelSubscribersRequest> putChannelSubscribersRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SetChannelSubscribersAsync(channelId, putChannelSubscribersRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// チャンネルの通知購読者を設定 指定したチャンネルの通知購読者を設定します。 リクエストに含めなかったユーザーの通知購読状態はオフになります。 また、存在しないユーザーを指定した場合は無視されます。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="putChannelSubscribersRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISetChannelSubscribersApiResponse"/>&gt;</returns>
        public async Task<ISetChannelSubscribersApiResponse> SetChannelSubscribersAsync(Guid channelId, Option<PutChannelSubscribersRequest> putChannelSubscribersRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSetChannelSubscribers(putChannelSubscribersRequest);

                FormatSetChannelSubscribers(ref channelId, putChannelSubscribersRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/channels/{channelId}/subscribers";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BchannelId%7D", Uri.EscapeDataString(channelId.ToString()));

                    if (putChannelSubscribersRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (putChannelSubscribersRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(putChannelSubscribersRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<SetChannelSubscribersApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SetChannelSubscribersApiResponse>();

                        SetChannelSubscribersApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/channels/{channelId}/subscribers", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSetChannelSubscribersDefaultImplementation(apiResponseLocalVar, channelId, putChannelSubscribersRequest);

                        Events.ExecuteOnSetChannelSubscribers(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSetChannelSubscribersDefaultImplementation(e, "/channels/{channelId}/subscribers", uriBuilderLocalVar.Path, channelId, putChannelSubscribersRequest);
                Events.ExecuteOnErrorSetChannelSubscribers(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SetChannelSubscribersApiResponse"/>
        /// </summary>
        public partial class SetChannelSubscribersApiResponse : Traq.Client.ApiResponse, ISetChannelSubscribersApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SetChannelSubscribersApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SetChannelSubscribersApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SetChannelSubscribersApiResponse(ILogger<SetChannelSubscribersApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
