// <auto-generated>
/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Traq.Client;
using Traq.Model;
using System.Diagnostics.CodeAnalysis;

namespace Traq.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IAuthenticationApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        AuthenticationApiEvents Events { get; }

        /// <summary>
        /// 外部ログインアカウント一覧を取得
        /// </summary>
        /// <remarks>
        /// 自分に紐付けられている外部ログインアカウント一覧を取得します。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMyExternalAccountsApiResponse"/>&gt;</returns>
        Task<IGetMyExternalAccountsApiResponse> GetMyExternalAccountsAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 外部ログインアカウント一覧を取得
        /// </summary>
        /// <remarks>
        /// 自分に紐付けられている外部ログインアカウント一覧を取得します。
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMyExternalAccountsApiResponse"/>?&gt;</returns>
        Task<IGetMyExternalAccountsApiResponse?> GetMyExternalAccountsOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 自分のログインセッションリストを取得
        /// </summary>
        /// <remarks>
        /// 自分のログインセッションのリストを取得します。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMySessionsApiResponse"/>&gt;</returns>
        Task<IGetMySessionsApiResponse> GetMySessionsAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 自分のログインセッションリストを取得
        /// </summary>
        /// <remarks>
        /// 自分のログインセッションのリストを取得します。
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMySessionsApiResponse"/>?&gt;</returns>
        Task<IGetMySessionsApiResponse?> GetMySessionsOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 外部ログインアカウントを紐付ける
        /// </summary>
        /// <remarks>
        /// 自分に外部ログインアカウントを紐付けます。 指定した&#x60;providerName&#x60;がサーバー側で有効である必要があります。 リクエストが受理された場合、外部サービスの認証画面にリダイレクトされ、認証される必要があります。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="postLinkExternalAccount"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILinkExternalAccountApiResponse"/>&gt;</returns>
        Task<ILinkExternalAccountApiResponse> LinkExternalAccountAsync(Option<PostLinkExternalAccount> postLinkExternalAccount = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 外部ログインアカウントを紐付ける
        /// </summary>
        /// <remarks>
        /// 自分に外部ログインアカウントを紐付けます。 指定した&#x60;providerName&#x60;がサーバー側で有効である必要があります。 リクエストが受理された場合、外部サービスの認証画面にリダイレクトされ、認証される必要があります。
        /// </remarks>
        /// <param name="postLinkExternalAccount"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILinkExternalAccountApiResponse"/>?&gt;</returns>
        Task<ILinkExternalAccountApiResponse?> LinkExternalAccountOrDefaultAsync(Option<PostLinkExternalAccount> postLinkExternalAccount = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// ログイン
        /// </summary>
        /// <remarks>
        /// ログインします。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirect">リダイレクト先 (optional)</param>
        /// <param name="postLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILoginApiResponse"/>&gt;</returns>
        Task<ILoginApiResponse> LoginAsync(Option<string> redirect = default, Option<PostLoginRequest> postLoginRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// ログイン
        /// </summary>
        /// <remarks>
        /// ログインします。
        /// </remarks>
        /// <param name="redirect">リダイレクト先 (optional)</param>
        /// <param name="postLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILoginApiResponse"/>?&gt;</returns>
        Task<ILoginApiResponse?> LoginOrDefaultAsync(Option<string> redirect = default, Option<PostLoginRequest> postLoginRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// ログアウト
        /// </summary>
        /// <remarks>
        /// ログアウトします。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirect">リダイレクト先 (optional)</param>
        /// <param name="all">全てのセッションでログアウトするかどうか (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILogoutApiResponse"/>&gt;</returns>
        Task<ILogoutApiResponse> LogoutAsync(Option<string> redirect = default, Option<bool> all = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// ログアウト
        /// </summary>
        /// <remarks>
        /// ログアウトします。
        /// </remarks>
        /// <param name="redirect">リダイレクト先 (optional)</param>
        /// <param name="all">全てのセッションでログアウトするかどうか (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILogoutApiResponse"/>?&gt;</returns>
        Task<ILogoutApiResponse?> LogoutOrDefaultAsync(Option<string> redirect = default, Option<bool> all = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// セッションを無効化
        /// </summary>
        /// <remarks>
        /// 指定した自分のセッションを無効化(ログアウト)します。 既に存在しない・無効化されているセッションを指定した場合も&#x60;204&#x60;を返します。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">セッションUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRevokeMySessionApiResponse"/>&gt;</returns>
        Task<IRevokeMySessionApiResponse> RevokeMySessionAsync(Guid sessionId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// セッションを無効化
        /// </summary>
        /// <remarks>
        /// 指定した自分のセッションを無効化(ログアウト)します。 既に存在しない・無効化されているセッションを指定した場合も&#x60;204&#x60;を返します。
        /// </remarks>
        /// <param name="sessionId">セッションUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRevokeMySessionApiResponse"/>?&gt;</returns>
        Task<IRevokeMySessionApiResponse?> RevokeMySessionOrDefaultAsync(Guid sessionId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 外部ログインアカウントの紐付けを解除
        /// </summary>
        /// <remarks>
        /// 自分に紐付けられている外部ログインアカウントの紐付けを解除します。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="postUnlinkExternalAccount"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUnlinkExternalAccountApiResponse"/>&gt;</returns>
        Task<IUnlinkExternalAccountApiResponse> UnlinkExternalAccountAsync(Option<PostUnlinkExternalAccount> postUnlinkExternalAccount = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 外部ログインアカウントの紐付けを解除
        /// </summary>
        /// <remarks>
        /// 自分に紐付けられている外部ログインアカウントの紐付けを解除します。
        /// </remarks>
        /// <param name="postUnlinkExternalAccount"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUnlinkExternalAccountApiResponse"/>?&gt;</returns>
        Task<IUnlinkExternalAccountApiResponse?> UnlinkExternalAccountOrDefaultAsync(Option<PostUnlinkExternalAccount> postUnlinkExternalAccount = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IGetMyExternalAccountsApiResponse"/>
    /// </summary>
    public interface IGetMyExternalAccountsApiResponse : Traq.Client.IApiResponse, IOk<List<ExternalProviderUser>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetMySessionsApiResponse"/>
    /// </summary>
    public interface IGetMySessionsApiResponse : Traq.Client.IApiResponse, IOk<List<LoginSession>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="ILinkExternalAccountApiResponse"/>
    /// </summary>
    public interface ILinkExternalAccountApiResponse : Traq.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 302 Found
        /// </summary>
        /// <returns></returns>
        bool IsFound { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }
    }

    /// <summary>
    /// The <see cref="ILoginApiResponse"/>
    /// </summary>
    public interface ILoginApiResponse : Traq.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 302 Found
        /// </summary>
        /// <returns></returns>
        bool IsFound { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }
    }

    /// <summary>
    /// The <see cref="ILogoutApiResponse"/>
    /// </summary>
    public interface ILogoutApiResponse : Traq.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 302 Found
        /// </summary>
        /// <returns></returns>
        bool IsFound { get; }
    }

    /// <summary>
    /// The <see cref="IRevokeMySessionApiResponse"/>
    /// </summary>
    public interface IRevokeMySessionApiResponse : Traq.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }
    }

    /// <summary>
    /// The <see cref="IUnlinkExternalAccountApiResponse"/>
    /// </summary>
    public interface IUnlinkExternalAccountApiResponse : Traq.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class AuthenticationApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetMyExternalAccounts;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetMyExternalAccounts;

        internal void ExecuteOnGetMyExternalAccounts(AuthenticationApi.GetMyExternalAccountsApiResponse apiResponse)
        {
            OnGetMyExternalAccounts?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetMyExternalAccounts(Exception exception)
        {
            OnErrorGetMyExternalAccounts?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetMySessions;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetMySessions;

        internal void ExecuteOnGetMySessions(AuthenticationApi.GetMySessionsApiResponse apiResponse)
        {
            OnGetMySessions?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetMySessions(Exception exception)
        {
            OnErrorGetMySessions?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnLinkExternalAccount;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorLinkExternalAccount;

        internal void ExecuteOnLinkExternalAccount(AuthenticationApi.LinkExternalAccountApiResponse apiResponse)
        {
            OnLinkExternalAccount?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorLinkExternalAccount(Exception exception)
        {
            OnErrorLinkExternalAccount?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnLogin;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorLogin;

        internal void ExecuteOnLogin(AuthenticationApi.LoginApiResponse apiResponse)
        {
            OnLogin?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorLogin(Exception exception)
        {
            OnErrorLogin?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnLogout;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorLogout;

        internal void ExecuteOnLogout(AuthenticationApi.LogoutApiResponse apiResponse)
        {
            OnLogout?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorLogout(Exception exception)
        {
            OnErrorLogout?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnRevokeMySession;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorRevokeMySession;

        internal void ExecuteOnRevokeMySession(AuthenticationApi.RevokeMySessionApiResponse apiResponse)
        {
            OnRevokeMySession?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorRevokeMySession(Exception exception)
        {
            OnErrorRevokeMySession?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUnlinkExternalAccount;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUnlinkExternalAccount;

        internal void ExecuteOnUnlinkExternalAccount(AuthenticationApi.UnlinkExternalAccountApiResponse apiResponse)
        {
            OnUnlinkExternalAccount?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUnlinkExternalAccount(Exception exception)
        {
            OnErrorUnlinkExternalAccount?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class AuthenticationApi : IAuthenticationApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<AuthenticationApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public AuthenticationApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// A token provider of type <see cref="OauthTokenProvider"/>
        /// </summary>
        public TokenProvider<OAuthToken> OauthTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuthenticationApi(ILogger<AuthenticationApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, AuthenticationApiEvents authenticationApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider,
            TokenProvider<BearerToken> bearerTokenProvider,
            TokenProvider<OAuthToken> oauthTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<AuthenticationApi>();
            HttpClient = httpClient;
            Events = authenticationApiEvents;
            ApiKeyProvider = apiKeyProvider;
            BearerTokenProvider = bearerTokenProvider;
            OauthTokenProvider = oauthTokenProvider;
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetMyExternalAccountsDefaultImplementation(IGetMyExternalAccountsApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetMyExternalAccounts(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetMyExternalAccounts(ref bool suppressDefaultLog, IGetMyExternalAccountsApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        private void OnErrorGetMyExternalAccountsDefaultImplementation(Exception exception, string pathFormat, string path)
        {
            bool suppressDefaultLog = false;
            OnErrorGetMyExternalAccounts(ref suppressDefaultLog, exception, pathFormat, path);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        partial void OnErrorGetMyExternalAccounts(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path);

        /// <summary>
        /// 外部ログインアカウント一覧を取得 自分に紐付けられている外部ログインアカウント一覧を取得します。
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMyExternalAccountsApiResponse"/>&gt;</returns>
        public async Task<IGetMyExternalAccountsApiResponse?> GetMyExternalAccountsOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetMyExternalAccountsAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 外部ログインアカウント一覧を取得 自分に紐付けられている外部ログインアカウント一覧を取得します。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMyExternalAccountsApiResponse"/>&gt;</returns>
        public async Task<IGetMyExternalAccountsApiResponse> GetMyExternalAccountsAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/users/me/ex-accounts";

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetMyExternalAccountsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetMyExternalAccountsApiResponse>();

                        GetMyExternalAccountsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/users/me/ex-accounts", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetMyExternalAccountsDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetMyExternalAccounts(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetMyExternalAccountsDefaultImplementation(e, "/users/me/ex-accounts", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetMyExternalAccounts(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetMyExternalAccountsApiResponse"/>
        /// </summary>
        public partial class GetMyExternalAccountsApiResponse : Traq.Client.ApiResponse, IGetMyExternalAccountsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetMyExternalAccountsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetMyExternalAccountsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetMyExternalAccountsApiResponse(ILogger<GetMyExternalAccountsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<ExternalProviderUser>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<ExternalProviderUser>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<ExternalProviderUser>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetMySessionsDefaultImplementation(IGetMySessionsApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetMySessions(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetMySessions(ref bool suppressDefaultLog, IGetMySessionsApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        private void OnErrorGetMySessionsDefaultImplementation(Exception exception, string pathFormat, string path)
        {
            bool suppressDefaultLog = false;
            OnErrorGetMySessions(ref suppressDefaultLog, exception, pathFormat, path);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        partial void OnErrorGetMySessions(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path);

        /// <summary>
        /// 自分のログインセッションリストを取得 自分のログインセッションのリストを取得します。
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMySessionsApiResponse"/>&gt;</returns>
        public async Task<IGetMySessionsApiResponse?> GetMySessionsOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetMySessionsAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 自分のログインセッションリストを取得 自分のログインセッションのリストを取得します。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMySessionsApiResponse"/>&gt;</returns>
        public async Task<IGetMySessionsApiResponse> GetMySessionsAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/users/me/sessions";

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetMySessionsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetMySessionsApiResponse>();

                        GetMySessionsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/users/me/sessions", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetMySessionsDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetMySessions(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetMySessionsDefaultImplementation(e, "/users/me/sessions", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetMySessions(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetMySessionsApiResponse"/>
        /// </summary>
        public partial class GetMySessionsApiResponse : Traq.Client.ApiResponse, IGetMySessionsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetMySessionsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetMySessionsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetMySessionsApiResponse(ILogger<GetMySessionsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<LoginSession>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<LoginSession>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<LoginSession>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatLinkExternalAccount(Option<PostLinkExternalAccount> postLinkExternalAccount);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="postLinkExternalAccount"></param>
        /// <returns></returns>
        private void ValidateLinkExternalAccount(Option<PostLinkExternalAccount> postLinkExternalAccount)
        {
            if (postLinkExternalAccount.IsSet && postLinkExternalAccount.Value == null)
                throw new ArgumentNullException(nameof(postLinkExternalAccount));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="postLinkExternalAccount"></param>
        private void AfterLinkExternalAccountDefaultImplementation(ILinkExternalAccountApiResponse apiResponseLocalVar, Option<PostLinkExternalAccount> postLinkExternalAccount)
        {
            bool suppressDefaultLog = false;
            AfterLinkExternalAccount(ref suppressDefaultLog, apiResponseLocalVar, postLinkExternalAccount);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="postLinkExternalAccount"></param>
        partial void AfterLinkExternalAccount(ref bool suppressDefaultLog, ILinkExternalAccountApiResponse apiResponseLocalVar, Option<PostLinkExternalAccount> postLinkExternalAccount);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="postLinkExternalAccount"></param>
        private void OnErrorLinkExternalAccountDefaultImplementation(Exception exception, string pathFormat, string path, Option<PostLinkExternalAccount> postLinkExternalAccount)
        {
            bool suppressDefaultLog = false;
            OnErrorLinkExternalAccount(ref suppressDefaultLog, exception, pathFormat, path, postLinkExternalAccount);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="postLinkExternalAccount"></param>
        partial void OnErrorLinkExternalAccount(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<PostLinkExternalAccount> postLinkExternalAccount);

        /// <summary>
        /// 外部ログインアカウントを紐付ける 自分に外部ログインアカウントを紐付けます。 指定した&#x60;providerName&#x60;がサーバー側で有効である必要があります。 リクエストが受理された場合、外部サービスの認証画面にリダイレクトされ、認証される必要があります。
        /// </summary>
        /// <param name="postLinkExternalAccount"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILinkExternalAccountApiResponse"/>&gt;</returns>
        public async Task<ILinkExternalAccountApiResponse?> LinkExternalAccountOrDefaultAsync(Option<PostLinkExternalAccount> postLinkExternalAccount = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await LinkExternalAccountAsync(postLinkExternalAccount, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 外部ログインアカウントを紐付ける 自分に外部ログインアカウントを紐付けます。 指定した&#x60;providerName&#x60;がサーバー側で有効である必要があります。 リクエストが受理された場合、外部サービスの認証画面にリダイレクトされ、認証される必要があります。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="postLinkExternalAccount"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILinkExternalAccountApiResponse"/>&gt;</returns>
        public async Task<ILinkExternalAccountApiResponse> LinkExternalAccountAsync(Option<PostLinkExternalAccount> postLinkExternalAccount = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateLinkExternalAccount(postLinkExternalAccount);

                FormatLinkExternalAccount(postLinkExternalAccount);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/users/me/ex-accounts/link";

                    if (postLinkExternalAccount.IsSet)
                        httpRequestMessageLocalVar.Content = (postLinkExternalAccount.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(postLinkExternalAccount.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<LinkExternalAccountApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<LinkExternalAccountApiResponse>();

                        LinkExternalAccountApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/users/me/ex-accounts/link", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterLinkExternalAccountDefaultImplementation(apiResponseLocalVar, postLinkExternalAccount);

                        Events.ExecuteOnLinkExternalAccount(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorLinkExternalAccountDefaultImplementation(e, "/users/me/ex-accounts/link", uriBuilderLocalVar.Path, postLinkExternalAccount);
                Events.ExecuteOnErrorLinkExternalAccount(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="LinkExternalAccountApiResponse"/>
        /// </summary>
        public partial class LinkExternalAccountApiResponse : Traq.Client.ApiResponse, ILinkExternalAccountApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<LinkExternalAccountApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="LinkExternalAccountApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public LinkExternalAccountApiResponse(ILogger<LinkExternalAccountApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 302 Found
            /// </summary>
            /// <returns></returns>
            public bool IsFound => 302 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatLogin(ref Option<string> redirect, Option<PostLoginRequest> postLoginRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="redirect"></param>
        /// <param name="postLoginRequest"></param>
        /// <returns></returns>
        private void ValidateLogin(Option<string> redirect, Option<PostLoginRequest> postLoginRequest)
        {
            if (redirect.IsSet && redirect.Value == null)
                throw new ArgumentNullException(nameof(redirect));

            if (postLoginRequest.IsSet && postLoginRequest.Value == null)
                throw new ArgumentNullException(nameof(postLoginRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="redirect"></param>
        /// <param name="postLoginRequest"></param>
        private void AfterLoginDefaultImplementation(ILoginApiResponse apiResponseLocalVar, Option<string> redirect, Option<PostLoginRequest> postLoginRequest)
        {
            bool suppressDefaultLog = false;
            AfterLogin(ref suppressDefaultLog, apiResponseLocalVar, redirect, postLoginRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="redirect"></param>
        /// <param name="postLoginRequest"></param>
        partial void AfterLogin(ref bool suppressDefaultLog, ILoginApiResponse apiResponseLocalVar, Option<string> redirect, Option<PostLoginRequest> postLoginRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="redirect"></param>
        /// <param name="postLoginRequest"></param>
        private void OnErrorLoginDefaultImplementation(Exception exception, string pathFormat, string path, Option<string> redirect, Option<PostLoginRequest> postLoginRequest)
        {
            bool suppressDefaultLog = false;
            OnErrorLogin(ref suppressDefaultLog, exception, pathFormat, path, redirect, postLoginRequest);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="redirect"></param>
        /// <param name="postLoginRequest"></param>
        partial void OnErrorLogin(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<string> redirect, Option<PostLoginRequest> postLoginRequest);

        /// <summary>
        /// ログイン ログインします。
        /// </summary>
        /// <param name="redirect">リダイレクト先 (optional)</param>
        /// <param name="postLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILoginApiResponse"/>&gt;</returns>
        public async Task<ILoginApiResponse?> LoginOrDefaultAsync(Option<string> redirect = default, Option<PostLoginRequest> postLoginRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await LoginAsync(redirect, postLoginRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// ログイン ログインします。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirect">リダイレクト先 (optional)</param>
        /// <param name="postLoginRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILoginApiResponse"/>&gt;</returns>
        public async Task<ILoginApiResponse> LoginAsync(Option<string> redirect = default, Option<PostLoginRequest> postLoginRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateLogin(redirect, postLoginRequest);

                FormatLogin(ref redirect, postLoginRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/login";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (redirect.IsSet)
                        parseQueryStringLocalVar["redirect"] = ClientUtils.ParameterToString(redirect.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (postLoginRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (postLoginRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(postLoginRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<LoginApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<LoginApiResponse>();

                        LoginApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/login", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterLoginDefaultImplementation(apiResponseLocalVar, redirect, postLoginRequest);

                        Events.ExecuteOnLogin(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorLoginDefaultImplementation(e, "/login", uriBuilderLocalVar.Path, redirect, postLoginRequest);
                Events.ExecuteOnErrorLogin(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="LoginApiResponse"/>
        /// </summary>
        public partial class LoginApiResponse : Traq.Client.ApiResponse, ILoginApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<LoginApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="LoginApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public LoginApiResponse(ILogger<LoginApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 302 Found
            /// </summary>
            /// <returns></returns>
            public bool IsFound => 302 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatLogout(ref Option<string> redirect, ref Option<bool> all);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="redirect"></param>
        /// <returns></returns>
        private void ValidateLogout(Option<string> redirect)
        {
            if (redirect.IsSet && redirect.Value == null)
                throw new ArgumentNullException(nameof(redirect));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="redirect"></param>
        /// <param name="all"></param>
        private void AfterLogoutDefaultImplementation(ILogoutApiResponse apiResponseLocalVar, Option<string> redirect, Option<bool> all)
        {
            bool suppressDefaultLog = false;
            AfterLogout(ref suppressDefaultLog, apiResponseLocalVar, redirect, all);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="redirect"></param>
        /// <param name="all"></param>
        partial void AfterLogout(ref bool suppressDefaultLog, ILogoutApiResponse apiResponseLocalVar, Option<string> redirect, Option<bool> all);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="redirect"></param>
        /// <param name="all"></param>
        private void OnErrorLogoutDefaultImplementation(Exception exception, string pathFormat, string path, Option<string> redirect, Option<bool> all)
        {
            bool suppressDefaultLog = false;
            OnErrorLogout(ref suppressDefaultLog, exception, pathFormat, path, redirect, all);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="redirect"></param>
        /// <param name="all"></param>
        partial void OnErrorLogout(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<string> redirect, Option<bool> all);

        /// <summary>
        /// ログアウト ログアウトします。
        /// </summary>
        /// <param name="redirect">リダイレクト先 (optional)</param>
        /// <param name="all">全てのセッションでログアウトするかどうか (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILogoutApiResponse"/>&gt;</returns>
        public async Task<ILogoutApiResponse?> LogoutOrDefaultAsync(Option<string> redirect = default, Option<bool> all = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await LogoutAsync(redirect, all, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// ログアウト ログアウトします。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="redirect">リダイレクト先 (optional)</param>
        /// <param name="all">全てのセッションでログアウトするかどうか (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILogoutApiResponse"/>&gt;</returns>
        public async Task<ILogoutApiResponse> LogoutAsync(Option<string> redirect = default, Option<bool> all = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateLogout(redirect);

                FormatLogout(ref redirect, ref all);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/logout";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (redirect.IsSet)
                        parseQueryStringLocalVar["redirect"] = ClientUtils.ParameterToString(redirect.Value);

                    if (all.IsSet)
                        parseQueryStringLocalVar["all"] = ClientUtils.ParameterToString(all.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<LogoutApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<LogoutApiResponse>();

                        LogoutApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/logout", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterLogoutDefaultImplementation(apiResponseLocalVar, redirect, all);

                        Events.ExecuteOnLogout(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorLogoutDefaultImplementation(e, "/logout", uriBuilderLocalVar.Path, redirect, all);
                Events.ExecuteOnErrorLogout(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="LogoutApiResponse"/>
        /// </summary>
        public partial class LogoutApiResponse : Traq.Client.ApiResponse, ILogoutApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<LogoutApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="LogoutApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public LogoutApiResponse(ILogger<LogoutApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 302 Found
            /// </summary>
            /// <returns></returns>
            public bool IsFound => 302 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatRevokeMySession(ref Guid sessionId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="sessionId"></param>
        private void AfterRevokeMySessionDefaultImplementation(IRevokeMySessionApiResponse apiResponseLocalVar, Guid sessionId)
        {
            bool suppressDefaultLog = false;
            AfterRevokeMySession(ref suppressDefaultLog, apiResponseLocalVar, sessionId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="sessionId"></param>
        partial void AfterRevokeMySession(ref bool suppressDefaultLog, IRevokeMySessionApiResponse apiResponseLocalVar, Guid sessionId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="sessionId"></param>
        private void OnErrorRevokeMySessionDefaultImplementation(Exception exception, string pathFormat, string path, Guid sessionId)
        {
            bool suppressDefaultLog = false;
            OnErrorRevokeMySession(ref suppressDefaultLog, exception, pathFormat, path, sessionId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="sessionId"></param>
        partial void OnErrorRevokeMySession(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Guid sessionId);

        /// <summary>
        /// セッションを無効化 指定した自分のセッションを無効化(ログアウト)します。 既に存在しない・無効化されているセッションを指定した場合も&#x60;204&#x60;を返します。
        /// </summary>
        /// <param name="sessionId">セッションUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRevokeMySessionApiResponse"/>&gt;</returns>
        public async Task<IRevokeMySessionApiResponse?> RevokeMySessionOrDefaultAsync(Guid sessionId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await RevokeMySessionAsync(sessionId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// セッションを無効化 指定した自分のセッションを無効化(ログアウト)します。 既に存在しない・無効化されているセッションを指定した場合も&#x60;204&#x60;を返します。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">セッションUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRevokeMySessionApiResponse"/>&gt;</returns>
        public async Task<IRevokeMySessionApiResponse> RevokeMySessionAsync(Guid sessionId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatRevokeMySession(ref sessionId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/users/me/sessions/{sessionId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BsessionId%7D", Uri.EscapeDataString(sessionId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<RevokeMySessionApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<RevokeMySessionApiResponse>();

                        RevokeMySessionApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/users/me/sessions/{sessionId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterRevokeMySessionDefaultImplementation(apiResponseLocalVar, sessionId);

                        Events.ExecuteOnRevokeMySession(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorRevokeMySessionDefaultImplementation(e, "/users/me/sessions/{sessionId}", uriBuilderLocalVar.Path, sessionId);
                Events.ExecuteOnErrorRevokeMySession(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="RevokeMySessionApiResponse"/>
        /// </summary>
        public partial class RevokeMySessionApiResponse : Traq.Client.ApiResponse, IRevokeMySessionApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<RevokeMySessionApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="RevokeMySessionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public RevokeMySessionApiResponse(ILogger<RevokeMySessionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUnlinkExternalAccount(Option<PostUnlinkExternalAccount> postUnlinkExternalAccount);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="postUnlinkExternalAccount"></param>
        /// <returns></returns>
        private void ValidateUnlinkExternalAccount(Option<PostUnlinkExternalAccount> postUnlinkExternalAccount)
        {
            if (postUnlinkExternalAccount.IsSet && postUnlinkExternalAccount.Value == null)
                throw new ArgumentNullException(nameof(postUnlinkExternalAccount));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="postUnlinkExternalAccount"></param>
        private void AfterUnlinkExternalAccountDefaultImplementation(IUnlinkExternalAccountApiResponse apiResponseLocalVar, Option<PostUnlinkExternalAccount> postUnlinkExternalAccount)
        {
            bool suppressDefaultLog = false;
            AfterUnlinkExternalAccount(ref suppressDefaultLog, apiResponseLocalVar, postUnlinkExternalAccount);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="postUnlinkExternalAccount"></param>
        partial void AfterUnlinkExternalAccount(ref bool suppressDefaultLog, IUnlinkExternalAccountApiResponse apiResponseLocalVar, Option<PostUnlinkExternalAccount> postUnlinkExternalAccount);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="postUnlinkExternalAccount"></param>
        private void OnErrorUnlinkExternalAccountDefaultImplementation(Exception exception, string pathFormat, string path, Option<PostUnlinkExternalAccount> postUnlinkExternalAccount)
        {
            bool suppressDefaultLog = false;
            OnErrorUnlinkExternalAccount(ref suppressDefaultLog, exception, pathFormat, path, postUnlinkExternalAccount);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="postUnlinkExternalAccount"></param>
        partial void OnErrorUnlinkExternalAccount(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<PostUnlinkExternalAccount> postUnlinkExternalAccount);

        /// <summary>
        /// 外部ログインアカウントの紐付けを解除 自分に紐付けられている外部ログインアカウントの紐付けを解除します。
        /// </summary>
        /// <param name="postUnlinkExternalAccount"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUnlinkExternalAccountApiResponse"/>&gt;</returns>
        public async Task<IUnlinkExternalAccountApiResponse?> UnlinkExternalAccountOrDefaultAsync(Option<PostUnlinkExternalAccount> postUnlinkExternalAccount = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UnlinkExternalAccountAsync(postUnlinkExternalAccount, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 外部ログインアカウントの紐付けを解除 自分に紐付けられている外部ログインアカウントの紐付けを解除します。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="postUnlinkExternalAccount"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUnlinkExternalAccountApiResponse"/>&gt;</returns>
        public async Task<IUnlinkExternalAccountApiResponse> UnlinkExternalAccountAsync(Option<PostUnlinkExternalAccount> postUnlinkExternalAccount = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUnlinkExternalAccount(postUnlinkExternalAccount);

                FormatUnlinkExternalAccount(postUnlinkExternalAccount);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/users/me/ex-accounts/unlink";

                    if (postUnlinkExternalAccount.IsSet)
                        httpRequestMessageLocalVar.Content = (postUnlinkExternalAccount.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(postUnlinkExternalAccount.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UnlinkExternalAccountApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UnlinkExternalAccountApiResponse>();

                        UnlinkExternalAccountApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/users/me/ex-accounts/unlink", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUnlinkExternalAccountDefaultImplementation(apiResponseLocalVar, postUnlinkExternalAccount);

                        Events.ExecuteOnUnlinkExternalAccount(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUnlinkExternalAccountDefaultImplementation(e, "/users/me/ex-accounts/unlink", uriBuilderLocalVar.Path, postUnlinkExternalAccount);
                Events.ExecuteOnErrorUnlinkExternalAccount(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UnlinkExternalAccountApiResponse"/>
        /// </summary>
        public partial class UnlinkExternalAccountApiResponse : Traq.Client.ApiResponse, IUnlinkExternalAccountApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UnlinkExternalAccountApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UnlinkExternalAccountApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UnlinkExternalAccountApiResponse(ILogger<UnlinkExternalAccountApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
