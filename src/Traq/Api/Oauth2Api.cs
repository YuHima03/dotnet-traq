/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using Traq.Client;
using Traq.Model;

namespace Traq.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOauth2ApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// OAuth2クライアントを作成
        /// </summary>
        /// <remarks>
        /// OAuth2クライアントを作成します。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postClientRequest"> (optional)</param>
        /// <returns>OAuth2ClientDetail</returns>
        OAuth2ClientDetail CreateClient(PostClientRequest? postClientRequest = default(PostClientRequest?));

        /// <summary>
        /// OAuth2クライアントを作成
        /// </summary>
        /// <remarks>
        /// OAuth2クライアントを作成します。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postClientRequest"> (optional)</param>
        /// <returns>ApiResponse of OAuth2ClientDetail</returns>
        ApiResponse<OAuth2ClientDetail> CreateClientWithHttpInfo(PostClientRequest? postClientRequest = default(PostClientRequest?));
        /// <summary>
        /// OAuth2クライアントを削除
        /// </summary>
        /// <remarks>
        /// 指定したOAuth2クライアントを削除します。 対象のクライアントの管理権限が必要です。正常に削除された場合、このクライアントに対する認可は全て取り消されます。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth2クライアントUUID</param>
        /// <returns></returns>
        void DeleteClient(string clientId);

        /// <summary>
        /// OAuth2クライアントを削除
        /// </summary>
        /// <remarks>
        /// 指定したOAuth2クライアントを削除します。 対象のクライアントの管理権限が必要です。正常に削除された場合、このクライアントに対する認可は全て取り消されます。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth2クライアントUUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteClientWithHttpInfo(string clientId);
        /// <summary>
        /// OAuth2クライアント情報を変更
        /// </summary>
        /// <remarks>
        /// 指定したOAuth2クライアントの情報を変更します。 対象のクライアントの管理権限が必要です。 クライアント開発者UUIDを変更した場合は、変更先ユーザーにクライアント管理権限が移譲され、自分自身は権限を失います。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth2クライアントUUID</param>
        /// <param name="patchClientRequest"> (optional)</param>
        /// <returns></returns>
        void EditClient(string clientId, PatchClientRequest? patchClientRequest = default(PatchClientRequest?));

        /// <summary>
        /// OAuth2クライアント情報を変更
        /// </summary>
        /// <remarks>
        /// 指定したOAuth2クライアントの情報を変更します。 対象のクライアントの管理権限が必要です。 クライアント開発者UUIDを変更した場合は、変更先ユーザーにクライアント管理権限が移譲され、自分自身は権限を失います。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth2クライアントUUID</param>
        /// <param name="patchClientRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EditClientWithHttpInfo(string clientId, PatchClientRequest? patchClientRequest = default(PatchClientRequest?));
        /// <summary>
        /// OAuth2クライアント情報を取得
        /// </summary>
        /// <remarks>
        /// 指定したOAuth2クライアントの情報を取得します。 詳細情報の取得には対象のクライアントの管理権限が必要です。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth2クライアントUUID</param>
        /// <param name="detail">詳細情報を含めるかどうか (optional, default to false)</param>
        /// <returns>GetClient200Response</returns>
        GetClient200Response GetClient(string clientId, bool? detail = default(bool?));

        /// <summary>
        /// OAuth2クライアント情報を取得
        /// </summary>
        /// <remarks>
        /// 指定したOAuth2クライアントの情報を取得します。 詳細情報の取得には対象のクライアントの管理権限が必要です。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth2クライアントUUID</param>
        /// <param name="detail">詳細情報を含めるかどうか (optional, default to false)</param>
        /// <returns>ApiResponse of GetClient200Response</returns>
        ApiResponse<GetClient200Response> GetClientWithHttpInfo(string clientId, bool? detail = default(bool?));
        /// <summary>
        /// OAuth2クライアントのリストを取得
        /// </summary>
        /// <remarks>
        /// 自身が開発者のOAuth2クライアントのリストを取得します。 &#x60;all&#x60;が&#x60;true&#x60;の場合、全開発者の全クライアントのリストを返します。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="all">全てのクライアントを取得するかどうか (optional, default to false)</param>
        /// <returns>List&lt;OAuth2Client&gt;</returns>
        List<OAuth2Client> GetClients(bool? all = default(bool?));

        /// <summary>
        /// OAuth2クライアントのリストを取得
        /// </summary>
        /// <remarks>
        /// 自身が開発者のOAuth2クライアントのリストを取得します。 &#x60;all&#x60;が&#x60;true&#x60;の場合、全開発者の全クライアントのリストを返します。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="all">全てのクライアントを取得するかどうか (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;OAuth2Client&gt;</returns>
        ApiResponse<List<OAuth2Client>> GetClientsWithHttpInfo(bool? all = default(bool?));
        /// <summary>
        /// 有効トークンのリストを取得
        /// </summary>
        /// <remarks>
        /// 有効な自分に発行されたOAuth2トークンのリストを取得します。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ActiveOAuth2Token&gt;</returns>
        List<ActiveOAuth2Token> GetMyTokens();

        /// <summary>
        /// 有効トークンのリストを取得
        /// </summary>
        /// <remarks>
        /// 有効な自分に発行されたOAuth2トークンのリストを取得します。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ActiveOAuth2Token&gt;</returns>
        ApiResponse<List<ActiveOAuth2Token>> GetMyTokensWithHttpInfo();
        /// <summary>
        /// OAuth2 認可エンドポイント
        /// </summary>
        /// <remarks>
        /// OAuth2 認可エンドポイント
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="responseType"> (optional)</param>
        /// <param name="redirectUri"> (optional)</param>
        /// <param name="scope"> (optional)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="codeChallenge"> (optional)</param>
        /// <param name="codeChallengeMethod"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="prompt"> (optional)</param>
        /// <returns></returns>
        void GetOAuth2Authorize(string clientId, OAuth2ResponseType? responseType = default(OAuth2ResponseType?), string? redirectUri = default(string?), string? scope = default(string?), string? state = default(string?), string? codeChallenge = default(string?), string? codeChallengeMethod = default(string?), string? nonce = default(string?), OAuth2Prompt? prompt = default(OAuth2Prompt?));

        /// <summary>
        /// OAuth2 認可エンドポイント
        /// </summary>
        /// <remarks>
        /// OAuth2 認可エンドポイント
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="responseType"> (optional)</param>
        /// <param name="redirectUri"> (optional)</param>
        /// <param name="scope"> (optional)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="codeChallenge"> (optional)</param>
        /// <param name="codeChallengeMethod"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="prompt"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetOAuth2AuthorizeWithHttpInfo(string clientId, OAuth2ResponseType? responseType = default(OAuth2ResponseType?), string? redirectUri = default(string?), string? scope = default(string?), string? state = default(string?), string? codeChallenge = default(string?), string? codeChallengeMethod = default(string?), string? nonce = default(string?), OAuth2Prompt? prompt = default(OAuth2Prompt?));
        /// <summary>
        /// OAuth2 認可エンドポイント
        /// </summary>
        /// <remarks>
        /// OAuth2 認可エンドポイント
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="responseType"> (optional)</param>
        /// <param name="redirectUri"> (optional)</param>
        /// <param name="scope"> (optional)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="codeChallenge"> (optional)</param>
        /// <param name="codeChallengeMethod"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="prompt"> (optional)</param>
        /// <returns></returns>
        void PostOAuth2Authorize(string clientId, OAuth2ResponseType? responseType = default(OAuth2ResponseType?), string? redirectUri = default(string?), string? scope = default(string?), string? state = default(string?), string? codeChallenge = default(string?), string? codeChallengeMethod = default(string?), string? nonce = default(string?), OAuth2Prompt? prompt = default(OAuth2Prompt?));

        /// <summary>
        /// OAuth2 認可エンドポイント
        /// </summary>
        /// <remarks>
        /// OAuth2 認可エンドポイント
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="responseType"> (optional)</param>
        /// <param name="redirectUri"> (optional)</param>
        /// <param name="scope"> (optional)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="codeChallenge"> (optional)</param>
        /// <param name="codeChallengeMethod"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="prompt"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostOAuth2AuthorizeWithHttpInfo(string clientId, OAuth2ResponseType? responseType = default(OAuth2ResponseType?), string? redirectUri = default(string?), string? scope = default(string?), string? state = default(string?), string? codeChallenge = default(string?), string? codeChallengeMethod = default(string?), string? nonce = default(string?), OAuth2Prompt? prompt = default(OAuth2Prompt?));
        /// <summary>
        /// OAuth2 認可承諾API
        /// </summary>
        /// <remarks>
        /// OAuth2 認可承諾
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submit">承諾する場合は\\\&quot;approve\\\&quot;</param>
        /// <returns></returns>
        void PostOAuth2AuthorizeDecide(string submit);

        /// <summary>
        /// OAuth2 認可承諾API
        /// </summary>
        /// <remarks>
        /// OAuth2 認可承諾
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submit">承諾する場合は\\\&quot;approve\\\&quot;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostOAuth2AuthorizeDecideWithHttpInfo(string submit);
        /// <summary>
        /// OAuth2 トークンエンドポイント
        /// </summary>
        /// <remarks>
        /// OAuth2 トークンエンドポイント
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType"></param>
        /// <param name="code"> (optional)</param>
        /// <param name="redirectUri"> (optional)</param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="codeVerifier"> (optional)</param>
        /// <param name="username"> (optional)</param>
        /// <param name="password"> (optional)</param>
        /// <param name="scope"> (optional)</param>
        /// <param name="refreshToken"> (optional)</param>
        /// <param name="clientSecret"> (optional)</param>
        /// <returns>OAuth2Token</returns>
        OAuth2Token PostOAuth2Token(string grantType, string? code = default(string?), string? redirectUri = default(string?), string? clientId = default(string?), string? codeVerifier = default(string?), string? username = default(string?), string? password = default(string?), string? scope = default(string?), string? refreshToken = default(string?), string? clientSecret = default(string?));

        /// <summary>
        /// OAuth2 トークンエンドポイント
        /// </summary>
        /// <remarks>
        /// OAuth2 トークンエンドポイント
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType"></param>
        /// <param name="code"> (optional)</param>
        /// <param name="redirectUri"> (optional)</param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="codeVerifier"> (optional)</param>
        /// <param name="username"> (optional)</param>
        /// <param name="password"> (optional)</param>
        /// <param name="scope"> (optional)</param>
        /// <param name="refreshToken"> (optional)</param>
        /// <param name="clientSecret"> (optional)</param>
        /// <returns>ApiResponse of OAuth2Token</returns>
        ApiResponse<OAuth2Token> PostOAuth2TokenWithHttpInfo(string grantType, string? code = default(string?), string? redirectUri = default(string?), string? clientId = default(string?), string? codeVerifier = default(string?), string? username = default(string?), string? password = default(string?), string? scope = default(string?), string? refreshToken = default(string?), string? clientSecret = default(string?));
        /// <summary>
        /// OAuthクライアントのトークンを削除
        /// </summary>
        /// <remarks>
        /// 自分が許可している指定したOAuthクライアントのアクセストークンを全てRevokeします。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth2クライアントUUID</param>
        /// <returns></returns>
        void RevokeClientTokens(string clientId);

        /// <summary>
        /// OAuthクライアントのトークンを削除
        /// </summary>
        /// <remarks>
        /// 自分が許可している指定したOAuthクライアントのアクセストークンを全てRevokeします。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth2クライアントUUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RevokeClientTokensWithHttpInfo(string clientId);
        /// <summary>
        /// トークンの認可を取り消す
        /// </summary>
        /// <remarks>
        /// 自分の指定したトークンの認可を取り消します。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId">OAuth2トークンUUID</param>
        /// <returns></returns>
        void RevokeMyToken(Guid tokenId);

        /// <summary>
        /// トークンの認可を取り消す
        /// </summary>
        /// <remarks>
        /// 自分の指定したトークンの認可を取り消します。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId">OAuth2トークンUUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RevokeMyTokenWithHttpInfo(Guid tokenId);
        /// <summary>
        /// OAuth2 トークン無効化エンドポイント
        /// </summary>
        /// <remarks>
        /// OAuth2 トークン無効化エンドポイント
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">無効化するOAuth2トークンまたはOAuth2リフレッシュトークン</param>
        /// <returns></returns>
        void RevokeOAuth2Token(string token);

        /// <summary>
        /// OAuth2 トークン無効化エンドポイント
        /// </summary>
        /// <remarks>
        /// OAuth2 トークン無効化エンドポイント
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">無効化するOAuth2トークンまたはOAuth2リフレッシュトークン</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RevokeOAuth2TokenWithHttpInfo(string token);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOauth2ApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// OAuth2クライアントを作成
        /// </summary>
        /// <remarks>
        /// OAuth2クライアントを作成します。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postClientRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OAuth2ClientDetail</returns>
        System.Threading.Tasks.Task<OAuth2ClientDetail> CreateClientAsync(PostClientRequest? postClientRequest = default(PostClientRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// OAuth2クライアントを作成
        /// </summary>
        /// <remarks>
        /// OAuth2クライアントを作成します。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postClientRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OAuth2ClientDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<OAuth2ClientDetail>> CreateClientWithHttpInfoAsync(PostClientRequest? postClientRequest = default(PostClientRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// OAuth2クライアントを削除
        /// </summary>
        /// <remarks>
        /// 指定したOAuth2クライアントを削除します。 対象のクライアントの管理権限が必要です。正常に削除された場合、このクライアントに対する認可は全て取り消されます。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth2クライアントUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteClientAsync(string clientId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// OAuth2クライアントを削除
        /// </summary>
        /// <remarks>
        /// 指定したOAuth2クライアントを削除します。 対象のクライアントの管理権限が必要です。正常に削除された場合、このクライアントに対する認可は全て取り消されます。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth2クライアントUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteClientWithHttpInfoAsync(string clientId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// OAuth2クライアント情報を変更
        /// </summary>
        /// <remarks>
        /// 指定したOAuth2クライアントの情報を変更します。 対象のクライアントの管理権限が必要です。 クライアント開発者UUIDを変更した場合は、変更先ユーザーにクライアント管理権限が移譲され、自分自身は権限を失います。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth2クライアントUUID</param>
        /// <param name="patchClientRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EditClientAsync(string clientId, PatchClientRequest? patchClientRequest = default(PatchClientRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// OAuth2クライアント情報を変更
        /// </summary>
        /// <remarks>
        /// 指定したOAuth2クライアントの情報を変更します。 対象のクライアントの管理権限が必要です。 クライアント開発者UUIDを変更した場合は、変更先ユーザーにクライアント管理権限が移譲され、自分自身は権限を失います。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth2クライアントUUID</param>
        /// <param name="patchClientRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EditClientWithHttpInfoAsync(string clientId, PatchClientRequest? patchClientRequest = default(PatchClientRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// OAuth2クライアント情報を取得
        /// </summary>
        /// <remarks>
        /// 指定したOAuth2クライアントの情報を取得します。 詳細情報の取得には対象のクライアントの管理権限が必要です。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth2クライアントUUID</param>
        /// <param name="detail">詳細情報を含めるかどうか (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetClient200Response</returns>
        System.Threading.Tasks.Task<GetClient200Response> GetClientAsync(string clientId, bool? detail = default(bool?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// OAuth2クライアント情報を取得
        /// </summary>
        /// <remarks>
        /// 指定したOAuth2クライアントの情報を取得します。 詳細情報の取得には対象のクライアントの管理権限が必要です。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth2クライアントUUID</param>
        /// <param name="detail">詳細情報を含めるかどうか (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetClient200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetClient200Response>> GetClientWithHttpInfoAsync(string clientId, bool? detail = default(bool?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// OAuth2クライアントのリストを取得
        /// </summary>
        /// <remarks>
        /// 自身が開発者のOAuth2クライアントのリストを取得します。 &#x60;all&#x60;が&#x60;true&#x60;の場合、全開発者の全クライアントのリストを返します。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="all">全てのクライアントを取得するかどうか (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;OAuth2Client&gt;</returns>
        System.Threading.Tasks.Task<List<OAuth2Client>> GetClientsAsync(bool? all = default(bool?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// OAuth2クライアントのリストを取得
        /// </summary>
        /// <remarks>
        /// 自身が開発者のOAuth2クライアントのリストを取得します。 &#x60;all&#x60;が&#x60;true&#x60;の場合、全開発者の全クライアントのリストを返します。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="all">全てのクライアントを取得するかどうか (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;OAuth2Client&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<OAuth2Client>>> GetClientsWithHttpInfoAsync(bool? all = default(bool?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 有効トークンのリストを取得
        /// </summary>
        /// <remarks>
        /// 有効な自分に発行されたOAuth2トークンのリストを取得します。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ActiveOAuth2Token&gt;</returns>
        System.Threading.Tasks.Task<List<ActiveOAuth2Token>> GetMyTokensAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 有効トークンのリストを取得
        /// </summary>
        /// <remarks>
        /// 有効な自分に発行されたOAuth2トークンのリストを取得します。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ActiveOAuth2Token&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ActiveOAuth2Token>>> GetMyTokensWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// OAuth2 認可エンドポイント
        /// </summary>
        /// <remarks>
        /// OAuth2 認可エンドポイント
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="responseType"> (optional)</param>
        /// <param name="redirectUri"> (optional)</param>
        /// <param name="scope"> (optional)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="codeChallenge"> (optional)</param>
        /// <param name="codeChallengeMethod"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="prompt"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetOAuth2AuthorizeAsync(string clientId, OAuth2ResponseType? responseType = default(OAuth2ResponseType?), string? redirectUri = default(string?), string? scope = default(string?), string? state = default(string?), string? codeChallenge = default(string?), string? codeChallengeMethod = default(string?), string? nonce = default(string?), OAuth2Prompt? prompt = default(OAuth2Prompt?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// OAuth2 認可エンドポイント
        /// </summary>
        /// <remarks>
        /// OAuth2 認可エンドポイント
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="responseType"> (optional)</param>
        /// <param name="redirectUri"> (optional)</param>
        /// <param name="scope"> (optional)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="codeChallenge"> (optional)</param>
        /// <param name="codeChallengeMethod"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="prompt"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetOAuth2AuthorizeWithHttpInfoAsync(string clientId, OAuth2ResponseType? responseType = default(OAuth2ResponseType?), string? redirectUri = default(string?), string? scope = default(string?), string? state = default(string?), string? codeChallenge = default(string?), string? codeChallengeMethod = default(string?), string? nonce = default(string?), OAuth2Prompt? prompt = default(OAuth2Prompt?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// OAuth2 認可エンドポイント
        /// </summary>
        /// <remarks>
        /// OAuth2 認可エンドポイント
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="responseType"> (optional)</param>
        /// <param name="redirectUri"> (optional)</param>
        /// <param name="scope"> (optional)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="codeChallenge"> (optional)</param>
        /// <param name="codeChallengeMethod"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="prompt"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostOAuth2AuthorizeAsync(string clientId, OAuth2ResponseType? responseType = default(OAuth2ResponseType?), string? redirectUri = default(string?), string? scope = default(string?), string? state = default(string?), string? codeChallenge = default(string?), string? codeChallengeMethod = default(string?), string? nonce = default(string?), OAuth2Prompt? prompt = default(OAuth2Prompt?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// OAuth2 認可エンドポイント
        /// </summary>
        /// <remarks>
        /// OAuth2 認可エンドポイント
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="responseType"> (optional)</param>
        /// <param name="redirectUri"> (optional)</param>
        /// <param name="scope"> (optional)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="codeChallenge"> (optional)</param>
        /// <param name="codeChallengeMethod"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="prompt"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostOAuth2AuthorizeWithHttpInfoAsync(string clientId, OAuth2ResponseType? responseType = default(OAuth2ResponseType?), string? redirectUri = default(string?), string? scope = default(string?), string? state = default(string?), string? codeChallenge = default(string?), string? codeChallengeMethod = default(string?), string? nonce = default(string?), OAuth2Prompt? prompt = default(OAuth2Prompt?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// OAuth2 認可承諾API
        /// </summary>
        /// <remarks>
        /// OAuth2 認可承諾
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submit">承諾する場合は\\\&quot;approve\\\&quot;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostOAuth2AuthorizeDecideAsync(string submit, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// OAuth2 認可承諾API
        /// </summary>
        /// <remarks>
        /// OAuth2 認可承諾
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submit">承諾する場合は\\\&quot;approve\\\&quot;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostOAuth2AuthorizeDecideWithHttpInfoAsync(string submit, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// OAuth2 トークンエンドポイント
        /// </summary>
        /// <remarks>
        /// OAuth2 トークンエンドポイント
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType"></param>
        /// <param name="code"> (optional)</param>
        /// <param name="redirectUri"> (optional)</param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="codeVerifier"> (optional)</param>
        /// <param name="username"> (optional)</param>
        /// <param name="password"> (optional)</param>
        /// <param name="scope"> (optional)</param>
        /// <param name="refreshToken"> (optional)</param>
        /// <param name="clientSecret"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OAuth2Token</returns>
        System.Threading.Tasks.Task<OAuth2Token> PostOAuth2TokenAsync(string grantType, string? code = default(string?), string? redirectUri = default(string?), string? clientId = default(string?), string? codeVerifier = default(string?), string? username = default(string?), string? password = default(string?), string? scope = default(string?), string? refreshToken = default(string?), string? clientSecret = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// OAuth2 トークンエンドポイント
        /// </summary>
        /// <remarks>
        /// OAuth2 トークンエンドポイント
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType"></param>
        /// <param name="code"> (optional)</param>
        /// <param name="redirectUri"> (optional)</param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="codeVerifier"> (optional)</param>
        /// <param name="username"> (optional)</param>
        /// <param name="password"> (optional)</param>
        /// <param name="scope"> (optional)</param>
        /// <param name="refreshToken"> (optional)</param>
        /// <param name="clientSecret"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OAuth2Token)</returns>
        System.Threading.Tasks.Task<ApiResponse<OAuth2Token>> PostOAuth2TokenWithHttpInfoAsync(string grantType, string? code = default(string?), string? redirectUri = default(string?), string? clientId = default(string?), string? codeVerifier = default(string?), string? username = default(string?), string? password = default(string?), string? scope = default(string?), string? refreshToken = default(string?), string? clientSecret = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// OAuthクライアントのトークンを削除
        /// </summary>
        /// <remarks>
        /// 自分が許可している指定したOAuthクライアントのアクセストークンを全てRevokeします。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth2クライアントUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RevokeClientTokensAsync(string clientId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// OAuthクライアントのトークンを削除
        /// </summary>
        /// <remarks>
        /// 自分が許可している指定したOAuthクライアントのアクセストークンを全てRevokeします。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth2クライアントUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RevokeClientTokensWithHttpInfoAsync(string clientId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// トークンの認可を取り消す
        /// </summary>
        /// <remarks>
        /// 自分の指定したトークンの認可を取り消します。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId">OAuth2トークンUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RevokeMyTokenAsync(Guid tokenId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// トークンの認可を取り消す
        /// </summary>
        /// <remarks>
        /// 自分の指定したトークンの認可を取り消します。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId">OAuth2トークンUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RevokeMyTokenWithHttpInfoAsync(Guid tokenId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// OAuth2 トークン無効化エンドポイント
        /// </summary>
        /// <remarks>
        /// OAuth2 トークン無効化エンドポイント
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">無効化するOAuth2トークンまたはOAuth2リフレッシュトークン</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RevokeOAuth2TokenAsync(string token, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// OAuth2 トークン無効化エンドポイント
        /// </summary>
        /// <remarks>
        /// OAuth2 トークン無効化エンドポイント
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">無効化するOAuth2トークンまたはOAuth2リフレッシュトークン</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RevokeOAuth2TokenWithHttpInfoAsync(string token, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOauth2Api : IOauth2ApiSync, IOauth2ApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class Oauth2Api : IDisposable, IOauth2Api
    {
        private Traq.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="Oauth2Api"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public Oauth2Api() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Oauth2Api"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public Oauth2Api(string basePath)
        {
            this.Configuration = Traq.Client.Configuration.MergeConfigurations(
                Traq.Client.GlobalConfiguration.Instance,
                new Traq.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Traq.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Traq.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Oauth2Api"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public Oauth2Api(Traq.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Traq.Client.Configuration.MergeConfigurations(
                Traq.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Traq.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Traq.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Oauth2Api"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public Oauth2Api(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Oauth2Api"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public Oauth2Api(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Traq.Client.Configuration.MergeConfigurations(
                Traq.Client.GlobalConfiguration.Instance,
                new Traq.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Traq.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Traq.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Oauth2Api"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public Oauth2Api(HttpClient client, Traq.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Traq.Client.Configuration.MergeConfigurations(
                Traq.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Traq.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Traq.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Oauth2Api"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public Oauth2Api(Traq.Client.ISynchronousClient client, Traq.Client.IAsynchronousClient asyncClient, Traq.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Traq.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Traq.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Traq.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Traq.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Traq.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Traq.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// OAuth2クライアントを作成 OAuth2クライアントを作成します。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postClientRequest"> (optional)</param>
        /// <returns>OAuth2ClientDetail</returns>
        public OAuth2ClientDetail CreateClient(PostClientRequest? postClientRequest = default(PostClientRequest?))
        {
            Traq.Client.ApiResponse<OAuth2ClientDetail> localVarResponse = CreateClientWithHttpInfo(postClientRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// OAuth2クライアントを作成 OAuth2クライアントを作成します。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postClientRequest"> (optional)</param>
        /// <returns>ApiResponse of OAuth2ClientDetail</returns>
        public Traq.Client.ApiResponse<OAuth2ClientDetail> CreateClientWithHttpInfo(PostClientRequest? postClientRequest = default(PostClientRequest?))
        {
            Traq.Client.RequestOptions localVarRequestOptions = new Traq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Traq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Traq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = postClientRequest;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<OAuth2ClientDetail>("/clients", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateClient", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// OAuth2クライアントを作成 OAuth2クライアントを作成します。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postClientRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OAuth2ClientDetail</returns>
        public async System.Threading.Tasks.Task<OAuth2ClientDetail> CreateClientAsync(PostClientRequest? postClientRequest = default(PostClientRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Traq.Client.ApiResponse<OAuth2ClientDetail> localVarResponse = await CreateClientWithHttpInfoAsync(postClientRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// OAuth2クライアントを作成 OAuth2クライアントを作成します。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postClientRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OAuth2ClientDetail)</returns>
        public async System.Threading.Tasks.Task<Traq.Client.ApiResponse<OAuth2ClientDetail>> CreateClientWithHttpInfoAsync(PostClientRequest? postClientRequest = default(PostClientRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Traq.Client.RequestOptions localVarRequestOptions = new Traq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Traq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Traq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = postClientRequest;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<OAuth2ClientDetail>("/clients", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateClient", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// OAuth2クライアントを削除 指定したOAuth2クライアントを削除します。 対象のクライアントの管理権限が必要です。正常に削除された場合、このクライアントに対する認可は全て取り消されます。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth2クライアントUUID</param>
        /// <returns></returns>
        public void DeleteClient(string clientId)
        {
            DeleteClientWithHttpInfo(clientId);
        }

        /// <summary>
        /// OAuth2クライアントを削除 指定したOAuth2クライアントを削除します。 対象のクライアントの管理権限が必要です。正常に削除された場合、このクライアントに対する認可は全て取り消されます。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth2クライアントUUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Traq.Client.ApiResponse<Object> DeleteClientWithHttpInfo(string clientId)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new Traq.Client.ApiException(400, "Missing required parameter 'clientId' when calling Oauth2Api->DeleteClient");

            Traq.Client.RequestOptions localVarRequestOptions = new Traq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Traq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Traq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("clientId", Traq.Client.ClientUtils.ParameterToString(clientId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/clients/{clientId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteClient", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// OAuth2クライアントを削除 指定したOAuth2クライアントを削除します。 対象のクライアントの管理権限が必要です。正常に削除された場合、このクライアントに対する認可は全て取り消されます。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth2クライアントUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteClientAsync(string clientId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await DeleteClientWithHttpInfoAsync(clientId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// OAuth2クライアントを削除 指定したOAuth2クライアントを削除します。 対象のクライアントの管理権限が必要です。正常に削除された場合、このクライアントに対する認可は全て取り消されます。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth2クライアントUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Traq.Client.ApiResponse<Object>> DeleteClientWithHttpInfoAsync(string clientId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new Traq.Client.ApiException(400, "Missing required parameter 'clientId' when calling Oauth2Api->DeleteClient");


            Traq.Client.RequestOptions localVarRequestOptions = new Traq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = Traq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Traq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("clientId", Traq.Client.ClientUtils.ParameterToString(clientId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/clients/{clientId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteClient", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// OAuth2クライアント情報を変更 指定したOAuth2クライアントの情報を変更します。 対象のクライアントの管理権限が必要です。 クライアント開発者UUIDを変更した場合は、変更先ユーザーにクライアント管理権限が移譲され、自分自身は権限を失います。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth2クライアントUUID</param>
        /// <param name="patchClientRequest"> (optional)</param>
        /// <returns></returns>
        public void EditClient(string clientId, PatchClientRequest? patchClientRequest = default(PatchClientRequest?))
        {
            EditClientWithHttpInfo(clientId, patchClientRequest);
        }

        /// <summary>
        /// OAuth2クライアント情報を変更 指定したOAuth2クライアントの情報を変更します。 対象のクライアントの管理権限が必要です。 クライアント開発者UUIDを変更した場合は、変更先ユーザーにクライアント管理権限が移譲され、自分自身は権限を失います。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth2クライアントUUID</param>
        /// <param name="patchClientRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Traq.Client.ApiResponse<Object> EditClientWithHttpInfo(string clientId, PatchClientRequest? patchClientRequest = default(PatchClientRequest?))
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new Traq.Client.ApiException(400, "Missing required parameter 'clientId' when calling Oauth2Api->EditClient");

            Traq.Client.RequestOptions localVarRequestOptions = new Traq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Traq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Traq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("clientId", Traq.Client.ClientUtils.ParameterToString(clientId)); // path parameter
            localVarRequestOptions.Data = patchClientRequest;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/clients/{clientId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EditClient", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// OAuth2クライアント情報を変更 指定したOAuth2クライアントの情報を変更します。 対象のクライアントの管理権限が必要です。 クライアント開発者UUIDを変更した場合は、変更先ユーザーにクライアント管理権限が移譲され、自分自身は権限を失います。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth2クライアントUUID</param>
        /// <param name="patchClientRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EditClientAsync(string clientId, PatchClientRequest? patchClientRequest = default(PatchClientRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await EditClientWithHttpInfoAsync(clientId, patchClientRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// OAuth2クライアント情報を変更 指定したOAuth2クライアントの情報を変更します。 対象のクライアントの管理権限が必要です。 クライアント開発者UUIDを変更した場合は、変更先ユーザーにクライアント管理権限が移譲され、自分自身は権限を失います。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth2クライアントUUID</param>
        /// <param name="patchClientRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Traq.Client.ApiResponse<Object>> EditClientWithHttpInfoAsync(string clientId, PatchClientRequest? patchClientRequest = default(PatchClientRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new Traq.Client.ApiException(400, "Missing required parameter 'clientId' when calling Oauth2Api->EditClient");


            Traq.Client.RequestOptions localVarRequestOptions = new Traq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = Traq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Traq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("clientId", Traq.Client.ClientUtils.ParameterToString(clientId)); // path parameter
            localVarRequestOptions.Data = patchClientRequest;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/clients/{clientId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EditClient", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// OAuth2クライアント情報を取得 指定したOAuth2クライアントの情報を取得します。 詳細情報の取得には対象のクライアントの管理権限が必要です。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth2クライアントUUID</param>
        /// <param name="detail">詳細情報を含めるかどうか (optional, default to false)</param>
        /// <returns>GetClient200Response</returns>
        public GetClient200Response GetClient(string clientId, bool? detail = default(bool?))
        {
            Traq.Client.ApiResponse<GetClient200Response> localVarResponse = GetClientWithHttpInfo(clientId, detail);
            return localVarResponse.Data;
        }

        /// <summary>
        /// OAuth2クライアント情報を取得 指定したOAuth2クライアントの情報を取得します。 詳細情報の取得には対象のクライアントの管理権限が必要です。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth2クライアントUUID</param>
        /// <param name="detail">詳細情報を含めるかどうか (optional, default to false)</param>
        /// <returns>ApiResponse of GetClient200Response</returns>
        public Traq.Client.ApiResponse<GetClient200Response> GetClientWithHttpInfo(string clientId, bool? detail = default(bool?))
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new Traq.Client.ApiException(400, "Missing required parameter 'clientId' when calling Oauth2Api->GetClient");

            Traq.Client.RequestOptions localVarRequestOptions = new Traq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Traq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Traq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("clientId", Traq.Client.ClientUtils.ParameterToString(clientId)); // path parameter
            if (detail != null)
            {
                localVarRequestOptions.QueryParameters.Add(Traq.Client.ClientUtils.ParameterToMultiMap("", "detail", detail));
            }

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetClient200Response>("/clients/{clientId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetClient", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// OAuth2クライアント情報を取得 指定したOAuth2クライアントの情報を取得します。 詳細情報の取得には対象のクライアントの管理権限が必要です。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth2クライアントUUID</param>
        /// <param name="detail">詳細情報を含めるかどうか (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetClient200Response</returns>
        public async System.Threading.Tasks.Task<GetClient200Response> GetClientAsync(string clientId, bool? detail = default(bool?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Traq.Client.ApiResponse<GetClient200Response> localVarResponse = await GetClientWithHttpInfoAsync(clientId, detail, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// OAuth2クライアント情報を取得 指定したOAuth2クライアントの情報を取得します。 詳細情報の取得には対象のクライアントの管理権限が必要です。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth2クライアントUUID</param>
        /// <param name="detail">詳細情報を含めるかどうか (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetClient200Response)</returns>
        public async System.Threading.Tasks.Task<Traq.Client.ApiResponse<GetClient200Response>> GetClientWithHttpInfoAsync(string clientId, bool? detail = default(bool?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new Traq.Client.ApiException(400, "Missing required parameter 'clientId' when calling Oauth2Api->GetClient");


            Traq.Client.RequestOptions localVarRequestOptions = new Traq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Traq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Traq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("clientId", Traq.Client.ClientUtils.ParameterToString(clientId)); // path parameter
            if (detail != null)
            {
                localVarRequestOptions.QueryParameters.Add(Traq.Client.ClientUtils.ParameterToMultiMap("", "detail", detail));
            }

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetClient200Response>("/clients/{clientId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetClient", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// OAuth2クライアントのリストを取得 自身が開発者のOAuth2クライアントのリストを取得します。 &#x60;all&#x60;が&#x60;true&#x60;の場合、全開発者の全クライアントのリストを返します。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="all">全てのクライアントを取得するかどうか (optional, default to false)</param>
        /// <returns>List&lt;OAuth2Client&gt;</returns>
        public List<OAuth2Client> GetClients(bool? all = default(bool?))
        {
            Traq.Client.ApiResponse<List<OAuth2Client>> localVarResponse = GetClientsWithHttpInfo(all);
            return localVarResponse.Data;
        }

        /// <summary>
        /// OAuth2クライアントのリストを取得 自身が開発者のOAuth2クライアントのリストを取得します。 &#x60;all&#x60;が&#x60;true&#x60;の場合、全開発者の全クライアントのリストを返します。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="all">全てのクライアントを取得するかどうか (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;OAuth2Client&gt;</returns>
        public Traq.Client.ApiResponse<List<OAuth2Client>> GetClientsWithHttpInfo(bool? all = default(bool?))
        {
            Traq.Client.RequestOptions localVarRequestOptions = new Traq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Traq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Traq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (all != null)
            {
                localVarRequestOptions.QueryParameters.Add(Traq.Client.ClientUtils.ParameterToMultiMap("", "all", all));
            }

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<OAuth2Client>>("/clients", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetClients", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// OAuth2クライアントのリストを取得 自身が開発者のOAuth2クライアントのリストを取得します。 &#x60;all&#x60;が&#x60;true&#x60;の場合、全開発者の全クライアントのリストを返します。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="all">全てのクライアントを取得するかどうか (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;OAuth2Client&gt;</returns>
        public async System.Threading.Tasks.Task<List<OAuth2Client>> GetClientsAsync(bool? all = default(bool?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Traq.Client.ApiResponse<List<OAuth2Client>> localVarResponse = await GetClientsWithHttpInfoAsync(all, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// OAuth2クライアントのリストを取得 自身が開発者のOAuth2クライアントのリストを取得します。 &#x60;all&#x60;が&#x60;true&#x60;の場合、全開発者の全クライアントのリストを返します。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="all">全てのクライアントを取得するかどうか (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;OAuth2Client&gt;)</returns>
        public async System.Threading.Tasks.Task<Traq.Client.ApiResponse<List<OAuth2Client>>> GetClientsWithHttpInfoAsync(bool? all = default(bool?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Traq.Client.RequestOptions localVarRequestOptions = new Traq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Traq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Traq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (all != null)
            {
                localVarRequestOptions.QueryParameters.Add(Traq.Client.ClientUtils.ParameterToMultiMap("", "all", all));
            }

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<OAuth2Client>>("/clients", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetClients", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 有効トークンのリストを取得 有効な自分に発行されたOAuth2トークンのリストを取得します。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ActiveOAuth2Token&gt;</returns>
        public List<ActiveOAuth2Token> GetMyTokens()
        {
            Traq.Client.ApiResponse<List<ActiveOAuth2Token>> localVarResponse = GetMyTokensWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// 有効トークンのリストを取得 有効な自分に発行されたOAuth2トークンのリストを取得します。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ActiveOAuth2Token&gt;</returns>
        public Traq.Client.ApiResponse<List<ActiveOAuth2Token>> GetMyTokensWithHttpInfo()
        {
            Traq.Client.RequestOptions localVarRequestOptions = new Traq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Traq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Traq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ActiveOAuth2Token>>("/users/me/tokens", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMyTokens", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 有効トークンのリストを取得 有効な自分に発行されたOAuth2トークンのリストを取得します。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ActiveOAuth2Token&gt;</returns>
        public async System.Threading.Tasks.Task<List<ActiveOAuth2Token>> GetMyTokensAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Traq.Client.ApiResponse<List<ActiveOAuth2Token>> localVarResponse = await GetMyTokensWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 有効トークンのリストを取得 有効な自分に発行されたOAuth2トークンのリストを取得します。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ActiveOAuth2Token&gt;)</returns>
        public async System.Threading.Tasks.Task<Traq.Client.ApiResponse<List<ActiveOAuth2Token>>> GetMyTokensWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Traq.Client.RequestOptions localVarRequestOptions = new Traq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Traq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Traq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ActiveOAuth2Token>>("/users/me/tokens", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMyTokens", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// OAuth2 認可エンドポイント OAuth2 認可エンドポイント
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="responseType"> (optional)</param>
        /// <param name="redirectUri"> (optional)</param>
        /// <param name="scope"> (optional)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="codeChallenge"> (optional)</param>
        /// <param name="codeChallengeMethod"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="prompt"> (optional)</param>
        /// <returns></returns>
        public void GetOAuth2Authorize(string clientId, OAuth2ResponseType? responseType = default(OAuth2ResponseType?), string? redirectUri = default(string?), string? scope = default(string?), string? state = default(string?), string? codeChallenge = default(string?), string? codeChallengeMethod = default(string?), string? nonce = default(string?), OAuth2Prompt? prompt = default(OAuth2Prompt?))
        {
            GetOAuth2AuthorizeWithHttpInfo(clientId, responseType, redirectUri, scope, state, codeChallenge, codeChallengeMethod, nonce, prompt);
        }

        /// <summary>
        /// OAuth2 認可エンドポイント OAuth2 認可エンドポイント
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="responseType"> (optional)</param>
        /// <param name="redirectUri"> (optional)</param>
        /// <param name="scope"> (optional)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="codeChallenge"> (optional)</param>
        /// <param name="codeChallengeMethod"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="prompt"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Traq.Client.ApiResponse<Object> GetOAuth2AuthorizeWithHttpInfo(string clientId, OAuth2ResponseType? responseType = default(OAuth2ResponseType?), string? redirectUri = default(string?), string? scope = default(string?), string? state = default(string?), string? codeChallenge = default(string?), string? codeChallengeMethod = default(string?), string? nonce = default(string?), OAuth2Prompt? prompt = default(OAuth2Prompt?))
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new Traq.Client.ApiException(400, "Missing required parameter 'clientId' when calling Oauth2Api->GetOAuth2Authorize");

            Traq.Client.RequestOptions localVarRequestOptions = new Traq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Traq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Traq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (responseType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Traq.Client.ClientUtils.ParameterToMultiMap("", "response_type", responseType));
            }
            localVarRequestOptions.QueryParameters.Add(Traq.Client.ClientUtils.ParameterToMultiMap("", "client_id", clientId));
            if (redirectUri != null)
            {
                localVarRequestOptions.QueryParameters.Add(Traq.Client.ClientUtils.ParameterToMultiMap("", "redirect_uri", redirectUri));
            }
            if (scope != null)
            {
                localVarRequestOptions.QueryParameters.Add(Traq.Client.ClientUtils.ParameterToMultiMap("", "scope", scope));
            }
            if (state != null)
            {
                localVarRequestOptions.QueryParameters.Add(Traq.Client.ClientUtils.ParameterToMultiMap("", "state", state));
            }
            if (codeChallenge != null)
            {
                localVarRequestOptions.QueryParameters.Add(Traq.Client.ClientUtils.ParameterToMultiMap("", "code_challenge", codeChallenge));
            }
            if (codeChallengeMethod != null)
            {
                localVarRequestOptions.QueryParameters.Add(Traq.Client.ClientUtils.ParameterToMultiMap("", "code_challenge_method", codeChallengeMethod));
            }
            if (nonce != null)
            {
                localVarRequestOptions.QueryParameters.Add(Traq.Client.ClientUtils.ParameterToMultiMap("", "nonce", nonce));
            }
            if (prompt != null)
            {
                localVarRequestOptions.QueryParameters.Add(Traq.Client.ClientUtils.ParameterToMultiMap("", "prompt", prompt));
            }

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/oauth2/authorize", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOAuth2Authorize", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// OAuth2 認可エンドポイント OAuth2 認可エンドポイント
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="responseType"> (optional)</param>
        /// <param name="redirectUri"> (optional)</param>
        /// <param name="scope"> (optional)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="codeChallenge"> (optional)</param>
        /// <param name="codeChallengeMethod"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="prompt"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetOAuth2AuthorizeAsync(string clientId, OAuth2ResponseType? responseType = default(OAuth2ResponseType?), string? redirectUri = default(string?), string? scope = default(string?), string? state = default(string?), string? codeChallenge = default(string?), string? codeChallengeMethod = default(string?), string? nonce = default(string?), OAuth2Prompt? prompt = default(OAuth2Prompt?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await GetOAuth2AuthorizeWithHttpInfoAsync(clientId, responseType, redirectUri, scope, state, codeChallenge, codeChallengeMethod, nonce, prompt, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// OAuth2 認可エンドポイント OAuth2 認可エンドポイント
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="responseType"> (optional)</param>
        /// <param name="redirectUri"> (optional)</param>
        /// <param name="scope"> (optional)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="codeChallenge"> (optional)</param>
        /// <param name="codeChallengeMethod"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="prompt"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Traq.Client.ApiResponse<Object>> GetOAuth2AuthorizeWithHttpInfoAsync(string clientId, OAuth2ResponseType? responseType = default(OAuth2ResponseType?), string? redirectUri = default(string?), string? scope = default(string?), string? state = default(string?), string? codeChallenge = default(string?), string? codeChallengeMethod = default(string?), string? nonce = default(string?), OAuth2Prompt? prompt = default(OAuth2Prompt?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new Traq.Client.ApiException(400, "Missing required parameter 'clientId' when calling Oauth2Api->GetOAuth2Authorize");


            Traq.Client.RequestOptions localVarRequestOptions = new Traq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = Traq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Traq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (responseType != null)
            {
                localVarRequestOptions.QueryParameters.Add(Traq.Client.ClientUtils.ParameterToMultiMap("", "response_type", responseType));
            }
            localVarRequestOptions.QueryParameters.Add(Traq.Client.ClientUtils.ParameterToMultiMap("", "client_id", clientId));
            if (redirectUri != null)
            {
                localVarRequestOptions.QueryParameters.Add(Traq.Client.ClientUtils.ParameterToMultiMap("", "redirect_uri", redirectUri));
            }
            if (scope != null)
            {
                localVarRequestOptions.QueryParameters.Add(Traq.Client.ClientUtils.ParameterToMultiMap("", "scope", scope));
            }
            if (state != null)
            {
                localVarRequestOptions.QueryParameters.Add(Traq.Client.ClientUtils.ParameterToMultiMap("", "state", state));
            }
            if (codeChallenge != null)
            {
                localVarRequestOptions.QueryParameters.Add(Traq.Client.ClientUtils.ParameterToMultiMap("", "code_challenge", codeChallenge));
            }
            if (codeChallengeMethod != null)
            {
                localVarRequestOptions.QueryParameters.Add(Traq.Client.ClientUtils.ParameterToMultiMap("", "code_challenge_method", codeChallengeMethod));
            }
            if (nonce != null)
            {
                localVarRequestOptions.QueryParameters.Add(Traq.Client.ClientUtils.ParameterToMultiMap("", "nonce", nonce));
            }
            if (prompt != null)
            {
                localVarRequestOptions.QueryParameters.Add(Traq.Client.ClientUtils.ParameterToMultiMap("", "prompt", prompt));
            }

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/oauth2/authorize", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOAuth2Authorize", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// OAuth2 認可エンドポイント OAuth2 認可エンドポイント
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="responseType"> (optional)</param>
        /// <param name="redirectUri"> (optional)</param>
        /// <param name="scope"> (optional)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="codeChallenge"> (optional)</param>
        /// <param name="codeChallengeMethod"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="prompt"> (optional)</param>
        /// <returns></returns>
        public void PostOAuth2Authorize(string clientId, OAuth2ResponseType? responseType = default(OAuth2ResponseType?), string? redirectUri = default(string?), string? scope = default(string?), string? state = default(string?), string? codeChallenge = default(string?), string? codeChallengeMethod = default(string?), string? nonce = default(string?), OAuth2Prompt? prompt = default(OAuth2Prompt?))
        {
            PostOAuth2AuthorizeWithHttpInfo(clientId, responseType, redirectUri, scope, state, codeChallenge, codeChallengeMethod, nonce, prompt);
        }

        /// <summary>
        /// OAuth2 認可エンドポイント OAuth2 認可エンドポイント
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="responseType"> (optional)</param>
        /// <param name="redirectUri"> (optional)</param>
        /// <param name="scope"> (optional)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="codeChallenge"> (optional)</param>
        /// <param name="codeChallengeMethod"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="prompt"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Traq.Client.ApiResponse<Object> PostOAuth2AuthorizeWithHttpInfo(string clientId, OAuth2ResponseType? responseType = default(OAuth2ResponseType?), string? redirectUri = default(string?), string? scope = default(string?), string? state = default(string?), string? codeChallenge = default(string?), string? codeChallengeMethod = default(string?), string? nonce = default(string?), OAuth2Prompt? prompt = default(OAuth2Prompt?))
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new Traq.Client.ApiException(400, "Missing required parameter 'clientId' when calling Oauth2Api->PostOAuth2Authorize");

            Traq.Client.RequestOptions localVarRequestOptions = new Traq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Traq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Traq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (responseType != null)
            {
                localVarRequestOptions.FormParameters.Add("response_type", Traq.Client.ClientUtils.ParameterToString(responseType)); // form parameter
            }
            localVarRequestOptions.FormParameters.Add("client_id", Traq.Client.ClientUtils.ParameterToString(clientId)); // form parameter
            if (redirectUri != null)
            {
                localVarRequestOptions.FormParameters.Add("redirect_uri", Traq.Client.ClientUtils.ParameterToString(redirectUri)); // form parameter
            }
            if (scope != null)
            {
                localVarRequestOptions.FormParameters.Add("scope", Traq.Client.ClientUtils.ParameterToString(scope)); // form parameter
            }
            if (state != null)
            {
                localVarRequestOptions.FormParameters.Add("state", Traq.Client.ClientUtils.ParameterToString(state)); // form parameter
            }
            if (codeChallenge != null)
            {
                localVarRequestOptions.FormParameters.Add("code_challenge", Traq.Client.ClientUtils.ParameterToString(codeChallenge)); // form parameter
            }
            if (codeChallengeMethod != null)
            {
                localVarRequestOptions.FormParameters.Add("code_challenge_method", Traq.Client.ClientUtils.ParameterToString(codeChallengeMethod)); // form parameter
            }
            if (nonce != null)
            {
                localVarRequestOptions.FormParameters.Add("nonce", Traq.Client.ClientUtils.ParameterToString(nonce)); // form parameter
            }
            if (prompt != null)
            {
                localVarRequestOptions.FormParameters.Add("prompt", Traq.Client.ClientUtils.ParameterToString(prompt)); // form parameter
            }

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/oauth2/authorize", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostOAuth2Authorize", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// OAuth2 認可エンドポイント OAuth2 認可エンドポイント
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="responseType"> (optional)</param>
        /// <param name="redirectUri"> (optional)</param>
        /// <param name="scope"> (optional)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="codeChallenge"> (optional)</param>
        /// <param name="codeChallengeMethod"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="prompt"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostOAuth2AuthorizeAsync(string clientId, OAuth2ResponseType? responseType = default(OAuth2ResponseType?), string? redirectUri = default(string?), string? scope = default(string?), string? state = default(string?), string? codeChallenge = default(string?), string? codeChallengeMethod = default(string?), string? nonce = default(string?), OAuth2Prompt? prompt = default(OAuth2Prompt?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await PostOAuth2AuthorizeWithHttpInfoAsync(clientId, responseType, redirectUri, scope, state, codeChallenge, codeChallengeMethod, nonce, prompt, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// OAuth2 認可エンドポイント OAuth2 認可エンドポイント
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"></param>
        /// <param name="responseType"> (optional)</param>
        /// <param name="redirectUri"> (optional)</param>
        /// <param name="scope"> (optional)</param>
        /// <param name="state"> (optional)</param>
        /// <param name="codeChallenge"> (optional)</param>
        /// <param name="codeChallengeMethod"> (optional)</param>
        /// <param name="nonce"> (optional)</param>
        /// <param name="prompt"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Traq.Client.ApiResponse<Object>> PostOAuth2AuthorizeWithHttpInfoAsync(string clientId, OAuth2ResponseType? responseType = default(OAuth2ResponseType?), string? redirectUri = default(string?), string? scope = default(string?), string? state = default(string?), string? codeChallenge = default(string?), string? codeChallengeMethod = default(string?), string? nonce = default(string?), OAuth2Prompt? prompt = default(OAuth2Prompt?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new Traq.Client.ApiException(400, "Missing required parameter 'clientId' when calling Oauth2Api->PostOAuth2Authorize");


            Traq.Client.RequestOptions localVarRequestOptions = new Traq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = Traq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Traq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (responseType != null)
            {
                localVarRequestOptions.FormParameters.Add("response_type", Traq.Client.ClientUtils.ParameterToString(responseType)); // form parameter
            }
            localVarRequestOptions.FormParameters.Add("client_id", Traq.Client.ClientUtils.ParameterToString(clientId)); // form parameter
            if (redirectUri != null)
            {
                localVarRequestOptions.FormParameters.Add("redirect_uri", Traq.Client.ClientUtils.ParameterToString(redirectUri)); // form parameter
            }
            if (scope != null)
            {
                localVarRequestOptions.FormParameters.Add("scope", Traq.Client.ClientUtils.ParameterToString(scope)); // form parameter
            }
            if (state != null)
            {
                localVarRequestOptions.FormParameters.Add("state", Traq.Client.ClientUtils.ParameterToString(state)); // form parameter
            }
            if (codeChallenge != null)
            {
                localVarRequestOptions.FormParameters.Add("code_challenge", Traq.Client.ClientUtils.ParameterToString(codeChallenge)); // form parameter
            }
            if (codeChallengeMethod != null)
            {
                localVarRequestOptions.FormParameters.Add("code_challenge_method", Traq.Client.ClientUtils.ParameterToString(codeChallengeMethod)); // form parameter
            }
            if (nonce != null)
            {
                localVarRequestOptions.FormParameters.Add("nonce", Traq.Client.ClientUtils.ParameterToString(nonce)); // form parameter
            }
            if (prompt != null)
            {
                localVarRequestOptions.FormParameters.Add("prompt", Traq.Client.ClientUtils.ParameterToString(prompt)); // form parameter
            }

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/oauth2/authorize", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostOAuth2Authorize", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// OAuth2 認可承諾API OAuth2 認可承諾
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submit">承諾する場合は\\\&quot;approve\\\&quot;</param>
        /// <returns></returns>
        public void PostOAuth2AuthorizeDecide(string submit)
        {
            PostOAuth2AuthorizeDecideWithHttpInfo(submit);
        }

        /// <summary>
        /// OAuth2 認可承諾API OAuth2 認可承諾
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submit">承諾する場合は\\\&quot;approve\\\&quot;</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Traq.Client.ApiResponse<Object> PostOAuth2AuthorizeDecideWithHttpInfo(string submit)
        {
            // verify the required parameter 'submit' is set
            if (submit == null)
                throw new Traq.Client.ApiException(400, "Missing required parameter 'submit' when calling Oauth2Api->PostOAuth2AuthorizeDecide");

            Traq.Client.RequestOptions localVarRequestOptions = new Traq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Traq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Traq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.FormParameters.Add("submit", Traq.Client.ClientUtils.ParameterToString(submit)); // form parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/oauth2/authorize/decide", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostOAuth2AuthorizeDecide", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// OAuth2 認可承諾API OAuth2 認可承諾
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submit">承諾する場合は\\\&quot;approve\\\&quot;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostOAuth2AuthorizeDecideAsync(string submit, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await PostOAuth2AuthorizeDecideWithHttpInfoAsync(submit, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// OAuth2 認可承諾API OAuth2 認可承諾
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="submit">承諾する場合は\\\&quot;approve\\\&quot;</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Traq.Client.ApiResponse<Object>> PostOAuth2AuthorizeDecideWithHttpInfoAsync(string submit, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'submit' is set
            if (submit == null)
                throw new Traq.Client.ApiException(400, "Missing required parameter 'submit' when calling Oauth2Api->PostOAuth2AuthorizeDecide");


            Traq.Client.RequestOptions localVarRequestOptions = new Traq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = Traq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Traq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.FormParameters.Add("submit", Traq.Client.ClientUtils.ParameterToString(submit)); // form parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/oauth2/authorize/decide", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostOAuth2AuthorizeDecide", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// OAuth2 トークンエンドポイント OAuth2 トークンエンドポイント
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType"></param>
        /// <param name="code"> (optional)</param>
        /// <param name="redirectUri"> (optional)</param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="codeVerifier"> (optional)</param>
        /// <param name="username"> (optional)</param>
        /// <param name="password"> (optional)</param>
        /// <param name="scope"> (optional)</param>
        /// <param name="refreshToken"> (optional)</param>
        /// <param name="clientSecret"> (optional)</param>
        /// <returns>OAuth2Token</returns>
        public OAuth2Token PostOAuth2Token(string grantType, string? code = default(string?), string? redirectUri = default(string?), string? clientId = default(string?), string? codeVerifier = default(string?), string? username = default(string?), string? password = default(string?), string? scope = default(string?), string? refreshToken = default(string?), string? clientSecret = default(string?))
        {
            Traq.Client.ApiResponse<OAuth2Token> localVarResponse = PostOAuth2TokenWithHttpInfo(grantType, code, redirectUri, clientId, codeVerifier, username, password, scope, refreshToken, clientSecret);
            return localVarResponse.Data;
        }

        /// <summary>
        /// OAuth2 トークンエンドポイント OAuth2 トークンエンドポイント
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType"></param>
        /// <param name="code"> (optional)</param>
        /// <param name="redirectUri"> (optional)</param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="codeVerifier"> (optional)</param>
        /// <param name="username"> (optional)</param>
        /// <param name="password"> (optional)</param>
        /// <param name="scope"> (optional)</param>
        /// <param name="refreshToken"> (optional)</param>
        /// <param name="clientSecret"> (optional)</param>
        /// <returns>ApiResponse of OAuth2Token</returns>
        public Traq.Client.ApiResponse<OAuth2Token> PostOAuth2TokenWithHttpInfo(string grantType, string? code = default(string?), string? redirectUri = default(string?), string? clientId = default(string?), string? codeVerifier = default(string?), string? username = default(string?), string? password = default(string?), string? scope = default(string?), string? refreshToken = default(string?), string? clientSecret = default(string?))
        {
            // verify the required parameter 'grantType' is set
            if (grantType == null)
                throw new Traq.Client.ApiException(400, "Missing required parameter 'grantType' when calling Oauth2Api->PostOAuth2Token");

            Traq.Client.RequestOptions localVarRequestOptions = new Traq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Traq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Traq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.FormParameters.Add("grant_type", Traq.Client.ClientUtils.ParameterToString(grantType)); // form parameter
            if (code != null)
            {
                localVarRequestOptions.FormParameters.Add("code", Traq.Client.ClientUtils.ParameterToString(code)); // form parameter
            }
            if (redirectUri != null)
            {
                localVarRequestOptions.FormParameters.Add("redirect_uri", Traq.Client.ClientUtils.ParameterToString(redirectUri)); // form parameter
            }
            if (clientId != null)
            {
                localVarRequestOptions.FormParameters.Add("client_id", Traq.Client.ClientUtils.ParameterToString(clientId)); // form parameter
            }
            if (codeVerifier != null)
            {
                localVarRequestOptions.FormParameters.Add("code_verifier", Traq.Client.ClientUtils.ParameterToString(codeVerifier)); // form parameter
            }
            if (username != null)
            {
                localVarRequestOptions.FormParameters.Add("username", Traq.Client.ClientUtils.ParameterToString(username)); // form parameter
            }
            if (password != null)
            {
                localVarRequestOptions.FormParameters.Add("password", Traq.Client.ClientUtils.ParameterToString(password)); // form parameter
            }
            if (scope != null)
            {
                localVarRequestOptions.FormParameters.Add("scope", Traq.Client.ClientUtils.ParameterToString(scope)); // form parameter
            }
            if (refreshToken != null)
            {
                localVarRequestOptions.FormParameters.Add("refresh_token", Traq.Client.ClientUtils.ParameterToString(refreshToken)); // form parameter
            }
            if (clientSecret != null)
            {
                localVarRequestOptions.FormParameters.Add("client_secret", Traq.Client.ClientUtils.ParameterToString(clientSecret)); // form parameter
            }

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<OAuth2Token>("/oauth2/token", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostOAuth2Token", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// OAuth2 トークンエンドポイント OAuth2 トークンエンドポイント
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType"></param>
        /// <param name="code"> (optional)</param>
        /// <param name="redirectUri"> (optional)</param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="codeVerifier"> (optional)</param>
        /// <param name="username"> (optional)</param>
        /// <param name="password"> (optional)</param>
        /// <param name="scope"> (optional)</param>
        /// <param name="refreshToken"> (optional)</param>
        /// <param name="clientSecret"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OAuth2Token</returns>
        public async System.Threading.Tasks.Task<OAuth2Token> PostOAuth2TokenAsync(string grantType, string? code = default(string?), string? redirectUri = default(string?), string? clientId = default(string?), string? codeVerifier = default(string?), string? username = default(string?), string? password = default(string?), string? scope = default(string?), string? refreshToken = default(string?), string? clientSecret = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Traq.Client.ApiResponse<OAuth2Token> localVarResponse = await PostOAuth2TokenWithHttpInfoAsync(grantType, code, redirectUri, clientId, codeVerifier, username, password, scope, refreshToken, clientSecret, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// OAuth2 トークンエンドポイント OAuth2 トークンエンドポイント
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType"></param>
        /// <param name="code"> (optional)</param>
        /// <param name="redirectUri"> (optional)</param>
        /// <param name="clientId"> (optional)</param>
        /// <param name="codeVerifier"> (optional)</param>
        /// <param name="username"> (optional)</param>
        /// <param name="password"> (optional)</param>
        /// <param name="scope"> (optional)</param>
        /// <param name="refreshToken"> (optional)</param>
        /// <param name="clientSecret"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OAuth2Token)</returns>
        public async System.Threading.Tasks.Task<Traq.Client.ApiResponse<OAuth2Token>> PostOAuth2TokenWithHttpInfoAsync(string grantType, string? code = default(string?), string? redirectUri = default(string?), string? clientId = default(string?), string? codeVerifier = default(string?), string? username = default(string?), string? password = default(string?), string? scope = default(string?), string? refreshToken = default(string?), string? clientSecret = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'grantType' is set
            if (grantType == null)
                throw new Traq.Client.ApiException(400, "Missing required parameter 'grantType' when calling Oauth2Api->PostOAuth2Token");


            Traq.Client.RequestOptions localVarRequestOptions = new Traq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Traq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Traq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.FormParameters.Add("grant_type", Traq.Client.ClientUtils.ParameterToString(grantType)); // form parameter
            if (code != null)
            {
                localVarRequestOptions.FormParameters.Add("code", Traq.Client.ClientUtils.ParameterToString(code)); // form parameter
            }
            if (redirectUri != null)
            {
                localVarRequestOptions.FormParameters.Add("redirect_uri", Traq.Client.ClientUtils.ParameterToString(redirectUri)); // form parameter
            }
            if (clientId != null)
            {
                localVarRequestOptions.FormParameters.Add("client_id", Traq.Client.ClientUtils.ParameterToString(clientId)); // form parameter
            }
            if (codeVerifier != null)
            {
                localVarRequestOptions.FormParameters.Add("code_verifier", Traq.Client.ClientUtils.ParameterToString(codeVerifier)); // form parameter
            }
            if (username != null)
            {
                localVarRequestOptions.FormParameters.Add("username", Traq.Client.ClientUtils.ParameterToString(username)); // form parameter
            }
            if (password != null)
            {
                localVarRequestOptions.FormParameters.Add("password", Traq.Client.ClientUtils.ParameterToString(password)); // form parameter
            }
            if (scope != null)
            {
                localVarRequestOptions.FormParameters.Add("scope", Traq.Client.ClientUtils.ParameterToString(scope)); // form parameter
            }
            if (refreshToken != null)
            {
                localVarRequestOptions.FormParameters.Add("refresh_token", Traq.Client.ClientUtils.ParameterToString(refreshToken)); // form parameter
            }
            if (clientSecret != null)
            {
                localVarRequestOptions.FormParameters.Add("client_secret", Traq.Client.ClientUtils.ParameterToString(clientSecret)); // form parameter
            }

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<OAuth2Token>("/oauth2/token", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostOAuth2Token", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// OAuthクライアントのトークンを削除 自分が許可している指定したOAuthクライアントのアクセストークンを全てRevokeします。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth2クライアントUUID</param>
        /// <returns></returns>
        public void RevokeClientTokens(string clientId)
        {
            RevokeClientTokensWithHttpInfo(clientId);
        }

        /// <summary>
        /// OAuthクライアントのトークンを削除 自分が許可している指定したOAuthクライアントのアクセストークンを全てRevokeします。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth2クライアントUUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Traq.Client.ApiResponse<Object> RevokeClientTokensWithHttpInfo(string clientId)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new Traq.Client.ApiException(400, "Missing required parameter 'clientId' when calling Oauth2Api->RevokeClientTokens");

            Traq.Client.RequestOptions localVarRequestOptions = new Traq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Traq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Traq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("clientId", Traq.Client.ClientUtils.ParameterToString(clientId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/clients/{clientId}/tokens", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RevokeClientTokens", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// OAuthクライアントのトークンを削除 自分が許可している指定したOAuthクライアントのアクセストークンを全てRevokeします。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth2クライアントUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RevokeClientTokensAsync(string clientId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await RevokeClientTokensWithHttpInfoAsync(clientId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// OAuthクライアントのトークンを削除 自分が許可している指定したOAuthクライアントのアクセストークンを全てRevokeします。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">OAuth2クライアントUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Traq.Client.ApiResponse<Object>> RevokeClientTokensWithHttpInfoAsync(string clientId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new Traq.Client.ApiException(400, "Missing required parameter 'clientId' when calling Oauth2Api->RevokeClientTokens");


            Traq.Client.RequestOptions localVarRequestOptions = new Traq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = Traq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Traq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("clientId", Traq.Client.ClientUtils.ParameterToString(clientId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/clients/{clientId}/tokens", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RevokeClientTokens", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// トークンの認可を取り消す 自分の指定したトークンの認可を取り消します。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId">OAuth2トークンUUID</param>
        /// <returns></returns>
        public void RevokeMyToken(Guid tokenId)
        {
            RevokeMyTokenWithHttpInfo(tokenId);
        }

        /// <summary>
        /// トークンの認可を取り消す 自分の指定したトークンの認可を取り消します。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId">OAuth2トークンUUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Traq.Client.ApiResponse<Object> RevokeMyTokenWithHttpInfo(Guid tokenId)
        {
            Traq.Client.RequestOptions localVarRequestOptions = new Traq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Traq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Traq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("tokenId", Traq.Client.ClientUtils.ParameterToString(tokenId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/users/me/tokens/{tokenId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RevokeMyToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// トークンの認可を取り消す 自分の指定したトークンの認可を取り消します。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId">OAuth2トークンUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RevokeMyTokenAsync(Guid tokenId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await RevokeMyTokenWithHttpInfoAsync(tokenId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// トークンの認可を取り消す 自分の指定したトークンの認可を取り消します。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId">OAuth2トークンUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Traq.Client.ApiResponse<Object>> RevokeMyTokenWithHttpInfoAsync(Guid tokenId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Traq.Client.RequestOptions localVarRequestOptions = new Traq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = Traq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Traq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("tokenId", Traq.Client.ClientUtils.ParameterToString(tokenId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/users/me/tokens/{tokenId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RevokeMyToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// OAuth2 トークン無効化エンドポイント OAuth2 トークン無効化エンドポイント
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">無効化するOAuth2トークンまたはOAuth2リフレッシュトークン</param>
        /// <returns></returns>
        public void RevokeOAuth2Token(string token)
        {
            RevokeOAuth2TokenWithHttpInfo(token);
        }

        /// <summary>
        /// OAuth2 トークン無効化エンドポイント OAuth2 トークン無効化エンドポイント
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">無効化するOAuth2トークンまたはOAuth2リフレッシュトークン</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Traq.Client.ApiResponse<Object> RevokeOAuth2TokenWithHttpInfo(string token)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new Traq.Client.ApiException(400, "Missing required parameter 'token' when calling Oauth2Api->RevokeOAuth2Token");

            Traq.Client.RequestOptions localVarRequestOptions = new Traq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Traq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Traq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.FormParameters.Add("token", Traq.Client.ClientUtils.ParameterToString(token)); // form parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/oauth2/revoke", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RevokeOAuth2Token", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// OAuth2 トークン無効化エンドポイント OAuth2 トークン無効化エンドポイント
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">無効化するOAuth2トークンまたはOAuth2リフレッシュトークン</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RevokeOAuth2TokenAsync(string token, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await RevokeOAuth2TokenWithHttpInfoAsync(token, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// OAuth2 トークン無効化エンドポイント OAuth2 トークン無効化エンドポイント
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">無効化するOAuth2トークンまたはOAuth2リフレッシュトークン</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Traq.Client.ApiResponse<Object>> RevokeOAuth2TokenWithHttpInfoAsync(string token, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new Traq.Client.ApiException(400, "Missing required parameter 'token' when calling Oauth2Api->RevokeOAuth2Token");


            Traq.Client.RequestOptions localVarRequestOptions = new Traq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/x-www-form-urlencoded"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = Traq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Traq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.FormParameters.Add("token", Traq.Client.ClientUtils.ParameterToString(token)); // form parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/oauth2/revoke", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RevokeOAuth2Token", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
