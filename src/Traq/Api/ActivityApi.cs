// <auto-generated>
/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Traq.Client;
using Traq.Model;
using System.Diagnostics.CodeAnalysis;

namespace Traq.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IActivityApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        ActivityApiEvents Events { get; }

        /// <summary>
        /// アクテビティタイムラインを取得
        /// </summary>
        /// <remarks>
        /// パブリックチャンネルの直近の投稿メッセージを作成日時の降順で取得します。 &#x60;all&#x60;が&#x60;true&#x60;でない場合、購読チャンネルのみのタイムラインを取得します
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">取得する件数 (optional, default to 50)</param>
        /// <param name="all">全てのチャンネルのタイムラインを取得する (optional, default to false)</param>
        /// <param name="perChannel">同じチャンネルのメッセージは最新のもののみ取得するか (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetActivityTimelineApiResponse"/>&gt;</returns>
        Task<IGetActivityTimelineApiResponse> GetActivityTimelineAsync(Option<int> limit = default, Option<bool> all = default, Option<bool> perChannel = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// アクテビティタイムラインを取得
        /// </summary>
        /// <remarks>
        /// パブリックチャンネルの直近の投稿メッセージを作成日時の降順で取得します。 &#x60;all&#x60;が&#x60;true&#x60;でない場合、購読チャンネルのみのタイムラインを取得します
        /// </remarks>
        /// <param name="limit">取得する件数 (optional, default to 50)</param>
        /// <param name="all">全てのチャンネルのタイムラインを取得する (optional, default to false)</param>
        /// <param name="perChannel">同じチャンネルのメッセージは最新のもののみ取得するか (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetActivityTimelineApiResponse"/>?&gt;</returns>
        Task<IGetActivityTimelineApiResponse?> GetActivityTimelineOrDefaultAsync(Option<int> limit = default, Option<bool> all = default, Option<bool> perChannel = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// オンラインユーザーリストを取得
        /// </summary>
        /// <remarks>
        /// 現在オンラインな(SSEまたはWSが接続中)ユーザーのUUIDのリストを返します。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOnlineUsersApiResponse"/>&gt;</returns>
        Task<IGetOnlineUsersApiResponse> GetOnlineUsersAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// オンラインユーザーリストを取得
        /// </summary>
        /// <remarks>
        /// 現在オンラインな(SSEまたはWSが接続中)ユーザーのUUIDのリストを返します。
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOnlineUsersApiResponse"/>?&gt;</returns>
        Task<IGetOnlineUsersApiResponse?> GetOnlineUsersOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IGetActivityTimelineApiResponse"/>
    /// </summary>
    public interface IGetActivityTimelineApiResponse : Traq.Client.IApiResponse, IOk<List<ActivityTimelineMessage>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }
    }

    /// <summary>
    /// The <see cref="IGetOnlineUsersApiResponse"/>
    /// </summary>
    public interface IGetOnlineUsersApiResponse : Traq.Client.IApiResponse, IOk<List<string>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class ActivityApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetActivityTimeline;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetActivityTimeline;

        internal void ExecuteOnGetActivityTimeline(ActivityApi.GetActivityTimelineApiResponse apiResponse)
        {
            OnGetActivityTimeline?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetActivityTimeline(Exception exception)
        {
            OnErrorGetActivityTimeline?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetOnlineUsers;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetOnlineUsers;

        internal void ExecuteOnGetOnlineUsers(ActivityApi.GetOnlineUsersApiResponse apiResponse)
        {
            OnGetOnlineUsers?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetOnlineUsers(Exception exception)
        {
            OnErrorGetOnlineUsers?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class ActivityApi : IActivityApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<ActivityApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public ActivityApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// A token provider of type <see cref="OauthTokenProvider"/>
        /// </summary>
        public TokenProvider<OAuthToken> OauthTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ActivityApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ActivityApi(ILogger<ActivityApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, ActivityApiEvents activityApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider,
            TokenProvider<BearerToken> bearerTokenProvider,
            TokenProvider<OAuthToken> oauthTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<ActivityApi>();
            HttpClient = httpClient;
            Events = activityApiEvents;
            ApiKeyProvider = apiKeyProvider;
            BearerTokenProvider = bearerTokenProvider;
            OauthTokenProvider = oauthTokenProvider;
        }

        partial void FormatGetActivityTimeline(ref Option<int> limit, ref Option<bool> all, ref Option<bool> perChannel);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="limit"></param>
        /// <param name="all"></param>
        /// <param name="perChannel"></param>
        private void AfterGetActivityTimelineDefaultImplementation(IGetActivityTimelineApiResponse apiResponseLocalVar, Option<int> limit, Option<bool> all, Option<bool> perChannel)
        {
            bool suppressDefaultLog = false;
            AfterGetActivityTimeline(ref suppressDefaultLog, apiResponseLocalVar, limit, all, perChannel);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="limit"></param>
        /// <param name="all"></param>
        /// <param name="perChannel"></param>
        partial void AfterGetActivityTimeline(ref bool suppressDefaultLog, IGetActivityTimelineApiResponse apiResponseLocalVar, Option<int> limit, Option<bool> all, Option<bool> perChannel);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="limit"></param>
        /// <param name="all"></param>
        /// <param name="perChannel"></param>
        private void OnErrorGetActivityTimelineDefaultImplementation(Exception exception, string pathFormat, string path, Option<int> limit, Option<bool> all, Option<bool> perChannel)
        {
            bool suppressDefaultLog = false;
            OnErrorGetActivityTimeline(ref suppressDefaultLog, exception, pathFormat, path, limit, all, perChannel);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="limit"></param>
        /// <param name="all"></param>
        /// <param name="perChannel"></param>
        partial void OnErrorGetActivityTimeline(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<int> limit, Option<bool> all, Option<bool> perChannel);

        /// <summary>
        /// アクテビティタイムラインを取得 パブリックチャンネルの直近の投稿メッセージを作成日時の降順で取得します。 &#x60;all&#x60;が&#x60;true&#x60;でない場合、購読チャンネルのみのタイムラインを取得します
        /// </summary>
        /// <param name="limit">取得する件数 (optional, default to 50)</param>
        /// <param name="all">全てのチャンネルのタイムラインを取得する (optional, default to false)</param>
        /// <param name="perChannel">同じチャンネルのメッセージは最新のもののみ取得するか (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetActivityTimelineApiResponse"/>&gt;</returns>
        public async Task<IGetActivityTimelineApiResponse?> GetActivityTimelineOrDefaultAsync(Option<int> limit = default, Option<bool> all = default, Option<bool> perChannel = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetActivityTimelineAsync(limit, all, perChannel, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// アクテビティタイムラインを取得 パブリックチャンネルの直近の投稿メッセージを作成日時の降順で取得します。 &#x60;all&#x60;が&#x60;true&#x60;でない場合、購読チャンネルのみのタイムラインを取得します
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">取得する件数 (optional, default to 50)</param>
        /// <param name="all">全てのチャンネルのタイムラインを取得する (optional, default to false)</param>
        /// <param name="perChannel">同じチャンネルのメッセージは最新のもののみ取得するか (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetActivityTimelineApiResponse"/>&gt;</returns>
        public async Task<IGetActivityTimelineApiResponse> GetActivityTimelineAsync(Option<int> limit = default, Option<bool> all = default, Option<bool> perChannel = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetActivityTimeline(ref limit, ref all, ref perChannel);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/activity/timeline";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (all.IsSet)
                        parseQueryStringLocalVar["all"] = ClientUtils.ParameterToString(all.Value);

                    if (perChannel.IsSet)
                        parseQueryStringLocalVar["per_channel"] = ClientUtils.ParameterToString(perChannel.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetActivityTimelineApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetActivityTimelineApiResponse>();

                        GetActivityTimelineApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/activity/timeline", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetActivityTimelineDefaultImplementation(apiResponseLocalVar, limit, all, perChannel);

                        Events.ExecuteOnGetActivityTimeline(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetActivityTimelineDefaultImplementation(e, "/activity/timeline", uriBuilderLocalVar.Path, limit, all, perChannel);
                Events.ExecuteOnErrorGetActivityTimeline(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetActivityTimelineApiResponse"/>
        /// </summary>
        public partial class GetActivityTimelineApiResponse : Traq.Client.ApiResponse, IGetActivityTimelineApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetActivityTimelineApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetActivityTimelineApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetActivityTimelineApiResponse(ILogger<GetActivityTimelineApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<ActivityTimelineMessage>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<ActivityTimelineMessage>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<ActivityTimelineMessage>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetOnlineUsersDefaultImplementation(IGetOnlineUsersApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetOnlineUsers(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetOnlineUsers(ref bool suppressDefaultLog, IGetOnlineUsersApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        private void OnErrorGetOnlineUsersDefaultImplementation(Exception exception, string pathFormat, string path)
        {
            bool suppressDefaultLog = false;
            OnErrorGetOnlineUsers(ref suppressDefaultLog, exception, pathFormat, path);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        partial void OnErrorGetOnlineUsers(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path);

        /// <summary>
        /// オンラインユーザーリストを取得 現在オンラインな(SSEまたはWSが接続中)ユーザーのUUIDのリストを返します。
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOnlineUsersApiResponse"/>&gt;</returns>
        public async Task<IGetOnlineUsersApiResponse?> GetOnlineUsersOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetOnlineUsersAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// オンラインユーザーリストを取得 現在オンラインな(SSEまたはWSが接続中)ユーザーのUUIDのリストを返します。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOnlineUsersApiResponse"/>&gt;</returns>
        public async Task<IGetOnlineUsersApiResponse> GetOnlineUsersAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/activity/onlines";

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetOnlineUsersApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetOnlineUsersApiResponse>();

                        GetOnlineUsersApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/activity/onlines", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetOnlineUsersDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetOnlineUsers(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetOnlineUsersDefaultImplementation(e, "/activity/onlines", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetOnlineUsers(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetOnlineUsersApiResponse"/>
        /// </summary>
        public partial class GetOnlineUsersApiResponse : Traq.Client.ApiResponse, IGetOnlineUsersApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetOnlineUsersApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetOnlineUsersApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetOnlineUsersApiResponse(ILogger<GetOnlineUsersApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<string>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<string>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<string>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
