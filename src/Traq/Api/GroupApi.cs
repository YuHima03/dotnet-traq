// <auto-generated>
/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Traq.Client;
using Traq.Model;
using System.Diagnostics.CodeAnalysis;

namespace Traq.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IGroupApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        GroupApiEvents Events { get; }

        /// <summary>
        /// グループ管理者を追加
        /// </summary>
        /// <remarks>
        /// 指定したグループに管理者を追加します。 対象のユーザーグループの管理者権限が必要です。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="postUserGroupAdminRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddUserGroupAdminApiResponse"/>&gt;</returns>
        Task<IAddUserGroupAdminApiResponse> AddUserGroupAdminAsync(Guid groupId, Option<PostUserGroupAdminRequest> postUserGroupAdminRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// グループ管理者を追加
        /// </summary>
        /// <remarks>
        /// 指定したグループに管理者を追加します。 対象のユーザーグループの管理者権限が必要です。
        /// </remarks>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="postUserGroupAdminRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddUserGroupAdminApiResponse"/>?&gt;</returns>
        Task<IAddUserGroupAdminApiResponse?> AddUserGroupAdminOrDefaultAsync(Guid groupId, Option<PostUserGroupAdminRequest> postUserGroupAdminRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// グループメンバーを追加
        /// </summary>
        /// <remarks>
        /// 指定したグループにメンバーを追加します。 対象のユーザーグループの管理者権限が必要です。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="addUserGroupMemberRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddUserGroupMemberApiResponse"/>&gt;</returns>
        Task<IAddUserGroupMemberApiResponse> AddUserGroupMemberAsync(Guid groupId, Option<AddUserGroupMemberRequest> addUserGroupMemberRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// グループメンバーを追加
        /// </summary>
        /// <remarks>
        /// 指定したグループにメンバーを追加します。 対象のユーザーグループの管理者権限が必要です。
        /// </remarks>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="addUserGroupMemberRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddUserGroupMemberApiResponse"/>?&gt;</returns>
        Task<IAddUserGroupMemberApiResponse?> AddUserGroupMemberOrDefaultAsync(Guid groupId, Option<AddUserGroupMemberRequest> addUserGroupMemberRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// ユーザーグループのアイコンを変更
        /// </summary>
        /// <remarks>
        /// ユーザーグループのアイコンを変更します。 対象のユーザーグループの管理者権限が必要です。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="file">アイコン画像(2MBまでのpng, jpeg, gif)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IChangeUserGroupIconApiResponse"/>&gt;</returns>
        Task<IChangeUserGroupIconApiResponse> ChangeUserGroupIconAsync(Guid groupId, System.IO.Stream file, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// ユーザーグループのアイコンを変更
        /// </summary>
        /// <remarks>
        /// ユーザーグループのアイコンを変更します。 対象のユーザーグループの管理者権限が必要です。
        /// </remarks>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="file">アイコン画像(2MBまでのpng, jpeg, gif)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IChangeUserGroupIconApiResponse"/>?&gt;</returns>
        Task<IChangeUserGroupIconApiResponse?> ChangeUserGroupIconOrDefaultAsync(Guid groupId, System.IO.Stream file, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// ユーザーグループを作成
        /// </summary>
        /// <remarks>
        /// ユーザーグループを作成します。 作成者は自動的にグループ管理者になります。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="postUserGroupRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateUserGroupApiResponse"/>&gt;</returns>
        Task<ICreateUserGroupApiResponse> CreateUserGroupAsync(Option<PostUserGroupRequest> postUserGroupRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// ユーザーグループを作成
        /// </summary>
        /// <remarks>
        /// ユーザーグループを作成します。 作成者は自動的にグループ管理者になります。
        /// </remarks>
        /// <param name="postUserGroupRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateUserGroupApiResponse"/>?&gt;</returns>
        Task<ICreateUserGroupApiResponse?> CreateUserGroupOrDefaultAsync(Option<PostUserGroupRequest> postUserGroupRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// ユーザーグループを削除
        /// </summary>
        /// <remarks>
        /// 指定したユーザーグループを削除します。 対象のユーザーグループの管理者権限が必要です。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteUserGroupApiResponse"/>&gt;</returns>
        Task<IDeleteUserGroupApiResponse> DeleteUserGroupAsync(Guid groupId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// ユーザーグループを削除
        /// </summary>
        /// <remarks>
        /// 指定したユーザーグループを削除します。 対象のユーザーグループの管理者権限が必要です。
        /// </remarks>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteUserGroupApiResponse"/>?&gt;</returns>
        Task<IDeleteUserGroupApiResponse?> DeleteUserGroupOrDefaultAsync(Guid groupId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// ユーザーグループを編集
        /// </summary>
        /// <remarks>
        /// 指定したユーザーグループの情報を編集します。 対象のユーザーグループの管理者権限が必要です。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="patchUserGroupRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEditUserGroupApiResponse"/>&gt;</returns>
        Task<IEditUserGroupApiResponse> EditUserGroupAsync(Guid groupId, Option<PatchUserGroupRequest> patchUserGroupRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// ユーザーグループを編集
        /// </summary>
        /// <remarks>
        /// 指定したユーザーグループの情報を編集します。 対象のユーザーグループの管理者権限が必要です。
        /// </remarks>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="patchUserGroupRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEditUserGroupApiResponse"/>?&gt;</returns>
        Task<IEditUserGroupApiResponse?> EditUserGroupOrDefaultAsync(Guid groupId, Option<PatchUserGroupRequest> patchUserGroupRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// グループメンバーを編集
        /// </summary>
        /// <remarks>
        /// 指定したユーザーグループ内の指定したユーザーの属性を編集します。 対象のユーザーグループの管理者権限が必要です。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="patchGroupMemberRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEditUserGroupMemberApiResponse"/>&gt;</returns>
        Task<IEditUserGroupMemberApiResponse> EditUserGroupMemberAsync(Guid groupId, Guid userId, Option<PatchGroupMemberRequest> patchGroupMemberRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// グループメンバーを編集
        /// </summary>
        /// <remarks>
        /// 指定したユーザーグループ内の指定したユーザーの属性を編集します。 対象のユーザーグループの管理者権限が必要です。
        /// </remarks>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="patchGroupMemberRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEditUserGroupMemberApiResponse"/>?&gt;</returns>
        Task<IEditUserGroupMemberApiResponse?> EditUserGroupMemberOrDefaultAsync(Guid groupId, Guid userId, Option<PatchGroupMemberRequest> patchGroupMemberRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// ユーザーグループを取得
        /// </summary>
        /// <remarks>
        /// 指定したユーザーグループの情報を取得します。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserGroupApiResponse"/>&gt;</returns>
        Task<IGetUserGroupApiResponse> GetUserGroupAsync(Guid groupId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// ユーザーグループを取得
        /// </summary>
        /// <remarks>
        /// 指定したユーザーグループの情報を取得します。
        /// </remarks>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserGroupApiResponse"/>?&gt;</returns>
        Task<IGetUserGroupApiResponse?> GetUserGroupOrDefaultAsync(Guid groupId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// グループ管理者を取得
        /// </summary>
        /// <remarks>
        /// 指定したグループの管理者のリストを取得します。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserGroupAdminsApiResponse"/>&gt;</returns>
        Task<IGetUserGroupAdminsApiResponse> GetUserGroupAdminsAsync(Guid groupId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// グループ管理者を取得
        /// </summary>
        /// <remarks>
        /// 指定したグループの管理者のリストを取得します。
        /// </remarks>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserGroupAdminsApiResponse"/>?&gt;</returns>
        Task<IGetUserGroupAdminsApiResponse?> GetUserGroupAdminsOrDefaultAsync(Guid groupId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// グループメンバーを取得
        /// </summary>
        /// <remarks>
        /// 指定したグループのメンバーのリストを取得します。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserGroupMembersApiResponse"/>&gt;</returns>
        Task<IGetUserGroupMembersApiResponse> GetUserGroupMembersAsync(Guid groupId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// グループメンバーを取得
        /// </summary>
        /// <remarks>
        /// 指定したグループのメンバーのリストを取得します。
        /// </remarks>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserGroupMembersApiResponse"/>?&gt;</returns>
        Task<IGetUserGroupMembersApiResponse?> GetUserGroupMembersOrDefaultAsync(Guid groupId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// ユーザーグループのリストを取得
        /// </summary>
        /// <remarks>
        /// ユーザーグループのリストを取得します。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserGroupsApiResponse"/>&gt;</returns>
        Task<IGetUserGroupsApiResponse> GetUserGroupsAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// ユーザーグループのリストを取得
        /// </summary>
        /// <remarks>
        /// ユーザーグループのリストを取得します。
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserGroupsApiResponse"/>?&gt;</returns>
        Task<IGetUserGroupsApiResponse?> GetUserGroupsOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// グループ管理者を削除
        /// </summary>
        /// <remarks>
        /// 指定したユーザーグループから指定した管理者を削除します。 対象のユーザーグループの管理者権限が必要です。 グループから管理者が存在しなくなる場合は400エラーを返します。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRemoveUserGroupAdminApiResponse"/>&gt;</returns>
        Task<IRemoveUserGroupAdminApiResponse> RemoveUserGroupAdminAsync(Guid groupId, Guid userId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// グループ管理者を削除
        /// </summary>
        /// <remarks>
        /// 指定したユーザーグループから指定した管理者を削除します。 対象のユーザーグループの管理者権限が必要です。 グループから管理者が存在しなくなる場合は400エラーを返します。
        /// </remarks>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRemoveUserGroupAdminApiResponse"/>?&gt;</returns>
        Task<IRemoveUserGroupAdminApiResponse?> RemoveUserGroupAdminOrDefaultAsync(Guid groupId, Guid userId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// グループメンバーを削除
        /// </summary>
        /// <remarks>
        /// 指定したユーザーグループから指定したユーザーを削除します。 既にグループから削除されているメンバーを指定した場合は204を返します。 対象のユーザーグループの管理者権限が必要です。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRemoveUserGroupMemberApiResponse"/>&gt;</returns>
        Task<IRemoveUserGroupMemberApiResponse> RemoveUserGroupMemberAsync(Guid groupId, Guid userId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// グループメンバーを削除
        /// </summary>
        /// <remarks>
        /// 指定したユーザーグループから指定したユーザーを削除します。 既にグループから削除されているメンバーを指定した場合は204を返します。 対象のユーザーグループの管理者権限が必要です。
        /// </remarks>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRemoveUserGroupMemberApiResponse"/>?&gt;</returns>
        Task<IRemoveUserGroupMemberApiResponse?> RemoveUserGroupMemberOrDefaultAsync(Guid groupId, Guid userId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// グループメンバーを一括削除
        /// </summary>
        /// <remarks>
        /// 指定したグループから全てのメンバーを削除します。 対象のユーザーグループの管理者権限が必要です。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRemoveUserGroupMembersApiResponse"/>&gt;</returns>
        Task<IRemoveUserGroupMembersApiResponse> RemoveUserGroupMembersAsync(Guid groupId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// グループメンバーを一括削除
        /// </summary>
        /// <remarks>
        /// 指定したグループから全てのメンバーを削除します。 対象のユーザーグループの管理者権限が必要です。
        /// </remarks>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRemoveUserGroupMembersApiResponse"/>?&gt;</returns>
        Task<IRemoveUserGroupMembersApiResponse?> RemoveUserGroupMembersOrDefaultAsync(Guid groupId, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IAddUserGroupAdminApiResponse"/>
    /// </summary>
    public interface IAddUserGroupAdminApiResponse : Traq.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IAddUserGroupMemberApiResponse"/>
    /// </summary>
    public interface IAddUserGroupMemberApiResponse : Traq.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IChangeUserGroupIconApiResponse"/>
    /// </summary>
    public interface IChangeUserGroupIconApiResponse : Traq.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 413 ContentTooLarge
        /// </summary>
        /// <returns></returns>
        bool IsContentTooLarge { get; }
    }

    /// <summary>
    /// The <see cref="ICreateUserGroupApiResponse"/>
    /// </summary>
    public interface ICreateUserGroupApiResponse : Traq.Client.IApiResponse, ICreated<Traq.Model.UserGroup?>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }
    }

    /// <summary>
    /// The <see cref="IDeleteUserGroupApiResponse"/>
    /// </summary>
    public interface IDeleteUserGroupApiResponse : Traq.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IEditUserGroupApiResponse"/>
    /// </summary>
    public interface IEditUserGroupApiResponse : Traq.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }
    }

    /// <summary>
    /// The <see cref="IEditUserGroupMemberApiResponse"/>
    /// </summary>
    public interface IEditUserGroupMemberApiResponse : Traq.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetUserGroupApiResponse"/>
    /// </summary>
    public interface IGetUserGroupApiResponse : Traq.Client.IApiResponse, IOk<Traq.Model.UserGroup?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetUserGroupAdminsApiResponse"/>
    /// </summary>
    public interface IGetUserGroupAdminsApiResponse : Traq.Client.IApiResponse, IOk<List<Guid>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetUserGroupMembersApiResponse"/>
    /// </summary>
    public interface IGetUserGroupMembersApiResponse : Traq.Client.IApiResponse, IOk<List<UserGroupMember>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetUserGroupsApiResponse"/>
    /// </summary>
    public interface IGetUserGroupsApiResponse : Traq.Client.IApiResponse, IOk<List<UserGroup>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IRemoveUserGroupAdminApiResponse"/>
    /// </summary>
    public interface IRemoveUserGroupAdminApiResponse : Traq.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IRemoveUserGroupMemberApiResponse"/>
    /// </summary>
    public interface IRemoveUserGroupMemberApiResponse : Traq.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IRemoveUserGroupMembersApiResponse"/>
    /// </summary>
    public interface IRemoveUserGroupMembersApiResponse : Traq.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class GroupApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnAddUserGroupAdmin;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAddUserGroupAdmin;

        internal void ExecuteOnAddUserGroupAdmin(GroupApi.AddUserGroupAdminApiResponse apiResponse)
        {
            OnAddUserGroupAdmin?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAddUserGroupAdmin(Exception exception)
        {
            OnErrorAddUserGroupAdmin?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnAddUserGroupMember;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAddUserGroupMember;

        internal void ExecuteOnAddUserGroupMember(GroupApi.AddUserGroupMemberApiResponse apiResponse)
        {
            OnAddUserGroupMember?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAddUserGroupMember(Exception exception)
        {
            OnErrorAddUserGroupMember?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnChangeUserGroupIcon;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorChangeUserGroupIcon;

        internal void ExecuteOnChangeUserGroupIcon(GroupApi.ChangeUserGroupIconApiResponse apiResponse)
        {
            OnChangeUserGroupIcon?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorChangeUserGroupIcon(Exception exception)
        {
            OnErrorChangeUserGroupIcon?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnCreateUserGroup;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorCreateUserGroup;

        internal void ExecuteOnCreateUserGroup(GroupApi.CreateUserGroupApiResponse apiResponse)
        {
            OnCreateUserGroup?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorCreateUserGroup(Exception exception)
        {
            OnErrorCreateUserGroup?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteUserGroup;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteUserGroup;

        internal void ExecuteOnDeleteUserGroup(GroupApi.DeleteUserGroupApiResponse apiResponse)
        {
            OnDeleteUserGroup?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteUserGroup(Exception exception)
        {
            OnErrorDeleteUserGroup?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEditUserGroup;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEditUserGroup;

        internal void ExecuteOnEditUserGroup(GroupApi.EditUserGroupApiResponse apiResponse)
        {
            OnEditUserGroup?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEditUserGroup(Exception exception)
        {
            OnErrorEditUserGroup?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEditUserGroupMember;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEditUserGroupMember;

        internal void ExecuteOnEditUserGroupMember(GroupApi.EditUserGroupMemberApiResponse apiResponse)
        {
            OnEditUserGroupMember?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEditUserGroupMember(Exception exception)
        {
            OnErrorEditUserGroupMember?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetUserGroup;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetUserGroup;

        internal void ExecuteOnGetUserGroup(GroupApi.GetUserGroupApiResponse apiResponse)
        {
            OnGetUserGroup?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetUserGroup(Exception exception)
        {
            OnErrorGetUserGroup?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetUserGroupAdmins;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetUserGroupAdmins;

        internal void ExecuteOnGetUserGroupAdmins(GroupApi.GetUserGroupAdminsApiResponse apiResponse)
        {
            OnGetUserGroupAdmins?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetUserGroupAdmins(Exception exception)
        {
            OnErrorGetUserGroupAdmins?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetUserGroupMembers;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetUserGroupMembers;

        internal void ExecuteOnGetUserGroupMembers(GroupApi.GetUserGroupMembersApiResponse apiResponse)
        {
            OnGetUserGroupMembers?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetUserGroupMembers(Exception exception)
        {
            OnErrorGetUserGroupMembers?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetUserGroups;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetUserGroups;

        internal void ExecuteOnGetUserGroups(GroupApi.GetUserGroupsApiResponse apiResponse)
        {
            OnGetUserGroups?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetUserGroups(Exception exception)
        {
            OnErrorGetUserGroups?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnRemoveUserGroupAdmin;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorRemoveUserGroupAdmin;

        internal void ExecuteOnRemoveUserGroupAdmin(GroupApi.RemoveUserGroupAdminApiResponse apiResponse)
        {
            OnRemoveUserGroupAdmin?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorRemoveUserGroupAdmin(Exception exception)
        {
            OnErrorRemoveUserGroupAdmin?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnRemoveUserGroupMember;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorRemoveUserGroupMember;

        internal void ExecuteOnRemoveUserGroupMember(GroupApi.RemoveUserGroupMemberApiResponse apiResponse)
        {
            OnRemoveUserGroupMember?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorRemoveUserGroupMember(Exception exception)
        {
            OnErrorRemoveUserGroupMember?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnRemoveUserGroupMembers;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorRemoveUserGroupMembers;

        internal void ExecuteOnRemoveUserGroupMembers(GroupApi.RemoveUserGroupMembersApiResponse apiResponse)
        {
            OnRemoveUserGroupMembers?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorRemoveUserGroupMembers(Exception exception)
        {
            OnErrorRemoveUserGroupMembers?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class GroupApi : IGroupApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<GroupApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public GroupApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// A token provider of type <see cref="OauthTokenProvider"/>
        /// </summary>
        public TokenProvider<OAuthToken> OauthTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GroupApi(ILogger<GroupApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, GroupApiEvents groupApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider,
            TokenProvider<BearerToken> bearerTokenProvider,
            TokenProvider<OAuthToken> oauthTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<GroupApi>();
            HttpClient = httpClient;
            Events = groupApiEvents;
            ApiKeyProvider = apiKeyProvider;
            BearerTokenProvider = bearerTokenProvider;
            OauthTokenProvider = oauthTokenProvider;
        }

        partial void FormatAddUserGroupAdmin(ref Guid groupId, Option<PostUserGroupAdminRequest> postUserGroupAdminRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="postUserGroupAdminRequest"></param>
        /// <returns></returns>
        private void ValidateAddUserGroupAdmin(Option<PostUserGroupAdminRequest> postUserGroupAdminRequest)
        {
            if (postUserGroupAdminRequest.IsSet && postUserGroupAdminRequest.Value == null)
                throw new ArgumentNullException(nameof(postUserGroupAdminRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="groupId"></param>
        /// <param name="postUserGroupAdminRequest"></param>
        private void AfterAddUserGroupAdminDefaultImplementation(IAddUserGroupAdminApiResponse apiResponseLocalVar, Guid groupId, Option<PostUserGroupAdminRequest> postUserGroupAdminRequest)
        {
            bool suppressDefaultLog = false;
            AfterAddUserGroupAdmin(ref suppressDefaultLog, apiResponseLocalVar, groupId, postUserGroupAdminRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="groupId"></param>
        /// <param name="postUserGroupAdminRequest"></param>
        partial void AfterAddUserGroupAdmin(ref bool suppressDefaultLog, IAddUserGroupAdminApiResponse apiResponseLocalVar, Guid groupId, Option<PostUserGroupAdminRequest> postUserGroupAdminRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="groupId"></param>
        /// <param name="postUserGroupAdminRequest"></param>
        private void OnErrorAddUserGroupAdminDefaultImplementation(Exception exception, string pathFormat, string path, Guid groupId, Option<PostUserGroupAdminRequest> postUserGroupAdminRequest)
        {
            bool suppressDefaultLog = false;
            OnErrorAddUserGroupAdmin(ref suppressDefaultLog, exception, pathFormat, path, groupId, postUserGroupAdminRequest);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="groupId"></param>
        /// <param name="postUserGroupAdminRequest"></param>
        partial void OnErrorAddUserGroupAdmin(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Guid groupId, Option<PostUserGroupAdminRequest> postUserGroupAdminRequest);

        /// <summary>
        /// グループ管理者を追加 指定したグループに管理者を追加します。 対象のユーザーグループの管理者権限が必要です。
        /// </summary>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="postUserGroupAdminRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddUserGroupAdminApiResponse"/>&gt;</returns>
        public async Task<IAddUserGroupAdminApiResponse?> AddUserGroupAdminOrDefaultAsync(Guid groupId, Option<PostUserGroupAdminRequest> postUserGroupAdminRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AddUserGroupAdminAsync(groupId, postUserGroupAdminRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// グループ管理者を追加 指定したグループに管理者を追加します。 対象のユーザーグループの管理者権限が必要です。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="postUserGroupAdminRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddUserGroupAdminApiResponse"/>&gt;</returns>
        public async Task<IAddUserGroupAdminApiResponse> AddUserGroupAdminAsync(Guid groupId, Option<PostUserGroupAdminRequest> postUserGroupAdminRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAddUserGroupAdmin(postUserGroupAdminRequest);

                FormatAddUserGroupAdmin(ref groupId, postUserGroupAdminRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/groups/{groupId}/admins";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BgroupId%7D", Uri.EscapeDataString(groupId.ToString()));

                    if (postUserGroupAdminRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (postUserGroupAdminRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(postUserGroupAdminRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<AddUserGroupAdminApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AddUserGroupAdminApiResponse>();

                        AddUserGroupAdminApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/groups/{groupId}/admins", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterAddUserGroupAdminDefaultImplementation(apiResponseLocalVar, groupId, postUserGroupAdminRequest);

                        Events.ExecuteOnAddUserGroupAdmin(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAddUserGroupAdminDefaultImplementation(e, "/groups/{groupId}/admins", uriBuilderLocalVar.Path, groupId, postUserGroupAdminRequest);
                Events.ExecuteOnErrorAddUserGroupAdmin(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="AddUserGroupAdminApiResponse"/>
        /// </summary>
        public partial class AddUserGroupAdminApiResponse : Traq.Client.ApiResponse, IAddUserGroupAdminApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AddUserGroupAdminApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="AddUserGroupAdminApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AddUserGroupAdminApiResponse(ILogger<AddUserGroupAdminApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatAddUserGroupMember(ref Guid groupId, Option<AddUserGroupMemberRequest> addUserGroupMemberRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="addUserGroupMemberRequest"></param>
        /// <returns></returns>
        private void ValidateAddUserGroupMember(Option<AddUserGroupMemberRequest> addUserGroupMemberRequest)
        {
            if (addUserGroupMemberRequest.IsSet && addUserGroupMemberRequest.Value == null)
                throw new ArgumentNullException(nameof(addUserGroupMemberRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="groupId"></param>
        /// <param name="addUserGroupMemberRequest"></param>
        private void AfterAddUserGroupMemberDefaultImplementation(IAddUserGroupMemberApiResponse apiResponseLocalVar, Guid groupId, Option<AddUserGroupMemberRequest> addUserGroupMemberRequest)
        {
            bool suppressDefaultLog = false;
            AfterAddUserGroupMember(ref suppressDefaultLog, apiResponseLocalVar, groupId, addUserGroupMemberRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="groupId"></param>
        /// <param name="addUserGroupMemberRequest"></param>
        partial void AfterAddUserGroupMember(ref bool suppressDefaultLog, IAddUserGroupMemberApiResponse apiResponseLocalVar, Guid groupId, Option<AddUserGroupMemberRequest> addUserGroupMemberRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="groupId"></param>
        /// <param name="addUserGroupMemberRequest"></param>
        private void OnErrorAddUserGroupMemberDefaultImplementation(Exception exception, string pathFormat, string path, Guid groupId, Option<AddUserGroupMemberRequest> addUserGroupMemberRequest)
        {
            bool suppressDefaultLog = false;
            OnErrorAddUserGroupMember(ref suppressDefaultLog, exception, pathFormat, path, groupId, addUserGroupMemberRequest);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="groupId"></param>
        /// <param name="addUserGroupMemberRequest"></param>
        partial void OnErrorAddUserGroupMember(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Guid groupId, Option<AddUserGroupMemberRequest> addUserGroupMemberRequest);

        /// <summary>
        /// グループメンバーを追加 指定したグループにメンバーを追加します。 対象のユーザーグループの管理者権限が必要です。
        /// </summary>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="addUserGroupMemberRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddUserGroupMemberApiResponse"/>&gt;</returns>
        public async Task<IAddUserGroupMemberApiResponse?> AddUserGroupMemberOrDefaultAsync(Guid groupId, Option<AddUserGroupMemberRequest> addUserGroupMemberRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AddUserGroupMemberAsync(groupId, addUserGroupMemberRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// グループメンバーを追加 指定したグループにメンバーを追加します。 対象のユーザーグループの管理者権限が必要です。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="addUserGroupMemberRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddUserGroupMemberApiResponse"/>&gt;</returns>
        public async Task<IAddUserGroupMemberApiResponse> AddUserGroupMemberAsync(Guid groupId, Option<AddUserGroupMemberRequest> addUserGroupMemberRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAddUserGroupMember(addUserGroupMemberRequest);

                FormatAddUserGroupMember(ref groupId, addUserGroupMemberRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/groups/{groupId}/members";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BgroupId%7D", Uri.EscapeDataString(groupId.ToString()));

                    if (addUserGroupMemberRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (addUserGroupMemberRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(addUserGroupMemberRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<AddUserGroupMemberApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AddUserGroupMemberApiResponse>();

                        AddUserGroupMemberApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/groups/{groupId}/members", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterAddUserGroupMemberDefaultImplementation(apiResponseLocalVar, groupId, addUserGroupMemberRequest);

                        Events.ExecuteOnAddUserGroupMember(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAddUserGroupMemberDefaultImplementation(e, "/groups/{groupId}/members", uriBuilderLocalVar.Path, groupId, addUserGroupMemberRequest);
                Events.ExecuteOnErrorAddUserGroupMember(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="AddUserGroupMemberApiResponse"/>
        /// </summary>
        public partial class AddUserGroupMemberApiResponse : Traq.Client.ApiResponse, IAddUserGroupMemberApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AddUserGroupMemberApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="AddUserGroupMemberApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AddUserGroupMemberApiResponse(ILogger<AddUserGroupMemberApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatChangeUserGroupIcon(ref Guid groupId, ref System.IO.Stream file);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="file"></param>
        /// <returns></returns>
        private void ValidateChangeUserGroupIcon(System.IO.Stream file)
        {
            if (file == null)
                throw new ArgumentNullException(nameof(file));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="groupId"></param>
        /// <param name="file"></param>
        private void AfterChangeUserGroupIconDefaultImplementation(IChangeUserGroupIconApiResponse apiResponseLocalVar, Guid groupId, System.IO.Stream file)
        {
            bool suppressDefaultLog = false;
            AfterChangeUserGroupIcon(ref suppressDefaultLog, apiResponseLocalVar, groupId, file);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="groupId"></param>
        /// <param name="file"></param>
        partial void AfterChangeUserGroupIcon(ref bool suppressDefaultLog, IChangeUserGroupIconApiResponse apiResponseLocalVar, Guid groupId, System.IO.Stream file);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="groupId"></param>
        /// <param name="file"></param>
        private void OnErrorChangeUserGroupIconDefaultImplementation(Exception exception, string pathFormat, string path, Guid groupId, System.IO.Stream file)
        {
            bool suppressDefaultLog = false;
            OnErrorChangeUserGroupIcon(ref suppressDefaultLog, exception, pathFormat, path, groupId, file);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="groupId"></param>
        /// <param name="file"></param>
        partial void OnErrorChangeUserGroupIcon(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Guid groupId, System.IO.Stream file);

        /// <summary>
        /// ユーザーグループのアイコンを変更 ユーザーグループのアイコンを変更します。 対象のユーザーグループの管理者権限が必要です。
        /// </summary>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="file">アイコン画像(2MBまでのpng, jpeg, gif)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IChangeUserGroupIconApiResponse"/>&gt;</returns>
        public async Task<IChangeUserGroupIconApiResponse?> ChangeUserGroupIconOrDefaultAsync(Guid groupId, System.IO.Stream file, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ChangeUserGroupIconAsync(groupId, file, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// ユーザーグループのアイコンを変更 ユーザーグループのアイコンを変更します。 対象のユーザーグループの管理者権限が必要です。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="file">アイコン画像(2MBまでのpng, jpeg, gif)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IChangeUserGroupIconApiResponse"/>&gt;</returns>
        public async Task<IChangeUserGroupIconApiResponse> ChangeUserGroupIconAsync(Guid groupId, System.IO.Stream file, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateChangeUserGroupIcon(file);

                FormatChangeUserGroupIcon(ref groupId, ref file);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/groups/{groupId}/icon";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BgroupId%7D", Uri.EscapeDataString(groupId.ToString()));

                    MultipartContent multipartContentLocalVar = new MultipartContent();

                    httpRequestMessageLocalVar.Content = multipartContentLocalVar;

                    List<KeyValuePair<string?, string?>> formParameterLocalVars = new List<KeyValuePair<string?, string?>>();

                    multipartContentLocalVar.Add(new FormUrlEncodedContent(formParameterLocalVars));                    multipartContentLocalVar.Add(new StreamContent(file));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "multipart/form-data"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ChangeUserGroupIconApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ChangeUserGroupIconApiResponse>();

                        ChangeUserGroupIconApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/groups/{groupId}/icon", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterChangeUserGroupIconDefaultImplementation(apiResponseLocalVar, groupId, file);

                        Events.ExecuteOnChangeUserGroupIcon(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorChangeUserGroupIconDefaultImplementation(e, "/groups/{groupId}/icon", uriBuilderLocalVar.Path, groupId, file);
                Events.ExecuteOnErrorChangeUserGroupIcon(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ChangeUserGroupIconApiResponse"/>
        /// </summary>
        public partial class ChangeUserGroupIconApiResponse : Traq.Client.ApiResponse, IChangeUserGroupIconApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ChangeUserGroupIconApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ChangeUserGroupIconApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ChangeUserGroupIconApiResponse(ILogger<ChangeUserGroupIconApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 413 ContentTooLarge
            /// </summary>
            /// <returns></returns>
            public bool IsContentTooLarge => 413 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatCreateUserGroup(Option<PostUserGroupRequest> postUserGroupRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="postUserGroupRequest"></param>
        /// <returns></returns>
        private void ValidateCreateUserGroup(Option<PostUserGroupRequest> postUserGroupRequest)
        {
            if (postUserGroupRequest.IsSet && postUserGroupRequest.Value == null)
                throw new ArgumentNullException(nameof(postUserGroupRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="postUserGroupRequest"></param>
        private void AfterCreateUserGroupDefaultImplementation(ICreateUserGroupApiResponse apiResponseLocalVar, Option<PostUserGroupRequest> postUserGroupRequest)
        {
            bool suppressDefaultLog = false;
            AfterCreateUserGroup(ref suppressDefaultLog, apiResponseLocalVar, postUserGroupRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="postUserGroupRequest"></param>
        partial void AfterCreateUserGroup(ref bool suppressDefaultLog, ICreateUserGroupApiResponse apiResponseLocalVar, Option<PostUserGroupRequest> postUserGroupRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="postUserGroupRequest"></param>
        private void OnErrorCreateUserGroupDefaultImplementation(Exception exception, string pathFormat, string path, Option<PostUserGroupRequest> postUserGroupRequest)
        {
            bool suppressDefaultLog = false;
            OnErrorCreateUserGroup(ref suppressDefaultLog, exception, pathFormat, path, postUserGroupRequest);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="postUserGroupRequest"></param>
        partial void OnErrorCreateUserGroup(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<PostUserGroupRequest> postUserGroupRequest);

        /// <summary>
        /// ユーザーグループを作成 ユーザーグループを作成します。 作成者は自動的にグループ管理者になります。
        /// </summary>
        /// <param name="postUserGroupRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateUserGroupApiResponse"/>&gt;</returns>
        public async Task<ICreateUserGroupApiResponse?> CreateUserGroupOrDefaultAsync(Option<PostUserGroupRequest> postUserGroupRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await CreateUserGroupAsync(postUserGroupRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// ユーザーグループを作成 ユーザーグループを作成します。 作成者は自動的にグループ管理者になります。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="postUserGroupRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ICreateUserGroupApiResponse"/>&gt;</returns>
        public async Task<ICreateUserGroupApiResponse> CreateUserGroupAsync(Option<PostUserGroupRequest> postUserGroupRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateCreateUserGroup(postUserGroupRequest);

                FormatCreateUserGroup(postUserGroupRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/groups";

                    if (postUserGroupRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (postUserGroupRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(postUserGroupRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<CreateUserGroupApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<CreateUserGroupApiResponse>();

                        CreateUserGroupApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/groups", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterCreateUserGroupDefaultImplementation(apiResponseLocalVar, postUserGroupRequest);

                        Events.ExecuteOnCreateUserGroup(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreateUserGroupDefaultImplementation(e, "/groups", uriBuilderLocalVar.Path, postUserGroupRequest);
                Events.ExecuteOnErrorCreateUserGroup(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="CreateUserGroupApiResponse"/>
        /// </summary>
        public partial class CreateUserGroupApiResponse : Traq.Client.ApiResponse, ICreateUserGroupApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<CreateUserGroupApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="CreateUserGroupApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public CreateUserGroupApiResponse(ILogger<CreateUserGroupApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public Traq.Model.UserGroup? Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<Traq.Model.UserGroup>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out Traq.Model.UserGroup? result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatDeleteUserGroup(ref Guid groupId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="groupId"></param>
        private void AfterDeleteUserGroupDefaultImplementation(IDeleteUserGroupApiResponse apiResponseLocalVar, Guid groupId)
        {
            bool suppressDefaultLog = false;
            AfterDeleteUserGroup(ref suppressDefaultLog, apiResponseLocalVar, groupId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="groupId"></param>
        partial void AfterDeleteUserGroup(ref bool suppressDefaultLog, IDeleteUserGroupApiResponse apiResponseLocalVar, Guid groupId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="groupId"></param>
        private void OnErrorDeleteUserGroupDefaultImplementation(Exception exception, string pathFormat, string path, Guid groupId)
        {
            bool suppressDefaultLog = false;
            OnErrorDeleteUserGroup(ref suppressDefaultLog, exception, pathFormat, path, groupId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="groupId"></param>
        partial void OnErrorDeleteUserGroup(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Guid groupId);

        /// <summary>
        /// ユーザーグループを削除 指定したユーザーグループを削除します。 対象のユーザーグループの管理者権限が必要です。
        /// </summary>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteUserGroupApiResponse"/>&gt;</returns>
        public async Task<IDeleteUserGroupApiResponse?> DeleteUserGroupOrDefaultAsync(Guid groupId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteUserGroupAsync(groupId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// ユーザーグループを削除 指定したユーザーグループを削除します。 対象のユーザーグループの管理者権限が必要です。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteUserGroupApiResponse"/>&gt;</returns>
        public async Task<IDeleteUserGroupApiResponse> DeleteUserGroupAsync(Guid groupId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatDeleteUserGroup(ref groupId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/groups/{groupId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BgroupId%7D", Uri.EscapeDataString(groupId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteUserGroupApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteUserGroupApiResponse>();

                        DeleteUserGroupApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/groups/{groupId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteUserGroupDefaultImplementation(apiResponseLocalVar, groupId);

                        Events.ExecuteOnDeleteUserGroup(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteUserGroupDefaultImplementation(e, "/groups/{groupId}", uriBuilderLocalVar.Path, groupId);
                Events.ExecuteOnErrorDeleteUserGroup(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteUserGroupApiResponse"/>
        /// </summary>
        public partial class DeleteUserGroupApiResponse : Traq.Client.ApiResponse, IDeleteUserGroupApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteUserGroupApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteUserGroupApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteUserGroupApiResponse(ILogger<DeleteUserGroupApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEditUserGroup(ref Guid groupId, Option<PatchUserGroupRequest> patchUserGroupRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="patchUserGroupRequest"></param>
        /// <returns></returns>
        private void ValidateEditUserGroup(Option<PatchUserGroupRequest> patchUserGroupRequest)
        {
            if (patchUserGroupRequest.IsSet && patchUserGroupRequest.Value == null)
                throw new ArgumentNullException(nameof(patchUserGroupRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="groupId"></param>
        /// <param name="patchUserGroupRequest"></param>
        private void AfterEditUserGroupDefaultImplementation(IEditUserGroupApiResponse apiResponseLocalVar, Guid groupId, Option<PatchUserGroupRequest> patchUserGroupRequest)
        {
            bool suppressDefaultLog = false;
            AfterEditUserGroup(ref suppressDefaultLog, apiResponseLocalVar, groupId, patchUserGroupRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="groupId"></param>
        /// <param name="patchUserGroupRequest"></param>
        partial void AfterEditUserGroup(ref bool suppressDefaultLog, IEditUserGroupApiResponse apiResponseLocalVar, Guid groupId, Option<PatchUserGroupRequest> patchUserGroupRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="groupId"></param>
        /// <param name="patchUserGroupRequest"></param>
        private void OnErrorEditUserGroupDefaultImplementation(Exception exception, string pathFormat, string path, Guid groupId, Option<PatchUserGroupRequest> patchUserGroupRequest)
        {
            bool suppressDefaultLog = false;
            OnErrorEditUserGroup(ref suppressDefaultLog, exception, pathFormat, path, groupId, patchUserGroupRequest);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="groupId"></param>
        /// <param name="patchUserGroupRequest"></param>
        partial void OnErrorEditUserGroup(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Guid groupId, Option<PatchUserGroupRequest> patchUserGroupRequest);

        /// <summary>
        /// ユーザーグループを編集 指定したユーザーグループの情報を編集します。 対象のユーザーグループの管理者権限が必要です。
        /// </summary>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="patchUserGroupRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEditUserGroupApiResponse"/>&gt;</returns>
        public async Task<IEditUserGroupApiResponse?> EditUserGroupOrDefaultAsync(Guid groupId, Option<PatchUserGroupRequest> patchUserGroupRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EditUserGroupAsync(groupId, patchUserGroupRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// ユーザーグループを編集 指定したユーザーグループの情報を編集します。 対象のユーザーグループの管理者権限が必要です。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="patchUserGroupRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEditUserGroupApiResponse"/>&gt;</returns>
        public async Task<IEditUserGroupApiResponse> EditUserGroupAsync(Guid groupId, Option<PatchUserGroupRequest> patchUserGroupRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEditUserGroup(patchUserGroupRequest);

                FormatEditUserGroup(ref groupId, patchUserGroupRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/groups/{groupId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BgroupId%7D", Uri.EscapeDataString(groupId.ToString()));

                    if (patchUserGroupRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (patchUserGroupRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(patchUserGroupRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Patch;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EditUserGroupApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EditUserGroupApiResponse>();

                        EditUserGroupApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/groups/{groupId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEditUserGroupDefaultImplementation(apiResponseLocalVar, groupId, patchUserGroupRequest);

                        Events.ExecuteOnEditUserGroup(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEditUserGroupDefaultImplementation(e, "/groups/{groupId}", uriBuilderLocalVar.Path, groupId, patchUserGroupRequest);
                Events.ExecuteOnErrorEditUserGroup(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EditUserGroupApiResponse"/>
        /// </summary>
        public partial class EditUserGroupApiResponse : Traq.Client.ApiResponse, IEditUserGroupApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EditUserGroupApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EditUserGroupApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EditUserGroupApiResponse(ILogger<EditUserGroupApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEditUserGroupMember(ref Guid groupId, ref Guid userId, Option<PatchGroupMemberRequest> patchGroupMemberRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="patchGroupMemberRequest"></param>
        /// <returns></returns>
        private void ValidateEditUserGroupMember(Option<PatchGroupMemberRequest> patchGroupMemberRequest)
        {
            if (patchGroupMemberRequest.IsSet && patchGroupMemberRequest.Value == null)
                throw new ArgumentNullException(nameof(patchGroupMemberRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="groupId"></param>
        /// <param name="userId"></param>
        /// <param name="patchGroupMemberRequest"></param>
        private void AfterEditUserGroupMemberDefaultImplementation(IEditUserGroupMemberApiResponse apiResponseLocalVar, Guid groupId, Guid userId, Option<PatchGroupMemberRequest> patchGroupMemberRequest)
        {
            bool suppressDefaultLog = false;
            AfterEditUserGroupMember(ref suppressDefaultLog, apiResponseLocalVar, groupId, userId, patchGroupMemberRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="groupId"></param>
        /// <param name="userId"></param>
        /// <param name="patchGroupMemberRequest"></param>
        partial void AfterEditUserGroupMember(ref bool suppressDefaultLog, IEditUserGroupMemberApiResponse apiResponseLocalVar, Guid groupId, Guid userId, Option<PatchGroupMemberRequest> patchGroupMemberRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="groupId"></param>
        /// <param name="userId"></param>
        /// <param name="patchGroupMemberRequest"></param>
        private void OnErrorEditUserGroupMemberDefaultImplementation(Exception exception, string pathFormat, string path, Guid groupId, Guid userId, Option<PatchGroupMemberRequest> patchGroupMemberRequest)
        {
            bool suppressDefaultLog = false;
            OnErrorEditUserGroupMember(ref suppressDefaultLog, exception, pathFormat, path, groupId, userId, patchGroupMemberRequest);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="groupId"></param>
        /// <param name="userId"></param>
        /// <param name="patchGroupMemberRequest"></param>
        partial void OnErrorEditUserGroupMember(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Guid groupId, Guid userId, Option<PatchGroupMemberRequest> patchGroupMemberRequest);

        /// <summary>
        /// グループメンバーを編集 指定したユーザーグループ内の指定したユーザーの属性を編集します。 対象のユーザーグループの管理者権限が必要です。
        /// </summary>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="patchGroupMemberRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEditUserGroupMemberApiResponse"/>&gt;</returns>
        public async Task<IEditUserGroupMemberApiResponse?> EditUserGroupMemberOrDefaultAsync(Guid groupId, Guid userId, Option<PatchGroupMemberRequest> patchGroupMemberRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EditUserGroupMemberAsync(groupId, userId, patchGroupMemberRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// グループメンバーを編集 指定したユーザーグループ内の指定したユーザーの属性を編集します。 対象のユーザーグループの管理者権限が必要です。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="patchGroupMemberRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEditUserGroupMemberApiResponse"/>&gt;</returns>
        public async Task<IEditUserGroupMemberApiResponse> EditUserGroupMemberAsync(Guid groupId, Guid userId, Option<PatchGroupMemberRequest> patchGroupMemberRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEditUserGroupMember(patchGroupMemberRequest);

                FormatEditUserGroupMember(ref groupId, ref userId, patchGroupMemberRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/groups/{groupId}/members/{userId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BgroupId%7D", Uri.EscapeDataString(groupId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BuserId%7D", Uri.EscapeDataString(userId.ToString()));

                    if (patchGroupMemberRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (patchGroupMemberRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(patchGroupMemberRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Patch;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EditUserGroupMemberApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EditUserGroupMemberApiResponse>();

                        EditUserGroupMemberApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/groups/{groupId}/members/{userId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEditUserGroupMemberDefaultImplementation(apiResponseLocalVar, groupId, userId, patchGroupMemberRequest);

                        Events.ExecuteOnEditUserGroupMember(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEditUserGroupMemberDefaultImplementation(e, "/groups/{groupId}/members/{userId}", uriBuilderLocalVar.Path, groupId, userId, patchGroupMemberRequest);
                Events.ExecuteOnErrorEditUserGroupMember(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EditUserGroupMemberApiResponse"/>
        /// </summary>
        public partial class EditUserGroupMemberApiResponse : Traq.Client.ApiResponse, IEditUserGroupMemberApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EditUserGroupMemberApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EditUserGroupMemberApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EditUserGroupMemberApiResponse(ILogger<EditUserGroupMemberApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetUserGroup(ref Guid groupId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="groupId"></param>
        private void AfterGetUserGroupDefaultImplementation(IGetUserGroupApiResponse apiResponseLocalVar, Guid groupId)
        {
            bool suppressDefaultLog = false;
            AfterGetUserGroup(ref suppressDefaultLog, apiResponseLocalVar, groupId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="groupId"></param>
        partial void AfterGetUserGroup(ref bool suppressDefaultLog, IGetUserGroupApiResponse apiResponseLocalVar, Guid groupId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="groupId"></param>
        private void OnErrorGetUserGroupDefaultImplementation(Exception exception, string pathFormat, string path, Guid groupId)
        {
            bool suppressDefaultLog = false;
            OnErrorGetUserGroup(ref suppressDefaultLog, exception, pathFormat, path, groupId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="groupId"></param>
        partial void OnErrorGetUserGroup(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Guid groupId);

        /// <summary>
        /// ユーザーグループを取得 指定したユーザーグループの情報を取得します。
        /// </summary>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserGroupApiResponse"/>&gt;</returns>
        public async Task<IGetUserGroupApiResponse?> GetUserGroupOrDefaultAsync(Guid groupId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetUserGroupAsync(groupId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// ユーザーグループを取得 指定したユーザーグループの情報を取得します。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserGroupApiResponse"/>&gt;</returns>
        public async Task<IGetUserGroupApiResponse> GetUserGroupAsync(Guid groupId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetUserGroup(ref groupId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/groups/{groupId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BgroupId%7D", Uri.EscapeDataString(groupId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetUserGroupApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetUserGroupApiResponse>();

                        GetUserGroupApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/groups/{groupId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetUserGroupDefaultImplementation(apiResponseLocalVar, groupId);

                        Events.ExecuteOnGetUserGroup(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetUserGroupDefaultImplementation(e, "/groups/{groupId}", uriBuilderLocalVar.Path, groupId);
                Events.ExecuteOnErrorGetUserGroup(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetUserGroupApiResponse"/>
        /// </summary>
        public partial class GetUserGroupApiResponse : Traq.Client.ApiResponse, IGetUserGroupApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetUserGroupApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetUserGroupApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetUserGroupApiResponse(ILogger<GetUserGroupApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Traq.Model.UserGroup? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Traq.Model.UserGroup>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Traq.Model.UserGroup? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetUserGroupAdmins(ref Guid groupId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="groupId"></param>
        private void AfterGetUserGroupAdminsDefaultImplementation(IGetUserGroupAdminsApiResponse apiResponseLocalVar, Guid groupId)
        {
            bool suppressDefaultLog = false;
            AfterGetUserGroupAdmins(ref suppressDefaultLog, apiResponseLocalVar, groupId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="groupId"></param>
        partial void AfterGetUserGroupAdmins(ref bool suppressDefaultLog, IGetUserGroupAdminsApiResponse apiResponseLocalVar, Guid groupId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="groupId"></param>
        private void OnErrorGetUserGroupAdminsDefaultImplementation(Exception exception, string pathFormat, string path, Guid groupId)
        {
            bool suppressDefaultLog = false;
            OnErrorGetUserGroupAdmins(ref suppressDefaultLog, exception, pathFormat, path, groupId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="groupId"></param>
        partial void OnErrorGetUserGroupAdmins(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Guid groupId);

        /// <summary>
        /// グループ管理者を取得 指定したグループの管理者のリストを取得します。
        /// </summary>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserGroupAdminsApiResponse"/>&gt;</returns>
        public async Task<IGetUserGroupAdminsApiResponse?> GetUserGroupAdminsOrDefaultAsync(Guid groupId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetUserGroupAdminsAsync(groupId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// グループ管理者を取得 指定したグループの管理者のリストを取得します。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserGroupAdminsApiResponse"/>&gt;</returns>
        public async Task<IGetUserGroupAdminsApiResponse> GetUserGroupAdminsAsync(Guid groupId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetUserGroupAdmins(ref groupId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/groups/{groupId}/admins";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BgroupId%7D", Uri.EscapeDataString(groupId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetUserGroupAdminsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetUserGroupAdminsApiResponse>();

                        GetUserGroupAdminsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/groups/{groupId}/admins", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetUserGroupAdminsDefaultImplementation(apiResponseLocalVar, groupId);

                        Events.ExecuteOnGetUserGroupAdmins(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetUserGroupAdminsDefaultImplementation(e, "/groups/{groupId}/admins", uriBuilderLocalVar.Path, groupId);
                Events.ExecuteOnErrorGetUserGroupAdmins(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetUserGroupAdminsApiResponse"/>
        /// </summary>
        public partial class GetUserGroupAdminsApiResponse : Traq.Client.ApiResponse, IGetUserGroupAdminsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetUserGroupAdminsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetUserGroupAdminsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetUserGroupAdminsApiResponse(ILogger<GetUserGroupAdminsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<Guid>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<Guid>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<Guid>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetUserGroupMembers(ref Guid groupId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="groupId"></param>
        private void AfterGetUserGroupMembersDefaultImplementation(IGetUserGroupMembersApiResponse apiResponseLocalVar, Guid groupId)
        {
            bool suppressDefaultLog = false;
            AfterGetUserGroupMembers(ref suppressDefaultLog, apiResponseLocalVar, groupId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="groupId"></param>
        partial void AfterGetUserGroupMembers(ref bool suppressDefaultLog, IGetUserGroupMembersApiResponse apiResponseLocalVar, Guid groupId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="groupId"></param>
        private void OnErrorGetUserGroupMembersDefaultImplementation(Exception exception, string pathFormat, string path, Guid groupId)
        {
            bool suppressDefaultLog = false;
            OnErrorGetUserGroupMembers(ref suppressDefaultLog, exception, pathFormat, path, groupId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="groupId"></param>
        partial void OnErrorGetUserGroupMembers(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Guid groupId);

        /// <summary>
        /// グループメンバーを取得 指定したグループのメンバーのリストを取得します。
        /// </summary>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserGroupMembersApiResponse"/>&gt;</returns>
        public async Task<IGetUserGroupMembersApiResponse?> GetUserGroupMembersOrDefaultAsync(Guid groupId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetUserGroupMembersAsync(groupId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// グループメンバーを取得 指定したグループのメンバーのリストを取得します。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserGroupMembersApiResponse"/>&gt;</returns>
        public async Task<IGetUserGroupMembersApiResponse> GetUserGroupMembersAsync(Guid groupId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetUserGroupMembers(ref groupId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/groups/{groupId}/members";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BgroupId%7D", Uri.EscapeDataString(groupId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetUserGroupMembersApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetUserGroupMembersApiResponse>();

                        GetUserGroupMembersApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/groups/{groupId}/members", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetUserGroupMembersDefaultImplementation(apiResponseLocalVar, groupId);

                        Events.ExecuteOnGetUserGroupMembers(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetUserGroupMembersDefaultImplementation(e, "/groups/{groupId}/members", uriBuilderLocalVar.Path, groupId);
                Events.ExecuteOnErrorGetUserGroupMembers(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetUserGroupMembersApiResponse"/>
        /// </summary>
        public partial class GetUserGroupMembersApiResponse : Traq.Client.ApiResponse, IGetUserGroupMembersApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetUserGroupMembersApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetUserGroupMembersApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetUserGroupMembersApiResponse(ILogger<GetUserGroupMembersApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<UserGroupMember>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<UserGroupMember>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<UserGroupMember>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetUserGroupsDefaultImplementation(IGetUserGroupsApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetUserGroups(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetUserGroups(ref bool suppressDefaultLog, IGetUserGroupsApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        private void OnErrorGetUserGroupsDefaultImplementation(Exception exception, string pathFormat, string path)
        {
            bool suppressDefaultLog = false;
            OnErrorGetUserGroups(ref suppressDefaultLog, exception, pathFormat, path);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        partial void OnErrorGetUserGroups(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path);

        /// <summary>
        /// ユーザーグループのリストを取得 ユーザーグループのリストを取得します。
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserGroupsApiResponse"/>&gt;</returns>
        public async Task<IGetUserGroupsApiResponse?> GetUserGroupsOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetUserGroupsAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// ユーザーグループのリストを取得 ユーザーグループのリストを取得します。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserGroupsApiResponse"/>&gt;</returns>
        public async Task<IGetUserGroupsApiResponse> GetUserGroupsAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/groups";

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetUserGroupsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetUserGroupsApiResponse>();

                        GetUserGroupsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/groups", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetUserGroupsDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetUserGroups(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetUserGroupsDefaultImplementation(e, "/groups", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetUserGroups(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetUserGroupsApiResponse"/>
        /// </summary>
        public partial class GetUserGroupsApiResponse : Traq.Client.ApiResponse, IGetUserGroupsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetUserGroupsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetUserGroupsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetUserGroupsApiResponse(ILogger<GetUserGroupsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<UserGroup>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<UserGroup>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<UserGroup>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatRemoveUserGroupAdmin(ref Guid groupId, ref Guid userId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="groupId"></param>
        /// <param name="userId"></param>
        private void AfterRemoveUserGroupAdminDefaultImplementation(IRemoveUserGroupAdminApiResponse apiResponseLocalVar, Guid groupId, Guid userId)
        {
            bool suppressDefaultLog = false;
            AfterRemoveUserGroupAdmin(ref suppressDefaultLog, apiResponseLocalVar, groupId, userId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="groupId"></param>
        /// <param name="userId"></param>
        partial void AfterRemoveUserGroupAdmin(ref bool suppressDefaultLog, IRemoveUserGroupAdminApiResponse apiResponseLocalVar, Guid groupId, Guid userId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="groupId"></param>
        /// <param name="userId"></param>
        private void OnErrorRemoveUserGroupAdminDefaultImplementation(Exception exception, string pathFormat, string path, Guid groupId, Guid userId)
        {
            bool suppressDefaultLog = false;
            OnErrorRemoveUserGroupAdmin(ref suppressDefaultLog, exception, pathFormat, path, groupId, userId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="groupId"></param>
        /// <param name="userId"></param>
        partial void OnErrorRemoveUserGroupAdmin(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Guid groupId, Guid userId);

        /// <summary>
        /// グループ管理者を削除 指定したユーザーグループから指定した管理者を削除します。 対象のユーザーグループの管理者権限が必要です。 グループから管理者が存在しなくなる場合は400エラーを返します。
        /// </summary>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRemoveUserGroupAdminApiResponse"/>&gt;</returns>
        public async Task<IRemoveUserGroupAdminApiResponse?> RemoveUserGroupAdminOrDefaultAsync(Guid groupId, Guid userId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await RemoveUserGroupAdminAsync(groupId, userId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// グループ管理者を削除 指定したユーザーグループから指定した管理者を削除します。 対象のユーザーグループの管理者権限が必要です。 グループから管理者が存在しなくなる場合は400エラーを返します。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRemoveUserGroupAdminApiResponse"/>&gt;</returns>
        public async Task<IRemoveUserGroupAdminApiResponse> RemoveUserGroupAdminAsync(Guid groupId, Guid userId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatRemoveUserGroupAdmin(ref groupId, ref userId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/groups/{groupId}/admins/{userId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BgroupId%7D", Uri.EscapeDataString(groupId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BuserId%7D", Uri.EscapeDataString(userId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<RemoveUserGroupAdminApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<RemoveUserGroupAdminApiResponse>();

                        RemoveUserGroupAdminApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/groups/{groupId}/admins/{userId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterRemoveUserGroupAdminDefaultImplementation(apiResponseLocalVar, groupId, userId);

                        Events.ExecuteOnRemoveUserGroupAdmin(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorRemoveUserGroupAdminDefaultImplementation(e, "/groups/{groupId}/admins/{userId}", uriBuilderLocalVar.Path, groupId, userId);
                Events.ExecuteOnErrorRemoveUserGroupAdmin(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="RemoveUserGroupAdminApiResponse"/>
        /// </summary>
        public partial class RemoveUserGroupAdminApiResponse : Traq.Client.ApiResponse, IRemoveUserGroupAdminApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<RemoveUserGroupAdminApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="RemoveUserGroupAdminApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public RemoveUserGroupAdminApiResponse(ILogger<RemoveUserGroupAdminApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatRemoveUserGroupMember(ref Guid groupId, ref Guid userId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="groupId"></param>
        /// <param name="userId"></param>
        private void AfterRemoveUserGroupMemberDefaultImplementation(IRemoveUserGroupMemberApiResponse apiResponseLocalVar, Guid groupId, Guid userId)
        {
            bool suppressDefaultLog = false;
            AfterRemoveUserGroupMember(ref suppressDefaultLog, apiResponseLocalVar, groupId, userId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="groupId"></param>
        /// <param name="userId"></param>
        partial void AfterRemoveUserGroupMember(ref bool suppressDefaultLog, IRemoveUserGroupMemberApiResponse apiResponseLocalVar, Guid groupId, Guid userId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="groupId"></param>
        /// <param name="userId"></param>
        private void OnErrorRemoveUserGroupMemberDefaultImplementation(Exception exception, string pathFormat, string path, Guid groupId, Guid userId)
        {
            bool suppressDefaultLog = false;
            OnErrorRemoveUserGroupMember(ref suppressDefaultLog, exception, pathFormat, path, groupId, userId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="groupId"></param>
        /// <param name="userId"></param>
        partial void OnErrorRemoveUserGroupMember(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Guid groupId, Guid userId);

        /// <summary>
        /// グループメンバーを削除 指定したユーザーグループから指定したユーザーを削除します。 既にグループから削除されているメンバーを指定した場合は204を返します。 対象のユーザーグループの管理者権限が必要です。
        /// </summary>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRemoveUserGroupMemberApiResponse"/>&gt;</returns>
        public async Task<IRemoveUserGroupMemberApiResponse?> RemoveUserGroupMemberOrDefaultAsync(Guid groupId, Guid userId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await RemoveUserGroupMemberAsync(groupId, userId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// グループメンバーを削除 指定したユーザーグループから指定したユーザーを削除します。 既にグループから削除されているメンバーを指定した場合は204を返します。 対象のユーザーグループの管理者権限が必要です。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRemoveUserGroupMemberApiResponse"/>&gt;</returns>
        public async Task<IRemoveUserGroupMemberApiResponse> RemoveUserGroupMemberAsync(Guid groupId, Guid userId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatRemoveUserGroupMember(ref groupId, ref userId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/groups/{groupId}/members/{userId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BgroupId%7D", Uri.EscapeDataString(groupId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BuserId%7D", Uri.EscapeDataString(userId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<RemoveUserGroupMemberApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<RemoveUserGroupMemberApiResponse>();

                        RemoveUserGroupMemberApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/groups/{groupId}/members/{userId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterRemoveUserGroupMemberDefaultImplementation(apiResponseLocalVar, groupId, userId);

                        Events.ExecuteOnRemoveUserGroupMember(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorRemoveUserGroupMemberDefaultImplementation(e, "/groups/{groupId}/members/{userId}", uriBuilderLocalVar.Path, groupId, userId);
                Events.ExecuteOnErrorRemoveUserGroupMember(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="RemoveUserGroupMemberApiResponse"/>
        /// </summary>
        public partial class RemoveUserGroupMemberApiResponse : Traq.Client.ApiResponse, IRemoveUserGroupMemberApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<RemoveUserGroupMemberApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="RemoveUserGroupMemberApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public RemoveUserGroupMemberApiResponse(ILogger<RemoveUserGroupMemberApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatRemoveUserGroupMembers(ref Guid groupId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="groupId"></param>
        private void AfterRemoveUserGroupMembersDefaultImplementation(IRemoveUserGroupMembersApiResponse apiResponseLocalVar, Guid groupId)
        {
            bool suppressDefaultLog = false;
            AfterRemoveUserGroupMembers(ref suppressDefaultLog, apiResponseLocalVar, groupId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="groupId"></param>
        partial void AfterRemoveUserGroupMembers(ref bool suppressDefaultLog, IRemoveUserGroupMembersApiResponse apiResponseLocalVar, Guid groupId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="groupId"></param>
        private void OnErrorRemoveUserGroupMembersDefaultImplementation(Exception exception, string pathFormat, string path, Guid groupId)
        {
            bool suppressDefaultLog = false;
            OnErrorRemoveUserGroupMembers(ref suppressDefaultLog, exception, pathFormat, path, groupId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="groupId"></param>
        partial void OnErrorRemoveUserGroupMembers(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Guid groupId);

        /// <summary>
        /// グループメンバーを一括削除 指定したグループから全てのメンバーを削除します。 対象のユーザーグループの管理者権限が必要です。
        /// </summary>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRemoveUserGroupMembersApiResponse"/>&gt;</returns>
        public async Task<IRemoveUserGroupMembersApiResponse?> RemoveUserGroupMembersOrDefaultAsync(Guid groupId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await RemoveUserGroupMembersAsync(groupId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// グループメンバーを一括削除 指定したグループから全てのメンバーを削除します。 対象のユーザーグループの管理者権限が必要です。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRemoveUserGroupMembersApiResponse"/>&gt;</returns>
        public async Task<IRemoveUserGroupMembersApiResponse> RemoveUserGroupMembersAsync(Guid groupId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatRemoveUserGroupMembers(ref groupId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/groups/{groupId}/members";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BgroupId%7D", Uri.EscapeDataString(groupId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<RemoveUserGroupMembersApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<RemoveUserGroupMembersApiResponse>();

                        RemoveUserGroupMembersApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/groups/{groupId}/members", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterRemoveUserGroupMembersDefaultImplementation(apiResponseLocalVar, groupId);

                        Events.ExecuteOnRemoveUserGroupMembers(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorRemoveUserGroupMembersDefaultImplementation(e, "/groups/{groupId}/members", uriBuilderLocalVar.Path, groupId);
                Events.ExecuteOnErrorRemoveUserGroupMembers(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="RemoveUserGroupMembersApiResponse"/>
        /// </summary>
        public partial class RemoveUserGroupMembersApiResponse : Traq.Client.ApiResponse, IRemoveUserGroupMembersApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<RemoveUserGroupMembersApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="RemoveUserGroupMembersApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public RemoveUserGroupMembersApiResponse(ILogger<RemoveUserGroupMembersApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
