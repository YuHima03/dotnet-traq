/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using DotnetTraq.Client;
using DotnetTraq.Model;

namespace DotnetTraq.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGroupApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// グループ管理者を追加
        /// </summary>
        /// <remarks>
        /// 指定したグループに管理者を追加します。 対象のユーザーグループの管理者権限が必要です。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="postUserGroupAdminRequest"> (optional)</param>
        /// <returns></returns>
        void AddUserGroupAdmin(Guid groupId, PostUserGroupAdminRequest? postUserGroupAdminRequest = default(PostUserGroupAdminRequest?));

        /// <summary>
        /// グループ管理者を追加
        /// </summary>
        /// <remarks>
        /// 指定したグループに管理者を追加します。 対象のユーザーグループの管理者権限が必要です。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="postUserGroupAdminRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddUserGroupAdminWithHttpInfo(Guid groupId, PostUserGroupAdminRequest? postUserGroupAdminRequest = default(PostUserGroupAdminRequest?));
        /// <summary>
        /// グループメンバーを追加
        /// </summary>
        /// <remarks>
        /// 指定したグループにメンバーを追加します。 対象のユーザーグループの管理者権限が必要です。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="addUserGroupMemberRequest"> (optional)</param>
        /// <returns></returns>
        void AddUserGroupMember(Guid groupId, AddUserGroupMemberRequest? addUserGroupMemberRequest = default(AddUserGroupMemberRequest?));

        /// <summary>
        /// グループメンバーを追加
        /// </summary>
        /// <remarks>
        /// 指定したグループにメンバーを追加します。 対象のユーザーグループの管理者権限が必要です。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="addUserGroupMemberRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AddUserGroupMemberWithHttpInfo(Guid groupId, AddUserGroupMemberRequest? addUserGroupMemberRequest = default(AddUserGroupMemberRequest?));
        /// <summary>
        /// ユーザーグループのアイコンを変更
        /// </summary>
        /// <remarks>
        /// ユーザーグループのアイコンを変更します。 対象のユーザーグループの管理者権限が必要です。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="file">アイコン画像(2MBまでのpng, jpeg, gif)</param>
        /// <returns></returns>
        void ChangeUserGroupIcon(Guid groupId, FileParameter file);

        /// <summary>
        /// ユーザーグループのアイコンを変更
        /// </summary>
        /// <remarks>
        /// ユーザーグループのアイコンを変更します。 対象のユーザーグループの管理者権限が必要です。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="file">アイコン画像(2MBまでのpng, jpeg, gif)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ChangeUserGroupIconWithHttpInfo(Guid groupId, FileParameter file);
        /// <summary>
        /// ユーザーグループを作成
        /// </summary>
        /// <remarks>
        /// ユーザーグループを作成します。 作成者は自動的にグループ管理者になります。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postUserGroupRequest"> (optional)</param>
        /// <returns>UserGroup</returns>
        UserGroup CreateUserGroup(PostUserGroupRequest? postUserGroupRequest = default(PostUserGroupRequest?));

        /// <summary>
        /// ユーザーグループを作成
        /// </summary>
        /// <remarks>
        /// ユーザーグループを作成します。 作成者は自動的にグループ管理者になります。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postUserGroupRequest"> (optional)</param>
        /// <returns>ApiResponse of UserGroup</returns>
        ApiResponse<UserGroup> CreateUserGroupWithHttpInfo(PostUserGroupRequest? postUserGroupRequest = default(PostUserGroupRequest?));
        /// <summary>
        /// ユーザーグループを削除
        /// </summary>
        /// <remarks>
        /// 指定したユーザーグループを削除します。 対象のユーザーグループの管理者権限が必要です。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <returns></returns>
        void DeleteUserGroup(Guid groupId);

        /// <summary>
        /// ユーザーグループを削除
        /// </summary>
        /// <remarks>
        /// 指定したユーザーグループを削除します。 対象のユーザーグループの管理者権限が必要です。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteUserGroupWithHttpInfo(Guid groupId);
        /// <summary>
        /// ユーザーグループを編集
        /// </summary>
        /// <remarks>
        /// 指定したユーザーグループの情報を編集します。 対象のユーザーグループの管理者権限が必要です。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="patchUserGroupRequest"> (optional)</param>
        /// <returns></returns>
        void EditUserGroup(Guid groupId, PatchUserGroupRequest? patchUserGroupRequest = default(PatchUserGroupRequest?));

        /// <summary>
        /// ユーザーグループを編集
        /// </summary>
        /// <remarks>
        /// 指定したユーザーグループの情報を編集します。 対象のユーザーグループの管理者権限が必要です。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="patchUserGroupRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EditUserGroupWithHttpInfo(Guid groupId, PatchUserGroupRequest? patchUserGroupRequest = default(PatchUserGroupRequest?));
        /// <summary>
        /// グループメンバーを編集
        /// </summary>
        /// <remarks>
        /// 指定したユーザーグループ内の指定したユーザーの属性を編集します。 対象のユーザーグループの管理者権限が必要です。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="patchGroupMemberRequest"> (optional)</param>
        /// <returns></returns>
        void EditUserGroupMember(Guid groupId, Guid userId, PatchGroupMemberRequest? patchGroupMemberRequest = default(PatchGroupMemberRequest?));

        /// <summary>
        /// グループメンバーを編集
        /// </summary>
        /// <remarks>
        /// 指定したユーザーグループ内の指定したユーザーの属性を編集します。 対象のユーザーグループの管理者権限が必要です。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="patchGroupMemberRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EditUserGroupMemberWithHttpInfo(Guid groupId, Guid userId, PatchGroupMemberRequest? patchGroupMemberRequest = default(PatchGroupMemberRequest?));
        /// <summary>
        /// ユーザーグループを取得
        /// </summary>
        /// <remarks>
        /// 指定したユーザーグループの情報を取得します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <returns>UserGroup</returns>
        UserGroup GetUserGroup(Guid groupId);

        /// <summary>
        /// ユーザーグループを取得
        /// </summary>
        /// <remarks>
        /// 指定したユーザーグループの情報を取得します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <returns>ApiResponse of UserGroup</returns>
        ApiResponse<UserGroup> GetUserGroupWithHttpInfo(Guid groupId);
        /// <summary>
        /// グループ管理者を取得
        /// </summary>
        /// <remarks>
        /// 指定したグループの管理者のリストを取得します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <returns>List&lt;Guid&gt;</returns>
        List<Guid> GetUserGroupAdmins(Guid groupId);

        /// <summary>
        /// グループ管理者を取得
        /// </summary>
        /// <remarks>
        /// 指定したグループの管理者のリストを取得します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <returns>ApiResponse of List&lt;Guid&gt;</returns>
        ApiResponse<List<Guid>> GetUserGroupAdminsWithHttpInfo(Guid groupId);
        /// <summary>
        /// グループメンバーを取得
        /// </summary>
        /// <remarks>
        /// 指定したグループのメンバーのリストを取得します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <returns>List&lt;UserGroupMember&gt;</returns>
        List<UserGroupMember> GetUserGroupMembers(Guid groupId);

        /// <summary>
        /// グループメンバーを取得
        /// </summary>
        /// <remarks>
        /// 指定したグループのメンバーのリストを取得します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <returns>ApiResponse of List&lt;UserGroupMember&gt;</returns>
        ApiResponse<List<UserGroupMember>> GetUserGroupMembersWithHttpInfo(Guid groupId);
        /// <summary>
        /// ユーザーグループのリストを取得
        /// </summary>
        /// <remarks>
        /// ユーザーグループのリストを取得します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;UserGroup&gt;</returns>
        List<UserGroup> GetUserGroups();

        /// <summary>
        /// ユーザーグループのリストを取得
        /// </summary>
        /// <remarks>
        /// ユーザーグループのリストを取得します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;UserGroup&gt;</returns>
        ApiResponse<List<UserGroup>> GetUserGroupsWithHttpInfo();
        /// <summary>
        /// グループ管理者を削除
        /// </summary>
        /// <remarks>
        /// 指定したユーザーグループから指定した管理者を削除します。 対象のユーザーグループの管理者権限が必要です。 グループから管理者が存在しなくなる場合は400エラーを返します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="userId">ユーザーUUID</param>
        /// <returns></returns>
        void RemoveUserGroupAdmin(Guid groupId, Guid userId);

        /// <summary>
        /// グループ管理者を削除
        /// </summary>
        /// <remarks>
        /// 指定したユーザーグループから指定した管理者を削除します。 対象のユーザーグループの管理者権限が必要です。 グループから管理者が存在しなくなる場合は400エラーを返します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="userId">ユーザーUUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveUserGroupAdminWithHttpInfo(Guid groupId, Guid userId);
        /// <summary>
        /// グループメンバーを削除
        /// </summary>
        /// <remarks>
        /// 指定したユーザーグループから指定したユーザーを削除します。 既にグループから削除されているメンバーを指定した場合は204を返します。 対象のユーザーグループの管理者権限が必要です。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="userId">ユーザーUUID</param>
        /// <returns></returns>
        void RemoveUserGroupMember(Guid groupId, Guid userId);

        /// <summary>
        /// グループメンバーを削除
        /// </summary>
        /// <remarks>
        /// 指定したユーザーグループから指定したユーザーを削除します。 既にグループから削除されているメンバーを指定した場合は204を返します。 対象のユーザーグループの管理者権限が必要です。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="userId">ユーザーUUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveUserGroupMemberWithHttpInfo(Guid groupId, Guid userId);
        /// <summary>
        /// グループメンバーを一括削除
        /// </summary>
        /// <remarks>
        /// 指定したグループから全てのメンバーを削除します。 対象のユーザーグループの管理者権限が必要です。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <returns></returns>
        void RemoveUserGroupMembers(Guid groupId);

        /// <summary>
        /// グループメンバーを一括削除
        /// </summary>
        /// <remarks>
        /// 指定したグループから全てのメンバーを削除します。 対象のユーザーグループの管理者権限が必要です。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveUserGroupMembersWithHttpInfo(Guid groupId);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGroupApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// グループ管理者を追加
        /// </summary>
        /// <remarks>
        /// 指定したグループに管理者を追加します。 対象のユーザーグループの管理者権限が必要です。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="postUserGroupAdminRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddUserGroupAdminAsync(Guid groupId, PostUserGroupAdminRequest? postUserGroupAdminRequest = default(PostUserGroupAdminRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// グループ管理者を追加
        /// </summary>
        /// <remarks>
        /// 指定したグループに管理者を追加します。 対象のユーザーグループの管理者権限が必要です。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="postUserGroupAdminRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddUserGroupAdminWithHttpInfoAsync(Guid groupId, PostUserGroupAdminRequest? postUserGroupAdminRequest = default(PostUserGroupAdminRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// グループメンバーを追加
        /// </summary>
        /// <remarks>
        /// 指定したグループにメンバーを追加します。 対象のユーザーグループの管理者権限が必要です。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="addUserGroupMemberRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AddUserGroupMemberAsync(Guid groupId, AddUserGroupMemberRequest? addUserGroupMemberRequest = default(AddUserGroupMemberRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// グループメンバーを追加
        /// </summary>
        /// <remarks>
        /// 指定したグループにメンバーを追加します。 対象のユーザーグループの管理者権限が必要です。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="addUserGroupMemberRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddUserGroupMemberWithHttpInfoAsync(Guid groupId, AddUserGroupMemberRequest? addUserGroupMemberRequest = default(AddUserGroupMemberRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// ユーザーグループのアイコンを変更
        /// </summary>
        /// <remarks>
        /// ユーザーグループのアイコンを変更します。 対象のユーザーグループの管理者権限が必要です。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="file">アイコン画像(2MBまでのpng, jpeg, gif)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ChangeUserGroupIconAsync(Guid groupId, FileParameter file, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// ユーザーグループのアイコンを変更
        /// </summary>
        /// <remarks>
        /// ユーザーグループのアイコンを変更します。 対象のユーザーグループの管理者権限が必要です。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="file">アイコン画像(2MBまでのpng, jpeg, gif)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ChangeUserGroupIconWithHttpInfoAsync(Guid groupId, FileParameter file, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// ユーザーグループを作成
        /// </summary>
        /// <remarks>
        /// ユーザーグループを作成します。 作成者は自動的にグループ管理者になります。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postUserGroupRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserGroup</returns>
        System.Threading.Tasks.Task<UserGroup> CreateUserGroupAsync(PostUserGroupRequest? postUserGroupRequest = default(PostUserGroupRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// ユーザーグループを作成
        /// </summary>
        /// <remarks>
        /// ユーザーグループを作成します。 作成者は自動的にグループ管理者になります。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postUserGroupRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserGroup>> CreateUserGroupWithHttpInfoAsync(PostUserGroupRequest? postUserGroupRequest = default(PostUserGroupRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// ユーザーグループを削除
        /// </summary>
        /// <remarks>
        /// 指定したユーザーグループを削除します。 対象のユーザーグループの管理者権限が必要です。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteUserGroupAsync(Guid groupId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// ユーザーグループを削除
        /// </summary>
        /// <remarks>
        /// 指定したユーザーグループを削除します。 対象のユーザーグループの管理者権限が必要です。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUserGroupWithHttpInfoAsync(Guid groupId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// ユーザーグループを編集
        /// </summary>
        /// <remarks>
        /// 指定したユーザーグループの情報を編集します。 対象のユーザーグループの管理者権限が必要です。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="patchUserGroupRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EditUserGroupAsync(Guid groupId, PatchUserGroupRequest? patchUserGroupRequest = default(PatchUserGroupRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// ユーザーグループを編集
        /// </summary>
        /// <remarks>
        /// 指定したユーザーグループの情報を編集します。 対象のユーザーグループの管理者権限が必要です。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="patchUserGroupRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EditUserGroupWithHttpInfoAsync(Guid groupId, PatchUserGroupRequest? patchUserGroupRequest = default(PatchUserGroupRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// グループメンバーを編集
        /// </summary>
        /// <remarks>
        /// 指定したユーザーグループ内の指定したユーザーの属性を編集します。 対象のユーザーグループの管理者権限が必要です。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="patchGroupMemberRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EditUserGroupMemberAsync(Guid groupId, Guid userId, PatchGroupMemberRequest? patchGroupMemberRequest = default(PatchGroupMemberRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// グループメンバーを編集
        /// </summary>
        /// <remarks>
        /// 指定したユーザーグループ内の指定したユーザーの属性を編集します。 対象のユーザーグループの管理者権限が必要です。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="patchGroupMemberRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EditUserGroupMemberWithHttpInfoAsync(Guid groupId, Guid userId, PatchGroupMemberRequest? patchGroupMemberRequest = default(PatchGroupMemberRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// ユーザーグループを取得
        /// </summary>
        /// <remarks>
        /// 指定したユーザーグループの情報を取得します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserGroup</returns>
        System.Threading.Tasks.Task<UserGroup> GetUserGroupAsync(Guid groupId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// ユーザーグループを取得
        /// </summary>
        /// <remarks>
        /// 指定したユーザーグループの情報を取得します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserGroup)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserGroup>> GetUserGroupWithHttpInfoAsync(Guid groupId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// グループ管理者を取得
        /// </summary>
        /// <remarks>
        /// 指定したグループの管理者のリストを取得します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Guid&gt;</returns>
        System.Threading.Tasks.Task<List<Guid>> GetUserGroupAdminsAsync(Guid groupId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// グループ管理者を取得
        /// </summary>
        /// <remarks>
        /// 指定したグループの管理者のリストを取得します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Guid&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Guid>>> GetUserGroupAdminsWithHttpInfoAsync(Guid groupId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// グループメンバーを取得
        /// </summary>
        /// <remarks>
        /// 指定したグループのメンバーのリストを取得します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;UserGroupMember&gt;</returns>
        System.Threading.Tasks.Task<List<UserGroupMember>> GetUserGroupMembersAsync(Guid groupId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// グループメンバーを取得
        /// </summary>
        /// <remarks>
        /// 指定したグループのメンバーのリストを取得します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;UserGroupMember&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserGroupMember>>> GetUserGroupMembersWithHttpInfoAsync(Guid groupId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// ユーザーグループのリストを取得
        /// </summary>
        /// <remarks>
        /// ユーザーグループのリストを取得します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;UserGroup&gt;</returns>
        System.Threading.Tasks.Task<List<UserGroup>> GetUserGroupsAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// ユーザーグループのリストを取得
        /// </summary>
        /// <remarks>
        /// ユーザーグループのリストを取得します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;UserGroup&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserGroup>>> GetUserGroupsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// グループ管理者を削除
        /// </summary>
        /// <remarks>
        /// 指定したユーザーグループから指定した管理者を削除します。 対象のユーザーグループの管理者権限が必要です。 グループから管理者が存在しなくなる場合は400エラーを返します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveUserGroupAdminAsync(Guid groupId, Guid userId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// グループ管理者を削除
        /// </summary>
        /// <remarks>
        /// 指定したユーザーグループから指定した管理者を削除します。 対象のユーザーグループの管理者権限が必要です。 グループから管理者が存在しなくなる場合は400エラーを返します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveUserGroupAdminWithHttpInfoAsync(Guid groupId, Guid userId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// グループメンバーを削除
        /// </summary>
        /// <remarks>
        /// 指定したユーザーグループから指定したユーザーを削除します。 既にグループから削除されているメンバーを指定した場合は204を返します。 対象のユーザーグループの管理者権限が必要です。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveUserGroupMemberAsync(Guid groupId, Guid userId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// グループメンバーを削除
        /// </summary>
        /// <remarks>
        /// 指定したユーザーグループから指定したユーザーを削除します。 既にグループから削除されているメンバーを指定した場合は204を返します。 対象のユーザーグループの管理者権限が必要です。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveUserGroupMemberWithHttpInfoAsync(Guid groupId, Guid userId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// グループメンバーを一括削除
        /// </summary>
        /// <remarks>
        /// 指定したグループから全てのメンバーを削除します。 対象のユーザーグループの管理者権限が必要です。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveUserGroupMembersAsync(Guid groupId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// グループメンバーを一括削除
        /// </summary>
        /// <remarks>
        /// 指定したグループから全てのメンバーを削除します。 対象のユーザーグループの管理者権限が必要です。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveUserGroupMembersWithHttpInfoAsync(Guid groupId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGroupApi : IGroupApiSync, IGroupApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GroupApi : IDisposable, IGroupApi
    {
        private DotnetTraq.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public GroupApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public GroupApi(string basePath)
        {
            this.Configuration = DotnetTraq.Client.Configuration.MergeConfigurations(
                DotnetTraq.Client.GlobalConfiguration.Instance,
                new DotnetTraq.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new DotnetTraq.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = DotnetTraq.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public GroupApi(DotnetTraq.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = DotnetTraq.Client.Configuration.MergeConfigurations(
                DotnetTraq.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new DotnetTraq.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = DotnetTraq.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public GroupApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public GroupApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = DotnetTraq.Client.Configuration.MergeConfigurations(
                DotnetTraq.Client.GlobalConfiguration.Instance,
                new DotnetTraq.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new DotnetTraq.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = DotnetTraq.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public GroupApi(HttpClient client, DotnetTraq.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = DotnetTraq.Client.Configuration.MergeConfigurations(
                DotnetTraq.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new DotnetTraq.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = DotnetTraq.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public GroupApi(DotnetTraq.Client.ISynchronousClient client, DotnetTraq.Client.IAsynchronousClient asyncClient, DotnetTraq.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = DotnetTraq.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public DotnetTraq.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public DotnetTraq.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public DotnetTraq.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public DotnetTraq.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public DotnetTraq.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// グループ管理者を追加 指定したグループに管理者を追加します。 対象のユーザーグループの管理者権限が必要です。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="postUserGroupAdminRequest"> (optional)</param>
        /// <returns></returns>
        public void AddUserGroupAdmin(Guid groupId, PostUserGroupAdminRequest? postUserGroupAdminRequest = default(PostUserGroupAdminRequest?))
        {
            AddUserGroupAdminWithHttpInfo(groupId, postUserGroupAdminRequest);
        }

        /// <summary>
        /// グループ管理者を追加 指定したグループに管理者を追加します。 対象のユーザーグループの管理者権限が必要です。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="postUserGroupAdminRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public DotnetTraq.Client.ApiResponse<Object> AddUserGroupAdminWithHttpInfo(Guid groupId, PostUserGroupAdminRequest? postUserGroupAdminRequest = default(PostUserGroupAdminRequest?))
        {
            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupId", DotnetTraq.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.Data = postUserGroupAdminRequest;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/groups/{groupId}/admins", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddUserGroupAdmin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// グループ管理者を追加 指定したグループに管理者を追加します。 対象のユーザーグループの管理者権限が必要です。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="postUserGroupAdminRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddUserGroupAdminAsync(Guid groupId, PostUserGroupAdminRequest? postUserGroupAdminRequest = default(PostUserGroupAdminRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await AddUserGroupAdminWithHttpInfoAsync(groupId, postUserGroupAdminRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// グループ管理者を追加 指定したグループに管理者を追加します。 対象のユーザーグループの管理者権限が必要です。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="postUserGroupAdminRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<DotnetTraq.Client.ApiResponse<Object>> AddUserGroupAdminWithHttpInfoAsync(Guid groupId, PostUserGroupAdminRequest? postUserGroupAdminRequest = default(PostUserGroupAdminRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupId", DotnetTraq.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.Data = postUserGroupAdminRequest;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/groups/{groupId}/admins", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddUserGroupAdmin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// グループメンバーを追加 指定したグループにメンバーを追加します。 対象のユーザーグループの管理者権限が必要です。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="addUserGroupMemberRequest"> (optional)</param>
        /// <returns></returns>
        public void AddUserGroupMember(Guid groupId, AddUserGroupMemberRequest? addUserGroupMemberRequest = default(AddUserGroupMemberRequest?))
        {
            AddUserGroupMemberWithHttpInfo(groupId, addUserGroupMemberRequest);
        }

        /// <summary>
        /// グループメンバーを追加 指定したグループにメンバーを追加します。 対象のユーザーグループの管理者権限が必要です。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="addUserGroupMemberRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public DotnetTraq.Client.ApiResponse<Object> AddUserGroupMemberWithHttpInfo(Guid groupId, AddUserGroupMemberRequest? addUserGroupMemberRequest = default(AddUserGroupMemberRequest?))
        {
            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupId", DotnetTraq.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.Data = addUserGroupMemberRequest;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/groups/{groupId}/members", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddUserGroupMember", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// グループメンバーを追加 指定したグループにメンバーを追加します。 対象のユーザーグループの管理者権限が必要です。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="addUserGroupMemberRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AddUserGroupMemberAsync(Guid groupId, AddUserGroupMemberRequest? addUserGroupMemberRequest = default(AddUserGroupMemberRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await AddUserGroupMemberWithHttpInfoAsync(groupId, addUserGroupMemberRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// グループメンバーを追加 指定したグループにメンバーを追加します。 対象のユーザーグループの管理者権限が必要です。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="addUserGroupMemberRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<DotnetTraq.Client.ApiResponse<Object>> AddUserGroupMemberWithHttpInfoAsync(Guid groupId, AddUserGroupMemberRequest? addUserGroupMemberRequest = default(AddUserGroupMemberRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupId", DotnetTraq.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.Data = addUserGroupMemberRequest;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/groups/{groupId}/members", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddUserGroupMember", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ユーザーグループのアイコンを変更 ユーザーグループのアイコンを変更します。 対象のユーザーグループの管理者権限が必要です。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="file">アイコン画像(2MBまでのpng, jpeg, gif)</param>
        /// <returns></returns>
        public void ChangeUserGroupIcon(Guid groupId, FileParameter file)
        {
            ChangeUserGroupIconWithHttpInfo(groupId, file);
        }

        /// <summary>
        /// ユーザーグループのアイコンを変更 ユーザーグループのアイコンを変更します。 対象のユーザーグループの管理者権限が必要です。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="file">アイコン画像(2MBまでのpng, jpeg, gif)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public DotnetTraq.Client.ApiResponse<Object> ChangeUserGroupIconWithHttpInfo(Guid groupId, FileParameter file)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new DotnetTraq.Client.ApiException(400, "Missing required parameter 'file' when calling GroupApi->ChangeUserGroupIcon");

            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupId", DotnetTraq.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.FileParameters.Add("file", file);

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/groups/{groupId}/icon", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChangeUserGroupIcon", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ユーザーグループのアイコンを変更 ユーザーグループのアイコンを変更します。 対象のユーザーグループの管理者権限が必要です。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="file">アイコン画像(2MBまでのpng, jpeg, gif)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ChangeUserGroupIconAsync(Guid groupId, FileParameter file, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await ChangeUserGroupIconWithHttpInfoAsync(groupId, file, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// ユーザーグループのアイコンを変更 ユーザーグループのアイコンを変更します。 対象のユーザーグループの管理者権限が必要です。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="file">アイコン画像(2MBまでのpng, jpeg, gif)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<DotnetTraq.Client.ApiResponse<Object>> ChangeUserGroupIconWithHttpInfoAsync(Guid groupId, FileParameter file, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new DotnetTraq.Client.ApiException(400, "Missing required parameter 'file' when calling GroupApi->ChangeUserGroupIcon");


            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupId", DotnetTraq.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.FileParameters.Add("file", file);

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/groups/{groupId}/icon", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChangeUserGroupIcon", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ユーザーグループを作成 ユーザーグループを作成します。 作成者は自動的にグループ管理者になります。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postUserGroupRequest"> (optional)</param>
        /// <returns>UserGroup</returns>
        public UserGroup CreateUserGroup(PostUserGroupRequest? postUserGroupRequest = default(PostUserGroupRequest?))
        {
            DotnetTraq.Client.ApiResponse<UserGroup> localVarResponse = CreateUserGroupWithHttpInfo(postUserGroupRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ユーザーグループを作成 ユーザーグループを作成します。 作成者は自動的にグループ管理者になります。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postUserGroupRequest"> (optional)</param>
        /// <returns>ApiResponse of UserGroup</returns>
        public DotnetTraq.Client.ApiResponse<UserGroup> CreateUserGroupWithHttpInfo(PostUserGroupRequest? postUserGroupRequest = default(PostUserGroupRequest?))
        {
            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = postUserGroupRequest;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<UserGroup>("/groups", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateUserGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ユーザーグループを作成 ユーザーグループを作成します。 作成者は自動的にグループ管理者になります。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postUserGroupRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserGroup</returns>
        public async System.Threading.Tasks.Task<UserGroup> CreateUserGroupAsync(PostUserGroupRequest? postUserGroupRequest = default(PostUserGroupRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DotnetTraq.Client.ApiResponse<UserGroup> localVarResponse = await CreateUserGroupWithHttpInfoAsync(postUserGroupRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ユーザーグループを作成 ユーザーグループを作成します。 作成者は自動的にグループ管理者になります。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postUserGroupRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserGroup)</returns>
        public async System.Threading.Tasks.Task<DotnetTraq.Client.ApiResponse<UserGroup>> CreateUserGroupWithHttpInfoAsync(PostUserGroupRequest? postUserGroupRequest = default(PostUserGroupRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = postUserGroupRequest;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<UserGroup>("/groups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateUserGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ユーザーグループを削除 指定したユーザーグループを削除します。 対象のユーザーグループの管理者権限が必要です。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <returns></returns>
        public void DeleteUserGroup(Guid groupId)
        {
            DeleteUserGroupWithHttpInfo(groupId);
        }

        /// <summary>
        /// ユーザーグループを削除 指定したユーザーグループを削除します。 対象のユーザーグループの管理者権限が必要です。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public DotnetTraq.Client.ApiResponse<Object> DeleteUserGroupWithHttpInfo(Guid groupId)
        {
            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupId", DotnetTraq.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/groups/{groupId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteUserGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ユーザーグループを削除 指定したユーザーグループを削除します。 対象のユーザーグループの管理者権限が必要です。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteUserGroupAsync(Guid groupId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await DeleteUserGroupWithHttpInfoAsync(groupId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// ユーザーグループを削除 指定したユーザーグループを削除します。 対象のユーザーグループの管理者権限が必要です。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<DotnetTraq.Client.ApiResponse<Object>> DeleteUserGroupWithHttpInfoAsync(Guid groupId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupId", DotnetTraq.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/groups/{groupId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteUserGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ユーザーグループを編集 指定したユーザーグループの情報を編集します。 対象のユーザーグループの管理者権限が必要です。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="patchUserGroupRequest"> (optional)</param>
        /// <returns></returns>
        public void EditUserGroup(Guid groupId, PatchUserGroupRequest? patchUserGroupRequest = default(PatchUserGroupRequest?))
        {
            EditUserGroupWithHttpInfo(groupId, patchUserGroupRequest);
        }

        /// <summary>
        /// ユーザーグループを編集 指定したユーザーグループの情報を編集します。 対象のユーザーグループの管理者権限が必要です。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="patchUserGroupRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public DotnetTraq.Client.ApiResponse<Object> EditUserGroupWithHttpInfo(Guid groupId, PatchUserGroupRequest? patchUserGroupRequest = default(PatchUserGroupRequest?))
        {
            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupId", DotnetTraq.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.Data = patchUserGroupRequest;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/groups/{groupId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EditUserGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ユーザーグループを編集 指定したユーザーグループの情報を編集します。 対象のユーザーグループの管理者権限が必要です。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="patchUserGroupRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EditUserGroupAsync(Guid groupId, PatchUserGroupRequest? patchUserGroupRequest = default(PatchUserGroupRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await EditUserGroupWithHttpInfoAsync(groupId, patchUserGroupRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// ユーザーグループを編集 指定したユーザーグループの情報を編集します。 対象のユーザーグループの管理者権限が必要です。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="patchUserGroupRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<DotnetTraq.Client.ApiResponse<Object>> EditUserGroupWithHttpInfoAsync(Guid groupId, PatchUserGroupRequest? patchUserGroupRequest = default(PatchUserGroupRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupId", DotnetTraq.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.Data = patchUserGroupRequest;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/groups/{groupId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EditUserGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// グループメンバーを編集 指定したユーザーグループ内の指定したユーザーの属性を編集します。 対象のユーザーグループの管理者権限が必要です。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="patchGroupMemberRequest"> (optional)</param>
        /// <returns></returns>
        public void EditUserGroupMember(Guid groupId, Guid userId, PatchGroupMemberRequest? patchGroupMemberRequest = default(PatchGroupMemberRequest?))
        {
            EditUserGroupMemberWithHttpInfo(groupId, userId, patchGroupMemberRequest);
        }

        /// <summary>
        /// グループメンバーを編集 指定したユーザーグループ内の指定したユーザーの属性を編集します。 対象のユーザーグループの管理者権限が必要です。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="patchGroupMemberRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public DotnetTraq.Client.ApiResponse<Object> EditUserGroupMemberWithHttpInfo(Guid groupId, Guid userId, PatchGroupMemberRequest? patchGroupMemberRequest = default(PatchGroupMemberRequest?))
        {
            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupId", DotnetTraq.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", DotnetTraq.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = patchGroupMemberRequest;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/groups/{groupId}/members/{userId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EditUserGroupMember", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// グループメンバーを編集 指定したユーザーグループ内の指定したユーザーの属性を編集します。 対象のユーザーグループの管理者権限が必要です。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="patchGroupMemberRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EditUserGroupMemberAsync(Guid groupId, Guid userId, PatchGroupMemberRequest? patchGroupMemberRequest = default(PatchGroupMemberRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await EditUserGroupMemberWithHttpInfoAsync(groupId, userId, patchGroupMemberRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// グループメンバーを編集 指定したユーザーグループ内の指定したユーザーの属性を編集します。 対象のユーザーグループの管理者権限が必要です。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="patchGroupMemberRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<DotnetTraq.Client.ApiResponse<Object>> EditUserGroupMemberWithHttpInfoAsync(Guid groupId, Guid userId, PatchGroupMemberRequest? patchGroupMemberRequest = default(PatchGroupMemberRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupId", DotnetTraq.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", DotnetTraq.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = patchGroupMemberRequest;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/groups/{groupId}/members/{userId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EditUserGroupMember", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ユーザーグループを取得 指定したユーザーグループの情報を取得します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <returns>UserGroup</returns>
        public UserGroup GetUserGroup(Guid groupId)
        {
            DotnetTraq.Client.ApiResponse<UserGroup> localVarResponse = GetUserGroupWithHttpInfo(groupId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ユーザーグループを取得 指定したユーザーグループの情報を取得します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <returns>ApiResponse of UserGroup</returns>
        public DotnetTraq.Client.ApiResponse<UserGroup> GetUserGroupWithHttpInfo(Guid groupId)
        {
            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupId", DotnetTraq.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<UserGroup>("/groups/{groupId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ユーザーグループを取得 指定したユーザーグループの情報を取得します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserGroup</returns>
        public async System.Threading.Tasks.Task<UserGroup> GetUserGroupAsync(Guid groupId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DotnetTraq.Client.ApiResponse<UserGroup> localVarResponse = await GetUserGroupWithHttpInfoAsync(groupId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ユーザーグループを取得 指定したユーザーグループの情報を取得します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserGroup)</returns>
        public async System.Threading.Tasks.Task<DotnetTraq.Client.ApiResponse<UserGroup>> GetUserGroupWithHttpInfoAsync(Guid groupId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupId", DotnetTraq.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<UserGroup>("/groups/{groupId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// グループ管理者を取得 指定したグループの管理者のリストを取得します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <returns>List&lt;Guid&gt;</returns>
        public List<Guid> GetUserGroupAdmins(Guid groupId)
        {
            DotnetTraq.Client.ApiResponse<List<Guid>> localVarResponse = GetUserGroupAdminsWithHttpInfo(groupId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// グループ管理者を取得 指定したグループの管理者のリストを取得します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <returns>ApiResponse of List&lt;Guid&gt;</returns>
        public DotnetTraq.Client.ApiResponse<List<Guid>> GetUserGroupAdminsWithHttpInfo(Guid groupId)
        {
            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupId", DotnetTraq.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<Guid>>("/groups/{groupId}/admins", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserGroupAdmins", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// グループ管理者を取得 指定したグループの管理者のリストを取得します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Guid&gt;</returns>
        public async System.Threading.Tasks.Task<List<Guid>> GetUserGroupAdminsAsync(Guid groupId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DotnetTraq.Client.ApiResponse<List<Guid>> localVarResponse = await GetUserGroupAdminsWithHttpInfoAsync(groupId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// グループ管理者を取得 指定したグループの管理者のリストを取得します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Guid&gt;)</returns>
        public async System.Threading.Tasks.Task<DotnetTraq.Client.ApiResponse<List<Guid>>> GetUserGroupAdminsWithHttpInfoAsync(Guid groupId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupId", DotnetTraq.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Guid>>("/groups/{groupId}/admins", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserGroupAdmins", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// グループメンバーを取得 指定したグループのメンバーのリストを取得します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <returns>List&lt;UserGroupMember&gt;</returns>
        public List<UserGroupMember> GetUserGroupMembers(Guid groupId)
        {
            DotnetTraq.Client.ApiResponse<List<UserGroupMember>> localVarResponse = GetUserGroupMembersWithHttpInfo(groupId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// グループメンバーを取得 指定したグループのメンバーのリストを取得します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <returns>ApiResponse of List&lt;UserGroupMember&gt;</returns>
        public DotnetTraq.Client.ApiResponse<List<UserGroupMember>> GetUserGroupMembersWithHttpInfo(Guid groupId)
        {
            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupId", DotnetTraq.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<UserGroupMember>>("/groups/{groupId}/members", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserGroupMembers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// グループメンバーを取得 指定したグループのメンバーのリストを取得します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;UserGroupMember&gt;</returns>
        public async System.Threading.Tasks.Task<List<UserGroupMember>> GetUserGroupMembersAsync(Guid groupId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DotnetTraq.Client.ApiResponse<List<UserGroupMember>> localVarResponse = await GetUserGroupMembersWithHttpInfoAsync(groupId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// グループメンバーを取得 指定したグループのメンバーのリストを取得します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;UserGroupMember&gt;)</returns>
        public async System.Threading.Tasks.Task<DotnetTraq.Client.ApiResponse<List<UserGroupMember>>> GetUserGroupMembersWithHttpInfoAsync(Guid groupId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupId", DotnetTraq.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<UserGroupMember>>("/groups/{groupId}/members", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserGroupMembers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ユーザーグループのリストを取得 ユーザーグループのリストを取得します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;UserGroup&gt;</returns>
        public List<UserGroup> GetUserGroups()
        {
            DotnetTraq.Client.ApiResponse<List<UserGroup>> localVarResponse = GetUserGroupsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// ユーザーグループのリストを取得 ユーザーグループのリストを取得します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;UserGroup&gt;</returns>
        public DotnetTraq.Client.ApiResponse<List<UserGroup>> GetUserGroupsWithHttpInfo()
        {
            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<UserGroup>>("/groups", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserGroups", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ユーザーグループのリストを取得 ユーザーグループのリストを取得します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;UserGroup&gt;</returns>
        public async System.Threading.Tasks.Task<List<UserGroup>> GetUserGroupsAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DotnetTraq.Client.ApiResponse<List<UserGroup>> localVarResponse = await GetUserGroupsWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ユーザーグループのリストを取得 ユーザーグループのリストを取得します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;UserGroup&gt;)</returns>
        public async System.Threading.Tasks.Task<DotnetTraq.Client.ApiResponse<List<UserGroup>>> GetUserGroupsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<UserGroup>>("/groups", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserGroups", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// グループ管理者を削除 指定したユーザーグループから指定した管理者を削除します。 対象のユーザーグループの管理者権限が必要です。 グループから管理者が存在しなくなる場合は400エラーを返します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="userId">ユーザーUUID</param>
        /// <returns></returns>
        public void RemoveUserGroupAdmin(Guid groupId, Guid userId)
        {
            RemoveUserGroupAdminWithHttpInfo(groupId, userId);
        }

        /// <summary>
        /// グループ管理者を削除 指定したユーザーグループから指定した管理者を削除します。 対象のユーザーグループの管理者権限が必要です。 グループから管理者が存在しなくなる場合は400エラーを返します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="userId">ユーザーUUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public DotnetTraq.Client.ApiResponse<Object> RemoveUserGroupAdminWithHttpInfo(Guid groupId, Guid userId)
        {
            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupId", DotnetTraq.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", DotnetTraq.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/groups/{groupId}/admins/{userId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveUserGroupAdmin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// グループ管理者を削除 指定したユーザーグループから指定した管理者を削除します。 対象のユーザーグループの管理者権限が必要です。 グループから管理者が存在しなくなる場合は400エラーを返します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveUserGroupAdminAsync(Guid groupId, Guid userId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await RemoveUserGroupAdminWithHttpInfoAsync(groupId, userId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// グループ管理者を削除 指定したユーザーグループから指定した管理者を削除します。 対象のユーザーグループの管理者権限が必要です。 グループから管理者が存在しなくなる場合は400エラーを返します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<DotnetTraq.Client.ApiResponse<Object>> RemoveUserGroupAdminWithHttpInfoAsync(Guid groupId, Guid userId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupId", DotnetTraq.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", DotnetTraq.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/groups/{groupId}/admins/{userId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveUserGroupAdmin", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// グループメンバーを削除 指定したユーザーグループから指定したユーザーを削除します。 既にグループから削除されているメンバーを指定した場合は204を返します。 対象のユーザーグループの管理者権限が必要です。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="userId">ユーザーUUID</param>
        /// <returns></returns>
        public void RemoveUserGroupMember(Guid groupId, Guid userId)
        {
            RemoveUserGroupMemberWithHttpInfo(groupId, userId);
        }

        /// <summary>
        /// グループメンバーを削除 指定したユーザーグループから指定したユーザーを削除します。 既にグループから削除されているメンバーを指定した場合は204を返します。 対象のユーザーグループの管理者権限が必要です。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="userId">ユーザーUUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public DotnetTraq.Client.ApiResponse<Object> RemoveUserGroupMemberWithHttpInfo(Guid groupId, Guid userId)
        {
            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupId", DotnetTraq.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", DotnetTraq.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/groups/{groupId}/members/{userId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveUserGroupMember", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// グループメンバーを削除 指定したユーザーグループから指定したユーザーを削除します。 既にグループから削除されているメンバーを指定した場合は204を返します。 対象のユーザーグループの管理者権限が必要です。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveUserGroupMemberAsync(Guid groupId, Guid userId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await RemoveUserGroupMemberWithHttpInfoAsync(groupId, userId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// グループメンバーを削除 指定したユーザーグループから指定したユーザーを削除します。 既にグループから削除されているメンバーを指定した場合は204を返します。 対象のユーザーグループの管理者権限が必要です。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<DotnetTraq.Client.ApiResponse<Object>> RemoveUserGroupMemberWithHttpInfoAsync(Guid groupId, Guid userId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupId", DotnetTraq.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", DotnetTraq.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/groups/{groupId}/members/{userId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveUserGroupMember", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// グループメンバーを一括削除 指定したグループから全てのメンバーを削除します。 対象のユーザーグループの管理者権限が必要です。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <returns></returns>
        public void RemoveUserGroupMembers(Guid groupId)
        {
            RemoveUserGroupMembersWithHttpInfo(groupId);
        }

        /// <summary>
        /// グループメンバーを一括削除 指定したグループから全てのメンバーを削除します。 対象のユーザーグループの管理者権限が必要です。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public DotnetTraq.Client.ApiResponse<Object> RemoveUserGroupMembersWithHttpInfo(Guid groupId)
        {
            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupId", DotnetTraq.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/groups/{groupId}/members", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveUserGroupMembers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// グループメンバーを一括削除 指定したグループから全てのメンバーを削除します。 対象のユーザーグループの管理者権限が必要です。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveUserGroupMembersAsync(Guid groupId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await RemoveUserGroupMembersWithHttpInfoAsync(groupId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// グループメンバーを一括削除 指定したグループから全てのメンバーを削除します。 対象のユーザーグループの管理者権限が必要です。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ユーザーグループUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<DotnetTraq.Client.ApiResponse<Object>> RemoveUserGroupMembersWithHttpInfoAsync(Guid groupId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupId", DotnetTraq.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/groups/{groupId}/members", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveUserGroupMembers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
