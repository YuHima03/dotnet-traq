// <auto-generated>
/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Traq.Client;
using Traq.Model;
using System.Diagnostics.CodeAnalysis;

namespace Traq.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IFileApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        FileApiEvents Events { get; }

        /// <summary>
        /// ファイルを削除
        /// </summary>
        /// <remarks>
        /// 指定したファイルを削除します。 指定したファイルの削除権限が必要です。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ファイルUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteFileApiResponse"/>&gt;</returns>
        Task<IDeleteFileApiResponse> DeleteFileAsync(Guid fileId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// ファイルを削除
        /// </summary>
        /// <remarks>
        /// 指定したファイルを削除します。 指定したファイルの削除権限が必要です。
        /// </remarks>
        /// <param name="fileId">ファイルUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteFileApiResponse"/>?&gt;</returns>
        Task<IDeleteFileApiResponse?> DeleteFileOrDefaultAsync(Guid fileId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// ファイルをダウンロード
        /// </summary>
        /// <remarks>
        /// 指定したファイル本体を取得します。 指定したファイルへのアクセス権限が必要です。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ファイルUUID</param>
        /// <param name="dl">1を指定するとレスポンスにContent-Dispositionヘッダーが付与されます (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFileApiResponse"/>&gt;</returns>
        Task<IGetFileApiResponse> GetFileAsync(Guid fileId, Option<int> dl = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// ファイルをダウンロード
        /// </summary>
        /// <remarks>
        /// 指定したファイル本体を取得します。 指定したファイルへのアクセス権限が必要です。
        /// </remarks>
        /// <param name="fileId">ファイルUUID</param>
        /// <param name="dl">1を指定するとレスポンスにContent-Dispositionヘッダーが付与されます (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFileApiResponse"/>?&gt;</returns>
        Task<IGetFileApiResponse?> GetFileOrDefaultAsync(Guid fileId, Option<int> dl = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// ファイルメタを取得
        /// </summary>
        /// <remarks>
        /// 指定したファイルのメタ情報を取得します。 指定したファイルへのアクセス権限が必要です。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ファイルUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFileMetaApiResponse"/>&gt;</returns>
        Task<IGetFileMetaApiResponse> GetFileMetaAsync(Guid fileId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// ファイルメタを取得
        /// </summary>
        /// <remarks>
        /// 指定したファイルのメタ情報を取得します。 指定したファイルへのアクセス権限が必要です。
        /// </remarks>
        /// <param name="fileId">ファイルUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFileMetaApiResponse"/>?&gt;</returns>
        Task<IGetFileMetaApiResponse?> GetFileMetaOrDefaultAsync(Guid fileId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// ファイルメタのリストを取得
        /// </summary>
        /// <remarks>
        /// 指定したクエリでファイルメタのリストを取得します。 クエリパラメータ&#x60;channelId&#x60;, &#x60;mine&#x60;の少なくともいずれかが必須です。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">アップロード先チャンネルUUID (optional)</param>
        /// <param name="limit">取得する件数 (optional)</param>
        /// <param name="offset">取得するオフセット (optional, default to 0)</param>
        /// <param name="since">取得する時間範囲の開始日時 (optional, default to &quot;0000-01-01T00:00Z&quot;)</param>
        /// <param name="until">取得する時間範囲の終了日時 (optional)</param>
        /// <param name="inclusive">範囲の端を含めるかどうか (optional, default to false)</param>
        /// <param name="order">昇順か降順か (optional, default to desc)</param>
        /// <param name="mine">アップロード者が自分のファイルのみを取得するか (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFilesApiResponse"/>&gt;</returns>
        Task<IGetFilesApiResponse> GetFilesAsync(Option<Guid> channelId = default, Option<int> limit = default, Option<int> offset = default, Option<DateTimeOffset> since = default, Option<DateTimeOffset> until = default, Option<bool> inclusive = default, Option<string> order = default, Option<bool> mine = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// ファイルメタのリストを取得
        /// </summary>
        /// <remarks>
        /// 指定したクエリでファイルメタのリストを取得します。 クエリパラメータ&#x60;channelId&#x60;, &#x60;mine&#x60;の少なくともいずれかが必須です。
        /// </remarks>
        /// <param name="channelId">アップロード先チャンネルUUID (optional)</param>
        /// <param name="limit">取得する件数 (optional)</param>
        /// <param name="offset">取得するオフセット (optional, default to 0)</param>
        /// <param name="since">取得する時間範囲の開始日時 (optional, default to &quot;0000-01-01T00:00Z&quot;)</param>
        /// <param name="until">取得する時間範囲の終了日時 (optional)</param>
        /// <param name="inclusive">範囲の端を含めるかどうか (optional, default to false)</param>
        /// <param name="order">昇順か降順か (optional, default to desc)</param>
        /// <param name="mine">アップロード者が自分のファイルのみを取得するか (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFilesApiResponse"/>?&gt;</returns>
        Task<IGetFilesApiResponse?> GetFilesOrDefaultAsync(Option<Guid> channelId = default, Option<int> limit = default, Option<int> offset = default, Option<DateTimeOffset> since = default, Option<DateTimeOffset> until = default, Option<bool> inclusive = default, Option<string> order = default, Option<bool> mine = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// サムネイル画像を取得
        /// </summary>
        /// <remarks>
        /// 指定したファイルのサムネイル画像を取得します。 指定したファイルへのアクセス権限が必要です。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ファイルUUID</param>
        /// <param name="type">取得するサムネイルのタイプ (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetThumbnailImageApiResponse"/>&gt;</returns>
        Task<IGetThumbnailImageApiResponse> GetThumbnailImageAsync(Guid fileId, Option<ThumbnailType> type = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// サムネイル画像を取得
        /// </summary>
        /// <remarks>
        /// 指定したファイルのサムネイル画像を取得します。 指定したファイルへのアクセス権限が必要です。
        /// </remarks>
        /// <param name="fileId">ファイルUUID</param>
        /// <param name="type">取得するサムネイルのタイプ (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetThumbnailImageApiResponse"/>?&gt;</returns>
        Task<IGetThumbnailImageApiResponse?> GetThumbnailImageOrDefaultAsync(Guid fileId, Option<ThumbnailType> type = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// ファイルをアップロード
        /// </summary>
        /// <remarks>
        /// 指定したチャンネルにファイルをアップロードします。 アーカイブされているチャンネルにはアップロード出来ません。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">ファイル本体</param>
        /// <param name="channelId">アップロード先チャンネルUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostFileApiResponse"/>&gt;</returns>
        Task<IPostFileApiResponse> PostFileAsync(System.IO.Stream file, Guid channelId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// ファイルをアップロード
        /// </summary>
        /// <remarks>
        /// 指定したチャンネルにファイルをアップロードします。 アーカイブされているチャンネルにはアップロード出来ません。
        /// </remarks>
        /// <param name="file">ファイル本体</param>
        /// <param name="channelId">アップロード先チャンネルUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostFileApiResponse"/>?&gt;</returns>
        Task<IPostFileApiResponse?> PostFileOrDefaultAsync(System.IO.Stream file, Guid channelId, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IDeleteFileApiResponse"/>
    /// </summary>
    public interface IDeleteFileApiResponse : Traq.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetFileApiResponse"/>
    /// </summary>
    public interface IGetFileApiResponse : Traq.Client.IApiResponse, IOk<System.IO.Stream?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetFileMetaApiResponse"/>
    /// </summary>
    public interface IGetFileMetaApiResponse : Traq.Client.IApiResponse, IOk<Traq.Model.FileInfo?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetFilesApiResponse"/>
    /// </summary>
    public interface IGetFilesApiResponse : Traq.Client.IApiResponse, IOk<List<FileInfo>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }
    }

    /// <summary>
    /// The <see cref="IGetThumbnailImageApiResponse"/>
    /// </summary>
    public interface IGetThumbnailImageApiResponse : Traq.Client.IApiResponse, IOk<System.IO.Stream?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IPostFileApiResponse"/>
    /// </summary>
    public interface IPostFileApiResponse : Traq.Client.IApiResponse, ICreated<Traq.Model.FileInfo?>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 411 LengthRequired
        /// </summary>
        /// <returns></returns>
        bool IsLengthRequired { get; }

        /// <summary>
        /// Returns true if the response is 413 ContentTooLarge
        /// </summary>
        /// <returns></returns>
        bool IsContentTooLarge { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class FileApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeleteFile;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeleteFile;

        internal void ExecuteOnDeleteFile(FileApi.DeleteFileApiResponse apiResponse)
        {
            OnDeleteFile?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeleteFile(Exception exception)
        {
            OnErrorDeleteFile?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetFile;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetFile;

        internal void ExecuteOnGetFile(FileApi.GetFileApiResponse apiResponse)
        {
            OnGetFile?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetFile(Exception exception)
        {
            OnErrorGetFile?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetFileMeta;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetFileMeta;

        internal void ExecuteOnGetFileMeta(FileApi.GetFileMetaApiResponse apiResponse)
        {
            OnGetFileMeta?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetFileMeta(Exception exception)
        {
            OnErrorGetFileMeta?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetFiles;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetFiles;

        internal void ExecuteOnGetFiles(FileApi.GetFilesApiResponse apiResponse)
        {
            OnGetFiles?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetFiles(Exception exception)
        {
            OnErrorGetFiles?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetThumbnailImage;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetThumbnailImage;

        internal void ExecuteOnGetThumbnailImage(FileApi.GetThumbnailImageApiResponse apiResponse)
        {
            OnGetThumbnailImage?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetThumbnailImage(Exception exception)
        {
            OnErrorGetThumbnailImage?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPostFile;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPostFile;

        internal void ExecuteOnPostFile(FileApi.PostFileApiResponse apiResponse)
        {
            OnPostFile?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPostFile(Exception exception)
        {
            OnErrorPostFile?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class FileApi : IFileApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<FileApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public FileApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// A token provider of type <see cref="OauthTokenProvider"/>
        /// </summary>
        public TokenProvider<OAuthToken> OauthTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="FileApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FileApi(ILogger<FileApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, FileApiEvents fileApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider,
            TokenProvider<BearerToken> bearerTokenProvider,
            TokenProvider<OAuthToken> oauthTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<FileApi>();
            HttpClient = httpClient;
            Events = fileApiEvents;
            ApiKeyProvider = apiKeyProvider;
            BearerTokenProvider = bearerTokenProvider;
            OauthTokenProvider = oauthTokenProvider;
        }

        partial void FormatDeleteFile(ref Guid fileId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="fileId"></param>
        private void AfterDeleteFileDefaultImplementation(IDeleteFileApiResponse apiResponseLocalVar, Guid fileId)
        {
            bool suppressDefaultLog = false;
            AfterDeleteFile(ref suppressDefaultLog, apiResponseLocalVar, fileId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="fileId"></param>
        partial void AfterDeleteFile(ref bool suppressDefaultLog, IDeleteFileApiResponse apiResponseLocalVar, Guid fileId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="fileId"></param>
        private void OnErrorDeleteFileDefaultImplementation(Exception exception, string pathFormat, string path, Guid fileId)
        {
            bool suppressDefaultLog = false;
            OnErrorDeleteFile(ref suppressDefaultLog, exception, pathFormat, path, fileId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="fileId"></param>
        partial void OnErrorDeleteFile(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Guid fileId);

        /// <summary>
        /// ファイルを削除 指定したファイルを削除します。 指定したファイルの削除権限が必要です。
        /// </summary>
        /// <param name="fileId">ファイルUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteFileApiResponse"/>&gt;</returns>
        public async Task<IDeleteFileApiResponse?> DeleteFileOrDefaultAsync(Guid fileId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeleteFileAsync(fileId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// ファイルを削除 指定したファイルを削除します。 指定したファイルの削除権限が必要です。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ファイルUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeleteFileApiResponse"/>&gt;</returns>
        public async Task<IDeleteFileApiResponse> DeleteFileAsync(Guid fileId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatDeleteFile(ref fileId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/files/{fileId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BfileId%7D", Uri.EscapeDataString(fileId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeleteFileApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeleteFileApiResponse>();

                        DeleteFileApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/files/{fileId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeleteFileDefaultImplementation(apiResponseLocalVar, fileId);

                        Events.ExecuteOnDeleteFile(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeleteFileDefaultImplementation(e, "/files/{fileId}", uriBuilderLocalVar.Path, fileId);
                Events.ExecuteOnErrorDeleteFile(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeleteFileApiResponse"/>
        /// </summary>
        public partial class DeleteFileApiResponse : Traq.Client.ApiResponse, IDeleteFileApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeleteFileApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeleteFileApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeleteFileApiResponse(ILogger<DeleteFileApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetFile(ref Guid fileId, ref Option<int> dl);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="fileId"></param>
        /// <param name="dl"></param>
        private void AfterGetFileDefaultImplementation(IGetFileApiResponse apiResponseLocalVar, Guid fileId, Option<int> dl)
        {
            bool suppressDefaultLog = false;
            AfterGetFile(ref suppressDefaultLog, apiResponseLocalVar, fileId, dl);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="fileId"></param>
        /// <param name="dl"></param>
        partial void AfterGetFile(ref bool suppressDefaultLog, IGetFileApiResponse apiResponseLocalVar, Guid fileId, Option<int> dl);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="fileId"></param>
        /// <param name="dl"></param>
        private void OnErrorGetFileDefaultImplementation(Exception exception, string pathFormat, string path, Guid fileId, Option<int> dl)
        {
            bool suppressDefaultLog = false;
            OnErrorGetFile(ref suppressDefaultLog, exception, pathFormat, path, fileId, dl);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="fileId"></param>
        /// <param name="dl"></param>
        partial void OnErrorGetFile(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Guid fileId, Option<int> dl);

        /// <summary>
        /// ファイルをダウンロード 指定したファイル本体を取得します。 指定したファイルへのアクセス権限が必要です。
        /// </summary>
        /// <param name="fileId">ファイルUUID</param>
        /// <param name="dl">1を指定するとレスポンスにContent-Dispositionヘッダーが付与されます (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFileApiResponse"/>&gt;</returns>
        public async Task<IGetFileApiResponse?> GetFileOrDefaultAsync(Guid fileId, Option<int> dl = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetFileAsync(fileId, dl, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// ファイルをダウンロード 指定したファイル本体を取得します。 指定したファイルへのアクセス権限が必要です。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ファイルUUID</param>
        /// <param name="dl">1を指定するとレスポンスにContent-Dispositionヘッダーが付与されます (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFileApiResponse"/>&gt;</returns>
        public async Task<IGetFileApiResponse> GetFileAsync(Guid fileId, Option<int> dl = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetFile(ref fileId, ref dl);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/files/{fileId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BfileId%7D", Uri.EscapeDataString(fileId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (dl.IsSet)
                        parseQueryStringLocalVar["dl"] = ClientUtils.ParameterToString(dl.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/octet-stream"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetFileApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetFileApiResponse>();

                        GetFileApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/files/{fileId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetFileDefaultImplementation(apiResponseLocalVar, fileId, dl);

                        Events.ExecuteOnGetFile(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetFileDefaultImplementation(e, "/files/{fileId}", uriBuilderLocalVar.Path, fileId, dl);
                Events.ExecuteOnErrorGetFile(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetFileApiResponse"/>
        /// </summary>
        public partial class GetFileApiResponse : Traq.Client.ApiResponse, IGetFileApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetFileApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetFileApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetFileApiResponse(ILogger<GetFileApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public System.IO.Stream? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<System.IO.Stream>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out System.IO.Stream? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetFileMeta(ref Guid fileId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="fileId"></param>
        private void AfterGetFileMetaDefaultImplementation(IGetFileMetaApiResponse apiResponseLocalVar, Guid fileId)
        {
            bool suppressDefaultLog = false;
            AfterGetFileMeta(ref suppressDefaultLog, apiResponseLocalVar, fileId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="fileId"></param>
        partial void AfterGetFileMeta(ref bool suppressDefaultLog, IGetFileMetaApiResponse apiResponseLocalVar, Guid fileId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="fileId"></param>
        private void OnErrorGetFileMetaDefaultImplementation(Exception exception, string pathFormat, string path, Guid fileId)
        {
            bool suppressDefaultLog = false;
            OnErrorGetFileMeta(ref suppressDefaultLog, exception, pathFormat, path, fileId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="fileId"></param>
        partial void OnErrorGetFileMeta(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Guid fileId);

        /// <summary>
        /// ファイルメタを取得 指定したファイルのメタ情報を取得します。 指定したファイルへのアクセス権限が必要です。
        /// </summary>
        /// <param name="fileId">ファイルUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFileMetaApiResponse"/>&gt;</returns>
        public async Task<IGetFileMetaApiResponse?> GetFileMetaOrDefaultAsync(Guid fileId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetFileMetaAsync(fileId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// ファイルメタを取得 指定したファイルのメタ情報を取得します。 指定したファイルへのアクセス権限が必要です。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ファイルUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFileMetaApiResponse"/>&gt;</returns>
        public async Task<IGetFileMetaApiResponse> GetFileMetaAsync(Guid fileId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetFileMeta(ref fileId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/files/{fileId}/meta";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BfileId%7D", Uri.EscapeDataString(fileId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetFileMetaApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetFileMetaApiResponse>();

                        GetFileMetaApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/files/{fileId}/meta", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetFileMetaDefaultImplementation(apiResponseLocalVar, fileId);

                        Events.ExecuteOnGetFileMeta(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetFileMetaDefaultImplementation(e, "/files/{fileId}/meta", uriBuilderLocalVar.Path, fileId);
                Events.ExecuteOnErrorGetFileMeta(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetFileMetaApiResponse"/>
        /// </summary>
        public partial class GetFileMetaApiResponse : Traq.Client.ApiResponse, IGetFileMetaApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetFileMetaApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetFileMetaApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetFileMetaApiResponse(ILogger<GetFileMetaApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Traq.Model.FileInfo? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Traq.Model.FileInfo>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Traq.Model.FileInfo? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetFiles(ref Option<Guid> channelId, ref Option<int> limit, ref Option<int> offset, ref Option<DateTimeOffset> since, ref Option<DateTimeOffset> until, ref Option<bool> inclusive, ref Option<string> order, ref Option<bool> mine);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="order"></param>
        /// <returns></returns>
        private void ValidateGetFiles(Option<string> order)
        {
            if (order.IsSet && order.Value == null)
                throw new ArgumentNullException(nameof(order));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="channelId"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <param name="since"></param>
        /// <param name="until"></param>
        /// <param name="inclusive"></param>
        /// <param name="order"></param>
        /// <param name="mine"></param>
        private void AfterGetFilesDefaultImplementation(IGetFilesApiResponse apiResponseLocalVar, Option<Guid> channelId, Option<int> limit, Option<int> offset, Option<DateTimeOffset> since, Option<DateTimeOffset> until, Option<bool> inclusive, Option<string> order, Option<bool> mine)
        {
            bool suppressDefaultLog = false;
            AfterGetFiles(ref suppressDefaultLog, apiResponseLocalVar, channelId, limit, offset, since, until, inclusive, order, mine);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="channelId"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <param name="since"></param>
        /// <param name="until"></param>
        /// <param name="inclusive"></param>
        /// <param name="order"></param>
        /// <param name="mine"></param>
        partial void AfterGetFiles(ref bool suppressDefaultLog, IGetFilesApiResponse apiResponseLocalVar, Option<Guid> channelId, Option<int> limit, Option<int> offset, Option<DateTimeOffset> since, Option<DateTimeOffset> until, Option<bool> inclusive, Option<string> order, Option<bool> mine);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="channelId"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <param name="since"></param>
        /// <param name="until"></param>
        /// <param name="inclusive"></param>
        /// <param name="order"></param>
        /// <param name="mine"></param>
        private void OnErrorGetFilesDefaultImplementation(Exception exception, string pathFormat, string path, Option<Guid> channelId, Option<int> limit, Option<int> offset, Option<DateTimeOffset> since, Option<DateTimeOffset> until, Option<bool> inclusive, Option<string> order, Option<bool> mine)
        {
            bool suppressDefaultLog = false;
            OnErrorGetFiles(ref suppressDefaultLog, exception, pathFormat, path, channelId, limit, offset, since, until, inclusive, order, mine);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="channelId"></param>
        /// <param name="limit"></param>
        /// <param name="offset"></param>
        /// <param name="since"></param>
        /// <param name="until"></param>
        /// <param name="inclusive"></param>
        /// <param name="order"></param>
        /// <param name="mine"></param>
        partial void OnErrorGetFiles(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<Guid> channelId, Option<int> limit, Option<int> offset, Option<DateTimeOffset> since, Option<DateTimeOffset> until, Option<bool> inclusive, Option<string> order, Option<bool> mine);

        /// <summary>
        /// ファイルメタのリストを取得 指定したクエリでファイルメタのリストを取得します。 クエリパラメータ&#x60;channelId&#x60;, &#x60;mine&#x60;の少なくともいずれかが必須です。
        /// </summary>
        /// <param name="channelId">アップロード先チャンネルUUID (optional)</param>
        /// <param name="limit">取得する件数 (optional)</param>
        /// <param name="offset">取得するオフセット (optional, default to 0)</param>
        /// <param name="since">取得する時間範囲の開始日時 (optional, default to &quot;0000-01-01T00:00Z&quot;)</param>
        /// <param name="until">取得する時間範囲の終了日時 (optional)</param>
        /// <param name="inclusive">範囲の端を含めるかどうか (optional, default to false)</param>
        /// <param name="order">昇順か降順か (optional, default to desc)</param>
        /// <param name="mine">アップロード者が自分のファイルのみを取得するか (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFilesApiResponse"/>&gt;</returns>
        public async Task<IGetFilesApiResponse?> GetFilesOrDefaultAsync(Option<Guid> channelId = default, Option<int> limit = default, Option<int> offset = default, Option<DateTimeOffset> since = default, Option<DateTimeOffset> until = default, Option<bool> inclusive = default, Option<string> order = default, Option<bool> mine = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetFilesAsync(channelId, limit, offset, since, until, inclusive, order, mine, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// ファイルメタのリストを取得 指定したクエリでファイルメタのリストを取得します。 クエリパラメータ&#x60;channelId&#x60;, &#x60;mine&#x60;の少なくともいずれかが必須です。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">アップロード先チャンネルUUID (optional)</param>
        /// <param name="limit">取得する件数 (optional)</param>
        /// <param name="offset">取得するオフセット (optional, default to 0)</param>
        /// <param name="since">取得する時間範囲の開始日時 (optional, default to &quot;0000-01-01T00:00Z&quot;)</param>
        /// <param name="until">取得する時間範囲の終了日時 (optional)</param>
        /// <param name="inclusive">範囲の端を含めるかどうか (optional, default to false)</param>
        /// <param name="order">昇順か降順か (optional, default to desc)</param>
        /// <param name="mine">アップロード者が自分のファイルのみを取得するか (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetFilesApiResponse"/>&gt;</returns>
        public async Task<IGetFilesApiResponse> GetFilesAsync(Option<Guid> channelId = default, Option<int> limit = default, Option<int> offset = default, Option<DateTimeOffset> since = default, Option<DateTimeOffset> until = default, Option<bool> inclusive = default, Option<string> order = default, Option<bool> mine = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetFiles(order);

                FormatGetFiles(ref channelId, ref limit, ref offset, ref since, ref until, ref inclusive, ref order, ref mine);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/files";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (channelId.IsSet)
                        parseQueryStringLocalVar["channelId"] = ClientUtils.ParameterToString(channelId.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (since.IsSet)
                        parseQueryStringLocalVar["since"] = ClientUtils.ParameterToString(since.Value);

                    if (until.IsSet)
                        parseQueryStringLocalVar["until"] = ClientUtils.ParameterToString(until.Value);

                    if (inclusive.IsSet)
                        parseQueryStringLocalVar["inclusive"] = ClientUtils.ParameterToString(inclusive.Value);

                    if (order.IsSet)
                        parseQueryStringLocalVar["order"] = ClientUtils.ParameterToString(order.Value);

                    if (mine.IsSet)
                        parseQueryStringLocalVar["mine"] = ClientUtils.ParameterToString(mine.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetFilesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetFilesApiResponse>();

                        GetFilesApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/files", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetFilesDefaultImplementation(apiResponseLocalVar, channelId, limit, offset, since, until, inclusive, order, mine);

                        Events.ExecuteOnGetFiles(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetFilesDefaultImplementation(e, "/files", uriBuilderLocalVar.Path, channelId, limit, offset, since, until, inclusive, order, mine);
                Events.ExecuteOnErrorGetFiles(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetFilesApiResponse"/>
        /// </summary>
        public partial class GetFilesApiResponse : Traq.Client.ApiResponse, IGetFilesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetFilesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetFilesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetFilesApiResponse(ILogger<GetFilesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<FileInfo>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<FileInfo>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<FileInfo>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetThumbnailImage(ref Guid fileId, ref Option<ThumbnailType> type);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="fileId"></param>
        /// <param name="type"></param>
        private void AfterGetThumbnailImageDefaultImplementation(IGetThumbnailImageApiResponse apiResponseLocalVar, Guid fileId, Option<ThumbnailType> type)
        {
            bool suppressDefaultLog = false;
            AfterGetThumbnailImage(ref suppressDefaultLog, apiResponseLocalVar, fileId, type);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="fileId"></param>
        /// <param name="type"></param>
        partial void AfterGetThumbnailImage(ref bool suppressDefaultLog, IGetThumbnailImageApiResponse apiResponseLocalVar, Guid fileId, Option<ThumbnailType> type);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="fileId"></param>
        /// <param name="type"></param>
        private void OnErrorGetThumbnailImageDefaultImplementation(Exception exception, string pathFormat, string path, Guid fileId, Option<ThumbnailType> type)
        {
            bool suppressDefaultLog = false;
            OnErrorGetThumbnailImage(ref suppressDefaultLog, exception, pathFormat, path, fileId, type);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="fileId"></param>
        /// <param name="type"></param>
        partial void OnErrorGetThumbnailImage(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Guid fileId, Option<ThumbnailType> type);

        /// <summary>
        /// サムネイル画像を取得 指定したファイルのサムネイル画像を取得します。 指定したファイルへのアクセス権限が必要です。
        /// </summary>
        /// <param name="fileId">ファイルUUID</param>
        /// <param name="type">取得するサムネイルのタイプ (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetThumbnailImageApiResponse"/>&gt;</returns>
        public async Task<IGetThumbnailImageApiResponse?> GetThumbnailImageOrDefaultAsync(Guid fileId, Option<ThumbnailType> type = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetThumbnailImageAsync(fileId, type, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// サムネイル画像を取得 指定したファイルのサムネイル画像を取得します。 指定したファイルへのアクセス権限が必要です。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ファイルUUID</param>
        /// <param name="type">取得するサムネイルのタイプ (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetThumbnailImageApiResponse"/>&gt;</returns>
        public async Task<IGetThumbnailImageApiResponse> GetThumbnailImageAsync(Guid fileId, Option<ThumbnailType> type = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetThumbnailImage(ref fileId, ref type);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/files/{fileId}/thumbnail";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BfileId%7D", Uri.EscapeDataString(fileId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (type.IsSet)
                        parseQueryStringLocalVar["type"] = ClientUtils.ParameterToString(type.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "image/png",
                        "image/jpeg"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetThumbnailImageApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetThumbnailImageApiResponse>();

                        GetThumbnailImageApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/files/{fileId}/thumbnail", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetThumbnailImageDefaultImplementation(apiResponseLocalVar, fileId, type);

                        Events.ExecuteOnGetThumbnailImage(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetThumbnailImageDefaultImplementation(e, "/files/{fileId}/thumbnail", uriBuilderLocalVar.Path, fileId, type);
                Events.ExecuteOnErrorGetThumbnailImage(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetThumbnailImageApiResponse"/>
        /// </summary>
        public partial class GetThumbnailImageApiResponse : Traq.Client.ApiResponse, IGetThumbnailImageApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetThumbnailImageApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetThumbnailImageApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetThumbnailImageApiResponse(ILogger<GetThumbnailImageApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public System.IO.Stream? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<System.IO.Stream>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out System.IO.Stream? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPostFile(ref System.IO.Stream file, ref Guid channelId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="file"></param>
        /// <returns></returns>
        private void ValidatePostFile(System.IO.Stream file)
        {
            if (file == null)
                throw new ArgumentNullException(nameof(file));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="file"></param>
        /// <param name="channelId"></param>
        private void AfterPostFileDefaultImplementation(IPostFileApiResponse apiResponseLocalVar, System.IO.Stream file, Guid channelId)
        {
            bool suppressDefaultLog = false;
            AfterPostFile(ref suppressDefaultLog, apiResponseLocalVar, file, channelId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="file"></param>
        /// <param name="channelId"></param>
        partial void AfterPostFile(ref bool suppressDefaultLog, IPostFileApiResponse apiResponseLocalVar, System.IO.Stream file, Guid channelId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="file"></param>
        /// <param name="channelId"></param>
        private void OnErrorPostFileDefaultImplementation(Exception exception, string pathFormat, string path, System.IO.Stream file, Guid channelId)
        {
            bool suppressDefaultLog = false;
            OnErrorPostFile(ref suppressDefaultLog, exception, pathFormat, path, file, channelId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="file"></param>
        /// <param name="channelId"></param>
        partial void OnErrorPostFile(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, System.IO.Stream file, Guid channelId);

        /// <summary>
        /// ファイルをアップロード 指定したチャンネルにファイルをアップロードします。 アーカイブされているチャンネルにはアップロード出来ません。
        /// </summary>
        /// <param name="file">ファイル本体</param>
        /// <param name="channelId">アップロード先チャンネルUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostFileApiResponse"/>&gt;</returns>
        public async Task<IPostFileApiResponse?> PostFileOrDefaultAsync(System.IO.Stream file, Guid channelId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PostFileAsync(file, channelId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// ファイルをアップロード 指定したチャンネルにファイルをアップロードします。 アーカイブされているチャンネルにはアップロード出来ません。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">ファイル本体</param>
        /// <param name="channelId">アップロード先チャンネルUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostFileApiResponse"/>&gt;</returns>
        public async Task<IPostFileApiResponse> PostFileAsync(System.IO.Stream file, Guid channelId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePostFile(file);

                FormatPostFile(ref file, ref channelId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/files";

                    MultipartContent multipartContentLocalVar = new MultipartContent();

                    httpRequestMessageLocalVar.Content = multipartContentLocalVar;

                    List<KeyValuePair<string?, string?>> formParameterLocalVars = new List<KeyValuePair<string?, string?>>();

                    multipartContentLocalVar.Add(new FormUrlEncodedContent(formParameterLocalVars));                    multipartContentLocalVar.Add(new StreamContent(file));

                    formParameterLocalVars.Add(new KeyValuePair<string?, string?>("channelId", ClientUtils.ParameterToString(channelId)));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "multipart/form-data"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PostFileApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PostFileApiResponse>();

                        PostFileApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/files", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPostFileDefaultImplementation(apiResponseLocalVar, file, channelId);

                        Events.ExecuteOnPostFile(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPostFileDefaultImplementation(e, "/files", uriBuilderLocalVar.Path, file, channelId);
                Events.ExecuteOnErrorPostFile(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PostFileApiResponse"/>
        /// </summary>
        public partial class PostFileApiResponse : Traq.Client.ApiResponse, IPostFileApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PostFileApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PostFileApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PostFileApiResponse(ILogger<PostFileApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public Traq.Model.FileInfo? Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<Traq.Model.FileInfo>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out Traq.Model.FileInfo? result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 411 LengthRequired
            /// </summary>
            /// <returns></returns>
            public bool IsLengthRequired => 411 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 413 ContentTooLarge
            /// </summary>
            /// <returns></returns>
            public bool IsContentTooLarge => 413 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
