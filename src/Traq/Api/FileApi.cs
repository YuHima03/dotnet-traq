/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using Traq.Client;
using Traq.Model;

namespace Traq.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFileApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// ファイルを削除
        /// </summary>
        /// <remarks>
        /// 指定したファイルを削除します。 指定したファイルの削除権限が必要です。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ファイルUUID</param>
        /// <returns></returns>
        void DeleteFile(Guid fileId);

        /// <summary>
        /// ファイルを削除
        /// </summary>
        /// <remarks>
        /// 指定したファイルを削除します。 指定したファイルの削除権限が必要です。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ファイルUUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteFileWithHttpInfo(Guid fileId);
        /// <summary>
        /// ファイルをダウンロード
        /// </summary>
        /// <remarks>
        /// 指定したファイル本体を取得します。 指定したファイルへのアクセス権限が必要です。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ファイルUUID</param>
        /// <param name="dl">1を指定するとレスポンスにContent-Dispositionヘッダーが付与されます (optional)</param>
        /// <returns>FileParameter</returns>
        FileParameter GetFile(Guid fileId, int? dl = default(int?));

        /// <summary>
        /// ファイルをダウンロード
        /// </summary>
        /// <remarks>
        /// 指定したファイル本体を取得します。 指定したファイルへのアクセス権限が必要です。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ファイルUUID</param>
        /// <param name="dl">1を指定するとレスポンスにContent-Dispositionヘッダーが付与されます (optional)</param>
        /// <returns>ApiResponse of FileParameter</returns>
        ApiResponse<FileParameter> GetFileWithHttpInfo(Guid fileId, int? dl = default(int?));
        /// <summary>
        /// ファイルメタを取得
        /// </summary>
        /// <remarks>
        /// 指定したファイルのメタ情報を取得します。 指定したファイルへのアクセス権限が必要です。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ファイルUUID</param>
        /// <returns>FileInfo</returns>
        FileInfo GetFileMeta(Guid fileId);

        /// <summary>
        /// ファイルメタを取得
        /// </summary>
        /// <remarks>
        /// 指定したファイルのメタ情報を取得します。 指定したファイルへのアクセス権限が必要です。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ファイルUUID</param>
        /// <returns>ApiResponse of FileInfo</returns>
        ApiResponse<FileInfo> GetFileMetaWithHttpInfo(Guid fileId);
        /// <summary>
        /// ファイルメタのリストを取得
        /// </summary>
        /// <remarks>
        /// 指定したクエリでファイルメタのリストを取得します。 クエリパラメータ&#x60;channelId&#x60;, &#x60;mine&#x60;の少なくともいずれかが必須です。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">アップロード先チャンネルUUID (optional)</param>
        /// <param name="limit">取得する件数 (optional)</param>
        /// <param name="offset">取得するオフセット (optional, default to 0)</param>
        /// <param name="since">取得する時間範囲の開始日時 (optional, default to &quot;0000-01-01T00:00Z&quot;)</param>
        /// <param name="until">取得する時間範囲の終了日時 (optional)</param>
        /// <param name="inclusive">範囲の端を含めるかどうか (optional, default to false)</param>
        /// <param name="order">昇順か降順か (optional, default to desc)</param>
        /// <param name="mine">アップロード者が自分のファイルのみを取得するか (optional, default to false)</param>
        /// <returns>List&lt;FileInfo&gt;</returns>
        List<FileInfo> GetFiles(Guid? channelId = default(Guid?), int? limit = default(int?), int? offset = default(int?), DateTimeOffset? since = default(DateTimeOffset?), DateTimeOffset? until = default(DateTimeOffset?), bool? inclusive = default(bool?), string? order = default(string?), bool? mine = default(bool?));

        /// <summary>
        /// ファイルメタのリストを取得
        /// </summary>
        /// <remarks>
        /// 指定したクエリでファイルメタのリストを取得します。 クエリパラメータ&#x60;channelId&#x60;, &#x60;mine&#x60;の少なくともいずれかが必須です。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">アップロード先チャンネルUUID (optional)</param>
        /// <param name="limit">取得する件数 (optional)</param>
        /// <param name="offset">取得するオフセット (optional, default to 0)</param>
        /// <param name="since">取得する時間範囲の開始日時 (optional, default to &quot;0000-01-01T00:00Z&quot;)</param>
        /// <param name="until">取得する時間範囲の終了日時 (optional)</param>
        /// <param name="inclusive">範囲の端を含めるかどうか (optional, default to false)</param>
        /// <param name="order">昇順か降順か (optional, default to desc)</param>
        /// <param name="mine">アップロード者が自分のファイルのみを取得するか (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;FileInfo&gt;</returns>
        ApiResponse<List<FileInfo>> GetFilesWithHttpInfo(Guid? channelId = default(Guid?), int? limit = default(int?), int? offset = default(int?), DateTimeOffset? since = default(DateTimeOffset?), DateTimeOffset? until = default(DateTimeOffset?), bool? inclusive = default(bool?), string? order = default(string?), bool? mine = default(bool?));
        /// <summary>
        /// サムネイル画像を取得
        /// </summary>
        /// <remarks>
        /// 指定したファイルのサムネイル画像を取得します。 指定したファイルへのアクセス権限が必要です。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ファイルUUID</param>
        /// <param name="type">取得するサムネイルのタイプ (optional)</param>
        /// <returns>FileParameter</returns>
        FileParameter GetThumbnailImage(Guid fileId, ThumbnailType? type = default(ThumbnailType?));

        /// <summary>
        /// サムネイル画像を取得
        /// </summary>
        /// <remarks>
        /// 指定したファイルのサムネイル画像を取得します。 指定したファイルへのアクセス権限が必要です。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ファイルUUID</param>
        /// <param name="type">取得するサムネイルのタイプ (optional)</param>
        /// <returns>ApiResponse of FileParameter</returns>
        ApiResponse<FileParameter> GetThumbnailImageWithHttpInfo(Guid fileId, ThumbnailType? type = default(ThumbnailType?));
        /// <summary>
        /// ファイルをアップロード
        /// </summary>
        /// <remarks>
        /// 指定したチャンネルにファイルをアップロードします。 アーカイブされているチャンネルにはアップロード出来ません。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">ファイル本体</param>
        /// <param name="channelId">アップロード先チャンネルUUID</param>
        /// <returns>FileInfo</returns>
        FileInfo PostFile(FileParameter file, Guid channelId);

        /// <summary>
        /// ファイルをアップロード
        /// </summary>
        /// <remarks>
        /// 指定したチャンネルにファイルをアップロードします。 アーカイブされているチャンネルにはアップロード出来ません。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">ファイル本体</param>
        /// <param name="channelId">アップロード先チャンネルUUID</param>
        /// <returns>ApiResponse of FileInfo</returns>
        ApiResponse<FileInfo> PostFileWithHttpInfo(FileParameter file, Guid channelId);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFileApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// ファイルを削除
        /// </summary>
        /// <remarks>
        /// 指定したファイルを削除します。 指定したファイルの削除権限が必要です。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ファイルUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteFileAsync(Guid fileId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// ファイルを削除
        /// </summary>
        /// <remarks>
        /// 指定したファイルを削除します。 指定したファイルの削除権限が必要です。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ファイルUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteFileWithHttpInfoAsync(Guid fileId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// ファイルをダウンロード
        /// </summary>
        /// <remarks>
        /// 指定したファイル本体を取得します。 指定したファイルへのアクセス権限が必要です。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ファイルUUID</param>
        /// <param name="dl">1を指定するとレスポンスにContent-Dispositionヘッダーが付与されます (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileParameter</returns>
        System.Threading.Tasks.Task<FileParameter> GetFileAsync(Guid fileId, int? dl = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// ファイルをダウンロード
        /// </summary>
        /// <remarks>
        /// 指定したファイル本体を取得します。 指定したファイルへのアクセス権限が必要です。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ファイルUUID</param>
        /// <param name="dl">1を指定するとレスポンスにContent-Dispositionヘッダーが付与されます (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileParameter)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileParameter>> GetFileWithHttpInfoAsync(Guid fileId, int? dl = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// ファイルメタを取得
        /// </summary>
        /// <remarks>
        /// 指定したファイルのメタ情報を取得します。 指定したファイルへのアクセス権限が必要です。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ファイルUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileInfo</returns>
        System.Threading.Tasks.Task<FileInfo> GetFileMetaAsync(Guid fileId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// ファイルメタを取得
        /// </summary>
        /// <remarks>
        /// 指定したファイルのメタ情報を取得します。 指定したファイルへのアクセス権限が必要です。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ファイルUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileInfo>> GetFileMetaWithHttpInfoAsync(Guid fileId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// ファイルメタのリストを取得
        /// </summary>
        /// <remarks>
        /// 指定したクエリでファイルメタのリストを取得します。 クエリパラメータ&#x60;channelId&#x60;, &#x60;mine&#x60;の少なくともいずれかが必須です。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">アップロード先チャンネルUUID (optional)</param>
        /// <param name="limit">取得する件数 (optional)</param>
        /// <param name="offset">取得するオフセット (optional, default to 0)</param>
        /// <param name="since">取得する時間範囲の開始日時 (optional, default to &quot;0000-01-01T00:00Z&quot;)</param>
        /// <param name="until">取得する時間範囲の終了日時 (optional)</param>
        /// <param name="inclusive">範囲の端を含めるかどうか (optional, default to false)</param>
        /// <param name="order">昇順か降順か (optional, default to desc)</param>
        /// <param name="mine">アップロード者が自分のファイルのみを取得するか (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;FileInfo&gt;</returns>
        System.Threading.Tasks.Task<List<FileInfo>> GetFilesAsync(Guid? channelId = default(Guid?), int? limit = default(int?), int? offset = default(int?), DateTimeOffset? since = default(DateTimeOffset?), DateTimeOffset? until = default(DateTimeOffset?), bool? inclusive = default(bool?), string? order = default(string?), bool? mine = default(bool?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// ファイルメタのリストを取得
        /// </summary>
        /// <remarks>
        /// 指定したクエリでファイルメタのリストを取得します。 クエリパラメータ&#x60;channelId&#x60;, &#x60;mine&#x60;の少なくともいずれかが必須です。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">アップロード先チャンネルUUID (optional)</param>
        /// <param name="limit">取得する件数 (optional)</param>
        /// <param name="offset">取得するオフセット (optional, default to 0)</param>
        /// <param name="since">取得する時間範囲の開始日時 (optional, default to &quot;0000-01-01T00:00Z&quot;)</param>
        /// <param name="until">取得する時間範囲の終了日時 (optional)</param>
        /// <param name="inclusive">範囲の端を含めるかどうか (optional, default to false)</param>
        /// <param name="order">昇順か降順か (optional, default to desc)</param>
        /// <param name="mine">アップロード者が自分のファイルのみを取得するか (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;FileInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FileInfo>>> GetFilesWithHttpInfoAsync(Guid? channelId = default(Guid?), int? limit = default(int?), int? offset = default(int?), DateTimeOffset? since = default(DateTimeOffset?), DateTimeOffset? until = default(DateTimeOffset?), bool? inclusive = default(bool?), string? order = default(string?), bool? mine = default(bool?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// サムネイル画像を取得
        /// </summary>
        /// <remarks>
        /// 指定したファイルのサムネイル画像を取得します。 指定したファイルへのアクセス権限が必要です。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ファイルUUID</param>
        /// <param name="type">取得するサムネイルのタイプ (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileParameter</returns>
        System.Threading.Tasks.Task<FileParameter> GetThumbnailImageAsync(Guid fileId, ThumbnailType? type = default(ThumbnailType?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// サムネイル画像を取得
        /// </summary>
        /// <remarks>
        /// 指定したファイルのサムネイル画像を取得します。 指定したファイルへのアクセス権限が必要です。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ファイルUUID</param>
        /// <param name="type">取得するサムネイルのタイプ (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileParameter)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileParameter>> GetThumbnailImageWithHttpInfoAsync(Guid fileId, ThumbnailType? type = default(ThumbnailType?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// ファイルをアップロード
        /// </summary>
        /// <remarks>
        /// 指定したチャンネルにファイルをアップロードします。 アーカイブされているチャンネルにはアップロード出来ません。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">ファイル本体</param>
        /// <param name="channelId">アップロード先チャンネルUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileInfo</returns>
        System.Threading.Tasks.Task<FileInfo> PostFileAsync(FileParameter file, Guid channelId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// ファイルをアップロード
        /// </summary>
        /// <remarks>
        /// 指定したチャンネルにファイルをアップロードします。 アーカイブされているチャンネルにはアップロード出来ません。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">ファイル本体</param>
        /// <param name="channelId">アップロード先チャンネルUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileInfo>> PostFileWithHttpInfoAsync(FileParameter file, Guid channelId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFileApi : IFileApiSync, IFileApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FileApi : IDisposable, IFileApi
    {
        private Traq.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FileApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public FileApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FileApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public FileApi(string basePath)
        {
            this.Configuration = Traq.Client.Configuration.MergeConfigurations(
                Traq.Client.GlobalConfiguration.Instance,
                new Traq.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Traq.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Traq.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FileApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public FileApi(Traq.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Traq.Client.Configuration.MergeConfigurations(
                Traq.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Traq.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Traq.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FileApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public FileApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FileApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public FileApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Traq.Client.Configuration.MergeConfigurations(
                Traq.Client.GlobalConfiguration.Instance,
                new Traq.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Traq.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Traq.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FileApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public FileApi(HttpClient client, Traq.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Traq.Client.Configuration.MergeConfigurations(
                Traq.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Traq.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Traq.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FileApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public FileApi(Traq.Client.ISynchronousClient client, Traq.Client.IAsynchronousClient asyncClient, Traq.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Traq.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Traq.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Traq.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Traq.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Traq.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Traq.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// ファイルを削除 指定したファイルを削除します。 指定したファイルの削除権限が必要です。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ファイルUUID</param>
        /// <returns></returns>
        public void DeleteFile(Guid fileId)
        {
            DeleteFileWithHttpInfo(fileId);
        }

        /// <summary>
        /// ファイルを削除 指定したファイルを削除します。 指定したファイルの削除権限が必要です。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ファイルUUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Traq.Client.ApiResponse<Object> DeleteFileWithHttpInfo(Guid fileId)
        {
            Traq.Client.RequestOptions localVarRequestOptions = new Traq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Traq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Traq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("fileId", Traq.Client.ClientUtils.ParameterToString(fileId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/files/{fileId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ファイルを削除 指定したファイルを削除します。 指定したファイルの削除権限が必要です。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ファイルUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteFileAsync(Guid fileId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await DeleteFileWithHttpInfoAsync(fileId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// ファイルを削除 指定したファイルを削除します。 指定したファイルの削除権限が必要です。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ファイルUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Traq.Client.ApiResponse<Object>> DeleteFileWithHttpInfoAsync(Guid fileId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Traq.Client.RequestOptions localVarRequestOptions = new Traq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = Traq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Traq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("fileId", Traq.Client.ClientUtils.ParameterToString(fileId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/files/{fileId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteFile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ファイルをダウンロード 指定したファイル本体を取得します。 指定したファイルへのアクセス権限が必要です。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ファイルUUID</param>
        /// <param name="dl">1を指定するとレスポンスにContent-Dispositionヘッダーが付与されます (optional)</param>
        /// <returns>FileParameter</returns>
        public FileParameter GetFile(Guid fileId, int? dl = default(int?))
        {
            Traq.Client.ApiResponse<FileParameter> localVarResponse = GetFileWithHttpInfo(fileId, dl);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ファイルをダウンロード 指定したファイル本体を取得します。 指定したファイルへのアクセス権限が必要です。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ファイルUUID</param>
        /// <param name="dl">1を指定するとレスポンスにContent-Dispositionヘッダーが付与されます (optional)</param>
        /// <returns>ApiResponse of FileParameter</returns>
        public Traq.Client.ApiResponse<FileParameter> GetFileWithHttpInfo(Guid fileId, int? dl = default(int?))
        {
            Traq.Client.RequestOptions localVarRequestOptions = new Traq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = Traq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Traq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("fileId", Traq.Client.ClientUtils.ParameterToString(fileId)); // path parameter
            if (dl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Traq.Client.ClientUtils.ParameterToMultiMap("", "dl", dl));
            }

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FileParameter>("/files/{fileId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ファイルをダウンロード 指定したファイル本体を取得します。 指定したファイルへのアクセス権限が必要です。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ファイルUUID</param>
        /// <param name="dl">1を指定するとレスポンスにContent-Dispositionヘッダーが付与されます (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileParameter</returns>
        public async System.Threading.Tasks.Task<FileParameter> GetFileAsync(Guid fileId, int? dl = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Traq.Client.ApiResponse<FileParameter> localVarResponse = await GetFileWithHttpInfoAsync(fileId, dl, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ファイルをダウンロード 指定したファイル本体を取得します。 指定したファイルへのアクセス権限が必要です。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ファイルUUID</param>
        /// <param name="dl">1を指定するとレスポンスにContent-Dispositionヘッダーが付与されます (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileParameter)</returns>
        public async System.Threading.Tasks.Task<Traq.Client.ApiResponse<FileParameter>> GetFileWithHttpInfoAsync(Guid fileId, int? dl = default(int?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Traq.Client.RequestOptions localVarRequestOptions = new Traq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };


            var localVarContentType = Traq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Traq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("fileId", Traq.Client.ClientUtils.ParameterToString(fileId)); // path parameter
            if (dl != null)
            {
                localVarRequestOptions.QueryParameters.Add(Traq.Client.ClientUtils.ParameterToMultiMap("", "dl", dl));
            }

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<FileParameter>("/files/{fileId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ファイルメタを取得 指定したファイルのメタ情報を取得します。 指定したファイルへのアクセス権限が必要です。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ファイルUUID</param>
        /// <returns>FileInfo</returns>
        public FileInfo GetFileMeta(Guid fileId)
        {
            Traq.Client.ApiResponse<FileInfo> localVarResponse = GetFileMetaWithHttpInfo(fileId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ファイルメタを取得 指定したファイルのメタ情報を取得します。 指定したファイルへのアクセス権限が必要です。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ファイルUUID</param>
        /// <returns>ApiResponse of FileInfo</returns>
        public Traq.Client.ApiResponse<FileInfo> GetFileMetaWithHttpInfo(Guid fileId)
        {
            Traq.Client.RequestOptions localVarRequestOptions = new Traq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Traq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Traq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("fileId", Traq.Client.ClientUtils.ParameterToString(fileId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FileInfo>("/files/{fileId}/meta", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFileMeta", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ファイルメタを取得 指定したファイルのメタ情報を取得します。 指定したファイルへのアクセス権限が必要です。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ファイルUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileInfo</returns>
        public async System.Threading.Tasks.Task<FileInfo> GetFileMetaAsync(Guid fileId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Traq.Client.ApiResponse<FileInfo> localVarResponse = await GetFileMetaWithHttpInfoAsync(fileId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ファイルメタを取得 指定したファイルのメタ情報を取得します。 指定したファイルへのアクセス権限が必要です。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ファイルUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileInfo)</returns>
        public async System.Threading.Tasks.Task<Traq.Client.ApiResponse<FileInfo>> GetFileMetaWithHttpInfoAsync(Guid fileId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Traq.Client.RequestOptions localVarRequestOptions = new Traq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Traq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Traq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("fileId", Traq.Client.ClientUtils.ParameterToString(fileId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<FileInfo>("/files/{fileId}/meta", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFileMeta", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ファイルメタのリストを取得 指定したクエリでファイルメタのリストを取得します。 クエリパラメータ&#x60;channelId&#x60;, &#x60;mine&#x60;の少なくともいずれかが必須です。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">アップロード先チャンネルUUID (optional)</param>
        /// <param name="limit">取得する件数 (optional)</param>
        /// <param name="offset">取得するオフセット (optional, default to 0)</param>
        /// <param name="since">取得する時間範囲の開始日時 (optional, default to &quot;0000-01-01T00:00Z&quot;)</param>
        /// <param name="until">取得する時間範囲の終了日時 (optional)</param>
        /// <param name="inclusive">範囲の端を含めるかどうか (optional, default to false)</param>
        /// <param name="order">昇順か降順か (optional, default to desc)</param>
        /// <param name="mine">アップロード者が自分のファイルのみを取得するか (optional, default to false)</param>
        /// <returns>List&lt;FileInfo&gt;</returns>
        public List<FileInfo> GetFiles(Guid? channelId = default(Guid?), int? limit = default(int?), int? offset = default(int?), DateTimeOffset? since = default(DateTimeOffset?), DateTimeOffset? until = default(DateTimeOffset?), bool? inclusive = default(bool?), string? order = default(string?), bool? mine = default(bool?))
        {
            Traq.Client.ApiResponse<List<FileInfo>> localVarResponse = GetFilesWithHttpInfo(channelId, limit, offset, since, until, inclusive, order, mine);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ファイルメタのリストを取得 指定したクエリでファイルメタのリストを取得します。 クエリパラメータ&#x60;channelId&#x60;, &#x60;mine&#x60;の少なくともいずれかが必須です。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">アップロード先チャンネルUUID (optional)</param>
        /// <param name="limit">取得する件数 (optional)</param>
        /// <param name="offset">取得するオフセット (optional, default to 0)</param>
        /// <param name="since">取得する時間範囲の開始日時 (optional, default to &quot;0000-01-01T00:00Z&quot;)</param>
        /// <param name="until">取得する時間範囲の終了日時 (optional)</param>
        /// <param name="inclusive">範囲の端を含めるかどうか (optional, default to false)</param>
        /// <param name="order">昇順か降順か (optional, default to desc)</param>
        /// <param name="mine">アップロード者が自分のファイルのみを取得するか (optional, default to false)</param>
        /// <returns>ApiResponse of List&lt;FileInfo&gt;</returns>
        public Traq.Client.ApiResponse<List<FileInfo>> GetFilesWithHttpInfo(Guid? channelId = default(Guid?), int? limit = default(int?), int? offset = default(int?), DateTimeOffset? since = default(DateTimeOffset?), DateTimeOffset? until = default(DateTimeOffset?), bool? inclusive = default(bool?), string? order = default(string?), bool? mine = default(bool?))
        {
            Traq.Client.RequestOptions localVarRequestOptions = new Traq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Traq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Traq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (channelId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Traq.Client.ClientUtils.ParameterToMultiMap("", "channelId", channelId));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Traq.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Traq.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (since != null)
            {
                localVarRequestOptions.QueryParameters.Add(Traq.Client.ClientUtils.ParameterToMultiMap("", "since", since));
            }
            if (until != null)
            {
                localVarRequestOptions.QueryParameters.Add(Traq.Client.ClientUtils.ParameterToMultiMap("", "until", until));
            }
            if (inclusive != null)
            {
                localVarRequestOptions.QueryParameters.Add(Traq.Client.ClientUtils.ParameterToMultiMap("", "inclusive", inclusive));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Traq.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (mine != null)
            {
                localVarRequestOptions.QueryParameters.Add(Traq.Client.ClientUtils.ParameterToMultiMap("", "mine", mine));
            }

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<FileInfo>>("/files", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFiles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ファイルメタのリストを取得 指定したクエリでファイルメタのリストを取得します。 クエリパラメータ&#x60;channelId&#x60;, &#x60;mine&#x60;の少なくともいずれかが必須です。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">アップロード先チャンネルUUID (optional)</param>
        /// <param name="limit">取得する件数 (optional)</param>
        /// <param name="offset">取得するオフセット (optional, default to 0)</param>
        /// <param name="since">取得する時間範囲の開始日時 (optional, default to &quot;0000-01-01T00:00Z&quot;)</param>
        /// <param name="until">取得する時間範囲の終了日時 (optional)</param>
        /// <param name="inclusive">範囲の端を含めるかどうか (optional, default to false)</param>
        /// <param name="order">昇順か降順か (optional, default to desc)</param>
        /// <param name="mine">アップロード者が自分のファイルのみを取得するか (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;FileInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<FileInfo>> GetFilesAsync(Guid? channelId = default(Guid?), int? limit = default(int?), int? offset = default(int?), DateTimeOffset? since = default(DateTimeOffset?), DateTimeOffset? until = default(DateTimeOffset?), bool? inclusive = default(bool?), string? order = default(string?), bool? mine = default(bool?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Traq.Client.ApiResponse<List<FileInfo>> localVarResponse = await GetFilesWithHttpInfoAsync(channelId, limit, offset, since, until, inclusive, order, mine, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ファイルメタのリストを取得 指定したクエリでファイルメタのリストを取得します。 クエリパラメータ&#x60;channelId&#x60;, &#x60;mine&#x60;の少なくともいずれかが必須です。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">アップロード先チャンネルUUID (optional)</param>
        /// <param name="limit">取得する件数 (optional)</param>
        /// <param name="offset">取得するオフセット (optional, default to 0)</param>
        /// <param name="since">取得する時間範囲の開始日時 (optional, default to &quot;0000-01-01T00:00Z&quot;)</param>
        /// <param name="until">取得する時間範囲の終了日時 (optional)</param>
        /// <param name="inclusive">範囲の端を含めるかどうか (optional, default to false)</param>
        /// <param name="order">昇順か降順か (optional, default to desc)</param>
        /// <param name="mine">アップロード者が自分のファイルのみを取得するか (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;FileInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<Traq.Client.ApiResponse<List<FileInfo>>> GetFilesWithHttpInfoAsync(Guid? channelId = default(Guid?), int? limit = default(int?), int? offset = default(int?), DateTimeOffset? since = default(DateTimeOffset?), DateTimeOffset? until = default(DateTimeOffset?), bool? inclusive = default(bool?), string? order = default(string?), bool? mine = default(bool?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Traq.Client.RequestOptions localVarRequestOptions = new Traq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Traq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Traq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (channelId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Traq.Client.ClientUtils.ParameterToMultiMap("", "channelId", channelId));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Traq.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Traq.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (since != null)
            {
                localVarRequestOptions.QueryParameters.Add(Traq.Client.ClientUtils.ParameterToMultiMap("", "since", since));
            }
            if (until != null)
            {
                localVarRequestOptions.QueryParameters.Add(Traq.Client.ClientUtils.ParameterToMultiMap("", "until", until));
            }
            if (inclusive != null)
            {
                localVarRequestOptions.QueryParameters.Add(Traq.Client.ClientUtils.ParameterToMultiMap("", "inclusive", inclusive));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Traq.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }
            if (mine != null)
            {
                localVarRequestOptions.QueryParameters.Add(Traq.Client.ClientUtils.ParameterToMultiMap("", "mine", mine));
            }

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<FileInfo>>("/files", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFiles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// サムネイル画像を取得 指定したファイルのサムネイル画像を取得します。 指定したファイルへのアクセス権限が必要です。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ファイルUUID</param>
        /// <param name="type">取得するサムネイルのタイプ (optional)</param>
        /// <returns>FileParameter</returns>
        public FileParameter GetThumbnailImage(Guid fileId, ThumbnailType? type = default(ThumbnailType?))
        {
            Traq.Client.ApiResponse<FileParameter> localVarResponse = GetThumbnailImageWithHttpInfo(fileId, type);
            return localVarResponse.Data;
        }

        /// <summary>
        /// サムネイル画像を取得 指定したファイルのサムネイル画像を取得します。 指定したファイルへのアクセス権限が必要です。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ファイルUUID</param>
        /// <param name="type">取得するサムネイルのタイプ (optional)</param>
        /// <returns>ApiResponse of FileParameter</returns>
        public Traq.Client.ApiResponse<FileParameter> GetThumbnailImageWithHttpInfo(Guid fileId, ThumbnailType? type = default(ThumbnailType?))
        {
            Traq.Client.RequestOptions localVarRequestOptions = new Traq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "image/png",
                "image/jpeg"
            };

            var localVarContentType = Traq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Traq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("fileId", Traq.Client.ClientUtils.ParameterToString(fileId)); // path parameter
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Traq.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FileParameter>("/files/{fileId}/thumbnail", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetThumbnailImage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// サムネイル画像を取得 指定したファイルのサムネイル画像を取得します。 指定したファイルへのアクセス権限が必要です。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ファイルUUID</param>
        /// <param name="type">取得するサムネイルのタイプ (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileParameter</returns>
        public async System.Threading.Tasks.Task<FileParameter> GetThumbnailImageAsync(Guid fileId, ThumbnailType? type = default(ThumbnailType?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Traq.Client.ApiResponse<FileParameter> localVarResponse = await GetThumbnailImageWithHttpInfoAsync(fileId, type, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// サムネイル画像を取得 指定したファイルのサムネイル画像を取得します。 指定したファイルへのアクセス権限が必要です。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">ファイルUUID</param>
        /// <param name="type">取得するサムネイルのタイプ (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileParameter)</returns>
        public async System.Threading.Tasks.Task<Traq.Client.ApiResponse<FileParameter>> GetThumbnailImageWithHttpInfoAsync(Guid fileId, ThumbnailType? type = default(ThumbnailType?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Traq.Client.RequestOptions localVarRequestOptions = new Traq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "image/png",
                "image/jpeg"
            };


            var localVarContentType = Traq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Traq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("fileId", Traq.Client.ClientUtils.ParameterToString(fileId)); // path parameter
            if (type != null)
            {
                localVarRequestOptions.QueryParameters.Add(Traq.Client.ClientUtils.ParameterToMultiMap("", "type", type));
            }

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<FileParameter>("/files/{fileId}/thumbnail", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetThumbnailImage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ファイルをアップロード 指定したチャンネルにファイルをアップロードします。 アーカイブされているチャンネルにはアップロード出来ません。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">ファイル本体</param>
        /// <param name="channelId">アップロード先チャンネルUUID</param>
        /// <returns>FileInfo</returns>
        public FileInfo PostFile(FileParameter file, Guid channelId)
        {
            Traq.Client.ApiResponse<FileInfo> localVarResponse = PostFileWithHttpInfo(file, channelId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ファイルをアップロード 指定したチャンネルにファイルをアップロードします。 アーカイブされているチャンネルにはアップロード出来ません。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">ファイル本体</param>
        /// <param name="channelId">アップロード先チャンネルUUID</param>
        /// <returns>ApiResponse of FileInfo</returns>
        public Traq.Client.ApiResponse<FileInfo> PostFileWithHttpInfo(FileParameter file, Guid channelId)
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new Traq.Client.ApiException(400, "Missing required parameter 'file' when calling FileApi->PostFile");

            Traq.Client.RequestOptions localVarRequestOptions = new Traq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Traq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Traq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.FileParameters.Add("file", file);
            localVarRequestOptions.FormParameters.Add("channelId", Traq.Client.ClientUtils.ParameterToString(channelId)); // form parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<FileInfo>("/files", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostFile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ファイルをアップロード 指定したチャンネルにファイルをアップロードします。 アーカイブされているチャンネルにはアップロード出来ません。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">ファイル本体</param>
        /// <param name="channelId">アップロード先チャンネルUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileInfo</returns>
        public async System.Threading.Tasks.Task<FileInfo> PostFileAsync(FileParameter file, Guid channelId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Traq.Client.ApiResponse<FileInfo> localVarResponse = await PostFileWithHttpInfoAsync(file, channelId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ファイルをアップロード 指定したチャンネルにファイルをアップロードします。 アーカイブされているチャンネルにはアップロード出来ません。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">ファイル本体</param>
        /// <param name="channelId">アップロード先チャンネルUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileInfo)</returns>
        public async System.Threading.Tasks.Task<Traq.Client.ApiResponse<FileInfo>> PostFileWithHttpInfoAsync(FileParameter file, Guid channelId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'file' is set
            if (file == null)
                throw new Traq.Client.ApiException(400, "Missing required parameter 'file' when calling FileApi->PostFile");


            Traq.Client.RequestOptions localVarRequestOptions = new Traq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Traq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Traq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.FileParameters.Add("file", file);
            localVarRequestOptions.FormParameters.Add("channelId", Traq.Client.ClientUtils.ParameterToString(channelId)); // form parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<FileInfo>("/files", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostFile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
