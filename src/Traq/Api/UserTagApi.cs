/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using DotnetTraq.Client;
using DotnetTraq.Model;

namespace DotnetTraq.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserTagApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 自分にタグを追加
        /// </summary>
        /// <remarks>
        /// 自分に新しくタグを追加します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postUserTagRequest"> (optional)</param>
        /// <returns>UserTag</returns>
        UserTag AddMyUserTag(PostUserTagRequest? postUserTagRequest = default(PostUserTagRequest?));

        /// <summary>
        /// 自分にタグを追加
        /// </summary>
        /// <remarks>
        /// 自分に新しくタグを追加します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postUserTagRequest"> (optional)</param>
        /// <returns>ApiResponse of UserTag</returns>
        ApiResponse<UserTag> AddMyUserTagWithHttpInfo(PostUserTagRequest? postUserTagRequest = default(PostUserTagRequest?));
        /// <summary>
        /// ユーザーにタグを追加
        /// </summary>
        /// <remarks>
        /// 指定したユーザーに指定したタグを追加します。 Webhookユーザーにタグを追加することは出来ません。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="postUserTagRequest"> (optional)</param>
        /// <returns>UserTag</returns>
        UserTag AddUserTag(Guid userId, PostUserTagRequest? postUserTagRequest = default(PostUserTagRequest?));

        /// <summary>
        /// ユーザーにタグを追加
        /// </summary>
        /// <remarks>
        /// 指定したユーザーに指定したタグを追加します。 Webhookユーザーにタグを追加することは出来ません。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="postUserTagRequest"> (optional)</param>
        /// <returns>ApiResponse of UserTag</returns>
        ApiResponse<UserTag> AddUserTagWithHttpInfo(Guid userId, PostUserTagRequest? postUserTagRequest = default(PostUserTagRequest?));
        /// <summary>
        /// 自分のタグを編集
        /// </summary>
        /// <remarks>
        /// 自分の指定したタグの状態を変更します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId">タグUUID</param>
        /// <param name="patchUserTagRequest"> (optional)</param>
        /// <returns></returns>
        void EditMyUserTag(Guid tagId, PatchUserTagRequest? patchUserTagRequest = default(PatchUserTagRequest?));

        /// <summary>
        /// 自分のタグを編集
        /// </summary>
        /// <remarks>
        /// 自分の指定したタグの状態を変更します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId">タグUUID</param>
        /// <param name="patchUserTagRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EditMyUserTagWithHttpInfo(Guid tagId, PatchUserTagRequest? patchUserTagRequest = default(PatchUserTagRequest?));
        /// <summary>
        /// ユーザーのタグを編集
        /// </summary>
        /// <remarks>
        /// 指定したユーザーの指定したタグの状態を変更します。 他人の状態は変更できません。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="tagId">タグUUID</param>
        /// <param name="patchUserTagRequest"> (optional)</param>
        /// <returns></returns>
        void EditUserTag(Guid userId, Guid tagId, PatchUserTagRequest? patchUserTagRequest = default(PatchUserTagRequest?));

        /// <summary>
        /// ユーザーのタグを編集
        /// </summary>
        /// <remarks>
        /// 指定したユーザーの指定したタグの状態を変更します。 他人の状態は変更できません。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="tagId">タグUUID</param>
        /// <param name="patchUserTagRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EditUserTagWithHttpInfo(Guid userId, Guid tagId, PatchUserTagRequest? patchUserTagRequest = default(PatchUserTagRequest?));
        /// <summary>
        /// 自分のタグリストを取得
        /// </summary>
        /// <remarks>
        /// 自分に付けられているタグの配列を取得します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;UserTag&gt;</returns>
        List<UserTag> GetMyUserTags();

        /// <summary>
        /// 自分のタグリストを取得
        /// </summary>
        /// <remarks>
        /// 自分に付けられているタグの配列を取得します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;UserTag&gt;</returns>
        ApiResponse<List<UserTag>> GetMyUserTagsWithHttpInfo();
        /// <summary>
        /// タグ情報を取得
        /// </summary>
        /// <remarks>
        /// 指定したタグの情報を取得します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId">タグUUID</param>
        /// <returns>Tag</returns>
        Tag GetTag(Guid tagId);

        /// <summary>
        /// タグ情報を取得
        /// </summary>
        /// <remarks>
        /// 指定したタグの情報を取得します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId">タグUUID</param>
        /// <returns>ApiResponse of Tag</returns>
        ApiResponse<Tag> GetTagWithHttpInfo(Guid tagId);
        /// <summary>
        /// ユーザーのタグリストを取得
        /// </summary>
        /// <remarks>
        /// 指定したユーザーのタグリストを取得します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <returns>List&lt;UserTag&gt;</returns>
        List<UserTag> GetUserTags(Guid userId);

        /// <summary>
        /// ユーザーのタグリストを取得
        /// </summary>
        /// <remarks>
        /// 指定したユーザーのタグリストを取得します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <returns>ApiResponse of List&lt;UserTag&gt;</returns>
        ApiResponse<List<UserTag>> GetUserTagsWithHttpInfo(Guid userId);
        /// <summary>
        /// 自分からタグを削除します
        /// </summary>
        /// <remarks>
        /// 既に存在しないタグを削除しようとした場合は204を返します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId">タグUUID</param>
        /// <returns></returns>
        void RemoveMyUserTag(Guid tagId);

        /// <summary>
        /// 自分からタグを削除します
        /// </summary>
        /// <remarks>
        /// 既に存在しないタグを削除しようとした場合は204を返します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId">タグUUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveMyUserTagWithHttpInfo(Guid tagId);
        /// <summary>
        /// ユーザーからタグを削除します
        /// </summary>
        /// <remarks>
        /// 既に存在しないタグを削除しようとした場合は204を返します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="tagId">タグUUID</param>
        /// <returns></returns>
        void RemoveUserTag(Guid userId, Guid tagId);

        /// <summary>
        /// ユーザーからタグを削除します
        /// </summary>
        /// <remarks>
        /// 既に存在しないタグを削除しようとした場合は204を返します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="tagId">タグUUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveUserTagWithHttpInfo(Guid userId, Guid tagId);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserTagApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 自分にタグを追加
        /// </summary>
        /// <remarks>
        /// 自分に新しくタグを追加します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postUserTagRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserTag</returns>
        System.Threading.Tasks.Task<UserTag> AddMyUserTagAsync(PostUserTagRequest? postUserTagRequest = default(PostUserTagRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 自分にタグを追加
        /// </summary>
        /// <remarks>
        /// 自分に新しくタグを追加します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postUserTagRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserTag)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserTag>> AddMyUserTagWithHttpInfoAsync(PostUserTagRequest? postUserTagRequest = default(PostUserTagRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// ユーザーにタグを追加
        /// </summary>
        /// <remarks>
        /// 指定したユーザーに指定したタグを追加します。 Webhookユーザーにタグを追加することは出来ません。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="postUserTagRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserTag</returns>
        System.Threading.Tasks.Task<UserTag> AddUserTagAsync(Guid userId, PostUserTagRequest? postUserTagRequest = default(PostUserTagRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// ユーザーにタグを追加
        /// </summary>
        /// <remarks>
        /// 指定したユーザーに指定したタグを追加します。 Webhookユーザーにタグを追加することは出来ません。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="postUserTagRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserTag)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserTag>> AddUserTagWithHttpInfoAsync(Guid userId, PostUserTagRequest? postUserTagRequest = default(PostUserTagRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 自分のタグを編集
        /// </summary>
        /// <remarks>
        /// 自分の指定したタグの状態を変更します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId">タグUUID</param>
        /// <param name="patchUserTagRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EditMyUserTagAsync(Guid tagId, PatchUserTagRequest? patchUserTagRequest = default(PatchUserTagRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 自分のタグを編集
        /// </summary>
        /// <remarks>
        /// 自分の指定したタグの状態を変更します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId">タグUUID</param>
        /// <param name="patchUserTagRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EditMyUserTagWithHttpInfoAsync(Guid tagId, PatchUserTagRequest? patchUserTagRequest = default(PatchUserTagRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// ユーザーのタグを編集
        /// </summary>
        /// <remarks>
        /// 指定したユーザーの指定したタグの状態を変更します。 他人の状態は変更できません。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="tagId">タグUUID</param>
        /// <param name="patchUserTagRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EditUserTagAsync(Guid userId, Guid tagId, PatchUserTagRequest? patchUserTagRequest = default(PatchUserTagRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// ユーザーのタグを編集
        /// </summary>
        /// <remarks>
        /// 指定したユーザーの指定したタグの状態を変更します。 他人の状態は変更できません。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="tagId">タグUUID</param>
        /// <param name="patchUserTagRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EditUserTagWithHttpInfoAsync(Guid userId, Guid tagId, PatchUserTagRequest? patchUserTagRequest = default(PatchUserTagRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 自分のタグリストを取得
        /// </summary>
        /// <remarks>
        /// 自分に付けられているタグの配列を取得します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;UserTag&gt;</returns>
        System.Threading.Tasks.Task<List<UserTag>> GetMyUserTagsAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 自分のタグリストを取得
        /// </summary>
        /// <remarks>
        /// 自分に付けられているタグの配列を取得します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;UserTag&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserTag>>> GetMyUserTagsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// タグ情報を取得
        /// </summary>
        /// <remarks>
        /// 指定したタグの情報を取得します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId">タグUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Tag</returns>
        System.Threading.Tasks.Task<Tag> GetTagAsync(Guid tagId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// タグ情報を取得
        /// </summary>
        /// <remarks>
        /// 指定したタグの情報を取得します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId">タグUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Tag)</returns>
        System.Threading.Tasks.Task<ApiResponse<Tag>> GetTagWithHttpInfoAsync(Guid tagId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// ユーザーのタグリストを取得
        /// </summary>
        /// <remarks>
        /// 指定したユーザーのタグリストを取得します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;UserTag&gt;</returns>
        System.Threading.Tasks.Task<List<UserTag>> GetUserTagsAsync(Guid userId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// ユーザーのタグリストを取得
        /// </summary>
        /// <remarks>
        /// 指定したユーザーのタグリストを取得します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;UserTag&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserTag>>> GetUserTagsWithHttpInfoAsync(Guid userId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 自分からタグを削除します
        /// </summary>
        /// <remarks>
        /// 既に存在しないタグを削除しようとした場合は204を返します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId">タグUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveMyUserTagAsync(Guid tagId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 自分からタグを削除します
        /// </summary>
        /// <remarks>
        /// 既に存在しないタグを削除しようとした場合は204を返します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId">タグUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveMyUserTagWithHttpInfoAsync(Guid tagId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// ユーザーからタグを削除します
        /// </summary>
        /// <remarks>
        /// 既に存在しないタグを削除しようとした場合は204を返します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="tagId">タグUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveUserTagAsync(Guid userId, Guid tagId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// ユーザーからタグを削除します
        /// </summary>
        /// <remarks>
        /// 既に存在しないタグを削除しようとした場合は204を返します。
        /// </remarks>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="tagId">タグUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveUserTagWithHttpInfoAsync(Guid userId, Guid tagId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserTagApi : IUserTagApiSync, IUserTagApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UserTagApi : IDisposable, IUserTagApi
    {
        private DotnetTraq.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UserTagApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public UserTagApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserTagApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public UserTagApi(string basePath)
        {
            this.Configuration = DotnetTraq.Client.Configuration.MergeConfigurations(
                DotnetTraq.Client.GlobalConfiguration.Instance,
                new DotnetTraq.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new DotnetTraq.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = DotnetTraq.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserTagApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public UserTagApi(DotnetTraq.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = DotnetTraq.Client.Configuration.MergeConfigurations(
                DotnetTraq.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new DotnetTraq.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = DotnetTraq.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserTagApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public UserTagApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserTagApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public UserTagApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = DotnetTraq.Client.Configuration.MergeConfigurations(
                DotnetTraq.Client.GlobalConfiguration.Instance,
                new DotnetTraq.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new DotnetTraq.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = DotnetTraq.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserTagApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public UserTagApi(HttpClient client, DotnetTraq.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = DotnetTraq.Client.Configuration.MergeConfigurations(
                DotnetTraq.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new DotnetTraq.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = DotnetTraq.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserTagApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public UserTagApi(DotnetTraq.Client.ISynchronousClient client, DotnetTraq.Client.IAsynchronousClient asyncClient, DotnetTraq.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = DotnetTraq.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public DotnetTraq.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public DotnetTraq.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public DotnetTraq.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public DotnetTraq.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public DotnetTraq.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// 自分にタグを追加 自分に新しくタグを追加します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postUserTagRequest"> (optional)</param>
        /// <returns>UserTag</returns>
        public UserTag AddMyUserTag(PostUserTagRequest? postUserTagRequest = default(PostUserTagRequest?))
        {
            DotnetTraq.Client.ApiResponse<UserTag> localVarResponse = AddMyUserTagWithHttpInfo(postUserTagRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 自分にタグを追加 自分に新しくタグを追加します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postUserTagRequest"> (optional)</param>
        /// <returns>ApiResponse of UserTag</returns>
        public DotnetTraq.Client.ApiResponse<UserTag> AddMyUserTagWithHttpInfo(PostUserTagRequest? postUserTagRequest = default(PostUserTagRequest?))
        {
            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = postUserTagRequest;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<UserTag>("/users/me/tags", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddMyUserTag", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 自分にタグを追加 自分に新しくタグを追加します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postUserTagRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserTag</returns>
        public async System.Threading.Tasks.Task<UserTag> AddMyUserTagAsync(PostUserTagRequest? postUserTagRequest = default(PostUserTagRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DotnetTraq.Client.ApiResponse<UserTag> localVarResponse = await AddMyUserTagWithHttpInfoAsync(postUserTagRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 自分にタグを追加 自分に新しくタグを追加します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postUserTagRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserTag)</returns>
        public async System.Threading.Tasks.Task<DotnetTraq.Client.ApiResponse<UserTag>> AddMyUserTagWithHttpInfoAsync(PostUserTagRequest? postUserTagRequest = default(PostUserTagRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = postUserTagRequest;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<UserTag>("/users/me/tags", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddMyUserTag", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ユーザーにタグを追加 指定したユーザーに指定したタグを追加します。 Webhookユーザーにタグを追加することは出来ません。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="postUserTagRequest"> (optional)</param>
        /// <returns>UserTag</returns>
        public UserTag AddUserTag(Guid userId, PostUserTagRequest? postUserTagRequest = default(PostUserTagRequest?))
        {
            DotnetTraq.Client.ApiResponse<UserTag> localVarResponse = AddUserTagWithHttpInfo(userId, postUserTagRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ユーザーにタグを追加 指定したユーザーに指定したタグを追加します。 Webhookユーザーにタグを追加することは出来ません。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="postUserTagRequest"> (optional)</param>
        /// <returns>ApiResponse of UserTag</returns>
        public DotnetTraq.Client.ApiResponse<UserTag> AddUserTagWithHttpInfo(Guid userId, PostUserTagRequest? postUserTagRequest = default(PostUserTagRequest?))
        {
            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userId", DotnetTraq.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = postUserTagRequest;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<UserTag>("/users/{userId}/tags", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddUserTag", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ユーザーにタグを追加 指定したユーザーに指定したタグを追加します。 Webhookユーザーにタグを追加することは出来ません。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="postUserTagRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserTag</returns>
        public async System.Threading.Tasks.Task<UserTag> AddUserTagAsync(Guid userId, PostUserTagRequest? postUserTagRequest = default(PostUserTagRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DotnetTraq.Client.ApiResponse<UserTag> localVarResponse = await AddUserTagWithHttpInfoAsync(userId, postUserTagRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ユーザーにタグを追加 指定したユーザーに指定したタグを追加します。 Webhookユーザーにタグを追加することは出来ません。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="postUserTagRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserTag)</returns>
        public async System.Threading.Tasks.Task<DotnetTraq.Client.ApiResponse<UserTag>> AddUserTagWithHttpInfoAsync(Guid userId, PostUserTagRequest? postUserTagRequest = default(PostUserTagRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userId", DotnetTraq.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.Data = postUserTagRequest;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<UserTag>("/users/{userId}/tags", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddUserTag", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 自分のタグを編集 自分の指定したタグの状態を変更します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId">タグUUID</param>
        /// <param name="patchUserTagRequest"> (optional)</param>
        /// <returns></returns>
        public void EditMyUserTag(Guid tagId, PatchUserTagRequest? patchUserTagRequest = default(PatchUserTagRequest?))
        {
            EditMyUserTagWithHttpInfo(tagId, patchUserTagRequest);
        }

        /// <summary>
        /// 自分のタグを編集 自分の指定したタグの状態を変更します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId">タグUUID</param>
        /// <param name="patchUserTagRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public DotnetTraq.Client.ApiResponse<Object> EditMyUserTagWithHttpInfo(Guid tagId, PatchUserTagRequest? patchUserTagRequest = default(PatchUserTagRequest?))
        {
            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("tagId", DotnetTraq.Client.ClientUtils.ParameterToString(tagId)); // path parameter
            localVarRequestOptions.Data = patchUserTagRequest;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/users/me/tags/{tagId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EditMyUserTag", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 自分のタグを編集 自分の指定したタグの状態を変更します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId">タグUUID</param>
        /// <param name="patchUserTagRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EditMyUserTagAsync(Guid tagId, PatchUserTagRequest? patchUserTagRequest = default(PatchUserTagRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await EditMyUserTagWithHttpInfoAsync(tagId, patchUserTagRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// 自分のタグを編集 自分の指定したタグの状態を変更します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId">タグUUID</param>
        /// <param name="patchUserTagRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<DotnetTraq.Client.ApiResponse<Object>> EditMyUserTagWithHttpInfoAsync(Guid tagId, PatchUserTagRequest? patchUserTagRequest = default(PatchUserTagRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("tagId", DotnetTraq.Client.ClientUtils.ParameterToString(tagId)); // path parameter
            localVarRequestOptions.Data = patchUserTagRequest;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/users/me/tags/{tagId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EditMyUserTag", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ユーザーのタグを編集 指定したユーザーの指定したタグの状態を変更します。 他人の状態は変更できません。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="tagId">タグUUID</param>
        /// <param name="patchUserTagRequest"> (optional)</param>
        /// <returns></returns>
        public void EditUserTag(Guid userId, Guid tagId, PatchUserTagRequest? patchUserTagRequest = default(PatchUserTagRequest?))
        {
            EditUserTagWithHttpInfo(userId, tagId, patchUserTagRequest);
        }

        /// <summary>
        /// ユーザーのタグを編集 指定したユーザーの指定したタグの状態を変更します。 他人の状態は変更できません。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="tagId">タグUUID</param>
        /// <param name="patchUserTagRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public DotnetTraq.Client.ApiResponse<Object> EditUserTagWithHttpInfo(Guid userId, Guid tagId, PatchUserTagRequest? patchUserTagRequest = default(PatchUserTagRequest?))
        {
            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userId", DotnetTraq.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("tagId", DotnetTraq.Client.ClientUtils.ParameterToString(tagId)); // path parameter
            localVarRequestOptions.Data = patchUserTagRequest;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/users/{userId}/tags/{tagId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EditUserTag", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ユーザーのタグを編集 指定したユーザーの指定したタグの状態を変更します。 他人の状態は変更できません。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="tagId">タグUUID</param>
        /// <param name="patchUserTagRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EditUserTagAsync(Guid userId, Guid tagId, PatchUserTagRequest? patchUserTagRequest = default(PatchUserTagRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await EditUserTagWithHttpInfoAsync(userId, tagId, patchUserTagRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// ユーザーのタグを編集 指定したユーザーの指定したタグの状態を変更します。 他人の状態は変更できません。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="tagId">タグUUID</param>
        /// <param name="patchUserTagRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<DotnetTraq.Client.ApiResponse<Object>> EditUserTagWithHttpInfoAsync(Guid userId, Guid tagId, PatchUserTagRequest? patchUserTagRequest = default(PatchUserTagRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userId", DotnetTraq.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("tagId", DotnetTraq.Client.ClientUtils.ParameterToString(tagId)); // path parameter
            localVarRequestOptions.Data = patchUserTagRequest;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/users/{userId}/tags/{tagId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EditUserTag", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 自分のタグリストを取得 自分に付けられているタグの配列を取得します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;UserTag&gt;</returns>
        public List<UserTag> GetMyUserTags()
        {
            DotnetTraq.Client.ApiResponse<List<UserTag>> localVarResponse = GetMyUserTagsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// 自分のタグリストを取得 自分に付けられているタグの配列を取得します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;UserTag&gt;</returns>
        public DotnetTraq.Client.ApiResponse<List<UserTag>> GetMyUserTagsWithHttpInfo()
        {
            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<UserTag>>("/users/me/tags", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMyUserTags", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 自分のタグリストを取得 自分に付けられているタグの配列を取得します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;UserTag&gt;</returns>
        public async System.Threading.Tasks.Task<List<UserTag>> GetMyUserTagsAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DotnetTraq.Client.ApiResponse<List<UserTag>> localVarResponse = await GetMyUserTagsWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 自分のタグリストを取得 自分に付けられているタグの配列を取得します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;UserTag&gt;)</returns>
        public async System.Threading.Tasks.Task<DotnetTraq.Client.ApiResponse<List<UserTag>>> GetMyUserTagsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<UserTag>>("/users/me/tags", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMyUserTags", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// タグ情報を取得 指定したタグの情報を取得します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId">タグUUID</param>
        /// <returns>Tag</returns>
        public Tag GetTag(Guid tagId)
        {
            DotnetTraq.Client.ApiResponse<Tag> localVarResponse = GetTagWithHttpInfo(tagId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// タグ情報を取得 指定したタグの情報を取得します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId">タグUUID</param>
        /// <returns>ApiResponse of Tag</returns>
        public DotnetTraq.Client.ApiResponse<Tag> GetTagWithHttpInfo(Guid tagId)
        {
            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("tagId", DotnetTraq.Client.ClientUtils.ParameterToString(tagId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Tag>("/tags/{tagId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTag", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// タグ情報を取得 指定したタグの情報を取得します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId">タグUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Tag</returns>
        public async System.Threading.Tasks.Task<Tag> GetTagAsync(Guid tagId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DotnetTraq.Client.ApiResponse<Tag> localVarResponse = await GetTagWithHttpInfoAsync(tagId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// タグ情報を取得 指定したタグの情報を取得します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId">タグUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Tag)</returns>
        public async System.Threading.Tasks.Task<DotnetTraq.Client.ApiResponse<Tag>> GetTagWithHttpInfoAsync(Guid tagId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("tagId", DotnetTraq.Client.ClientUtils.ParameterToString(tagId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Tag>("/tags/{tagId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTag", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ユーザーのタグリストを取得 指定したユーザーのタグリストを取得します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <returns>List&lt;UserTag&gt;</returns>
        public List<UserTag> GetUserTags(Guid userId)
        {
            DotnetTraq.Client.ApiResponse<List<UserTag>> localVarResponse = GetUserTagsWithHttpInfo(userId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ユーザーのタグリストを取得 指定したユーザーのタグリストを取得します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <returns>ApiResponse of List&lt;UserTag&gt;</returns>
        public DotnetTraq.Client.ApiResponse<List<UserTag>> GetUserTagsWithHttpInfo(Guid userId)
        {
            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userId", DotnetTraq.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<UserTag>>("/users/{userId}/tags", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserTags", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ユーザーのタグリストを取得 指定したユーザーのタグリストを取得します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;UserTag&gt;</returns>
        public async System.Threading.Tasks.Task<List<UserTag>> GetUserTagsAsync(Guid userId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            DotnetTraq.Client.ApiResponse<List<UserTag>> localVarResponse = await GetUserTagsWithHttpInfoAsync(userId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ユーザーのタグリストを取得 指定したユーザーのタグリストを取得します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;UserTag&gt;)</returns>
        public async System.Threading.Tasks.Task<DotnetTraq.Client.ApiResponse<List<UserTag>>> GetUserTagsWithHttpInfoAsync(Guid userId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userId", DotnetTraq.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<UserTag>>("/users/{userId}/tags", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserTags", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 自分からタグを削除します 既に存在しないタグを削除しようとした場合は204を返します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId">タグUUID</param>
        /// <returns></returns>
        public void RemoveMyUserTag(Guid tagId)
        {
            RemoveMyUserTagWithHttpInfo(tagId);
        }

        /// <summary>
        /// 自分からタグを削除します 既に存在しないタグを削除しようとした場合は204を返します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId">タグUUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public DotnetTraq.Client.ApiResponse<Object> RemoveMyUserTagWithHttpInfo(Guid tagId)
        {
            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("tagId", DotnetTraq.Client.ClientUtils.ParameterToString(tagId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/users/me/tags/{tagId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveMyUserTag", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 自分からタグを削除します 既に存在しないタグを削除しようとした場合は204を返します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId">タグUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveMyUserTagAsync(Guid tagId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await RemoveMyUserTagWithHttpInfoAsync(tagId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// 自分からタグを削除します 既に存在しないタグを削除しようとした場合は204を返します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId">タグUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<DotnetTraq.Client.ApiResponse<Object>> RemoveMyUserTagWithHttpInfoAsync(Guid tagId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("tagId", DotnetTraq.Client.ClientUtils.ParameterToString(tagId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/users/me/tags/{tagId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveMyUserTag", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ユーザーからタグを削除します 既に存在しないタグを削除しようとした場合は204を返します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="tagId">タグUUID</param>
        /// <returns></returns>
        public void RemoveUserTag(Guid userId, Guid tagId)
        {
            RemoveUserTagWithHttpInfo(userId, tagId);
        }

        /// <summary>
        /// ユーザーからタグを削除します 既に存在しないタグを削除しようとした場合は204を返します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="tagId">タグUUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public DotnetTraq.Client.ApiResponse<Object> RemoveUserTagWithHttpInfo(Guid userId, Guid tagId)
        {
            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userId", DotnetTraq.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("tagId", DotnetTraq.Client.ClientUtils.ParameterToString(tagId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/users/{userId}/tags/{tagId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveUserTag", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ユーザーからタグを削除します 既に存在しないタグを削除しようとした場合は204を返します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="tagId">タグUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveUserTagAsync(Guid userId, Guid tagId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await RemoveUserTagWithHttpInfoAsync(userId, tagId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// ユーザーからタグを削除します 既に存在しないタグを削除しようとした場合は204を返します。
        /// </summary>
        /// <exception cref="DotnetTraq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ユーザーUUID</param>
        /// <param name="tagId">タグUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<DotnetTraq.Client.ApiResponse<Object>> RemoveUserTagWithHttpInfoAsync(Guid userId, Guid tagId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            DotnetTraq.Client.RequestOptions localVarRequestOptions = new DotnetTraq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = DotnetTraq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = DotnetTraq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userId", DotnetTraq.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("tagId", DotnetTraq.Client.ClientUtils.ParameterToString(tagId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/users/{userId}/tags/{tagId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveUserTag", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
