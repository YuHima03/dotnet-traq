// <auto-generated>
/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Traq.Client;
using Traq.Model;
using System.Diagnostics.CodeAnalysis;

namespace Traq.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IQallApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        QallApiEvents Events { get; }

        /// <summary>
        /// ルームでの発言権限を変更
        /// </summary>
        /// <remarks>
        /// ルーム内の参加者の発言権限を変更します。 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomId">ルームUUID</param>
        /// <param name="qallParticipantRequest">発言権限を変更する参加者の情報</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IChangeParticipantRoleApiResponse"/>&gt;</returns>
        Task<IChangeParticipantRoleApiResponse> ChangeParticipantRoleAsync(Guid roomId, List<QallParticipantRequest> qallParticipantRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// ルームでの発言権限を変更
        /// </summary>
        /// <remarks>
        /// ルーム内の参加者の発言権限を変更します。 
        /// </remarks>
        /// <param name="roomId">ルームUUID</param>
        /// <param name="qallParticipantRequest">発言権限を変更する参加者の情報</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IChangeParticipantRoleApiResponse"/>?&gt;</returns>
        Task<IChangeParticipantRoleApiResponse?> ChangeParticipantRoleOrDefaultAsync(Guid roomId, List<QallParticipantRequest> qallParticipantRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// LiveKitトークンを取得
        /// </summary>
        /// <remarks>
        /// 指定したルームに参加するためのLiveKitトークンを取得します。   
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomId">ルームUUID (optional)</param>
        /// <param name="isWebinar">ウェビナールームかどうか(デフォルト false) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetLiveKitTokenApiResponse"/>&gt;</returns>
        Task<IGetLiveKitTokenApiResponse> GetLiveKitTokenAsync(Option<Guid> roomId = default, Option<bool> isWebinar = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// LiveKitトークンを取得
        /// </summary>
        /// <remarks>
        /// 指定したルームに参加するためのLiveKitトークンを取得します。   
        /// </remarks>
        /// <param name="roomId">ルームUUID (optional)</param>
        /// <param name="isWebinar">ウェビナールームかどうか(デフォルト false) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetLiveKitTokenApiResponse"/>?&gt;</returns>
        Task<IGetLiveKitTokenApiResponse?> GetLiveKitTokenOrDefaultAsync(Option<Guid> roomId = default, Option<bool> isWebinar = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// LiveKitエンドポイントを取得
        /// </summary>
        /// <remarks>
        /// 接続可能なLiveKitエンドポイントを取得します。 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetQallEndpointsApiResponse"/>&gt;</returns>
        Task<IGetQallEndpointsApiResponse> GetQallEndpointsAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// LiveKitエンドポイントを取得
        /// </summary>
        /// <remarks>
        /// 接続可能なLiveKitエンドポイントを取得します。 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetQallEndpointsApiResponse"/>?&gt;</returns>
        Task<IGetQallEndpointsApiResponse?> GetQallEndpointsOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// ルームのメタデータを取得
        /// </summary>
        /// <remarks>
        /// ルームのメタデータを取得します。 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomId">ルームUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetRoomMetadataApiResponse"/>&gt;</returns>
        Task<IGetRoomMetadataApiResponse> GetRoomMetadataAsync(Guid roomId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// ルームのメタデータを取得
        /// </summary>
        /// <remarks>
        /// ルームのメタデータを取得します。 
        /// </remarks>
        /// <param name="roomId">ルームUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetRoomMetadataApiResponse"/>?&gt;</returns>
        Task<IGetRoomMetadataApiResponse?> GetRoomMetadataOrDefaultAsync(Guid roomId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// ルームと参加者の一覧を取得
        /// </summary>
        /// <remarks>
        /// 現在存在する(またはアクティブな)ルームと、そのルームに所属している参加者情報を取得します。 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetRoomsApiResponse"/>&gt;</returns>
        Task<IGetRoomsApiResponse> GetRoomsAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// ルームと参加者の一覧を取得
        /// </summary>
        /// <remarks>
        /// 現在存在する(またはアクティブな)ルームと、そのルームに所属している参加者情報を取得します。 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetRoomsApiResponse"/>?&gt;</returns>
        Task<IGetRoomsApiResponse?> GetRoomsOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// サウンドボード用の音声一覧を取得
        /// </summary>
        /// <remarks>
        /// DBに保存されたサウンドボード情報を取得します。   各アイテムには soundId, soundName, stampId が含まれます。 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSoundboardListApiResponse"/>&gt;</returns>
        Task<IGetSoundboardListApiResponse> GetSoundboardListAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// サウンドボード用の音声一覧を取得
        /// </summary>
        /// <remarks>
        /// DBに保存されたサウンドボード情報を取得します。   各アイテムには soundId, soundName, stampId が含まれます。 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSoundboardListApiResponse"/>?&gt;</returns>
        Task<IGetSoundboardListApiResponse?> GetSoundboardListOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// LiveKit Webhook受信
        /// </summary>
        /// <remarks>
        /// LiveKit側で設定したWebhookから呼び出されるエンドポイントです。   参加者の入室・退出などのイベントを受け取り、サーバ内で処理を行います。 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILiveKitWebhookApiResponse"/>&gt;</returns>
        Task<ILiveKitWebhookApiResponse> LiveKitWebhookAsync(Object body, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// LiveKit Webhook受信
        /// </summary>
        /// <remarks>
        /// LiveKit側で設定したWebhookから呼び出されるエンドポイントです。   参加者の入室・退出などのイベントを受け取り、サーバ内で処理を行います。 
        /// </remarks>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILiveKitWebhookApiResponse"/>?&gt;</returns>
        Task<ILiveKitWebhookApiResponse?> LiveKitWebhookOrDefaultAsync(Object body, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// サウンドボード用の短い音声ファイルをアップロード
        /// </summary>
        /// <remarks>
        /// 15秒程度の短い音声ファイルを multipart/form-data で送信し、S3(互換ストレージ)にアップロードします。   クライアントは「soundName」というフィールドを送信し、それをDBに保存して関連付けを行います。   また、サーバ側で soundId を自動生成し、S3のファイル名に使用します。 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="audio">アップロードする音声ファイル(20秒以内)</param>
        /// <param name="soundName">ユーザが自由につけるサウンド名</param>
        /// <param name="stampId">アイコンスタンプID (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostSoundboardApiResponse"/>&gt;</returns>
        Task<IPostSoundboardApiResponse> PostSoundboardAsync(System.IO.Stream audio, string soundName, Option<string> stampId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// サウンドボード用の短い音声ファイルをアップロード
        /// </summary>
        /// <remarks>
        /// 15秒程度の短い音声ファイルを multipart/form-data で送信し、S3(互換ストレージ)にアップロードします。   クライアントは「soundName」というフィールドを送信し、それをDBに保存して関連付けを行います。   また、サーバ側で soundId を自動生成し、S3のファイル名に使用します。 
        /// </remarks>
        /// <param name="audio">アップロードする音声ファイル(20秒以内)</param>
        /// <param name="soundName">ユーザが自由につけるサウンド名</param>
        /// <param name="stampId">アイコンスタンプID (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostSoundboardApiResponse"/>?&gt;</returns>
        Task<IPostSoundboardApiResponse?> PostSoundboardOrDefaultAsync(System.IO.Stream audio, string soundName, Option<string> stampId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// アップロード済み音声を LiveKit ルームで再生
        /// </summary>
        /// <remarks>
        /// S3上にある音声ファイルの署名付きURLを生成し、   Ingressを介して指定ルームに音声を流します。     該当ルームに参加しているユーザであれば再生可能とします。 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="soundboardPlayRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostSoundboardPlayApiResponse"/>&gt;</returns>
        Task<IPostSoundboardPlayApiResponse> PostSoundboardPlayAsync(SoundboardPlayRequest soundboardPlayRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// アップロード済み音声を LiveKit ルームで再生
        /// </summary>
        /// <remarks>
        /// S3上にある音声ファイルの署名付きURLを生成し、   Ingressを介して指定ルームに音声を流します。     該当ルームに参加しているユーザであれば再生可能とします。 
        /// </remarks>
        /// <param name="soundboardPlayRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostSoundboardPlayApiResponse"/>?&gt;</returns>
        Task<IPostSoundboardPlayApiResponse?> PostSoundboardPlayOrDefaultAsync(SoundboardPlayRequest soundboardPlayRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// ルームのメタデータを更新
        /// </summary>
        /// <remarks>
        /// ルームのメタデータを更新します。 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomId">ルームUUID</param>
        /// <param name="qallMetadataRequest">ルームのメタデータ</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateRoomMetadataApiResponse"/>&gt;</returns>
        Task<IUpdateRoomMetadataApiResponse> UpdateRoomMetadataAsync(Guid roomId, QallMetadataRequest qallMetadataRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// ルームのメタデータを更新
        /// </summary>
        /// <remarks>
        /// ルームのメタデータを更新します。 
        /// </remarks>
        /// <param name="roomId">ルームUUID</param>
        /// <param name="qallMetadataRequest">ルームのメタデータ</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateRoomMetadataApiResponse"/>?&gt;</returns>
        Task<IUpdateRoomMetadataApiResponse?> UpdateRoomMetadataOrDefaultAsync(Guid roomId, QallMetadataRequest qallMetadataRequest, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IChangeParticipantRoleApiResponse"/>
    /// </summary>
    public interface IChangeParticipantRoleApiResponse : Traq.Client.IApiResponse, IOk<Traq.Model.QallParticipantResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IGetLiveKitTokenApiResponse"/>
    /// </summary>
    public interface IGetLiveKitTokenApiResponse : Traq.Client.IApiResponse, IOk<Traq.Model.QallTokenResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IGetQallEndpointsApiResponse"/>
    /// </summary>
    public interface IGetQallEndpointsApiResponse : Traq.Client.IApiResponse, IOk<Traq.Model.QallEndpointResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IGetRoomMetadataApiResponse"/>
    /// </summary>
    public interface IGetRoomMetadataApiResponse : Traq.Client.IApiResponse, IOk<Traq.Model.QallMetadataResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IGetRoomsApiResponse"/>
    /// </summary>
    public interface IGetRoomsApiResponse : Traq.Client.IApiResponse, IOk<List<QallRoomWithParticipants>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IGetSoundboardListApiResponse"/>
    /// </summary>
    public interface IGetSoundboardListApiResponse : Traq.Client.IApiResponse, IOk<List<SoundboardItem>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="ILiveKitWebhookApiResponse"/>
    /// </summary>
    public interface ILiveKitWebhookApiResponse : Traq.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IPostSoundboardApiResponse"/>
    /// </summary>
    public interface IPostSoundboardApiResponse : Traq.Client.IApiResponse, IOk<Traq.Model.SoundboardUploadResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IPostSoundboardPlayApiResponse"/>
    /// </summary>
    public interface IPostSoundboardPlayApiResponse : Traq.Client.IApiResponse, IOk<Traq.Model.SoundboardPlayResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IUpdateRoomMetadataApiResponse"/>
    /// </summary>
    public interface IUpdateRoomMetadataApiResponse : Traq.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class QallApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnChangeParticipantRole;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorChangeParticipantRole;

        internal void ExecuteOnChangeParticipantRole(QallApi.ChangeParticipantRoleApiResponse apiResponse)
        {
            OnChangeParticipantRole?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorChangeParticipantRole(Exception exception)
        {
            OnErrorChangeParticipantRole?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetLiveKitToken;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetLiveKitToken;

        internal void ExecuteOnGetLiveKitToken(QallApi.GetLiveKitTokenApiResponse apiResponse)
        {
            OnGetLiveKitToken?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetLiveKitToken(Exception exception)
        {
            OnErrorGetLiveKitToken?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetQallEndpoints;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetQallEndpoints;

        internal void ExecuteOnGetQallEndpoints(QallApi.GetQallEndpointsApiResponse apiResponse)
        {
            OnGetQallEndpoints?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetQallEndpoints(Exception exception)
        {
            OnErrorGetQallEndpoints?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetRoomMetadata;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetRoomMetadata;

        internal void ExecuteOnGetRoomMetadata(QallApi.GetRoomMetadataApiResponse apiResponse)
        {
            OnGetRoomMetadata?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetRoomMetadata(Exception exception)
        {
            OnErrorGetRoomMetadata?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetRooms;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetRooms;

        internal void ExecuteOnGetRooms(QallApi.GetRoomsApiResponse apiResponse)
        {
            OnGetRooms?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetRooms(Exception exception)
        {
            OnErrorGetRooms?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetSoundboardList;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetSoundboardList;

        internal void ExecuteOnGetSoundboardList(QallApi.GetSoundboardListApiResponse apiResponse)
        {
            OnGetSoundboardList?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetSoundboardList(Exception exception)
        {
            OnErrorGetSoundboardList?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnLiveKitWebhook;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorLiveKitWebhook;

        internal void ExecuteOnLiveKitWebhook(QallApi.LiveKitWebhookApiResponse apiResponse)
        {
            OnLiveKitWebhook?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorLiveKitWebhook(Exception exception)
        {
            OnErrorLiveKitWebhook?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPostSoundboard;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPostSoundboard;

        internal void ExecuteOnPostSoundboard(QallApi.PostSoundboardApiResponse apiResponse)
        {
            OnPostSoundboard?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPostSoundboard(Exception exception)
        {
            OnErrorPostSoundboard?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPostSoundboardPlay;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPostSoundboardPlay;

        internal void ExecuteOnPostSoundboardPlay(QallApi.PostSoundboardPlayApiResponse apiResponse)
        {
            OnPostSoundboardPlay?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPostSoundboardPlay(Exception exception)
        {
            OnErrorPostSoundboardPlay?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUpdateRoomMetadata;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUpdateRoomMetadata;

        internal void ExecuteOnUpdateRoomMetadata(QallApi.UpdateRoomMetadataApiResponse apiResponse)
        {
            OnUpdateRoomMetadata?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUpdateRoomMetadata(Exception exception)
        {
            OnErrorUpdateRoomMetadata?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class QallApi : IQallApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<QallApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public QallApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// A token provider of type <see cref="OauthTokenProvider"/>
        /// </summary>
        public TokenProvider<OAuthToken> OauthTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="QallApi"/> class.
        /// </summary>
        /// <returns></returns>
        public QallApi(ILogger<QallApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, QallApiEvents qallApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider,
            TokenProvider<BearerToken> bearerTokenProvider,
            TokenProvider<OAuthToken> oauthTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<QallApi>();
            HttpClient = httpClient;
            Events = qallApiEvents;
            ApiKeyProvider = apiKeyProvider;
            BearerTokenProvider = bearerTokenProvider;
            OauthTokenProvider = oauthTokenProvider;
        }

        partial void FormatChangeParticipantRole(ref Guid roomId, List<QallParticipantRequest> qallParticipantRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="qallParticipantRequest"></param>
        /// <returns></returns>
        private void ValidateChangeParticipantRole(List<QallParticipantRequest> qallParticipantRequest)
        {
            if (qallParticipantRequest == null)
                throw new ArgumentNullException(nameof(qallParticipantRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="roomId"></param>
        /// <param name="qallParticipantRequest"></param>
        private void AfterChangeParticipantRoleDefaultImplementation(IChangeParticipantRoleApiResponse apiResponseLocalVar, Guid roomId, List<QallParticipantRequest> qallParticipantRequest)
        {
            bool suppressDefaultLog = false;
            AfterChangeParticipantRole(ref suppressDefaultLog, apiResponseLocalVar, roomId, qallParticipantRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="roomId"></param>
        /// <param name="qallParticipantRequest"></param>
        partial void AfterChangeParticipantRole(ref bool suppressDefaultLog, IChangeParticipantRoleApiResponse apiResponseLocalVar, Guid roomId, List<QallParticipantRequest> qallParticipantRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="roomId"></param>
        /// <param name="qallParticipantRequest"></param>
        private void OnErrorChangeParticipantRoleDefaultImplementation(Exception exception, string pathFormat, string path, Guid roomId, List<QallParticipantRequest> qallParticipantRequest)
        {
            bool suppressDefaultLog = false;
            OnErrorChangeParticipantRole(ref suppressDefaultLog, exception, pathFormat, path, roomId, qallParticipantRequest);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="roomId"></param>
        /// <param name="qallParticipantRequest"></param>
        partial void OnErrorChangeParticipantRole(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Guid roomId, List<QallParticipantRequest> qallParticipantRequest);

        /// <summary>
        /// ルームでの発言権限を変更 ルーム内の参加者の発言権限を変更します。 
        /// </summary>
        /// <param name="roomId">ルームUUID</param>
        /// <param name="qallParticipantRequest">発言権限を変更する参加者の情報</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IChangeParticipantRoleApiResponse"/>&gt;</returns>
        public async Task<IChangeParticipantRoleApiResponse?> ChangeParticipantRoleOrDefaultAsync(Guid roomId, List<QallParticipantRequest> qallParticipantRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ChangeParticipantRoleAsync(roomId, qallParticipantRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// ルームでの発言権限を変更 ルーム内の参加者の発言権限を変更します。 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomId">ルームUUID</param>
        /// <param name="qallParticipantRequest">発言権限を変更する参加者の情報</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IChangeParticipantRoleApiResponse"/>&gt;</returns>
        public async Task<IChangeParticipantRoleApiResponse> ChangeParticipantRoleAsync(Guid roomId, List<QallParticipantRequest> qallParticipantRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateChangeParticipantRole(qallParticipantRequest);

                FormatChangeParticipantRole(ref roomId, qallParticipantRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/qall/rooms/{roomId}/participants";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BroomId%7D", Uri.EscapeDataString(roomId.ToString()));

                    httpRequestMessageLocalVar.Content = (qallParticipantRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(qallParticipantRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Patch;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ChangeParticipantRoleApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ChangeParticipantRoleApiResponse>();

                        ChangeParticipantRoleApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/qall/rooms/{roomId}/participants", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterChangeParticipantRoleDefaultImplementation(apiResponseLocalVar, roomId, qallParticipantRequest);

                        Events.ExecuteOnChangeParticipantRole(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorChangeParticipantRoleDefaultImplementation(e, "/qall/rooms/{roomId}/participants", uriBuilderLocalVar.Path, roomId, qallParticipantRequest);
                Events.ExecuteOnErrorChangeParticipantRole(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ChangeParticipantRoleApiResponse"/>
        /// </summary>
        public partial class ChangeParticipantRoleApiResponse : Traq.Client.ApiResponse, IChangeParticipantRoleApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ChangeParticipantRoleApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ChangeParticipantRoleApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ChangeParticipantRoleApiResponse(ILogger<ChangeParticipantRoleApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Traq.Model.QallParticipantResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Traq.Model.QallParticipantResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Traq.Model.QallParticipantResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetLiveKitToken(ref Option<Guid> roomId, ref Option<bool> isWebinar);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="roomId"></param>
        /// <param name="isWebinar"></param>
        private void AfterGetLiveKitTokenDefaultImplementation(IGetLiveKitTokenApiResponse apiResponseLocalVar, Option<Guid> roomId, Option<bool> isWebinar)
        {
            bool suppressDefaultLog = false;
            AfterGetLiveKitToken(ref suppressDefaultLog, apiResponseLocalVar, roomId, isWebinar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="roomId"></param>
        /// <param name="isWebinar"></param>
        partial void AfterGetLiveKitToken(ref bool suppressDefaultLog, IGetLiveKitTokenApiResponse apiResponseLocalVar, Option<Guid> roomId, Option<bool> isWebinar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="roomId"></param>
        /// <param name="isWebinar"></param>
        private void OnErrorGetLiveKitTokenDefaultImplementation(Exception exception, string pathFormat, string path, Option<Guid> roomId, Option<bool> isWebinar)
        {
            bool suppressDefaultLog = false;
            OnErrorGetLiveKitToken(ref suppressDefaultLog, exception, pathFormat, path, roomId, isWebinar);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="roomId"></param>
        /// <param name="isWebinar"></param>
        partial void OnErrorGetLiveKitToken(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<Guid> roomId, Option<bool> isWebinar);

        /// <summary>
        /// LiveKitトークンを取得 指定したルームに参加するためのLiveKitトークンを取得します。   
        /// </summary>
        /// <param name="roomId">ルームUUID (optional)</param>
        /// <param name="isWebinar">ウェビナールームかどうか(デフォルト false) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetLiveKitTokenApiResponse"/>&gt;</returns>
        public async Task<IGetLiveKitTokenApiResponse?> GetLiveKitTokenOrDefaultAsync(Option<Guid> roomId = default, Option<bool> isWebinar = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetLiveKitTokenAsync(roomId, isWebinar, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// LiveKitトークンを取得 指定したルームに参加するためのLiveKitトークンを取得します。   
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomId">ルームUUID (optional)</param>
        /// <param name="isWebinar">ウェビナールームかどうか(デフォルト false) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetLiveKitTokenApiResponse"/>&gt;</returns>
        public async Task<IGetLiveKitTokenApiResponse> GetLiveKitTokenAsync(Option<Guid> roomId = default, Option<bool> isWebinar = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetLiveKitToken(ref roomId, ref isWebinar);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/qall/token";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (roomId.IsSet)
                        parseQueryStringLocalVar["roomId"] = ClientUtils.ParameterToString(roomId.Value);

                    if (isWebinar.IsSet)
                        parseQueryStringLocalVar["isWebinar"] = ClientUtils.ParameterToString(isWebinar.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetLiveKitTokenApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetLiveKitTokenApiResponse>();

                        GetLiveKitTokenApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/qall/token", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetLiveKitTokenDefaultImplementation(apiResponseLocalVar, roomId, isWebinar);

                        Events.ExecuteOnGetLiveKitToken(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetLiveKitTokenDefaultImplementation(e, "/qall/token", uriBuilderLocalVar.Path, roomId, isWebinar);
                Events.ExecuteOnErrorGetLiveKitToken(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetLiveKitTokenApiResponse"/>
        /// </summary>
        public partial class GetLiveKitTokenApiResponse : Traq.Client.ApiResponse, IGetLiveKitTokenApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetLiveKitTokenApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetLiveKitTokenApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetLiveKitTokenApiResponse(ILogger<GetLiveKitTokenApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Traq.Model.QallTokenResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Traq.Model.QallTokenResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Traq.Model.QallTokenResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetQallEndpointsDefaultImplementation(IGetQallEndpointsApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetQallEndpoints(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetQallEndpoints(ref bool suppressDefaultLog, IGetQallEndpointsApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        private void OnErrorGetQallEndpointsDefaultImplementation(Exception exception, string pathFormat, string path)
        {
            bool suppressDefaultLog = false;
            OnErrorGetQallEndpoints(ref suppressDefaultLog, exception, pathFormat, path);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        partial void OnErrorGetQallEndpoints(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path);

        /// <summary>
        /// LiveKitエンドポイントを取得 接続可能なLiveKitエンドポイントを取得します。 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetQallEndpointsApiResponse"/>&gt;</returns>
        public async Task<IGetQallEndpointsApiResponse?> GetQallEndpointsOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetQallEndpointsAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// LiveKitエンドポイントを取得 接続可能なLiveKitエンドポイントを取得します。 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetQallEndpointsApiResponse"/>&gt;</returns>
        public async Task<IGetQallEndpointsApiResponse> GetQallEndpointsAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/qall/endpoints";

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetQallEndpointsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetQallEndpointsApiResponse>();

                        GetQallEndpointsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/qall/endpoints", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetQallEndpointsDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetQallEndpoints(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetQallEndpointsDefaultImplementation(e, "/qall/endpoints", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetQallEndpoints(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetQallEndpointsApiResponse"/>
        /// </summary>
        public partial class GetQallEndpointsApiResponse : Traq.Client.ApiResponse, IGetQallEndpointsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetQallEndpointsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetQallEndpointsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetQallEndpointsApiResponse(ILogger<GetQallEndpointsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Traq.Model.QallEndpointResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Traq.Model.QallEndpointResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Traq.Model.QallEndpointResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetRoomMetadata(ref Guid roomId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="roomId"></param>
        private void AfterGetRoomMetadataDefaultImplementation(IGetRoomMetadataApiResponse apiResponseLocalVar, Guid roomId)
        {
            bool suppressDefaultLog = false;
            AfterGetRoomMetadata(ref suppressDefaultLog, apiResponseLocalVar, roomId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="roomId"></param>
        partial void AfterGetRoomMetadata(ref bool suppressDefaultLog, IGetRoomMetadataApiResponse apiResponseLocalVar, Guid roomId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="roomId"></param>
        private void OnErrorGetRoomMetadataDefaultImplementation(Exception exception, string pathFormat, string path, Guid roomId)
        {
            bool suppressDefaultLog = false;
            OnErrorGetRoomMetadata(ref suppressDefaultLog, exception, pathFormat, path, roomId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="roomId"></param>
        partial void OnErrorGetRoomMetadata(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Guid roomId);

        /// <summary>
        /// ルームのメタデータを取得 ルームのメタデータを取得します。 
        /// </summary>
        /// <param name="roomId">ルームUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetRoomMetadataApiResponse"/>&gt;</returns>
        public async Task<IGetRoomMetadataApiResponse?> GetRoomMetadataOrDefaultAsync(Guid roomId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetRoomMetadataAsync(roomId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// ルームのメタデータを取得 ルームのメタデータを取得します。 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomId">ルームUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetRoomMetadataApiResponse"/>&gt;</returns>
        public async Task<IGetRoomMetadataApiResponse> GetRoomMetadataAsync(Guid roomId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetRoomMetadata(ref roomId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/qall/rooms/{roomId}/metadata";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BroomId%7D", Uri.EscapeDataString(roomId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetRoomMetadataApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetRoomMetadataApiResponse>();

                        GetRoomMetadataApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/qall/rooms/{roomId}/metadata", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetRoomMetadataDefaultImplementation(apiResponseLocalVar, roomId);

                        Events.ExecuteOnGetRoomMetadata(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetRoomMetadataDefaultImplementation(e, "/qall/rooms/{roomId}/metadata", uriBuilderLocalVar.Path, roomId);
                Events.ExecuteOnErrorGetRoomMetadata(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetRoomMetadataApiResponse"/>
        /// </summary>
        public partial class GetRoomMetadataApiResponse : Traq.Client.ApiResponse, IGetRoomMetadataApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetRoomMetadataApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetRoomMetadataApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetRoomMetadataApiResponse(ILogger<GetRoomMetadataApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Traq.Model.QallMetadataResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Traq.Model.QallMetadataResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Traq.Model.QallMetadataResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetRoomsDefaultImplementation(IGetRoomsApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetRooms(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetRooms(ref bool suppressDefaultLog, IGetRoomsApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        private void OnErrorGetRoomsDefaultImplementation(Exception exception, string pathFormat, string path)
        {
            bool suppressDefaultLog = false;
            OnErrorGetRooms(ref suppressDefaultLog, exception, pathFormat, path);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        partial void OnErrorGetRooms(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path);

        /// <summary>
        /// ルームと参加者の一覧を取得 現在存在する(またはアクティブな)ルームと、そのルームに所属している参加者情報を取得します。 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetRoomsApiResponse"/>&gt;</returns>
        public async Task<IGetRoomsApiResponse?> GetRoomsOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetRoomsAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// ルームと参加者の一覧を取得 現在存在する(またはアクティブな)ルームと、そのルームに所属している参加者情報を取得します。 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetRoomsApiResponse"/>&gt;</returns>
        public async Task<IGetRoomsApiResponse> GetRoomsAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/qall/rooms";

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetRoomsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetRoomsApiResponse>();

                        GetRoomsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/qall/rooms", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetRoomsDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetRooms(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetRoomsDefaultImplementation(e, "/qall/rooms", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetRooms(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetRoomsApiResponse"/>
        /// </summary>
        public partial class GetRoomsApiResponse : Traq.Client.ApiResponse, IGetRoomsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetRoomsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetRoomsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetRoomsApiResponse(ILogger<GetRoomsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<QallRoomWithParticipants>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<QallRoomWithParticipants>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<QallRoomWithParticipants>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetSoundboardListDefaultImplementation(IGetSoundboardListApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetSoundboardList(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetSoundboardList(ref bool suppressDefaultLog, IGetSoundboardListApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        private void OnErrorGetSoundboardListDefaultImplementation(Exception exception, string pathFormat, string path)
        {
            bool suppressDefaultLog = false;
            OnErrorGetSoundboardList(ref suppressDefaultLog, exception, pathFormat, path);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        partial void OnErrorGetSoundboardList(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path);

        /// <summary>
        /// サウンドボード用の音声一覧を取得 DBに保存されたサウンドボード情報を取得します。   各アイテムには soundId, soundName, stampId が含まれます。 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSoundboardListApiResponse"/>&gt;</returns>
        public async Task<IGetSoundboardListApiResponse?> GetSoundboardListOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetSoundboardListAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// サウンドボード用の音声一覧を取得 DBに保存されたサウンドボード情報を取得します。   各アイテムには soundId, soundName, stampId が含まれます。 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSoundboardListApiResponse"/>&gt;</returns>
        public async Task<IGetSoundboardListApiResponse> GetSoundboardListAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/qall/soundboard";

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetSoundboardListApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetSoundboardListApiResponse>();

                        GetSoundboardListApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/qall/soundboard", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetSoundboardListDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetSoundboardList(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetSoundboardListDefaultImplementation(e, "/qall/soundboard", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetSoundboardList(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetSoundboardListApiResponse"/>
        /// </summary>
        public partial class GetSoundboardListApiResponse : Traq.Client.ApiResponse, IGetSoundboardListApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetSoundboardListApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetSoundboardListApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetSoundboardListApiResponse(ILogger<GetSoundboardListApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<SoundboardItem>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<SoundboardItem>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<SoundboardItem>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatLiveKitWebhook(ref Object body);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="body"></param>
        /// <returns></returns>
        private void ValidateLiveKitWebhook(Object body)
        {
            if (body == null)
                throw new ArgumentNullException(nameof(body));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="body"></param>
        private void AfterLiveKitWebhookDefaultImplementation(ILiveKitWebhookApiResponse apiResponseLocalVar, Object body)
        {
            bool suppressDefaultLog = false;
            AfterLiveKitWebhook(ref suppressDefaultLog, apiResponseLocalVar, body);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="body"></param>
        partial void AfterLiveKitWebhook(ref bool suppressDefaultLog, ILiveKitWebhookApiResponse apiResponseLocalVar, Object body);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="body"></param>
        private void OnErrorLiveKitWebhookDefaultImplementation(Exception exception, string pathFormat, string path, Object body)
        {
            bool suppressDefaultLog = false;
            OnErrorLiveKitWebhook(ref suppressDefaultLog, exception, pathFormat, path, body);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="body"></param>
        partial void OnErrorLiveKitWebhook(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Object body);

        /// <summary>
        /// LiveKit Webhook受信 LiveKit側で設定したWebhookから呼び出されるエンドポイントです。   参加者の入室・退出などのイベントを受け取り、サーバ内で処理を行います。 
        /// </summary>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILiveKitWebhookApiResponse"/>&gt;</returns>
        public async Task<ILiveKitWebhookApiResponse?> LiveKitWebhookOrDefaultAsync(Object body, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await LiveKitWebhookAsync(body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// LiveKit Webhook受信 LiveKit側で設定したWebhookから呼び出されるエンドポイントです。   参加者の入室・退出などのイベントを受け取り、サーバ内で処理を行います。 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILiveKitWebhookApiResponse"/>&gt;</returns>
        public async Task<ILiveKitWebhookApiResponse> LiveKitWebhookAsync(Object body, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateLiveKitWebhook(body);

                FormatLiveKitWebhook(ref body);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/qall/webhook";

                    httpRequestMessageLocalVar.Content = (body as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(body, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/webhook+json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<LiveKitWebhookApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<LiveKitWebhookApiResponse>();

                        LiveKitWebhookApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/qall/webhook", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterLiveKitWebhookDefaultImplementation(apiResponseLocalVar, body);

                        Events.ExecuteOnLiveKitWebhook(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorLiveKitWebhookDefaultImplementation(e, "/qall/webhook", uriBuilderLocalVar.Path, body);
                Events.ExecuteOnErrorLiveKitWebhook(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="LiveKitWebhookApiResponse"/>
        /// </summary>
        public partial class LiveKitWebhookApiResponse : Traq.Client.ApiResponse, ILiveKitWebhookApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<LiveKitWebhookApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="LiveKitWebhookApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public LiveKitWebhookApiResponse(ILogger<LiveKitWebhookApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPostSoundboard(ref System.IO.Stream audio, ref string soundName, ref Option<string> stampId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="audio"></param>
        /// <param name="soundName"></param>
        /// <param name="stampId"></param>
        /// <returns></returns>
        private void ValidatePostSoundboard(System.IO.Stream audio, string soundName, Option<string> stampId)
        {
            if (audio == null)
                throw new ArgumentNullException(nameof(audio));

            if (soundName == null)
                throw new ArgumentNullException(nameof(soundName));

            if (stampId.IsSet && stampId.Value == null)
                throw new ArgumentNullException(nameof(stampId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="audio"></param>
        /// <param name="soundName"></param>
        /// <param name="stampId"></param>
        private void AfterPostSoundboardDefaultImplementation(IPostSoundboardApiResponse apiResponseLocalVar, System.IO.Stream audio, string soundName, Option<string> stampId)
        {
            bool suppressDefaultLog = false;
            AfterPostSoundboard(ref suppressDefaultLog, apiResponseLocalVar, audio, soundName, stampId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="audio"></param>
        /// <param name="soundName"></param>
        /// <param name="stampId"></param>
        partial void AfterPostSoundboard(ref bool suppressDefaultLog, IPostSoundboardApiResponse apiResponseLocalVar, System.IO.Stream audio, string soundName, Option<string> stampId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="audio"></param>
        /// <param name="soundName"></param>
        /// <param name="stampId"></param>
        private void OnErrorPostSoundboardDefaultImplementation(Exception exception, string pathFormat, string path, System.IO.Stream audio, string soundName, Option<string> stampId)
        {
            bool suppressDefaultLog = false;
            OnErrorPostSoundboard(ref suppressDefaultLog, exception, pathFormat, path, audio, soundName, stampId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="audio"></param>
        /// <param name="soundName"></param>
        /// <param name="stampId"></param>
        partial void OnErrorPostSoundboard(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, System.IO.Stream audio, string soundName, Option<string> stampId);

        /// <summary>
        /// サウンドボード用の短い音声ファイルをアップロード 15秒程度の短い音声ファイルを multipart/form-data で送信し、S3(互換ストレージ)にアップロードします。   クライアントは「soundName」というフィールドを送信し、それをDBに保存して関連付けを行います。   また、サーバ側で soundId を自動生成し、S3のファイル名に使用します。 
        /// </summary>
        /// <param name="audio">アップロードする音声ファイル(20秒以内)</param>
        /// <param name="soundName">ユーザが自由につけるサウンド名</param>
        /// <param name="stampId">アイコンスタンプID (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostSoundboardApiResponse"/>&gt;</returns>
        public async Task<IPostSoundboardApiResponse?> PostSoundboardOrDefaultAsync(System.IO.Stream audio, string soundName, Option<string> stampId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PostSoundboardAsync(audio, soundName, stampId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// サウンドボード用の短い音声ファイルをアップロード 15秒程度の短い音声ファイルを multipart/form-data で送信し、S3(互換ストレージ)にアップロードします。   クライアントは「soundName」というフィールドを送信し、それをDBに保存して関連付けを行います。   また、サーバ側で soundId を自動生成し、S3のファイル名に使用します。 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="audio">アップロードする音声ファイル(20秒以内)</param>
        /// <param name="soundName">ユーザが自由につけるサウンド名</param>
        /// <param name="stampId">アイコンスタンプID (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostSoundboardApiResponse"/>&gt;</returns>
        public async Task<IPostSoundboardApiResponse> PostSoundboardAsync(System.IO.Stream audio, string soundName, Option<string> stampId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePostSoundboard(audio, soundName, stampId);

                FormatPostSoundboard(ref audio, ref soundName, ref stampId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/qall/soundboard";

                    MultipartContent multipartContentLocalVar = new MultipartContent();

                    httpRequestMessageLocalVar.Content = multipartContentLocalVar;

                    List<KeyValuePair<string?, string?>> formParameterLocalVars = new List<KeyValuePair<string?, string?>>();

                    multipartContentLocalVar.Add(new FormUrlEncodedContent(formParameterLocalVars));                    multipartContentLocalVar.Add(new StreamContent(audio));

                    formParameterLocalVars.Add(new KeyValuePair<string?, string?>("soundName", ClientUtils.ParameterToString(soundName)));

                    if (stampId.IsSet)
                        formParameterLocalVars.Add(new KeyValuePair<string?, string?>("stampId", ClientUtils.ParameterToString(stampId.Value)));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "multipart/form-data"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PostSoundboardApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PostSoundboardApiResponse>();

                        PostSoundboardApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/qall/soundboard", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPostSoundboardDefaultImplementation(apiResponseLocalVar, audio, soundName, stampId);

                        Events.ExecuteOnPostSoundboard(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPostSoundboardDefaultImplementation(e, "/qall/soundboard", uriBuilderLocalVar.Path, audio, soundName, stampId);
                Events.ExecuteOnErrorPostSoundboard(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PostSoundboardApiResponse"/>
        /// </summary>
        public partial class PostSoundboardApiResponse : Traq.Client.ApiResponse, IPostSoundboardApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PostSoundboardApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PostSoundboardApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PostSoundboardApiResponse(ILogger<PostSoundboardApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Traq.Model.SoundboardUploadResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Traq.Model.SoundboardUploadResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Traq.Model.SoundboardUploadResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPostSoundboardPlay(SoundboardPlayRequest soundboardPlayRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="soundboardPlayRequest"></param>
        /// <returns></returns>
        private void ValidatePostSoundboardPlay(SoundboardPlayRequest soundboardPlayRequest)
        {
            if (soundboardPlayRequest == null)
                throw new ArgumentNullException(nameof(soundboardPlayRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="soundboardPlayRequest"></param>
        private void AfterPostSoundboardPlayDefaultImplementation(IPostSoundboardPlayApiResponse apiResponseLocalVar, SoundboardPlayRequest soundboardPlayRequest)
        {
            bool suppressDefaultLog = false;
            AfterPostSoundboardPlay(ref suppressDefaultLog, apiResponseLocalVar, soundboardPlayRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="soundboardPlayRequest"></param>
        partial void AfterPostSoundboardPlay(ref bool suppressDefaultLog, IPostSoundboardPlayApiResponse apiResponseLocalVar, SoundboardPlayRequest soundboardPlayRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="soundboardPlayRequest"></param>
        private void OnErrorPostSoundboardPlayDefaultImplementation(Exception exception, string pathFormat, string path, SoundboardPlayRequest soundboardPlayRequest)
        {
            bool suppressDefaultLog = false;
            OnErrorPostSoundboardPlay(ref suppressDefaultLog, exception, pathFormat, path, soundboardPlayRequest);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="soundboardPlayRequest"></param>
        partial void OnErrorPostSoundboardPlay(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, SoundboardPlayRequest soundboardPlayRequest);

        /// <summary>
        /// アップロード済み音声を LiveKit ルームで再生 S3上にある音声ファイルの署名付きURLを生成し、   Ingressを介して指定ルームに音声を流します。     該当ルームに参加しているユーザであれば再生可能とします。 
        /// </summary>
        /// <param name="soundboardPlayRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostSoundboardPlayApiResponse"/>&gt;</returns>
        public async Task<IPostSoundboardPlayApiResponse?> PostSoundboardPlayOrDefaultAsync(SoundboardPlayRequest soundboardPlayRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PostSoundboardPlayAsync(soundboardPlayRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// アップロード済み音声を LiveKit ルームで再生 S3上にある音声ファイルの署名付きURLを生成し、   Ingressを介して指定ルームに音声を流します。     該当ルームに参加しているユーザであれば再生可能とします。 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="soundboardPlayRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostSoundboardPlayApiResponse"/>&gt;</returns>
        public async Task<IPostSoundboardPlayApiResponse> PostSoundboardPlayAsync(SoundboardPlayRequest soundboardPlayRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePostSoundboardPlay(soundboardPlayRequest);

                FormatPostSoundboardPlay(soundboardPlayRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/qall/soundboard/play";

                    httpRequestMessageLocalVar.Content = (soundboardPlayRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(soundboardPlayRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PostSoundboardPlayApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PostSoundboardPlayApiResponse>();

                        PostSoundboardPlayApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/qall/soundboard/play", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPostSoundboardPlayDefaultImplementation(apiResponseLocalVar, soundboardPlayRequest);

                        Events.ExecuteOnPostSoundboardPlay(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPostSoundboardPlayDefaultImplementation(e, "/qall/soundboard/play", uriBuilderLocalVar.Path, soundboardPlayRequest);
                Events.ExecuteOnErrorPostSoundboardPlay(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PostSoundboardPlayApiResponse"/>
        /// </summary>
        public partial class PostSoundboardPlayApiResponse : Traq.Client.ApiResponse, IPostSoundboardPlayApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PostSoundboardPlayApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PostSoundboardPlayApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PostSoundboardPlayApiResponse(ILogger<PostSoundboardPlayApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Traq.Model.SoundboardPlayResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Traq.Model.SoundboardPlayResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Traq.Model.SoundboardPlayResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUpdateRoomMetadata(ref Guid roomId, QallMetadataRequest qallMetadataRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="qallMetadataRequest"></param>
        /// <returns></returns>
        private void ValidateUpdateRoomMetadata(QallMetadataRequest qallMetadataRequest)
        {
            if (qallMetadataRequest == null)
                throw new ArgumentNullException(nameof(qallMetadataRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="roomId"></param>
        /// <param name="qallMetadataRequest"></param>
        private void AfterUpdateRoomMetadataDefaultImplementation(IUpdateRoomMetadataApiResponse apiResponseLocalVar, Guid roomId, QallMetadataRequest qallMetadataRequest)
        {
            bool suppressDefaultLog = false;
            AfterUpdateRoomMetadata(ref suppressDefaultLog, apiResponseLocalVar, roomId, qallMetadataRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="roomId"></param>
        /// <param name="qallMetadataRequest"></param>
        partial void AfterUpdateRoomMetadata(ref bool suppressDefaultLog, IUpdateRoomMetadataApiResponse apiResponseLocalVar, Guid roomId, QallMetadataRequest qallMetadataRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="roomId"></param>
        /// <param name="qallMetadataRequest"></param>
        private void OnErrorUpdateRoomMetadataDefaultImplementation(Exception exception, string pathFormat, string path, Guid roomId, QallMetadataRequest qallMetadataRequest)
        {
            bool suppressDefaultLog = false;
            OnErrorUpdateRoomMetadata(ref suppressDefaultLog, exception, pathFormat, path, roomId, qallMetadataRequest);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="roomId"></param>
        /// <param name="qallMetadataRequest"></param>
        partial void OnErrorUpdateRoomMetadata(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Guid roomId, QallMetadataRequest qallMetadataRequest);

        /// <summary>
        /// ルームのメタデータを更新 ルームのメタデータを更新します。 
        /// </summary>
        /// <param name="roomId">ルームUUID</param>
        /// <param name="qallMetadataRequest">ルームのメタデータ</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateRoomMetadataApiResponse"/>&gt;</returns>
        public async Task<IUpdateRoomMetadataApiResponse?> UpdateRoomMetadataOrDefaultAsync(Guid roomId, QallMetadataRequest qallMetadataRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UpdateRoomMetadataAsync(roomId, qallMetadataRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// ルームのメタデータを更新 ルームのメタデータを更新します。 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomId">ルームUUID</param>
        /// <param name="qallMetadataRequest">ルームのメタデータ</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUpdateRoomMetadataApiResponse"/>&gt;</returns>
        public async Task<IUpdateRoomMetadataApiResponse> UpdateRoomMetadataAsync(Guid roomId, QallMetadataRequest qallMetadataRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUpdateRoomMetadata(qallMetadataRequest);

                FormatUpdateRoomMetadata(ref roomId, qallMetadataRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/qall/rooms/{roomId}/metadata";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BroomId%7D", Uri.EscapeDataString(roomId.ToString()));

                    httpRequestMessageLocalVar.Content = (qallMetadataRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(qallMetadataRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Patch;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UpdateRoomMetadataApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UpdateRoomMetadataApiResponse>();

                        UpdateRoomMetadataApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/qall/rooms/{roomId}/metadata", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUpdateRoomMetadataDefaultImplementation(apiResponseLocalVar, roomId, qallMetadataRequest);

                        Events.ExecuteOnUpdateRoomMetadata(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUpdateRoomMetadataDefaultImplementation(e, "/qall/rooms/{roomId}/metadata", uriBuilderLocalVar.Path, roomId, qallMetadataRequest);
                Events.ExecuteOnErrorUpdateRoomMetadata(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UpdateRoomMetadataApiResponse"/>
        /// </summary>
        public partial class UpdateRoomMetadataApiResponse : Traq.Client.ApiResponse, IUpdateRoomMetadataApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UpdateRoomMetadataApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UpdateRoomMetadataApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UpdateRoomMetadataApiResponse(ILogger<UpdateRoomMetadataApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
