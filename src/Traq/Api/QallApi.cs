/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using Traq.Client;
using Traq.Model;

namespace Traq.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IQallApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// ルームでの発言権限を変更
        /// </summary>
        /// <remarks>
        /// ルーム内の参加者の発言権限を変更します。 
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomId">ルームUUID</param>
        /// <param name="qallParticipantRequest">発言権限を変更する参加者の情報</param>
        /// <returns>QallParticipantResponse</returns>
        QallParticipantResponse ChangeParticipantRole(Guid roomId, List<QallParticipantRequest> qallParticipantRequest);

        /// <summary>
        /// ルームでの発言権限を変更
        /// </summary>
        /// <remarks>
        /// ルーム内の参加者の発言権限を変更します。 
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomId">ルームUUID</param>
        /// <param name="qallParticipantRequest">発言権限を変更する参加者の情報</param>
        /// <returns>ApiResponse of QallParticipantResponse</returns>
        ApiResponse<QallParticipantResponse> ChangeParticipantRoleWithHttpInfo(Guid roomId, List<QallParticipantRequest> qallParticipantRequest);
        /// <summary>
        /// LiveKitトークンを取得
        /// </summary>
        /// <remarks>
        /// 指定したルームに参加するためのLiveKitトークンを取得します。   
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomId">ルームUUID (optional)</param>
        /// <param name="isWebinar">ウェビナールームかどうか(デフォルト false) (optional)</param>
        /// <returns>QallTokenResponse</returns>
        QallTokenResponse GetLiveKitToken(Guid? roomId = default(Guid?), bool? isWebinar = default(bool?));

        /// <summary>
        /// LiveKitトークンを取得
        /// </summary>
        /// <remarks>
        /// 指定したルームに参加するためのLiveKitトークンを取得します。   
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomId">ルームUUID (optional)</param>
        /// <param name="isWebinar">ウェビナールームかどうか(デフォルト false) (optional)</param>
        /// <returns>ApiResponse of QallTokenResponse</returns>
        ApiResponse<QallTokenResponse> GetLiveKitTokenWithHttpInfo(Guid? roomId = default(Guid?), bool? isWebinar = default(bool?));
        /// <summary>
        /// LiveKitエンドポイントを取得
        /// </summary>
        /// <remarks>
        /// 接続可能なLiveKitエンドポイントを取得します。 
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>QallEndpointResponse</returns>
        QallEndpointResponse GetQallEndpoints();

        /// <summary>
        /// LiveKitエンドポイントを取得
        /// </summary>
        /// <remarks>
        /// 接続可能なLiveKitエンドポイントを取得します。 
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of QallEndpointResponse</returns>
        ApiResponse<QallEndpointResponse> GetQallEndpointsWithHttpInfo();
        /// <summary>
        /// ルームのメタデータを取得
        /// </summary>
        /// <remarks>
        /// ルームのメタデータを取得します。 
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomId">ルームUUID</param>
        /// <returns>QallMetadataResponse</returns>
        QallMetadataResponse GetRoomMetadata(Guid roomId);

        /// <summary>
        /// ルームのメタデータを取得
        /// </summary>
        /// <remarks>
        /// ルームのメタデータを取得します。 
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomId">ルームUUID</param>
        /// <returns>ApiResponse of QallMetadataResponse</returns>
        ApiResponse<QallMetadataResponse> GetRoomMetadataWithHttpInfo(Guid roomId);
        /// <summary>
        /// ルームと参加者の一覧を取得
        /// </summary>
        /// <remarks>
        /// 現在存在する(またはアクティブな)ルームと、そのルームに所属している参加者情報を取得します。 
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;QallRoomWithParticipants&gt;</returns>
        List<QallRoomWithParticipants> GetRooms();

        /// <summary>
        /// ルームと参加者の一覧を取得
        /// </summary>
        /// <remarks>
        /// 現在存在する(またはアクティブな)ルームと、そのルームに所属している参加者情報を取得します。 
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;QallRoomWithParticipants&gt;</returns>
        ApiResponse<List<QallRoomWithParticipants>> GetRoomsWithHttpInfo();
        /// <summary>
        /// サウンドボード用の音声一覧を取得
        /// </summary>
        /// <remarks>
        /// DBに保存されたサウンドボード情報を取得します。   各アイテムには soundId, soundName, stampId が含まれます。 
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;SoundboardItem&gt;</returns>
        List<SoundboardItem> GetSoundboardList();

        /// <summary>
        /// サウンドボード用の音声一覧を取得
        /// </summary>
        /// <remarks>
        /// DBに保存されたサウンドボード情報を取得します。   各アイテムには soundId, soundName, stampId が含まれます。 
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;SoundboardItem&gt;</returns>
        ApiResponse<List<SoundboardItem>> GetSoundboardListWithHttpInfo();
        /// <summary>
        /// LiveKit Webhook受信
        /// </summary>
        /// <remarks>
        /// LiveKit側で設定したWebhookから呼び出されるエンドポイントです。   参加者の入室・退出などのイベントを受け取り、サーバ内で処理を行います。 
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns></returns>
        void LiveKitWebhook(Object body);

        /// <summary>
        /// LiveKit Webhook受信
        /// </summary>
        /// <remarks>
        /// LiveKit側で設定したWebhookから呼び出されるエンドポイントです。   参加者の入室・退出などのイベントを受け取り、サーバ内で処理を行います。 
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LiveKitWebhookWithHttpInfo(Object body);
        /// <summary>
        /// サウンドボード用の短い音声ファイルをアップロード
        /// </summary>
        /// <remarks>
        /// 15秒程度の短い音声ファイルを multipart/form-data で送信し、S3(互換ストレージ)にアップロードします。   クライアントは「soundName」というフィールドを送信し、それをDBに保存して関連付けを行います。   また、サーバ側で soundId を自動生成し、S3のファイル名に使用します。 
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audio">アップロードする音声ファイル(20秒以内)</param>
        /// <param name="soundName">ユーザが自由につけるサウンド名</param>
        /// <param name="stampId">アイコンスタンプID (optional)</param>
        /// <returns>SoundboardUploadResponse</returns>
        SoundboardUploadResponse PostSoundboard(FileParameter audio, string soundName, string? stampId = default(string?));

        /// <summary>
        /// サウンドボード用の短い音声ファイルをアップロード
        /// </summary>
        /// <remarks>
        /// 15秒程度の短い音声ファイルを multipart/form-data で送信し、S3(互換ストレージ)にアップロードします。   クライアントは「soundName」というフィールドを送信し、それをDBに保存して関連付けを行います。   また、サーバ側で soundId を自動生成し、S3のファイル名に使用します。 
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audio">アップロードする音声ファイル(20秒以内)</param>
        /// <param name="soundName">ユーザが自由につけるサウンド名</param>
        /// <param name="stampId">アイコンスタンプID (optional)</param>
        /// <returns>ApiResponse of SoundboardUploadResponse</returns>
        ApiResponse<SoundboardUploadResponse> PostSoundboardWithHttpInfo(FileParameter audio, string soundName, string? stampId = default(string?));
        /// <summary>
        /// アップロード済み音声を LiveKit ルームで再生
        /// </summary>
        /// <remarks>
        /// S3上にある音声ファイルの署名付きURLを生成し、   Ingressを介して指定ルームに音声を流します。     該当ルームに参加しているユーザであれば再生可能とします。 
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="soundboardPlayRequest"></param>
        /// <returns>SoundboardPlayResponse</returns>
        SoundboardPlayResponse PostSoundboardPlay(SoundboardPlayRequest soundboardPlayRequest);

        /// <summary>
        /// アップロード済み音声を LiveKit ルームで再生
        /// </summary>
        /// <remarks>
        /// S3上にある音声ファイルの署名付きURLを生成し、   Ingressを介して指定ルームに音声を流します。     該当ルームに参加しているユーザであれば再生可能とします。 
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="soundboardPlayRequest"></param>
        /// <returns>ApiResponse of SoundboardPlayResponse</returns>
        ApiResponse<SoundboardPlayResponse> PostSoundboardPlayWithHttpInfo(SoundboardPlayRequest soundboardPlayRequest);
        /// <summary>
        /// ルームのメタデータを更新
        /// </summary>
        /// <remarks>
        /// ルームのメタデータを更新します。 
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomId">ルームUUID</param>
        /// <param name="qallMetadataRequest">ルームのメタデータ</param>
        /// <returns></returns>
        void UpdateRoomMetadata(Guid roomId, QallMetadataRequest qallMetadataRequest);

        /// <summary>
        /// ルームのメタデータを更新
        /// </summary>
        /// <remarks>
        /// ルームのメタデータを更新します。 
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomId">ルームUUID</param>
        /// <param name="qallMetadataRequest">ルームのメタデータ</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateRoomMetadataWithHttpInfo(Guid roomId, QallMetadataRequest qallMetadataRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IQallApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// ルームでの発言権限を変更
        /// </summary>
        /// <remarks>
        /// ルーム内の参加者の発言権限を変更します。 
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomId">ルームUUID</param>
        /// <param name="qallParticipantRequest">発言権限を変更する参加者の情報</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QallParticipantResponse</returns>
        System.Threading.Tasks.Task<QallParticipantResponse> ChangeParticipantRoleAsync(Guid roomId, List<QallParticipantRequest> qallParticipantRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// ルームでの発言権限を変更
        /// </summary>
        /// <remarks>
        /// ルーム内の参加者の発言権限を変更します。 
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomId">ルームUUID</param>
        /// <param name="qallParticipantRequest">発言権限を変更する参加者の情報</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QallParticipantResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<QallParticipantResponse>> ChangeParticipantRoleWithHttpInfoAsync(Guid roomId, List<QallParticipantRequest> qallParticipantRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// LiveKitトークンを取得
        /// </summary>
        /// <remarks>
        /// 指定したルームに参加するためのLiveKitトークンを取得します。   
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomId">ルームUUID (optional)</param>
        /// <param name="isWebinar">ウェビナールームかどうか(デフォルト false) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QallTokenResponse</returns>
        System.Threading.Tasks.Task<QallTokenResponse> GetLiveKitTokenAsync(Guid? roomId = default(Guid?), bool? isWebinar = default(bool?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// LiveKitトークンを取得
        /// </summary>
        /// <remarks>
        /// 指定したルームに参加するためのLiveKitトークンを取得します。   
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomId">ルームUUID (optional)</param>
        /// <param name="isWebinar">ウェビナールームかどうか(デフォルト false) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QallTokenResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<QallTokenResponse>> GetLiveKitTokenWithHttpInfoAsync(Guid? roomId = default(Guid?), bool? isWebinar = default(bool?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// LiveKitエンドポイントを取得
        /// </summary>
        /// <remarks>
        /// 接続可能なLiveKitエンドポイントを取得します。 
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QallEndpointResponse</returns>
        System.Threading.Tasks.Task<QallEndpointResponse> GetQallEndpointsAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// LiveKitエンドポイントを取得
        /// </summary>
        /// <remarks>
        /// 接続可能なLiveKitエンドポイントを取得します。 
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QallEndpointResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<QallEndpointResponse>> GetQallEndpointsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// ルームのメタデータを取得
        /// </summary>
        /// <remarks>
        /// ルームのメタデータを取得します。 
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomId">ルームUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QallMetadataResponse</returns>
        System.Threading.Tasks.Task<QallMetadataResponse> GetRoomMetadataAsync(Guid roomId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// ルームのメタデータを取得
        /// </summary>
        /// <remarks>
        /// ルームのメタデータを取得します。 
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomId">ルームUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QallMetadataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<QallMetadataResponse>> GetRoomMetadataWithHttpInfoAsync(Guid roomId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// ルームと参加者の一覧を取得
        /// </summary>
        /// <remarks>
        /// 現在存在する(またはアクティブな)ルームと、そのルームに所属している参加者情報を取得します。 
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;QallRoomWithParticipants&gt;</returns>
        System.Threading.Tasks.Task<List<QallRoomWithParticipants>> GetRoomsAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// ルームと参加者の一覧を取得
        /// </summary>
        /// <remarks>
        /// 現在存在する(またはアクティブな)ルームと、そのルームに所属している参加者情報を取得します。 
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;QallRoomWithParticipants&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<QallRoomWithParticipants>>> GetRoomsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// サウンドボード用の音声一覧を取得
        /// </summary>
        /// <remarks>
        /// DBに保存されたサウンドボード情報を取得します。   各アイテムには soundId, soundName, stampId が含まれます。 
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SoundboardItem&gt;</returns>
        System.Threading.Tasks.Task<List<SoundboardItem>> GetSoundboardListAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// サウンドボード用の音声一覧を取得
        /// </summary>
        /// <remarks>
        /// DBに保存されたサウンドボード情報を取得します。   各アイテムには soundId, soundName, stampId が含まれます。 
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SoundboardItem&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SoundboardItem>>> GetSoundboardListWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// LiveKit Webhook受信
        /// </summary>
        /// <remarks>
        /// LiveKit側で設定したWebhookから呼び出されるエンドポイントです。   参加者の入室・退出などのイベントを受け取り、サーバ内で処理を行います。 
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LiveKitWebhookAsync(Object body, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// LiveKit Webhook受信
        /// </summary>
        /// <remarks>
        /// LiveKit側で設定したWebhookから呼び出されるエンドポイントです。   参加者の入室・退出などのイベントを受け取り、サーバ内で処理を行います。 
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LiveKitWebhookWithHttpInfoAsync(Object body, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// サウンドボード用の短い音声ファイルをアップロード
        /// </summary>
        /// <remarks>
        /// 15秒程度の短い音声ファイルを multipart/form-data で送信し、S3(互換ストレージ)にアップロードします。   クライアントは「soundName」というフィールドを送信し、それをDBに保存して関連付けを行います。   また、サーバ側で soundId を自動生成し、S3のファイル名に使用します。 
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audio">アップロードする音声ファイル(20秒以内)</param>
        /// <param name="soundName">ユーザが自由につけるサウンド名</param>
        /// <param name="stampId">アイコンスタンプID (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SoundboardUploadResponse</returns>
        System.Threading.Tasks.Task<SoundboardUploadResponse> PostSoundboardAsync(FileParameter audio, string soundName, string? stampId = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// サウンドボード用の短い音声ファイルをアップロード
        /// </summary>
        /// <remarks>
        /// 15秒程度の短い音声ファイルを multipart/form-data で送信し、S3(互換ストレージ)にアップロードします。   クライアントは「soundName」というフィールドを送信し、それをDBに保存して関連付けを行います。   また、サーバ側で soundId を自動生成し、S3のファイル名に使用します。 
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audio">アップロードする音声ファイル(20秒以内)</param>
        /// <param name="soundName">ユーザが自由につけるサウンド名</param>
        /// <param name="stampId">アイコンスタンプID (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SoundboardUploadResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SoundboardUploadResponse>> PostSoundboardWithHttpInfoAsync(FileParameter audio, string soundName, string? stampId = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// アップロード済み音声を LiveKit ルームで再生
        /// </summary>
        /// <remarks>
        /// S3上にある音声ファイルの署名付きURLを生成し、   Ingressを介して指定ルームに音声を流します。     該当ルームに参加しているユーザであれば再生可能とします。 
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="soundboardPlayRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SoundboardPlayResponse</returns>
        System.Threading.Tasks.Task<SoundboardPlayResponse> PostSoundboardPlayAsync(SoundboardPlayRequest soundboardPlayRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// アップロード済み音声を LiveKit ルームで再生
        /// </summary>
        /// <remarks>
        /// S3上にある音声ファイルの署名付きURLを生成し、   Ingressを介して指定ルームに音声を流します。     該当ルームに参加しているユーザであれば再生可能とします。 
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="soundboardPlayRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SoundboardPlayResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SoundboardPlayResponse>> PostSoundboardPlayWithHttpInfoAsync(SoundboardPlayRequest soundboardPlayRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// ルームのメタデータを更新
        /// </summary>
        /// <remarks>
        /// ルームのメタデータを更新します。 
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomId">ルームUUID</param>
        /// <param name="qallMetadataRequest">ルームのメタデータ</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateRoomMetadataAsync(Guid roomId, QallMetadataRequest qallMetadataRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// ルームのメタデータを更新
        /// </summary>
        /// <remarks>
        /// ルームのメタデータを更新します。 
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomId">ルームUUID</param>
        /// <param name="qallMetadataRequest">ルームのメタデータ</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRoomMetadataWithHttpInfoAsync(Guid roomId, QallMetadataRequest qallMetadataRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IQallApi : IQallApiSync, IQallApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class QallApi : IDisposable, IQallApi
    {
        private Traq.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="QallApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public QallApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="QallApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public QallApi(string basePath)
        {
            this.Configuration = Traq.Client.Configuration.MergeConfigurations(
                Traq.Client.GlobalConfiguration.Instance,
                new Traq.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Traq.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Traq.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="QallApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public QallApi(Traq.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Traq.Client.Configuration.MergeConfigurations(
                Traq.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Traq.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Traq.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="QallApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public QallApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="QallApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public QallApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Traq.Client.Configuration.MergeConfigurations(
                Traq.Client.GlobalConfiguration.Instance,
                new Traq.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Traq.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Traq.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="QallApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public QallApi(HttpClient client, Traq.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Traq.Client.Configuration.MergeConfigurations(
                Traq.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Traq.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Traq.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="QallApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public QallApi(Traq.Client.ISynchronousClient client, Traq.Client.IAsynchronousClient asyncClient, Traq.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Traq.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Traq.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Traq.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Traq.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Traq.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Traq.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// ルームでの発言権限を変更 ルーム内の参加者の発言権限を変更します。 
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomId">ルームUUID</param>
        /// <param name="qallParticipantRequest">発言権限を変更する参加者の情報</param>
        /// <returns>QallParticipantResponse</returns>
        public QallParticipantResponse ChangeParticipantRole(Guid roomId, List<QallParticipantRequest> qallParticipantRequest)
        {
            Traq.Client.ApiResponse<QallParticipantResponse> localVarResponse = ChangeParticipantRoleWithHttpInfo(roomId, qallParticipantRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ルームでの発言権限を変更 ルーム内の参加者の発言権限を変更します。 
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomId">ルームUUID</param>
        /// <param name="qallParticipantRequest">発言権限を変更する参加者の情報</param>
        /// <returns>ApiResponse of QallParticipantResponse</returns>
        public Traq.Client.ApiResponse<QallParticipantResponse> ChangeParticipantRoleWithHttpInfo(Guid roomId, List<QallParticipantRequest> qallParticipantRequest)
        {
            // verify the required parameter 'qallParticipantRequest' is set
            if (qallParticipantRequest == null)
                throw new Traq.Client.ApiException(400, "Missing required parameter 'qallParticipantRequest' when calling QallApi->ChangeParticipantRole");

            Traq.Client.RequestOptions localVarRequestOptions = new Traq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Traq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Traq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("roomId", Traq.Client.ClientUtils.ParameterToString(roomId)); // path parameter
            localVarRequestOptions.Data = qallParticipantRequest;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<QallParticipantResponse>("/qall/rooms/{roomId}/participants", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChangeParticipantRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ルームでの発言権限を変更 ルーム内の参加者の発言権限を変更します。 
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomId">ルームUUID</param>
        /// <param name="qallParticipantRequest">発言権限を変更する参加者の情報</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QallParticipantResponse</returns>
        public async System.Threading.Tasks.Task<QallParticipantResponse> ChangeParticipantRoleAsync(Guid roomId, List<QallParticipantRequest> qallParticipantRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Traq.Client.ApiResponse<QallParticipantResponse> localVarResponse = await ChangeParticipantRoleWithHttpInfoAsync(roomId, qallParticipantRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ルームでの発言権限を変更 ルーム内の参加者の発言権限を変更します。 
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomId">ルームUUID</param>
        /// <param name="qallParticipantRequest">発言権限を変更する参加者の情報</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QallParticipantResponse)</returns>
        public async System.Threading.Tasks.Task<Traq.Client.ApiResponse<QallParticipantResponse>> ChangeParticipantRoleWithHttpInfoAsync(Guid roomId, List<QallParticipantRequest> qallParticipantRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'qallParticipantRequest' is set
            if (qallParticipantRequest == null)
                throw new Traq.Client.ApiException(400, "Missing required parameter 'qallParticipantRequest' when calling QallApi->ChangeParticipantRole");


            Traq.Client.RequestOptions localVarRequestOptions = new Traq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Traq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Traq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("roomId", Traq.Client.ClientUtils.ParameterToString(roomId)); // path parameter
            localVarRequestOptions.Data = qallParticipantRequest;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<QallParticipantResponse>("/qall/rooms/{roomId}/participants", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ChangeParticipantRole", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// LiveKitトークンを取得 指定したルームに参加するためのLiveKitトークンを取得します。   
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomId">ルームUUID (optional)</param>
        /// <param name="isWebinar">ウェビナールームかどうか(デフォルト false) (optional)</param>
        /// <returns>QallTokenResponse</returns>
        public QallTokenResponse GetLiveKitToken(Guid? roomId = default(Guid?), bool? isWebinar = default(bool?))
        {
            Traq.Client.ApiResponse<QallTokenResponse> localVarResponse = GetLiveKitTokenWithHttpInfo(roomId, isWebinar);
            return localVarResponse.Data;
        }

        /// <summary>
        /// LiveKitトークンを取得 指定したルームに参加するためのLiveKitトークンを取得します。   
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomId">ルームUUID (optional)</param>
        /// <param name="isWebinar">ウェビナールームかどうか(デフォルト false) (optional)</param>
        /// <returns>ApiResponse of QallTokenResponse</returns>
        public Traq.Client.ApiResponse<QallTokenResponse> GetLiveKitTokenWithHttpInfo(Guid? roomId = default(Guid?), bool? isWebinar = default(bool?))
        {
            Traq.Client.RequestOptions localVarRequestOptions = new Traq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Traq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Traq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (roomId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Traq.Client.ClientUtils.ParameterToMultiMap("", "roomId", roomId));
            }
            if (isWebinar != null)
            {
                localVarRequestOptions.QueryParameters.Add(Traq.Client.ClientUtils.ParameterToMultiMap("", "isWebinar", isWebinar));
            }

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<QallTokenResponse>("/qall/token", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLiveKitToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// LiveKitトークンを取得 指定したルームに参加するためのLiveKitトークンを取得します。   
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomId">ルームUUID (optional)</param>
        /// <param name="isWebinar">ウェビナールームかどうか(デフォルト false) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QallTokenResponse</returns>
        public async System.Threading.Tasks.Task<QallTokenResponse> GetLiveKitTokenAsync(Guid? roomId = default(Guid?), bool? isWebinar = default(bool?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Traq.Client.ApiResponse<QallTokenResponse> localVarResponse = await GetLiveKitTokenWithHttpInfoAsync(roomId, isWebinar, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// LiveKitトークンを取得 指定したルームに参加するためのLiveKitトークンを取得します。   
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomId">ルームUUID (optional)</param>
        /// <param name="isWebinar">ウェビナールームかどうか(デフォルト false) (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QallTokenResponse)</returns>
        public async System.Threading.Tasks.Task<Traq.Client.ApiResponse<QallTokenResponse>> GetLiveKitTokenWithHttpInfoAsync(Guid? roomId = default(Guid?), bool? isWebinar = default(bool?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Traq.Client.RequestOptions localVarRequestOptions = new Traq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Traq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Traq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (roomId != null)
            {
                localVarRequestOptions.QueryParameters.Add(Traq.Client.ClientUtils.ParameterToMultiMap("", "roomId", roomId));
            }
            if (isWebinar != null)
            {
                localVarRequestOptions.QueryParameters.Add(Traq.Client.ClientUtils.ParameterToMultiMap("", "isWebinar", isWebinar));
            }

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<QallTokenResponse>("/qall/token", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetLiveKitToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// LiveKitエンドポイントを取得 接続可能なLiveKitエンドポイントを取得します。 
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>QallEndpointResponse</returns>
        public QallEndpointResponse GetQallEndpoints()
        {
            Traq.Client.ApiResponse<QallEndpointResponse> localVarResponse = GetQallEndpointsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// LiveKitエンドポイントを取得 接続可能なLiveKitエンドポイントを取得します。 
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of QallEndpointResponse</returns>
        public Traq.Client.ApiResponse<QallEndpointResponse> GetQallEndpointsWithHttpInfo()
        {
            Traq.Client.RequestOptions localVarRequestOptions = new Traq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Traq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Traq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<QallEndpointResponse>("/qall/endpoints", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetQallEndpoints", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// LiveKitエンドポイントを取得 接続可能なLiveKitエンドポイントを取得します。 
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QallEndpointResponse</returns>
        public async System.Threading.Tasks.Task<QallEndpointResponse> GetQallEndpointsAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Traq.Client.ApiResponse<QallEndpointResponse> localVarResponse = await GetQallEndpointsWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// LiveKitエンドポイントを取得 接続可能なLiveKitエンドポイントを取得します。 
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QallEndpointResponse)</returns>
        public async System.Threading.Tasks.Task<Traq.Client.ApiResponse<QallEndpointResponse>> GetQallEndpointsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Traq.Client.RequestOptions localVarRequestOptions = new Traq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Traq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Traq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<QallEndpointResponse>("/qall/endpoints", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetQallEndpoints", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ルームのメタデータを取得 ルームのメタデータを取得します。 
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomId">ルームUUID</param>
        /// <returns>QallMetadataResponse</returns>
        public QallMetadataResponse GetRoomMetadata(Guid roomId)
        {
            Traq.Client.ApiResponse<QallMetadataResponse> localVarResponse = GetRoomMetadataWithHttpInfo(roomId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ルームのメタデータを取得 ルームのメタデータを取得します。 
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomId">ルームUUID</param>
        /// <returns>ApiResponse of QallMetadataResponse</returns>
        public Traq.Client.ApiResponse<QallMetadataResponse> GetRoomMetadataWithHttpInfo(Guid roomId)
        {
            Traq.Client.RequestOptions localVarRequestOptions = new Traq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Traq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Traq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("roomId", Traq.Client.ClientUtils.ParameterToString(roomId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<QallMetadataResponse>("/qall/rooms/{roomId}/metadata", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRoomMetadata", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ルームのメタデータを取得 ルームのメタデータを取得します。 
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomId">ルームUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QallMetadataResponse</returns>
        public async System.Threading.Tasks.Task<QallMetadataResponse> GetRoomMetadataAsync(Guid roomId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Traq.Client.ApiResponse<QallMetadataResponse> localVarResponse = await GetRoomMetadataWithHttpInfoAsync(roomId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ルームのメタデータを取得 ルームのメタデータを取得します。 
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomId">ルームUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QallMetadataResponse)</returns>
        public async System.Threading.Tasks.Task<Traq.Client.ApiResponse<QallMetadataResponse>> GetRoomMetadataWithHttpInfoAsync(Guid roomId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Traq.Client.RequestOptions localVarRequestOptions = new Traq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Traq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Traq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("roomId", Traq.Client.ClientUtils.ParameterToString(roomId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<QallMetadataResponse>("/qall/rooms/{roomId}/metadata", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRoomMetadata", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ルームと参加者の一覧を取得 現在存在する(またはアクティブな)ルームと、そのルームに所属している参加者情報を取得します。 
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;QallRoomWithParticipants&gt;</returns>
        public List<QallRoomWithParticipants> GetRooms()
        {
            Traq.Client.ApiResponse<List<QallRoomWithParticipants>> localVarResponse = GetRoomsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// ルームと参加者の一覧を取得 現在存在する(またはアクティブな)ルームと、そのルームに所属している参加者情報を取得します。 
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;QallRoomWithParticipants&gt;</returns>
        public Traq.Client.ApiResponse<List<QallRoomWithParticipants>> GetRoomsWithHttpInfo()
        {
            Traq.Client.RequestOptions localVarRequestOptions = new Traq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Traq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Traq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<QallRoomWithParticipants>>("/qall/rooms", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRooms", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ルームと参加者の一覧を取得 現在存在する(またはアクティブな)ルームと、そのルームに所属している参加者情報を取得します。 
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;QallRoomWithParticipants&gt;</returns>
        public async System.Threading.Tasks.Task<List<QallRoomWithParticipants>> GetRoomsAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Traq.Client.ApiResponse<List<QallRoomWithParticipants>> localVarResponse = await GetRoomsWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// ルームと参加者の一覧を取得 現在存在する(またはアクティブな)ルームと、そのルームに所属している参加者情報を取得します。 
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;QallRoomWithParticipants&gt;)</returns>
        public async System.Threading.Tasks.Task<Traq.Client.ApiResponse<List<QallRoomWithParticipants>>> GetRoomsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Traq.Client.RequestOptions localVarRequestOptions = new Traq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Traq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Traq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<QallRoomWithParticipants>>("/qall/rooms", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRooms", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// サウンドボード用の音声一覧を取得 DBに保存されたサウンドボード情報を取得します。   各アイテムには soundId, soundName, stampId が含まれます。 
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;SoundboardItem&gt;</returns>
        public List<SoundboardItem> GetSoundboardList()
        {
            Traq.Client.ApiResponse<List<SoundboardItem>> localVarResponse = GetSoundboardListWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// サウンドボード用の音声一覧を取得 DBに保存されたサウンドボード情報を取得します。   各アイテムには soundId, soundName, stampId が含まれます。 
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;SoundboardItem&gt;</returns>
        public Traq.Client.ApiResponse<List<SoundboardItem>> GetSoundboardListWithHttpInfo()
        {
            Traq.Client.RequestOptions localVarRequestOptions = new Traq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Traq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Traq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<SoundboardItem>>("/qall/soundboard", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSoundboardList", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// サウンドボード用の音声一覧を取得 DBに保存されたサウンドボード情報を取得します。   各アイテムには soundId, soundName, stampId が含まれます。 
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;SoundboardItem&gt;</returns>
        public async System.Threading.Tasks.Task<List<SoundboardItem>> GetSoundboardListAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Traq.Client.ApiResponse<List<SoundboardItem>> localVarResponse = await GetSoundboardListWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// サウンドボード用の音声一覧を取得 DBに保存されたサウンドボード情報を取得します。   各アイテムには soundId, soundName, stampId が含まれます。 
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;SoundboardItem&gt;)</returns>
        public async System.Threading.Tasks.Task<Traq.Client.ApiResponse<List<SoundboardItem>>> GetSoundboardListWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Traq.Client.RequestOptions localVarRequestOptions = new Traq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Traq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Traq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<SoundboardItem>>("/qall/soundboard", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSoundboardList", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// LiveKit Webhook受信 LiveKit側で設定したWebhookから呼び出されるエンドポイントです。   参加者の入室・退出などのイベントを受け取り、サーバ内で処理を行います。 
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns></returns>
        public void LiveKitWebhook(Object body)
        {
            LiveKitWebhookWithHttpInfo(body);
        }

        /// <summary>
        /// LiveKit Webhook受信 LiveKit側で設定したWebhookから呼び出されるエンドポイントです。   参加者の入室・退出などのイベントを受け取り、サーバ内で処理を行います。 
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Traq.Client.ApiResponse<Object> LiveKitWebhookWithHttpInfo(Object body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Traq.Client.ApiException(400, "Missing required parameter 'body' when calling QallApi->LiveKitWebhook");

            Traq.Client.RequestOptions localVarRequestOptions = new Traq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/webhook+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Traq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Traq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/qall/webhook", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LiveKitWebhook", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// LiveKit Webhook受信 LiveKit側で設定したWebhookから呼び出されるエンドポイントです。   参加者の入室・退出などのイベントを受け取り、サーバ内で処理を行います。 
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LiveKitWebhookAsync(Object body, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await LiveKitWebhookWithHttpInfoAsync(body, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// LiveKit Webhook受信 LiveKit側で設定したWebhookから呼び出されるエンドポイントです。   参加者の入室・退出などのイベントを受け取り、サーバ内で処理を行います。 
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Traq.Client.ApiResponse<Object>> LiveKitWebhookWithHttpInfoAsync(Object body, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Traq.Client.ApiException(400, "Missing required parameter 'body' when calling QallApi->LiveKitWebhook");


            Traq.Client.RequestOptions localVarRequestOptions = new Traq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/webhook+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = Traq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Traq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = body;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/qall/webhook", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LiveKitWebhook", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// サウンドボード用の短い音声ファイルをアップロード 15秒程度の短い音声ファイルを multipart/form-data で送信し、S3(互換ストレージ)にアップロードします。   クライアントは「soundName」というフィールドを送信し、それをDBに保存して関連付けを行います。   また、サーバ側で soundId を自動生成し、S3のファイル名に使用します。 
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audio">アップロードする音声ファイル(20秒以内)</param>
        /// <param name="soundName">ユーザが自由につけるサウンド名</param>
        /// <param name="stampId">アイコンスタンプID (optional)</param>
        /// <returns>SoundboardUploadResponse</returns>
        public SoundboardUploadResponse PostSoundboard(FileParameter audio, string soundName, string? stampId = default(string?))
        {
            Traq.Client.ApiResponse<SoundboardUploadResponse> localVarResponse = PostSoundboardWithHttpInfo(audio, soundName, stampId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// サウンドボード用の短い音声ファイルをアップロード 15秒程度の短い音声ファイルを multipart/form-data で送信し、S3(互換ストレージ)にアップロードします。   クライアントは「soundName」というフィールドを送信し、それをDBに保存して関連付けを行います。   また、サーバ側で soundId を自動生成し、S3のファイル名に使用します。 
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audio">アップロードする音声ファイル(20秒以内)</param>
        /// <param name="soundName">ユーザが自由につけるサウンド名</param>
        /// <param name="stampId">アイコンスタンプID (optional)</param>
        /// <returns>ApiResponse of SoundboardUploadResponse</returns>
        public Traq.Client.ApiResponse<SoundboardUploadResponse> PostSoundboardWithHttpInfo(FileParameter audio, string soundName, string? stampId = default(string?))
        {
            // verify the required parameter 'audio' is set
            if (audio == null)
                throw new Traq.Client.ApiException(400, "Missing required parameter 'audio' when calling QallApi->PostSoundboard");

            // verify the required parameter 'soundName' is set
            if (soundName == null)
                throw new Traq.Client.ApiException(400, "Missing required parameter 'soundName' when calling QallApi->PostSoundboard");

            Traq.Client.RequestOptions localVarRequestOptions = new Traq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Traq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Traq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.FileParameters.Add("audio", audio);
            localVarRequestOptions.FormParameters.Add("soundName", Traq.Client.ClientUtils.ParameterToString(soundName)); // form parameter
            if (stampId != null)
            {
                localVarRequestOptions.FormParameters.Add("stampId", Traq.Client.ClientUtils.ParameterToString(stampId)); // form parameter
            }

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SoundboardUploadResponse>("/qall/soundboard", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostSoundboard", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// サウンドボード用の短い音声ファイルをアップロード 15秒程度の短い音声ファイルを multipart/form-data で送信し、S3(互換ストレージ)にアップロードします。   クライアントは「soundName」というフィールドを送信し、それをDBに保存して関連付けを行います。   また、サーバ側で soundId を自動生成し、S3のファイル名に使用します。 
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audio">アップロードする音声ファイル(20秒以内)</param>
        /// <param name="soundName">ユーザが自由につけるサウンド名</param>
        /// <param name="stampId">アイコンスタンプID (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SoundboardUploadResponse</returns>
        public async System.Threading.Tasks.Task<SoundboardUploadResponse> PostSoundboardAsync(FileParameter audio, string soundName, string? stampId = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Traq.Client.ApiResponse<SoundboardUploadResponse> localVarResponse = await PostSoundboardWithHttpInfoAsync(audio, soundName, stampId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// サウンドボード用の短い音声ファイルをアップロード 15秒程度の短い音声ファイルを multipart/form-data で送信し、S3(互換ストレージ)にアップロードします。   クライアントは「soundName」というフィールドを送信し、それをDBに保存して関連付けを行います。   また、サーバ側で soundId を自動生成し、S3のファイル名に使用します。 
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="audio">アップロードする音声ファイル(20秒以内)</param>
        /// <param name="soundName">ユーザが自由につけるサウンド名</param>
        /// <param name="stampId">アイコンスタンプID (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SoundboardUploadResponse)</returns>
        public async System.Threading.Tasks.Task<Traq.Client.ApiResponse<SoundboardUploadResponse>> PostSoundboardWithHttpInfoAsync(FileParameter audio, string soundName, string? stampId = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'audio' is set
            if (audio == null)
                throw new Traq.Client.ApiException(400, "Missing required parameter 'audio' when calling QallApi->PostSoundboard");

            // verify the required parameter 'soundName' is set
            if (soundName == null)
                throw new Traq.Client.ApiException(400, "Missing required parameter 'soundName' when calling QallApi->PostSoundboard");


            Traq.Client.RequestOptions localVarRequestOptions = new Traq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Traq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Traq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.FileParameters.Add("audio", audio);
            localVarRequestOptions.FormParameters.Add("soundName", Traq.Client.ClientUtils.ParameterToString(soundName)); // form parameter
            if (stampId != null)
            {
                localVarRequestOptions.FormParameters.Add("stampId", Traq.Client.ClientUtils.ParameterToString(stampId)); // form parameter
            }

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SoundboardUploadResponse>("/qall/soundboard", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostSoundboard", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// アップロード済み音声を LiveKit ルームで再生 S3上にある音声ファイルの署名付きURLを生成し、   Ingressを介して指定ルームに音声を流します。     該当ルームに参加しているユーザであれば再生可能とします。 
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="soundboardPlayRequest"></param>
        /// <returns>SoundboardPlayResponse</returns>
        public SoundboardPlayResponse PostSoundboardPlay(SoundboardPlayRequest soundboardPlayRequest)
        {
            Traq.Client.ApiResponse<SoundboardPlayResponse> localVarResponse = PostSoundboardPlayWithHttpInfo(soundboardPlayRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// アップロード済み音声を LiveKit ルームで再生 S3上にある音声ファイルの署名付きURLを生成し、   Ingressを介して指定ルームに音声を流します。     該当ルームに参加しているユーザであれば再生可能とします。 
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="soundboardPlayRequest"></param>
        /// <returns>ApiResponse of SoundboardPlayResponse</returns>
        public Traq.Client.ApiResponse<SoundboardPlayResponse> PostSoundboardPlayWithHttpInfo(SoundboardPlayRequest soundboardPlayRequest)
        {
            // verify the required parameter 'soundboardPlayRequest' is set
            if (soundboardPlayRequest == null)
                throw new Traq.Client.ApiException(400, "Missing required parameter 'soundboardPlayRequest' when calling QallApi->PostSoundboardPlay");

            Traq.Client.RequestOptions localVarRequestOptions = new Traq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Traq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Traq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = soundboardPlayRequest;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SoundboardPlayResponse>("/qall/soundboard/play", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostSoundboardPlay", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// アップロード済み音声を LiveKit ルームで再生 S3上にある音声ファイルの署名付きURLを生成し、   Ingressを介して指定ルームに音声を流します。     該当ルームに参加しているユーザであれば再生可能とします。 
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="soundboardPlayRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SoundboardPlayResponse</returns>
        public async System.Threading.Tasks.Task<SoundboardPlayResponse> PostSoundboardPlayAsync(SoundboardPlayRequest soundboardPlayRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Traq.Client.ApiResponse<SoundboardPlayResponse> localVarResponse = await PostSoundboardPlayWithHttpInfoAsync(soundboardPlayRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// アップロード済み音声を LiveKit ルームで再生 S3上にある音声ファイルの署名付きURLを生成し、   Ingressを介して指定ルームに音声を流します。     該当ルームに参加しているユーザであれば再生可能とします。 
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="soundboardPlayRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SoundboardPlayResponse)</returns>
        public async System.Threading.Tasks.Task<Traq.Client.ApiResponse<SoundboardPlayResponse>> PostSoundboardPlayWithHttpInfoAsync(SoundboardPlayRequest soundboardPlayRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'soundboardPlayRequest' is set
            if (soundboardPlayRequest == null)
                throw new Traq.Client.ApiException(400, "Missing required parameter 'soundboardPlayRequest' when calling QallApi->PostSoundboardPlay");


            Traq.Client.RequestOptions localVarRequestOptions = new Traq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Traq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Traq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = soundboardPlayRequest;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<SoundboardPlayResponse>("/qall/soundboard/play", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostSoundboardPlay", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ルームのメタデータを更新 ルームのメタデータを更新します。 
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomId">ルームUUID</param>
        /// <param name="qallMetadataRequest">ルームのメタデータ</param>
        /// <returns></returns>
        public void UpdateRoomMetadata(Guid roomId, QallMetadataRequest qallMetadataRequest)
        {
            UpdateRoomMetadataWithHttpInfo(roomId, qallMetadataRequest);
        }

        /// <summary>
        /// ルームのメタデータを更新 ルームのメタデータを更新します。 
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomId">ルームUUID</param>
        /// <param name="qallMetadataRequest">ルームのメタデータ</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Traq.Client.ApiResponse<Object> UpdateRoomMetadataWithHttpInfo(Guid roomId, QallMetadataRequest qallMetadataRequest)
        {
            // verify the required parameter 'qallMetadataRequest' is set
            if (qallMetadataRequest == null)
                throw new Traq.Client.ApiException(400, "Missing required parameter 'qallMetadataRequest' when calling QallApi->UpdateRoomMetadata");

            Traq.Client.RequestOptions localVarRequestOptions = new Traq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Traq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Traq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("roomId", Traq.Client.ClientUtils.ParameterToString(roomId)); // path parameter
            localVarRequestOptions.Data = qallMetadataRequest;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/qall/rooms/{roomId}/metadata", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRoomMetadata", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// ルームのメタデータを更新 ルームのメタデータを更新します。 
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomId">ルームUUID</param>
        /// <param name="qallMetadataRequest">ルームのメタデータ</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateRoomMetadataAsync(Guid roomId, QallMetadataRequest qallMetadataRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await UpdateRoomMetadataWithHttpInfoAsync(roomId, qallMetadataRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// ルームのメタデータを更新 ルームのメタデータを更新します。 
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomId">ルームUUID</param>
        /// <param name="qallMetadataRequest">ルームのメタデータ</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Traq.Client.ApiResponse<Object>> UpdateRoomMetadataWithHttpInfoAsync(Guid roomId, QallMetadataRequest qallMetadataRequest, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'qallMetadataRequest' is set
            if (qallMetadataRequest == null)
                throw new Traq.Client.ApiException(400, "Missing required parameter 'qallMetadataRequest' when calling QallApi->UpdateRoomMetadata");


            Traq.Client.RequestOptions localVarRequestOptions = new Traq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = Traq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Traq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("roomId", Traq.Client.ClientUtils.ParameterToString(roomId)); // path parameter
            localVarRequestOptions.Data = qallMetadataRequest;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/qall/rooms/{roomId}/metadata", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRoomMetadata", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
