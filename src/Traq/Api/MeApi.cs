// <auto-generated>
/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Traq.Client;
using Traq.Model;
using System.Diagnostics.CodeAnalysis;

namespace Traq.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IMeApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        MeApiEvents Events { get; }

        /// <summary>
        /// チャンネルをスターに追加
        /// </summary>
        /// <remarks>
        /// 指定したチャンネルをスターチャンネルに追加します。 スター済みのチャンネルIDを指定した場合、204を返します。 不正なチャンネルIDを指定した場合、400を返します。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="postStarRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddMyStarApiResponse"/>&gt;</returns>
        Task<IAddMyStarApiResponse> AddMyStarAsync(Option<PostStarRequest> postStarRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// チャンネルをスターに追加
        /// </summary>
        /// <remarks>
        /// 指定したチャンネルをスターチャンネルに追加します。 スター済みのチャンネルIDを指定した場合、204を返します。 不正なチャンネルIDを指定した場合、400を返します。
        /// </remarks>
        /// <param name="postStarRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddMyStarApiResponse"/>?&gt;</returns>
        Task<IAddMyStarApiResponse?> AddMyStarOrDefaultAsync(Option<PostStarRequest> postStarRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 自分にタグを追加
        /// </summary>
        /// <remarks>
        /// 自分に新しくタグを追加します。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="postUserTagRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddMyUserTagApiResponse"/>&gt;</returns>
        Task<IAddMyUserTagApiResponse> AddMyUserTagAsync(Option<PostUserTagRequest> postUserTagRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 自分にタグを追加
        /// </summary>
        /// <remarks>
        /// 自分に新しくタグを追加します。
        /// </remarks>
        /// <param name="postUserTagRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddMyUserTagApiResponse"/>?&gt;</returns>
        Task<IAddMyUserTagApiResponse?> AddMyUserTagOrDefaultAsync(Option<PostUserTagRequest> postUserTagRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 自分のアイコン画像を変更
        /// </summary>
        /// <remarks>
        /// 自分のアイコン画像を変更します。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">アイコン画像(2MBまでのpng, jpeg, gif)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IChangeMyIconApiResponse"/>&gt;</returns>
        Task<IChangeMyIconApiResponse> ChangeMyIconAsync(System.IO.Stream file, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 自分のアイコン画像を変更
        /// </summary>
        /// <remarks>
        /// 自分のアイコン画像を変更します。
        /// </remarks>
        /// <param name="file">アイコン画像(2MBまでのpng, jpeg, gif)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IChangeMyIconApiResponse"/>?&gt;</returns>
        Task<IChangeMyIconApiResponse?> ChangeMyIconOrDefaultAsync(System.IO.Stream file, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// メッセージ引用通知の設定情報を変更
        /// </summary>
        /// <remarks>
        /// メッセージ引用通知の設定情報を変更します
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="putNotifyCitationRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IChangeMyNotifyCitationApiResponse"/>&gt;</returns>
        Task<IChangeMyNotifyCitationApiResponse> ChangeMyNotifyCitationAsync(Option<PutNotifyCitationRequest> putNotifyCitationRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// メッセージ引用通知の設定情報を変更
        /// </summary>
        /// <remarks>
        /// メッセージ引用通知の設定情報を変更します
        /// </remarks>
        /// <param name="putNotifyCitationRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IChangeMyNotifyCitationApiResponse"/>?&gt;</returns>
        Task<IChangeMyNotifyCitationApiResponse?> ChangeMyNotifyCitationOrDefaultAsync(Option<PutNotifyCitationRequest> putNotifyCitationRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 自分のパスワードを変更
        /// </summary>
        /// <remarks>
        /// 自身のパスワードを変更します。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="putMyPasswordRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IChangeMyPasswordApiResponse"/>&gt;</returns>
        Task<IChangeMyPasswordApiResponse> ChangeMyPasswordAsync(Option<PutMyPasswordRequest> putMyPasswordRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 自分のパスワードを変更
        /// </summary>
        /// <remarks>
        /// 自身のパスワードを変更します。
        /// </remarks>
        /// <param name="putMyPasswordRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IChangeMyPasswordApiResponse"/>?&gt;</returns>
        Task<IChangeMyPasswordApiResponse?> ChangeMyPasswordOrDefaultAsync(Option<PutMyPasswordRequest> putMyPasswordRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 自分のユーザー情報を変更
        /// </summary>
        /// <remarks>
        /// 自身のユーザー情報を変更します。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="patchMeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEditMeApiResponse"/>&gt;</returns>
        Task<IEditMeApiResponse> EditMeAsync(Option<PatchMeRequest> patchMeRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 自分のユーザー情報を変更
        /// </summary>
        /// <remarks>
        /// 自身のユーザー情報を変更します。
        /// </remarks>
        /// <param name="patchMeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEditMeApiResponse"/>?&gt;</returns>
        Task<IEditMeApiResponse?> EditMeOrDefaultAsync(Option<PatchMeRequest> patchMeRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 自分のタグを編集
        /// </summary>
        /// <remarks>
        /// 自分の指定したタグの状態を変更します。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId">タグUUID</param>
        /// <param name="patchUserTagRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEditMyUserTagApiResponse"/>&gt;</returns>
        Task<IEditMyUserTagApiResponse> EditMyUserTagAsync(Guid tagId, Option<PatchUserTagRequest> patchUserTagRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 自分のタグを編集
        /// </summary>
        /// <remarks>
        /// 自分の指定したタグの状態を変更します。
        /// </remarks>
        /// <param name="tagId">タグUUID</param>
        /// <param name="patchUserTagRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEditMyUserTagApiResponse"/>?&gt;</returns>
        Task<IEditMyUserTagApiResponse?> EditMyUserTagOrDefaultAsync(Guid tagId, Option<PatchUserTagRequest> patchUserTagRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 自分のユーザー詳細を取得
        /// </summary>
        /// <remarks>
        /// 自身のユーザー詳細情報を取得します。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMeApiResponse"/>&gt;</returns>
        Task<IGetMeApiResponse> GetMeAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 自分のユーザー詳細を取得
        /// </summary>
        /// <remarks>
        /// 自身のユーザー詳細情報を取得します。
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMeApiResponse"/>?&gt;</returns>
        Task<IGetMeApiResponse?> GetMeOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 自分のチャンネル購読状態を取得
        /// </summary>
        /// <remarks>
        /// 自身のチャンネル購読状態を取得します。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMyChannelSubscriptionsApiResponse"/>&gt;</returns>
        Task<IGetMyChannelSubscriptionsApiResponse> GetMyChannelSubscriptionsAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 自分のチャンネル購読状態を取得
        /// </summary>
        /// <remarks>
        /// 自身のチャンネル購読状態を取得します。
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMyChannelSubscriptionsApiResponse"/>?&gt;</returns>
        Task<IGetMyChannelSubscriptionsApiResponse?> GetMyChannelSubscriptionsOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 外部ログインアカウント一覧を取得
        /// </summary>
        /// <remarks>
        /// 自分に紐付けられている外部ログインアカウント一覧を取得します。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMyExternalAccountsApiResponse"/>&gt;</returns>
        Task<IGetMyExternalAccountsApiResponse> GetMyExternalAccountsAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 外部ログインアカウント一覧を取得
        /// </summary>
        /// <remarks>
        /// 自分に紐付けられている外部ログインアカウント一覧を取得します。
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMyExternalAccountsApiResponse"/>?&gt;</returns>
        Task<IGetMyExternalAccountsApiResponse?> GetMyExternalAccountsOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 自分のアイコン画像を取得
        /// </summary>
        /// <remarks>
        /// 自分のアイコン画像を取得します。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMyIconApiResponse"/>&gt;</returns>
        Task<IGetMyIconApiResponse> GetMyIconAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 自分のアイコン画像を取得
        /// </summary>
        /// <remarks>
        /// 自分のアイコン画像を取得します。
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMyIconApiResponse"/>?&gt;</returns>
        Task<IGetMyIconApiResponse?> GetMyIconOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// メッセージ引用通知の設定情報を取得
        /// </summary>
        /// <remarks>
        /// メッセージ引用通知の設定情報を変更します。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMyNotifyCitationApiResponse"/>&gt;</returns>
        Task<IGetMyNotifyCitationApiResponse> GetMyNotifyCitationAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// メッセージ引用通知の設定情報を取得
        /// </summary>
        /// <remarks>
        /// メッセージ引用通知の設定情報を変更します。
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMyNotifyCitationApiResponse"/>?&gt;</returns>
        Task<IGetMyNotifyCitationApiResponse?> GetMyNotifyCitationOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// QRコードを取得
        /// </summary>
        /// <remarks>
        /// 自身のQRコードを取得します。 返されたQRコードまたはトークンは、発行後の5分間のみ有効です
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">画像でなくトークン文字列で返すかどうか (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMyQRCodeApiResponse"/>&gt;</returns>
        Task<IGetMyQRCodeApiResponse> GetMyQRCodeAsync(Option<bool> token = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// QRコードを取得
        /// </summary>
        /// <remarks>
        /// 自身のQRコードを取得します。 返されたQRコードまたはトークンは、発行後の5分間のみ有効です
        /// </remarks>
        /// <param name="token">画像でなくトークン文字列で返すかどうか (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMyQRCodeApiResponse"/>?&gt;</returns>
        Task<IGetMyQRCodeApiResponse?> GetMyQRCodeOrDefaultAsync(Option<bool> token = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 自分のログインセッションリストを取得
        /// </summary>
        /// <remarks>
        /// 自分のログインセッションのリストを取得します。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMySessionsApiResponse"/>&gt;</returns>
        Task<IGetMySessionsApiResponse> GetMySessionsAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 自分のログインセッションリストを取得
        /// </summary>
        /// <remarks>
        /// 自分のログインセッションのリストを取得します。
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMySessionsApiResponse"/>?&gt;</returns>
        Task<IGetMySessionsApiResponse?> GetMySessionsOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// スタンプ履歴を取得
        /// </summary>
        /// <remarks>
        /// 自分のスタンプ履歴を最大100件まで取得します。 結果は降順で返されます。  このAPIが返すスタンプ履歴は厳密な履歴ではありません。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">件数 (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMyStampHistoryApiResponse"/>&gt;</returns>
        Task<IGetMyStampHistoryApiResponse> GetMyStampHistoryAsync(Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// スタンプ履歴を取得
        /// </summary>
        /// <remarks>
        /// 自分のスタンプ履歴を最大100件まで取得します。 結果は降順で返されます。  このAPIが返すスタンプ履歴は厳密な履歴ではありません。
        /// </remarks>
        /// <param name="limit">件数 (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMyStampHistoryApiResponse"/>?&gt;</returns>
        Task<IGetMyStampHistoryApiResponse?> GetMyStampHistoryOrDefaultAsync(Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// スターチャンネルリストを取得
        /// </summary>
        /// <remarks>
        /// 自分がスターしているチャンネルのUUIDの配列を取得します。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMyStarsApiResponse"/>&gt;</returns>
        Task<IGetMyStarsApiResponse> GetMyStarsAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// スターチャンネルリストを取得
        /// </summary>
        /// <remarks>
        /// 自分がスターしているチャンネルのUUIDの配列を取得します。
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMyStarsApiResponse"/>?&gt;</returns>
        Task<IGetMyStarsApiResponse?> GetMyStarsOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 有効トークンのリストを取得
        /// </summary>
        /// <remarks>
        /// 有効な自分に発行されたOAuth2トークンのリストを取得します。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMyTokensApiResponse"/>&gt;</returns>
        Task<IGetMyTokensApiResponse> GetMyTokensAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 有効トークンのリストを取得
        /// </summary>
        /// <remarks>
        /// 有効な自分に発行されたOAuth2トークンのリストを取得します。
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMyTokensApiResponse"/>?&gt;</returns>
        Task<IGetMyTokensApiResponse?> GetMyTokensOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 未読チャンネルを取得
        /// </summary>
        /// <remarks>
        /// 自分が現在未読のチャンネルの未読情報を取得します。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMyUnreadChannelsApiResponse"/>&gt;</returns>
        Task<IGetMyUnreadChannelsApiResponse> GetMyUnreadChannelsAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 未読チャンネルを取得
        /// </summary>
        /// <remarks>
        /// 自分が現在未読のチャンネルの未読情報を取得します。
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMyUnreadChannelsApiResponse"/>?&gt;</returns>
        Task<IGetMyUnreadChannelsApiResponse?> GetMyUnreadChannelsOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 自分のタグリストを取得
        /// </summary>
        /// <remarks>
        /// 自分に付けられているタグの配列を取得します。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMyUserTagsApiResponse"/>&gt;</returns>
        Task<IGetMyUserTagsApiResponse> GetMyUserTagsAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 自分のタグリストを取得
        /// </summary>
        /// <remarks>
        /// 自分に付けられているタグの配列を取得します。
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMyUserTagsApiResponse"/>?&gt;</returns>
        Task<IGetMyUserTagsApiResponse?> GetMyUserTagsOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 自身のチャンネル閲覧状態一覧を取得
        /// </summary>
        /// <remarks>
        /// 自身のチャンネル閲覧状態一覧を取得します。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMyViewStatesApiResponse"/>&gt;</returns>
        Task<IGetMyViewStatesApiResponse> GetMyViewStatesAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 自身のチャンネル閲覧状態一覧を取得
        /// </summary>
        /// <remarks>
        /// 自身のチャンネル閲覧状態一覧を取得します。
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMyViewStatesApiResponse"/>?&gt;</returns>
        Task<IGetMyViewStatesApiResponse?> GetMyViewStatesOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 自分のユーザー詳細を取得 (OIDC UserInfo)
        /// </summary>
        /// <remarks>
        /// OIDCトークンを用いてユーザー詳細を取得します。 OIDC UserInfo Endpointです。 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOIDCUserInfoApiResponse"/>&gt;</returns>
        Task<IGetOIDCUserInfoApiResponse> GetOIDCUserInfoAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 自分のユーザー詳細を取得 (OIDC UserInfo)
        /// </summary>
        /// <remarks>
        /// OIDCトークンを用いてユーザー詳細を取得します。 OIDC UserInfo Endpointです。 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOIDCUserInfoApiResponse"/>?&gt;</returns>
        Task<IGetOIDCUserInfoApiResponse?> GetOIDCUserInfoOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// ユーザー設定を取得
        /// </summary>
        /// <remarks>
        /// ユーザー設定を取得します。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserSettingsApiResponse"/>&gt;</returns>
        Task<IGetUserSettingsApiResponse> GetUserSettingsAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// ユーザー設定を取得
        /// </summary>
        /// <remarks>
        /// ユーザー設定を取得します。
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserSettingsApiResponse"/>?&gt;</returns>
        Task<IGetUserSettingsApiResponse?> GetUserSettingsOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 外部ログインアカウントを紐付ける
        /// </summary>
        /// <remarks>
        /// 自分に外部ログインアカウントを紐付けます。 指定した&#x60;providerName&#x60;がサーバー側で有効である必要があります。 リクエストが受理された場合、外部サービスの認証画面にリダイレクトされ、認証される必要があります。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="postLinkExternalAccount"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILinkExternalAccountApiResponse"/>&gt;</returns>
        Task<ILinkExternalAccountApiResponse> LinkExternalAccountAsync(Option<PostLinkExternalAccount> postLinkExternalAccount = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 外部ログインアカウントを紐付ける
        /// </summary>
        /// <remarks>
        /// 自分に外部ログインアカウントを紐付けます。 指定した&#x60;providerName&#x60;がサーバー側で有効である必要があります。 リクエストが受理された場合、外部サービスの認証画面にリダイレクトされ、認証される必要があります。
        /// </remarks>
        /// <param name="postLinkExternalAccount"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILinkExternalAccountApiResponse"/>?&gt;</returns>
        Task<ILinkExternalAccountApiResponse?> LinkExternalAccountOrDefaultAsync(Option<PostLinkExternalAccount> postLinkExternalAccount = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// チャンネルを既読にする
        /// </summary>
        /// <remarks>
        /// 自分が未読のチャンネルを既読にします。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IReadChannelApiResponse"/>&gt;</returns>
        Task<IReadChannelApiResponse> ReadChannelAsync(Guid channelId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// チャンネルを既読にする
        /// </summary>
        /// <remarks>
        /// 自分が未読のチャンネルを既読にします。
        /// </remarks>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IReadChannelApiResponse"/>?&gt;</returns>
        Task<IReadChannelApiResponse?> ReadChannelOrDefaultAsync(Guid channelId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// FCMデバイスを登録
        /// </summary>
        /// <remarks>
        /// 自身のFCMデバイスを登録します。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="postMyFCMDeviceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRegisterFCMDeviceApiResponse"/>&gt;</returns>
        Task<IRegisterFCMDeviceApiResponse> RegisterFCMDeviceAsync(Option<PostMyFCMDeviceRequest> postMyFCMDeviceRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// FCMデバイスを登録
        /// </summary>
        /// <remarks>
        /// 自身のFCMデバイスを登録します。
        /// </remarks>
        /// <param name="postMyFCMDeviceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRegisterFCMDeviceApiResponse"/>?&gt;</returns>
        Task<IRegisterFCMDeviceApiResponse?> RegisterFCMDeviceOrDefaultAsync(Option<PostMyFCMDeviceRequest> postMyFCMDeviceRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// チャンネルをスターから削除します
        /// </summary>
        /// <remarks>
        /// 既にスターから削除されているチャンネルを指定した場合は204を返します。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRemoveMyStarApiResponse"/>&gt;</returns>
        Task<IRemoveMyStarApiResponse> RemoveMyStarAsync(Guid channelId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// チャンネルをスターから削除します
        /// </summary>
        /// <remarks>
        /// 既にスターから削除されているチャンネルを指定した場合は204を返します。
        /// </remarks>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRemoveMyStarApiResponse"/>?&gt;</returns>
        Task<IRemoveMyStarApiResponse?> RemoveMyStarOrDefaultAsync(Guid channelId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 自分からタグを削除します
        /// </summary>
        /// <remarks>
        /// 既に存在しないタグを削除しようとした場合は204を返します。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId">タグUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRemoveMyUserTagApiResponse"/>&gt;</returns>
        Task<IRemoveMyUserTagApiResponse> RemoveMyUserTagAsync(Guid tagId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 自分からタグを削除します
        /// </summary>
        /// <remarks>
        /// 既に存在しないタグを削除しようとした場合は204を返します。
        /// </remarks>
        /// <param name="tagId">タグUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRemoveMyUserTagApiResponse"/>?&gt;</returns>
        Task<IRemoveMyUserTagApiResponse?> RemoveMyUserTagOrDefaultAsync(Guid tagId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// セッションを無効化
        /// </summary>
        /// <remarks>
        /// 指定した自分のセッションを無効化(ログアウト)します。 既に存在しない・無効化されているセッションを指定した場合も&#x60;204&#x60;を返します。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">セッションUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRevokeMySessionApiResponse"/>&gt;</returns>
        Task<IRevokeMySessionApiResponse> RevokeMySessionAsync(Guid sessionId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// セッションを無効化
        /// </summary>
        /// <remarks>
        /// 指定した自分のセッションを無効化(ログアウト)します。 既に存在しない・無効化されているセッションを指定した場合も&#x60;204&#x60;を返します。
        /// </remarks>
        /// <param name="sessionId">セッションUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRevokeMySessionApiResponse"/>?&gt;</returns>
        Task<IRevokeMySessionApiResponse?> RevokeMySessionOrDefaultAsync(Guid sessionId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// トークンの認可を取り消す
        /// </summary>
        /// <remarks>
        /// 自分の指定したトークンの認可を取り消します。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId">OAuth2トークンUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRevokeMyTokenApiResponse"/>&gt;</returns>
        Task<IRevokeMyTokenApiResponse> RevokeMyTokenAsync(Guid tokenId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// トークンの認可を取り消す
        /// </summary>
        /// <remarks>
        /// 自分の指定したトークンの認可を取り消します。
        /// </remarks>
        /// <param name="tokenId">OAuth2トークンUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRevokeMyTokenApiResponse"/>?&gt;</returns>
        Task<IRevokeMyTokenApiResponse?> RevokeMyTokenOrDefaultAsync(Guid tokenId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// チャンネル購読レベルを設定
        /// </summary>
        /// <remarks>
        /// 自身の指定したチャンネルの購読レベルを設定します。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="putChannelSubscribeLevelRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISetChannelSubscribeLevelApiResponse"/>&gt;</returns>
        Task<ISetChannelSubscribeLevelApiResponse> SetChannelSubscribeLevelAsync(Guid channelId, Option<PutChannelSubscribeLevelRequest> putChannelSubscribeLevelRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// チャンネル購読レベルを設定
        /// </summary>
        /// <remarks>
        /// 自身の指定したチャンネルの購読レベルを設定します。
        /// </remarks>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="putChannelSubscribeLevelRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISetChannelSubscribeLevelApiResponse"/>?&gt;</returns>
        Task<ISetChannelSubscribeLevelApiResponse?> SetChannelSubscribeLevelOrDefaultAsync(Guid channelId, Option<PutChannelSubscribeLevelRequest> putChannelSubscribeLevelRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 外部ログインアカウントの紐付けを解除
        /// </summary>
        /// <remarks>
        /// 自分に紐付けられている外部ログインアカウントの紐付けを解除します。
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="postUnlinkExternalAccount"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUnlinkExternalAccountApiResponse"/>&gt;</returns>
        Task<IUnlinkExternalAccountApiResponse> UnlinkExternalAccountAsync(Option<PostUnlinkExternalAccount> postUnlinkExternalAccount = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 外部ログインアカウントの紐付けを解除
        /// </summary>
        /// <remarks>
        /// 自分に紐付けられている外部ログインアカウントの紐付けを解除します。
        /// </remarks>
        /// <param name="postUnlinkExternalAccount"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUnlinkExternalAccountApiResponse"/>?&gt;</returns>
        Task<IUnlinkExternalAccountApiResponse?> UnlinkExternalAccountOrDefaultAsync(Option<PostUnlinkExternalAccount> postUnlinkExternalAccount = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IAddMyStarApiResponse"/>
    /// </summary>
    public interface IAddMyStarApiResponse : Traq.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }
    }

    /// <summary>
    /// The <see cref="IAddMyUserTagApiResponse"/>
    /// </summary>
    public interface IAddMyUserTagApiResponse : Traq.Client.IApiResponse, ICreated<Traq.Model.UserTag?>
    {
        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }
    }

    /// <summary>
    /// The <see cref="IChangeMyIconApiResponse"/>
    /// </summary>
    public interface IChangeMyIconApiResponse : Traq.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 413 ContentTooLarge
        /// </summary>
        /// <returns></returns>
        bool IsContentTooLarge { get; }
    }

    /// <summary>
    /// The <see cref="IChangeMyNotifyCitationApiResponse"/>
    /// </summary>
    public interface IChangeMyNotifyCitationApiResponse : Traq.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }
    }

    /// <summary>
    /// The <see cref="IChangeMyPasswordApiResponse"/>
    /// </summary>
    public interface IChangeMyPasswordApiResponse : Traq.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }
    }

    /// <summary>
    /// The <see cref="IEditMeApiResponse"/>
    /// </summary>
    public interface IEditMeApiResponse : Traq.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }
    }

    /// <summary>
    /// The <see cref="IEditMyUserTagApiResponse"/>
    /// </summary>
    public interface IEditMyUserTagApiResponse : Traq.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetMeApiResponse"/>
    /// </summary>
    public interface IGetMeApiResponse : Traq.Client.IApiResponse, IOk<Traq.Model.MyUserDetail?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetMyChannelSubscriptionsApiResponse"/>
    /// </summary>
    public interface IGetMyChannelSubscriptionsApiResponse : Traq.Client.IApiResponse, IOk<List<UserSubscribeState>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetMyExternalAccountsApiResponse"/>
    /// </summary>
    public interface IGetMyExternalAccountsApiResponse : Traq.Client.IApiResponse, IOk<List<ExternalProviderUser>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetMyIconApiResponse"/>
    /// </summary>
    public interface IGetMyIconApiResponse : Traq.Client.IApiResponse, IOk<System.IO.Stream?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetMyNotifyCitationApiResponse"/>
    /// </summary>
    public interface IGetMyNotifyCitationApiResponse : Traq.Client.IApiResponse, IOk<Traq.Model.GetNotifyCitation?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetMyQRCodeApiResponse"/>
    /// </summary>
    public interface IGetMyQRCodeApiResponse : Traq.Client.IApiResponse, IOk<System.IO.Stream?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetMySessionsApiResponse"/>
    /// </summary>
    public interface IGetMySessionsApiResponse : Traq.Client.IApiResponse, IOk<List<LoginSession>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetMyStampHistoryApiResponse"/>
    /// </summary>
    public interface IGetMyStampHistoryApiResponse : Traq.Client.IApiResponse, IOk<List<StampHistoryEntry>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetMyStarsApiResponse"/>
    /// </summary>
    public interface IGetMyStarsApiResponse : Traq.Client.IApiResponse, IOk<List<Guid>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetMyTokensApiResponse"/>
    /// </summary>
    public interface IGetMyTokensApiResponse : Traq.Client.IApiResponse, IOk<List<ActiveOAuth2Token>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetMyUnreadChannelsApiResponse"/>
    /// </summary>
    public interface IGetMyUnreadChannelsApiResponse : Traq.Client.IApiResponse, IOk<List<UnreadChannel>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetMyUserTagsApiResponse"/>
    /// </summary>
    public interface IGetMyUserTagsApiResponse : Traq.Client.IApiResponse, IOk<List<UserTag>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetMyViewStatesApiResponse"/>
    /// </summary>
    public interface IGetMyViewStatesApiResponse : Traq.Client.IApiResponse, IOk<List<MyChannelViewState>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetOIDCUserInfoApiResponse"/>
    /// </summary>
    public interface IGetOIDCUserInfoApiResponse : Traq.Client.IApiResponse, IOk<Traq.Model.OIDCUserInfo?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IGetUserSettingsApiResponse"/>
    /// </summary>
    public interface IGetUserSettingsApiResponse : Traq.Client.IApiResponse, IOk<Traq.Model.UserSettings?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="ILinkExternalAccountApiResponse"/>
    /// </summary>
    public interface ILinkExternalAccountApiResponse : Traq.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 302 Found
        /// </summary>
        /// <returns></returns>
        bool IsFound { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }
    }

    /// <summary>
    /// The <see cref="IReadChannelApiResponse"/>
    /// </summary>
    public interface IReadChannelApiResponse : Traq.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }
    }

    /// <summary>
    /// The <see cref="IRegisterFCMDeviceApiResponse"/>
    /// </summary>
    public interface IRegisterFCMDeviceApiResponse : Traq.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }
    }

    /// <summary>
    /// The <see cref="IRemoveMyStarApiResponse"/>
    /// </summary>
    public interface IRemoveMyStarApiResponse : Traq.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }
    }

    /// <summary>
    /// The <see cref="IRemoveMyUserTagApiResponse"/>
    /// </summary>
    public interface IRemoveMyUserTagApiResponse : Traq.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }
    }

    /// <summary>
    /// The <see cref="IRevokeMySessionApiResponse"/>
    /// </summary>
    public interface IRevokeMySessionApiResponse : Traq.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }
    }

    /// <summary>
    /// The <see cref="IRevokeMyTokenApiResponse"/>
    /// </summary>
    public interface IRevokeMyTokenApiResponse : Traq.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="ISetChannelSubscribeLevelApiResponse"/>
    /// </summary>
    public interface ISetChannelSubscribeLevelApiResponse : Traq.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IUnlinkExternalAccountApiResponse"/>
    /// </summary>
    public interface IUnlinkExternalAccountApiResponse : Traq.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class MeApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnAddMyStar;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAddMyStar;

        internal void ExecuteOnAddMyStar(MeApi.AddMyStarApiResponse apiResponse)
        {
            OnAddMyStar?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAddMyStar(Exception exception)
        {
            OnErrorAddMyStar?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnAddMyUserTag;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorAddMyUserTag;

        internal void ExecuteOnAddMyUserTag(MeApi.AddMyUserTagApiResponse apiResponse)
        {
            OnAddMyUserTag?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorAddMyUserTag(Exception exception)
        {
            OnErrorAddMyUserTag?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnChangeMyIcon;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorChangeMyIcon;

        internal void ExecuteOnChangeMyIcon(MeApi.ChangeMyIconApiResponse apiResponse)
        {
            OnChangeMyIcon?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorChangeMyIcon(Exception exception)
        {
            OnErrorChangeMyIcon?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnChangeMyNotifyCitation;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorChangeMyNotifyCitation;

        internal void ExecuteOnChangeMyNotifyCitation(MeApi.ChangeMyNotifyCitationApiResponse apiResponse)
        {
            OnChangeMyNotifyCitation?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorChangeMyNotifyCitation(Exception exception)
        {
            OnErrorChangeMyNotifyCitation?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnChangeMyPassword;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorChangeMyPassword;

        internal void ExecuteOnChangeMyPassword(MeApi.ChangeMyPasswordApiResponse apiResponse)
        {
            OnChangeMyPassword?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorChangeMyPassword(Exception exception)
        {
            OnErrorChangeMyPassword?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEditMe;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEditMe;

        internal void ExecuteOnEditMe(MeApi.EditMeApiResponse apiResponse)
        {
            OnEditMe?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEditMe(Exception exception)
        {
            OnErrorEditMe?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEditMyUserTag;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEditMyUserTag;

        internal void ExecuteOnEditMyUserTag(MeApi.EditMyUserTagApiResponse apiResponse)
        {
            OnEditMyUserTag?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEditMyUserTag(Exception exception)
        {
            OnErrorEditMyUserTag?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetMe;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetMe;

        internal void ExecuteOnGetMe(MeApi.GetMeApiResponse apiResponse)
        {
            OnGetMe?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetMe(Exception exception)
        {
            OnErrorGetMe?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetMyChannelSubscriptions;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetMyChannelSubscriptions;

        internal void ExecuteOnGetMyChannelSubscriptions(MeApi.GetMyChannelSubscriptionsApiResponse apiResponse)
        {
            OnGetMyChannelSubscriptions?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetMyChannelSubscriptions(Exception exception)
        {
            OnErrorGetMyChannelSubscriptions?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetMyExternalAccounts;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetMyExternalAccounts;

        internal void ExecuteOnGetMyExternalAccounts(MeApi.GetMyExternalAccountsApiResponse apiResponse)
        {
            OnGetMyExternalAccounts?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetMyExternalAccounts(Exception exception)
        {
            OnErrorGetMyExternalAccounts?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetMyIcon;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetMyIcon;

        internal void ExecuteOnGetMyIcon(MeApi.GetMyIconApiResponse apiResponse)
        {
            OnGetMyIcon?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetMyIcon(Exception exception)
        {
            OnErrorGetMyIcon?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetMyNotifyCitation;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetMyNotifyCitation;

        internal void ExecuteOnGetMyNotifyCitation(MeApi.GetMyNotifyCitationApiResponse apiResponse)
        {
            OnGetMyNotifyCitation?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetMyNotifyCitation(Exception exception)
        {
            OnErrorGetMyNotifyCitation?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetMyQRCode;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetMyQRCode;

        internal void ExecuteOnGetMyQRCode(MeApi.GetMyQRCodeApiResponse apiResponse)
        {
            OnGetMyQRCode?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetMyQRCode(Exception exception)
        {
            OnErrorGetMyQRCode?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetMySessions;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetMySessions;

        internal void ExecuteOnGetMySessions(MeApi.GetMySessionsApiResponse apiResponse)
        {
            OnGetMySessions?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetMySessions(Exception exception)
        {
            OnErrorGetMySessions?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetMyStampHistory;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetMyStampHistory;

        internal void ExecuteOnGetMyStampHistory(MeApi.GetMyStampHistoryApiResponse apiResponse)
        {
            OnGetMyStampHistory?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetMyStampHistory(Exception exception)
        {
            OnErrorGetMyStampHistory?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetMyStars;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetMyStars;

        internal void ExecuteOnGetMyStars(MeApi.GetMyStarsApiResponse apiResponse)
        {
            OnGetMyStars?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetMyStars(Exception exception)
        {
            OnErrorGetMyStars?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetMyTokens;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetMyTokens;

        internal void ExecuteOnGetMyTokens(MeApi.GetMyTokensApiResponse apiResponse)
        {
            OnGetMyTokens?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetMyTokens(Exception exception)
        {
            OnErrorGetMyTokens?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetMyUnreadChannels;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetMyUnreadChannels;

        internal void ExecuteOnGetMyUnreadChannels(MeApi.GetMyUnreadChannelsApiResponse apiResponse)
        {
            OnGetMyUnreadChannels?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetMyUnreadChannels(Exception exception)
        {
            OnErrorGetMyUnreadChannels?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetMyUserTags;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetMyUserTags;

        internal void ExecuteOnGetMyUserTags(MeApi.GetMyUserTagsApiResponse apiResponse)
        {
            OnGetMyUserTags?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetMyUserTags(Exception exception)
        {
            OnErrorGetMyUserTags?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetMyViewStates;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetMyViewStates;

        internal void ExecuteOnGetMyViewStates(MeApi.GetMyViewStatesApiResponse apiResponse)
        {
            OnGetMyViewStates?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetMyViewStates(Exception exception)
        {
            OnErrorGetMyViewStates?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetOIDCUserInfo;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetOIDCUserInfo;

        internal void ExecuteOnGetOIDCUserInfo(MeApi.GetOIDCUserInfoApiResponse apiResponse)
        {
            OnGetOIDCUserInfo?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetOIDCUserInfo(Exception exception)
        {
            OnErrorGetOIDCUserInfo?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetUserSettings;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetUserSettings;

        internal void ExecuteOnGetUserSettings(MeApi.GetUserSettingsApiResponse apiResponse)
        {
            OnGetUserSettings?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetUserSettings(Exception exception)
        {
            OnErrorGetUserSettings?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnLinkExternalAccount;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorLinkExternalAccount;

        internal void ExecuteOnLinkExternalAccount(MeApi.LinkExternalAccountApiResponse apiResponse)
        {
            OnLinkExternalAccount?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorLinkExternalAccount(Exception exception)
        {
            OnErrorLinkExternalAccount?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnReadChannel;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorReadChannel;

        internal void ExecuteOnReadChannel(MeApi.ReadChannelApiResponse apiResponse)
        {
            OnReadChannel?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorReadChannel(Exception exception)
        {
            OnErrorReadChannel?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnRegisterFCMDevice;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorRegisterFCMDevice;

        internal void ExecuteOnRegisterFCMDevice(MeApi.RegisterFCMDeviceApiResponse apiResponse)
        {
            OnRegisterFCMDevice?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorRegisterFCMDevice(Exception exception)
        {
            OnErrorRegisterFCMDevice?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnRemoveMyStar;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorRemoveMyStar;

        internal void ExecuteOnRemoveMyStar(MeApi.RemoveMyStarApiResponse apiResponse)
        {
            OnRemoveMyStar?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorRemoveMyStar(Exception exception)
        {
            OnErrorRemoveMyStar?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnRemoveMyUserTag;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorRemoveMyUserTag;

        internal void ExecuteOnRemoveMyUserTag(MeApi.RemoveMyUserTagApiResponse apiResponse)
        {
            OnRemoveMyUserTag?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorRemoveMyUserTag(Exception exception)
        {
            OnErrorRemoveMyUserTag?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnRevokeMySession;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorRevokeMySession;

        internal void ExecuteOnRevokeMySession(MeApi.RevokeMySessionApiResponse apiResponse)
        {
            OnRevokeMySession?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorRevokeMySession(Exception exception)
        {
            OnErrorRevokeMySession?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnRevokeMyToken;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorRevokeMyToken;

        internal void ExecuteOnRevokeMyToken(MeApi.RevokeMyTokenApiResponse apiResponse)
        {
            OnRevokeMyToken?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorRevokeMyToken(Exception exception)
        {
            OnErrorRevokeMyToken?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnSetChannelSubscribeLevel;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorSetChannelSubscribeLevel;

        internal void ExecuteOnSetChannelSubscribeLevel(MeApi.SetChannelSubscribeLevelApiResponse apiResponse)
        {
            OnSetChannelSubscribeLevel?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSetChannelSubscribeLevel(Exception exception)
        {
            OnErrorSetChannelSubscribeLevel?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnUnlinkExternalAccount;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorUnlinkExternalAccount;

        internal void ExecuteOnUnlinkExternalAccount(MeApi.UnlinkExternalAccountApiResponse apiResponse)
        {
            OnUnlinkExternalAccount?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorUnlinkExternalAccount(Exception exception)
        {
            OnErrorUnlinkExternalAccount?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class MeApi : IMeApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<MeApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public MeApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// A token provider of type <see cref="OauthTokenProvider"/>
        /// </summary>
        public TokenProvider<OAuthToken> OauthTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="MeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MeApi(ILogger<MeApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, MeApiEvents meApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider,
            TokenProvider<BearerToken> bearerTokenProvider,
            TokenProvider<OAuthToken> oauthTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<MeApi>();
            HttpClient = httpClient;
            Events = meApiEvents;
            ApiKeyProvider = apiKeyProvider;
            BearerTokenProvider = bearerTokenProvider;
            OauthTokenProvider = oauthTokenProvider;
        }

        partial void FormatAddMyStar(Option<PostStarRequest> postStarRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="postStarRequest"></param>
        /// <returns></returns>
        private void ValidateAddMyStar(Option<PostStarRequest> postStarRequest)
        {
            if (postStarRequest.IsSet && postStarRequest.Value == null)
                throw new ArgumentNullException(nameof(postStarRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="postStarRequest"></param>
        private void AfterAddMyStarDefaultImplementation(IAddMyStarApiResponse apiResponseLocalVar, Option<PostStarRequest> postStarRequest)
        {
            bool suppressDefaultLog = false;
            AfterAddMyStar(ref suppressDefaultLog, apiResponseLocalVar, postStarRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="postStarRequest"></param>
        partial void AfterAddMyStar(ref bool suppressDefaultLog, IAddMyStarApiResponse apiResponseLocalVar, Option<PostStarRequest> postStarRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="postStarRequest"></param>
        private void OnErrorAddMyStarDefaultImplementation(Exception exception, string pathFormat, string path, Option<PostStarRequest> postStarRequest)
        {
            bool suppressDefaultLog = false;
            OnErrorAddMyStar(ref suppressDefaultLog, exception, pathFormat, path, postStarRequest);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="postStarRequest"></param>
        partial void OnErrorAddMyStar(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<PostStarRequest> postStarRequest);

        /// <summary>
        /// チャンネルをスターに追加 指定したチャンネルをスターチャンネルに追加します。 スター済みのチャンネルIDを指定した場合、204を返します。 不正なチャンネルIDを指定した場合、400を返します。
        /// </summary>
        /// <param name="postStarRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddMyStarApiResponse"/>&gt;</returns>
        public async Task<IAddMyStarApiResponse?> AddMyStarOrDefaultAsync(Option<PostStarRequest> postStarRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AddMyStarAsync(postStarRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// チャンネルをスターに追加 指定したチャンネルをスターチャンネルに追加します。 スター済みのチャンネルIDを指定した場合、204を返します。 不正なチャンネルIDを指定した場合、400を返します。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="postStarRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddMyStarApiResponse"/>&gt;</returns>
        public async Task<IAddMyStarApiResponse> AddMyStarAsync(Option<PostStarRequest> postStarRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAddMyStar(postStarRequest);

                FormatAddMyStar(postStarRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/users/me/stars";

                    if (postStarRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (postStarRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(postStarRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<AddMyStarApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AddMyStarApiResponse>();

                        AddMyStarApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/users/me/stars", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterAddMyStarDefaultImplementation(apiResponseLocalVar, postStarRequest);

                        Events.ExecuteOnAddMyStar(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAddMyStarDefaultImplementation(e, "/users/me/stars", uriBuilderLocalVar.Path, postStarRequest);
                Events.ExecuteOnErrorAddMyStar(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="AddMyStarApiResponse"/>
        /// </summary>
        public partial class AddMyStarApiResponse : Traq.Client.ApiResponse, IAddMyStarApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AddMyStarApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="AddMyStarApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AddMyStarApiResponse(ILogger<AddMyStarApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatAddMyUserTag(Option<PostUserTagRequest> postUserTagRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="postUserTagRequest"></param>
        /// <returns></returns>
        private void ValidateAddMyUserTag(Option<PostUserTagRequest> postUserTagRequest)
        {
            if (postUserTagRequest.IsSet && postUserTagRequest.Value == null)
                throw new ArgumentNullException(nameof(postUserTagRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="postUserTagRequest"></param>
        private void AfterAddMyUserTagDefaultImplementation(IAddMyUserTagApiResponse apiResponseLocalVar, Option<PostUserTagRequest> postUserTagRequest)
        {
            bool suppressDefaultLog = false;
            AfterAddMyUserTag(ref suppressDefaultLog, apiResponseLocalVar, postUserTagRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="postUserTagRequest"></param>
        partial void AfterAddMyUserTag(ref bool suppressDefaultLog, IAddMyUserTagApiResponse apiResponseLocalVar, Option<PostUserTagRequest> postUserTagRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="postUserTagRequest"></param>
        private void OnErrorAddMyUserTagDefaultImplementation(Exception exception, string pathFormat, string path, Option<PostUserTagRequest> postUserTagRequest)
        {
            bool suppressDefaultLog = false;
            OnErrorAddMyUserTag(ref suppressDefaultLog, exception, pathFormat, path, postUserTagRequest);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="postUserTagRequest"></param>
        partial void OnErrorAddMyUserTag(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<PostUserTagRequest> postUserTagRequest);

        /// <summary>
        /// 自分にタグを追加 自分に新しくタグを追加します。
        /// </summary>
        /// <param name="postUserTagRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddMyUserTagApiResponse"/>&gt;</returns>
        public async Task<IAddMyUserTagApiResponse?> AddMyUserTagOrDefaultAsync(Option<PostUserTagRequest> postUserTagRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await AddMyUserTagAsync(postUserTagRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 自分にタグを追加 自分に新しくタグを追加します。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="postUserTagRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IAddMyUserTagApiResponse"/>&gt;</returns>
        public async Task<IAddMyUserTagApiResponse> AddMyUserTagAsync(Option<PostUserTagRequest> postUserTagRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateAddMyUserTag(postUserTagRequest);

                FormatAddMyUserTag(postUserTagRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/users/me/tags";

                    if (postUserTagRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (postUserTagRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(postUserTagRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<AddMyUserTagApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<AddMyUserTagApiResponse>();

                        AddMyUserTagApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/users/me/tags", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterAddMyUserTagDefaultImplementation(apiResponseLocalVar, postUserTagRequest);

                        Events.ExecuteOnAddMyUserTag(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorAddMyUserTagDefaultImplementation(e, "/users/me/tags", uriBuilderLocalVar.Path, postUserTagRequest);
                Events.ExecuteOnErrorAddMyUserTag(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="AddMyUserTagApiResponse"/>
        /// </summary>
        public partial class AddMyUserTagApiResponse : Traq.Client.ApiResponse, IAddMyUserTagApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<AddMyUserTagApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="AddMyUserTagApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public AddMyUserTagApiResponse(ILogger<AddMyUserTagApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public Traq.Model.UserTag? Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<Traq.Model.UserTag>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out Traq.Model.UserTag? result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatChangeMyIcon(ref System.IO.Stream file);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="file"></param>
        /// <returns></returns>
        private void ValidateChangeMyIcon(System.IO.Stream file)
        {
            if (file == null)
                throw new ArgumentNullException(nameof(file));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="file"></param>
        private void AfterChangeMyIconDefaultImplementation(IChangeMyIconApiResponse apiResponseLocalVar, System.IO.Stream file)
        {
            bool suppressDefaultLog = false;
            AfterChangeMyIcon(ref suppressDefaultLog, apiResponseLocalVar, file);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="file"></param>
        partial void AfterChangeMyIcon(ref bool suppressDefaultLog, IChangeMyIconApiResponse apiResponseLocalVar, System.IO.Stream file);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="file"></param>
        private void OnErrorChangeMyIconDefaultImplementation(Exception exception, string pathFormat, string path, System.IO.Stream file)
        {
            bool suppressDefaultLog = false;
            OnErrorChangeMyIcon(ref suppressDefaultLog, exception, pathFormat, path, file);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="file"></param>
        partial void OnErrorChangeMyIcon(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, System.IO.Stream file);

        /// <summary>
        /// 自分のアイコン画像を変更 自分のアイコン画像を変更します。
        /// </summary>
        /// <param name="file">アイコン画像(2MBまでのpng, jpeg, gif)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IChangeMyIconApiResponse"/>&gt;</returns>
        public async Task<IChangeMyIconApiResponse?> ChangeMyIconOrDefaultAsync(System.IO.Stream file, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ChangeMyIconAsync(file, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 自分のアイコン画像を変更 自分のアイコン画像を変更します。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">アイコン画像(2MBまでのpng, jpeg, gif)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IChangeMyIconApiResponse"/>&gt;</returns>
        public async Task<IChangeMyIconApiResponse> ChangeMyIconAsync(System.IO.Stream file, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateChangeMyIcon(file);

                FormatChangeMyIcon(ref file);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/users/me/icon";

                    MultipartContent multipartContentLocalVar = new MultipartContent();

                    httpRequestMessageLocalVar.Content = multipartContentLocalVar;

                    List<KeyValuePair<string?, string?>> formParameterLocalVars = new List<KeyValuePair<string?, string?>>();

                    multipartContentLocalVar.Add(new FormUrlEncodedContent(formParameterLocalVars));                    multipartContentLocalVar.Add(new StreamContent(file));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "multipart/form-data"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ChangeMyIconApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ChangeMyIconApiResponse>();

                        ChangeMyIconApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/users/me/icon", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterChangeMyIconDefaultImplementation(apiResponseLocalVar, file);

                        Events.ExecuteOnChangeMyIcon(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorChangeMyIconDefaultImplementation(e, "/users/me/icon", uriBuilderLocalVar.Path, file);
                Events.ExecuteOnErrorChangeMyIcon(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ChangeMyIconApiResponse"/>
        /// </summary>
        public partial class ChangeMyIconApiResponse : Traq.Client.ApiResponse, IChangeMyIconApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ChangeMyIconApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ChangeMyIconApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ChangeMyIconApiResponse(ILogger<ChangeMyIconApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 413 ContentTooLarge
            /// </summary>
            /// <returns></returns>
            public bool IsContentTooLarge => 413 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatChangeMyNotifyCitation(Option<PutNotifyCitationRequest> putNotifyCitationRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="putNotifyCitationRequest"></param>
        /// <returns></returns>
        private void ValidateChangeMyNotifyCitation(Option<PutNotifyCitationRequest> putNotifyCitationRequest)
        {
            if (putNotifyCitationRequest.IsSet && putNotifyCitationRequest.Value == null)
                throw new ArgumentNullException(nameof(putNotifyCitationRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="putNotifyCitationRequest"></param>
        private void AfterChangeMyNotifyCitationDefaultImplementation(IChangeMyNotifyCitationApiResponse apiResponseLocalVar, Option<PutNotifyCitationRequest> putNotifyCitationRequest)
        {
            bool suppressDefaultLog = false;
            AfterChangeMyNotifyCitation(ref suppressDefaultLog, apiResponseLocalVar, putNotifyCitationRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="putNotifyCitationRequest"></param>
        partial void AfterChangeMyNotifyCitation(ref bool suppressDefaultLog, IChangeMyNotifyCitationApiResponse apiResponseLocalVar, Option<PutNotifyCitationRequest> putNotifyCitationRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="putNotifyCitationRequest"></param>
        private void OnErrorChangeMyNotifyCitationDefaultImplementation(Exception exception, string pathFormat, string path, Option<PutNotifyCitationRequest> putNotifyCitationRequest)
        {
            bool suppressDefaultLog = false;
            OnErrorChangeMyNotifyCitation(ref suppressDefaultLog, exception, pathFormat, path, putNotifyCitationRequest);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="putNotifyCitationRequest"></param>
        partial void OnErrorChangeMyNotifyCitation(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<PutNotifyCitationRequest> putNotifyCitationRequest);

        /// <summary>
        /// メッセージ引用通知の設定情報を変更 メッセージ引用通知の設定情報を変更します
        /// </summary>
        /// <param name="putNotifyCitationRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IChangeMyNotifyCitationApiResponse"/>&gt;</returns>
        public async Task<IChangeMyNotifyCitationApiResponse?> ChangeMyNotifyCitationOrDefaultAsync(Option<PutNotifyCitationRequest> putNotifyCitationRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ChangeMyNotifyCitationAsync(putNotifyCitationRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// メッセージ引用通知の設定情報を変更 メッセージ引用通知の設定情報を変更します
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="putNotifyCitationRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IChangeMyNotifyCitationApiResponse"/>&gt;</returns>
        public async Task<IChangeMyNotifyCitationApiResponse> ChangeMyNotifyCitationAsync(Option<PutNotifyCitationRequest> putNotifyCitationRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateChangeMyNotifyCitation(putNotifyCitationRequest);

                FormatChangeMyNotifyCitation(putNotifyCitationRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/users/me/settings/notify-citation";

                    if (putNotifyCitationRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (putNotifyCitationRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(putNotifyCitationRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ChangeMyNotifyCitationApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ChangeMyNotifyCitationApiResponse>();

                        ChangeMyNotifyCitationApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/users/me/settings/notify-citation", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterChangeMyNotifyCitationDefaultImplementation(apiResponseLocalVar, putNotifyCitationRequest);

                        Events.ExecuteOnChangeMyNotifyCitation(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorChangeMyNotifyCitationDefaultImplementation(e, "/users/me/settings/notify-citation", uriBuilderLocalVar.Path, putNotifyCitationRequest);
                Events.ExecuteOnErrorChangeMyNotifyCitation(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ChangeMyNotifyCitationApiResponse"/>
        /// </summary>
        public partial class ChangeMyNotifyCitationApiResponse : Traq.Client.ApiResponse, IChangeMyNotifyCitationApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ChangeMyNotifyCitationApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ChangeMyNotifyCitationApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ChangeMyNotifyCitationApiResponse(ILogger<ChangeMyNotifyCitationApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatChangeMyPassword(Option<PutMyPasswordRequest> putMyPasswordRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="putMyPasswordRequest"></param>
        /// <returns></returns>
        private void ValidateChangeMyPassword(Option<PutMyPasswordRequest> putMyPasswordRequest)
        {
            if (putMyPasswordRequest.IsSet && putMyPasswordRequest.Value == null)
                throw new ArgumentNullException(nameof(putMyPasswordRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="putMyPasswordRequest"></param>
        private void AfterChangeMyPasswordDefaultImplementation(IChangeMyPasswordApiResponse apiResponseLocalVar, Option<PutMyPasswordRequest> putMyPasswordRequest)
        {
            bool suppressDefaultLog = false;
            AfterChangeMyPassword(ref suppressDefaultLog, apiResponseLocalVar, putMyPasswordRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="putMyPasswordRequest"></param>
        partial void AfterChangeMyPassword(ref bool suppressDefaultLog, IChangeMyPasswordApiResponse apiResponseLocalVar, Option<PutMyPasswordRequest> putMyPasswordRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="putMyPasswordRequest"></param>
        private void OnErrorChangeMyPasswordDefaultImplementation(Exception exception, string pathFormat, string path, Option<PutMyPasswordRequest> putMyPasswordRequest)
        {
            bool suppressDefaultLog = false;
            OnErrorChangeMyPassword(ref suppressDefaultLog, exception, pathFormat, path, putMyPasswordRequest);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="putMyPasswordRequest"></param>
        partial void OnErrorChangeMyPassword(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<PutMyPasswordRequest> putMyPasswordRequest);

        /// <summary>
        /// 自分のパスワードを変更 自身のパスワードを変更します。
        /// </summary>
        /// <param name="putMyPasswordRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IChangeMyPasswordApiResponse"/>&gt;</returns>
        public async Task<IChangeMyPasswordApiResponse?> ChangeMyPasswordOrDefaultAsync(Option<PutMyPasswordRequest> putMyPasswordRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ChangeMyPasswordAsync(putMyPasswordRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 自分のパスワードを変更 自身のパスワードを変更します。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="putMyPasswordRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IChangeMyPasswordApiResponse"/>&gt;</returns>
        public async Task<IChangeMyPasswordApiResponse> ChangeMyPasswordAsync(Option<PutMyPasswordRequest> putMyPasswordRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateChangeMyPassword(putMyPasswordRequest);

                FormatChangeMyPassword(putMyPasswordRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/users/me/password";

                    if (putMyPasswordRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (putMyPasswordRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(putMyPasswordRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ChangeMyPasswordApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ChangeMyPasswordApiResponse>();

                        ChangeMyPasswordApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/users/me/password", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterChangeMyPasswordDefaultImplementation(apiResponseLocalVar, putMyPasswordRequest);

                        Events.ExecuteOnChangeMyPassword(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorChangeMyPasswordDefaultImplementation(e, "/users/me/password", uriBuilderLocalVar.Path, putMyPasswordRequest);
                Events.ExecuteOnErrorChangeMyPassword(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ChangeMyPasswordApiResponse"/>
        /// </summary>
        public partial class ChangeMyPasswordApiResponse : Traq.Client.ApiResponse, IChangeMyPasswordApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ChangeMyPasswordApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ChangeMyPasswordApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ChangeMyPasswordApiResponse(ILogger<ChangeMyPasswordApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEditMe(Option<PatchMeRequest> patchMeRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="patchMeRequest"></param>
        /// <returns></returns>
        private void ValidateEditMe(Option<PatchMeRequest> patchMeRequest)
        {
            if (patchMeRequest.IsSet && patchMeRequest.Value == null)
                throw new ArgumentNullException(nameof(patchMeRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="patchMeRequest"></param>
        private void AfterEditMeDefaultImplementation(IEditMeApiResponse apiResponseLocalVar, Option<PatchMeRequest> patchMeRequest)
        {
            bool suppressDefaultLog = false;
            AfterEditMe(ref suppressDefaultLog, apiResponseLocalVar, patchMeRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="patchMeRequest"></param>
        partial void AfterEditMe(ref bool suppressDefaultLog, IEditMeApiResponse apiResponseLocalVar, Option<PatchMeRequest> patchMeRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="patchMeRequest"></param>
        private void OnErrorEditMeDefaultImplementation(Exception exception, string pathFormat, string path, Option<PatchMeRequest> patchMeRequest)
        {
            bool suppressDefaultLog = false;
            OnErrorEditMe(ref suppressDefaultLog, exception, pathFormat, path, patchMeRequest);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="patchMeRequest"></param>
        partial void OnErrorEditMe(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<PatchMeRequest> patchMeRequest);

        /// <summary>
        /// 自分のユーザー情報を変更 自身のユーザー情報を変更します。
        /// </summary>
        /// <param name="patchMeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEditMeApiResponse"/>&gt;</returns>
        public async Task<IEditMeApiResponse?> EditMeOrDefaultAsync(Option<PatchMeRequest> patchMeRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EditMeAsync(patchMeRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 自分のユーザー情報を変更 自身のユーザー情報を変更します。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="patchMeRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEditMeApiResponse"/>&gt;</returns>
        public async Task<IEditMeApiResponse> EditMeAsync(Option<PatchMeRequest> patchMeRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEditMe(patchMeRequest);

                FormatEditMe(patchMeRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/users/me";

                    if (patchMeRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (patchMeRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(patchMeRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Patch;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EditMeApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EditMeApiResponse>();

                        EditMeApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/users/me", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEditMeDefaultImplementation(apiResponseLocalVar, patchMeRequest);

                        Events.ExecuteOnEditMe(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEditMeDefaultImplementation(e, "/users/me", uriBuilderLocalVar.Path, patchMeRequest);
                Events.ExecuteOnErrorEditMe(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EditMeApiResponse"/>
        /// </summary>
        public partial class EditMeApiResponse : Traq.Client.ApiResponse, IEditMeApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EditMeApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EditMeApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EditMeApiResponse(ILogger<EditMeApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEditMyUserTag(ref Guid tagId, Option<PatchUserTagRequest> patchUserTagRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="patchUserTagRequest"></param>
        /// <returns></returns>
        private void ValidateEditMyUserTag(Option<PatchUserTagRequest> patchUserTagRequest)
        {
            if (patchUserTagRequest.IsSet && patchUserTagRequest.Value == null)
                throw new ArgumentNullException(nameof(patchUserTagRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="tagId"></param>
        /// <param name="patchUserTagRequest"></param>
        private void AfterEditMyUserTagDefaultImplementation(IEditMyUserTagApiResponse apiResponseLocalVar, Guid tagId, Option<PatchUserTagRequest> patchUserTagRequest)
        {
            bool suppressDefaultLog = false;
            AfterEditMyUserTag(ref suppressDefaultLog, apiResponseLocalVar, tagId, patchUserTagRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="tagId"></param>
        /// <param name="patchUserTagRequest"></param>
        partial void AfterEditMyUserTag(ref bool suppressDefaultLog, IEditMyUserTagApiResponse apiResponseLocalVar, Guid tagId, Option<PatchUserTagRequest> patchUserTagRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="tagId"></param>
        /// <param name="patchUserTagRequest"></param>
        private void OnErrorEditMyUserTagDefaultImplementation(Exception exception, string pathFormat, string path, Guid tagId, Option<PatchUserTagRequest> patchUserTagRequest)
        {
            bool suppressDefaultLog = false;
            OnErrorEditMyUserTag(ref suppressDefaultLog, exception, pathFormat, path, tagId, patchUserTagRequest);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="tagId"></param>
        /// <param name="patchUserTagRequest"></param>
        partial void OnErrorEditMyUserTag(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Guid tagId, Option<PatchUserTagRequest> patchUserTagRequest);

        /// <summary>
        /// 自分のタグを編集 自分の指定したタグの状態を変更します。
        /// </summary>
        /// <param name="tagId">タグUUID</param>
        /// <param name="patchUserTagRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEditMyUserTagApiResponse"/>&gt;</returns>
        public async Task<IEditMyUserTagApiResponse?> EditMyUserTagOrDefaultAsync(Guid tagId, Option<PatchUserTagRequest> patchUserTagRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EditMyUserTagAsync(tagId, patchUserTagRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 自分のタグを編集 自分の指定したタグの状態を変更します。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId">タグUUID</param>
        /// <param name="patchUserTagRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEditMyUserTagApiResponse"/>&gt;</returns>
        public async Task<IEditMyUserTagApiResponse> EditMyUserTagAsync(Guid tagId, Option<PatchUserTagRequest> patchUserTagRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEditMyUserTag(patchUserTagRequest);

                FormatEditMyUserTag(ref tagId, patchUserTagRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/users/me/tags/{tagId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BtagId%7D", Uri.EscapeDataString(tagId.ToString()));

                    if (patchUserTagRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (patchUserTagRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(patchUserTagRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Patch;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EditMyUserTagApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EditMyUserTagApiResponse>();

                        EditMyUserTagApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/users/me/tags/{tagId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEditMyUserTagDefaultImplementation(apiResponseLocalVar, tagId, patchUserTagRequest);

                        Events.ExecuteOnEditMyUserTag(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEditMyUserTagDefaultImplementation(e, "/users/me/tags/{tagId}", uriBuilderLocalVar.Path, tagId, patchUserTagRequest);
                Events.ExecuteOnErrorEditMyUserTag(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EditMyUserTagApiResponse"/>
        /// </summary>
        public partial class EditMyUserTagApiResponse : Traq.Client.ApiResponse, IEditMyUserTagApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EditMyUserTagApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EditMyUserTagApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EditMyUserTagApiResponse(ILogger<EditMyUserTagApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetMeDefaultImplementation(IGetMeApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetMe(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetMe(ref bool suppressDefaultLog, IGetMeApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        private void OnErrorGetMeDefaultImplementation(Exception exception, string pathFormat, string path)
        {
            bool suppressDefaultLog = false;
            OnErrorGetMe(ref suppressDefaultLog, exception, pathFormat, path);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        partial void OnErrorGetMe(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path);

        /// <summary>
        /// 自分のユーザー詳細を取得 自身のユーザー詳細情報を取得します。
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMeApiResponse"/>&gt;</returns>
        public async Task<IGetMeApiResponse?> GetMeOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetMeAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 自分のユーザー詳細を取得 自身のユーザー詳細情報を取得します。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMeApiResponse"/>&gt;</returns>
        public async Task<IGetMeApiResponse> GetMeAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/users/me";

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetMeApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetMeApiResponse>();

                        GetMeApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/users/me", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetMeDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetMe(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetMeDefaultImplementation(e, "/users/me", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetMe(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetMeApiResponse"/>
        /// </summary>
        public partial class GetMeApiResponse : Traq.Client.ApiResponse, IGetMeApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetMeApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetMeApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetMeApiResponse(ILogger<GetMeApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Traq.Model.MyUserDetail? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Traq.Model.MyUserDetail>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Traq.Model.MyUserDetail? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetMyChannelSubscriptionsDefaultImplementation(IGetMyChannelSubscriptionsApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetMyChannelSubscriptions(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetMyChannelSubscriptions(ref bool suppressDefaultLog, IGetMyChannelSubscriptionsApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        private void OnErrorGetMyChannelSubscriptionsDefaultImplementation(Exception exception, string pathFormat, string path)
        {
            bool suppressDefaultLog = false;
            OnErrorGetMyChannelSubscriptions(ref suppressDefaultLog, exception, pathFormat, path);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        partial void OnErrorGetMyChannelSubscriptions(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path);

        /// <summary>
        /// 自分のチャンネル購読状態を取得 自身のチャンネル購読状態を取得します。
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMyChannelSubscriptionsApiResponse"/>&gt;</returns>
        public async Task<IGetMyChannelSubscriptionsApiResponse?> GetMyChannelSubscriptionsOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetMyChannelSubscriptionsAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 自分のチャンネル購読状態を取得 自身のチャンネル購読状態を取得します。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMyChannelSubscriptionsApiResponse"/>&gt;</returns>
        public async Task<IGetMyChannelSubscriptionsApiResponse> GetMyChannelSubscriptionsAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/users/me/subscriptions";

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetMyChannelSubscriptionsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetMyChannelSubscriptionsApiResponse>();

                        GetMyChannelSubscriptionsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/users/me/subscriptions", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetMyChannelSubscriptionsDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetMyChannelSubscriptions(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetMyChannelSubscriptionsDefaultImplementation(e, "/users/me/subscriptions", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetMyChannelSubscriptions(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetMyChannelSubscriptionsApiResponse"/>
        /// </summary>
        public partial class GetMyChannelSubscriptionsApiResponse : Traq.Client.ApiResponse, IGetMyChannelSubscriptionsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetMyChannelSubscriptionsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetMyChannelSubscriptionsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetMyChannelSubscriptionsApiResponse(ILogger<GetMyChannelSubscriptionsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<UserSubscribeState>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<UserSubscribeState>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<UserSubscribeState>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetMyExternalAccountsDefaultImplementation(IGetMyExternalAccountsApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetMyExternalAccounts(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetMyExternalAccounts(ref bool suppressDefaultLog, IGetMyExternalAccountsApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        private void OnErrorGetMyExternalAccountsDefaultImplementation(Exception exception, string pathFormat, string path)
        {
            bool suppressDefaultLog = false;
            OnErrorGetMyExternalAccounts(ref suppressDefaultLog, exception, pathFormat, path);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        partial void OnErrorGetMyExternalAccounts(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path);

        /// <summary>
        /// 外部ログインアカウント一覧を取得 自分に紐付けられている外部ログインアカウント一覧を取得します。
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMyExternalAccountsApiResponse"/>&gt;</returns>
        public async Task<IGetMyExternalAccountsApiResponse?> GetMyExternalAccountsOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetMyExternalAccountsAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 外部ログインアカウント一覧を取得 自分に紐付けられている外部ログインアカウント一覧を取得します。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMyExternalAccountsApiResponse"/>&gt;</returns>
        public async Task<IGetMyExternalAccountsApiResponse> GetMyExternalAccountsAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/users/me/ex-accounts";

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetMyExternalAccountsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetMyExternalAccountsApiResponse>();

                        GetMyExternalAccountsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/users/me/ex-accounts", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetMyExternalAccountsDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetMyExternalAccounts(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetMyExternalAccountsDefaultImplementation(e, "/users/me/ex-accounts", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetMyExternalAccounts(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetMyExternalAccountsApiResponse"/>
        /// </summary>
        public partial class GetMyExternalAccountsApiResponse : Traq.Client.ApiResponse, IGetMyExternalAccountsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetMyExternalAccountsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetMyExternalAccountsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetMyExternalAccountsApiResponse(ILogger<GetMyExternalAccountsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<ExternalProviderUser>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<ExternalProviderUser>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<ExternalProviderUser>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetMyIconDefaultImplementation(IGetMyIconApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetMyIcon(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetMyIcon(ref bool suppressDefaultLog, IGetMyIconApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        private void OnErrorGetMyIconDefaultImplementation(Exception exception, string pathFormat, string path)
        {
            bool suppressDefaultLog = false;
            OnErrorGetMyIcon(ref suppressDefaultLog, exception, pathFormat, path);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        partial void OnErrorGetMyIcon(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path);

        /// <summary>
        /// 自分のアイコン画像を取得 自分のアイコン画像を取得します。
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMyIconApiResponse"/>&gt;</returns>
        public async Task<IGetMyIconApiResponse?> GetMyIconOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetMyIconAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 自分のアイコン画像を取得 自分のアイコン画像を取得します。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMyIconApiResponse"/>&gt;</returns>
        public async Task<IGetMyIconApiResponse> GetMyIconAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/users/me/icon";

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "image/jpeg",
                        "image/gif",
                        "image/png"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetMyIconApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetMyIconApiResponse>();

                        GetMyIconApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/users/me/icon", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetMyIconDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetMyIcon(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetMyIconDefaultImplementation(e, "/users/me/icon", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetMyIcon(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetMyIconApiResponse"/>
        /// </summary>
        public partial class GetMyIconApiResponse : Traq.Client.ApiResponse, IGetMyIconApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetMyIconApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetMyIconApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetMyIconApiResponse(ILogger<GetMyIconApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public System.IO.Stream? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<System.IO.Stream>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out System.IO.Stream? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetMyNotifyCitationDefaultImplementation(IGetMyNotifyCitationApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetMyNotifyCitation(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetMyNotifyCitation(ref bool suppressDefaultLog, IGetMyNotifyCitationApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        private void OnErrorGetMyNotifyCitationDefaultImplementation(Exception exception, string pathFormat, string path)
        {
            bool suppressDefaultLog = false;
            OnErrorGetMyNotifyCitation(ref suppressDefaultLog, exception, pathFormat, path);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        partial void OnErrorGetMyNotifyCitation(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path);

        /// <summary>
        /// メッセージ引用通知の設定情報を取得 メッセージ引用通知の設定情報を変更します。
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMyNotifyCitationApiResponse"/>&gt;</returns>
        public async Task<IGetMyNotifyCitationApiResponse?> GetMyNotifyCitationOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetMyNotifyCitationAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// メッセージ引用通知の設定情報を取得 メッセージ引用通知の設定情報を変更します。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMyNotifyCitationApiResponse"/>&gt;</returns>
        public async Task<IGetMyNotifyCitationApiResponse> GetMyNotifyCitationAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/users/me/settings/notify-citation";

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetMyNotifyCitationApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetMyNotifyCitationApiResponse>();

                        GetMyNotifyCitationApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/users/me/settings/notify-citation", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetMyNotifyCitationDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetMyNotifyCitation(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetMyNotifyCitationDefaultImplementation(e, "/users/me/settings/notify-citation", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetMyNotifyCitation(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetMyNotifyCitationApiResponse"/>
        /// </summary>
        public partial class GetMyNotifyCitationApiResponse : Traq.Client.ApiResponse, IGetMyNotifyCitationApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetMyNotifyCitationApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetMyNotifyCitationApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetMyNotifyCitationApiResponse(ILogger<GetMyNotifyCitationApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Traq.Model.GetNotifyCitation? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Traq.Model.GetNotifyCitation>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Traq.Model.GetNotifyCitation? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetMyQRCode(ref Option<bool> token);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="token"></param>
        private void AfterGetMyQRCodeDefaultImplementation(IGetMyQRCodeApiResponse apiResponseLocalVar, Option<bool> token)
        {
            bool suppressDefaultLog = false;
            AfterGetMyQRCode(ref suppressDefaultLog, apiResponseLocalVar, token);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="token"></param>
        partial void AfterGetMyQRCode(ref bool suppressDefaultLog, IGetMyQRCodeApiResponse apiResponseLocalVar, Option<bool> token);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="token"></param>
        private void OnErrorGetMyQRCodeDefaultImplementation(Exception exception, string pathFormat, string path, Option<bool> token)
        {
            bool suppressDefaultLog = false;
            OnErrorGetMyQRCode(ref suppressDefaultLog, exception, pathFormat, path, token);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="token"></param>
        partial void OnErrorGetMyQRCode(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<bool> token);

        /// <summary>
        /// QRコードを取得 自身のQRコードを取得します。 返されたQRコードまたはトークンは、発行後の5分間のみ有効です
        /// </summary>
        /// <param name="token">画像でなくトークン文字列で返すかどうか (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMyQRCodeApiResponse"/>&gt;</returns>
        public async Task<IGetMyQRCodeApiResponse?> GetMyQRCodeOrDefaultAsync(Option<bool> token = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetMyQRCodeAsync(token, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// QRコードを取得 自身のQRコードを取得します。 返されたQRコードまたはトークンは、発行後の5分間のみ有効です
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">画像でなくトークン文字列で返すかどうか (optional, default to false)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMyQRCodeApiResponse"/>&gt;</returns>
        public async Task<IGetMyQRCodeApiResponse> GetMyQRCodeAsync(Option<bool> token = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetMyQRCode(ref token);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/users/me/qr-code";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (token.IsSet)
                        parseQueryStringLocalVar["token"] = ClientUtils.ParameterToString(token.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "image/png",
                        "text/plain"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetMyQRCodeApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetMyQRCodeApiResponse>();

                        GetMyQRCodeApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/users/me/qr-code", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetMyQRCodeDefaultImplementation(apiResponseLocalVar, token);

                        Events.ExecuteOnGetMyQRCode(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetMyQRCodeDefaultImplementation(e, "/users/me/qr-code", uriBuilderLocalVar.Path, token);
                Events.ExecuteOnErrorGetMyQRCode(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetMyQRCodeApiResponse"/>
        /// </summary>
        public partial class GetMyQRCodeApiResponse : Traq.Client.ApiResponse, IGetMyQRCodeApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetMyQRCodeApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetMyQRCodeApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetMyQRCodeApiResponse(ILogger<GetMyQRCodeApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public System.IO.Stream? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<System.IO.Stream>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out System.IO.Stream? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetMySessionsDefaultImplementation(IGetMySessionsApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetMySessions(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetMySessions(ref bool suppressDefaultLog, IGetMySessionsApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        private void OnErrorGetMySessionsDefaultImplementation(Exception exception, string pathFormat, string path)
        {
            bool suppressDefaultLog = false;
            OnErrorGetMySessions(ref suppressDefaultLog, exception, pathFormat, path);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        partial void OnErrorGetMySessions(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path);

        /// <summary>
        /// 自分のログインセッションリストを取得 自分のログインセッションのリストを取得します。
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMySessionsApiResponse"/>&gt;</returns>
        public async Task<IGetMySessionsApiResponse?> GetMySessionsOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetMySessionsAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 自分のログインセッションリストを取得 自分のログインセッションのリストを取得します。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMySessionsApiResponse"/>&gt;</returns>
        public async Task<IGetMySessionsApiResponse> GetMySessionsAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/users/me/sessions";

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetMySessionsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetMySessionsApiResponse>();

                        GetMySessionsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/users/me/sessions", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetMySessionsDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetMySessions(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetMySessionsDefaultImplementation(e, "/users/me/sessions", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetMySessions(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetMySessionsApiResponse"/>
        /// </summary>
        public partial class GetMySessionsApiResponse : Traq.Client.ApiResponse, IGetMySessionsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetMySessionsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetMySessionsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetMySessionsApiResponse(ILogger<GetMySessionsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<LoginSession>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<LoginSession>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<LoginSession>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetMyStampHistory(ref Option<int> limit);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="limit"></param>
        private void AfterGetMyStampHistoryDefaultImplementation(IGetMyStampHistoryApiResponse apiResponseLocalVar, Option<int> limit)
        {
            bool suppressDefaultLog = false;
            AfterGetMyStampHistory(ref suppressDefaultLog, apiResponseLocalVar, limit);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="limit"></param>
        partial void AfterGetMyStampHistory(ref bool suppressDefaultLog, IGetMyStampHistoryApiResponse apiResponseLocalVar, Option<int> limit);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="limit"></param>
        private void OnErrorGetMyStampHistoryDefaultImplementation(Exception exception, string pathFormat, string path, Option<int> limit)
        {
            bool suppressDefaultLog = false;
            OnErrorGetMyStampHistory(ref suppressDefaultLog, exception, pathFormat, path, limit);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="limit"></param>
        partial void OnErrorGetMyStampHistory(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<int> limit);

        /// <summary>
        /// スタンプ履歴を取得 自分のスタンプ履歴を最大100件まで取得します。 結果は降順で返されます。  このAPIが返すスタンプ履歴は厳密な履歴ではありません。
        /// </summary>
        /// <param name="limit">件数 (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMyStampHistoryApiResponse"/>&gt;</returns>
        public async Task<IGetMyStampHistoryApiResponse?> GetMyStampHistoryOrDefaultAsync(Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetMyStampHistoryAsync(limit, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// スタンプ履歴を取得 自分のスタンプ履歴を最大100件まで取得します。 結果は降順で返されます。  このAPIが返すスタンプ履歴は厳密な履歴ではありません。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">件数 (optional, default to 100)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMyStampHistoryApiResponse"/>&gt;</returns>
        public async Task<IGetMyStampHistoryApiResponse> GetMyStampHistoryAsync(Option<int> limit = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetMyStampHistory(ref limit);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/users/me/stamp-history";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetMyStampHistoryApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetMyStampHistoryApiResponse>();

                        GetMyStampHistoryApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/users/me/stamp-history", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetMyStampHistoryDefaultImplementation(apiResponseLocalVar, limit);

                        Events.ExecuteOnGetMyStampHistory(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetMyStampHistoryDefaultImplementation(e, "/users/me/stamp-history", uriBuilderLocalVar.Path, limit);
                Events.ExecuteOnErrorGetMyStampHistory(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetMyStampHistoryApiResponse"/>
        /// </summary>
        public partial class GetMyStampHistoryApiResponse : Traq.Client.ApiResponse, IGetMyStampHistoryApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetMyStampHistoryApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetMyStampHistoryApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetMyStampHistoryApiResponse(ILogger<GetMyStampHistoryApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<StampHistoryEntry>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<StampHistoryEntry>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<StampHistoryEntry>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetMyStarsDefaultImplementation(IGetMyStarsApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetMyStars(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetMyStars(ref bool suppressDefaultLog, IGetMyStarsApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        private void OnErrorGetMyStarsDefaultImplementation(Exception exception, string pathFormat, string path)
        {
            bool suppressDefaultLog = false;
            OnErrorGetMyStars(ref suppressDefaultLog, exception, pathFormat, path);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        partial void OnErrorGetMyStars(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path);

        /// <summary>
        /// スターチャンネルリストを取得 自分がスターしているチャンネルのUUIDの配列を取得します。
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMyStarsApiResponse"/>&gt;</returns>
        public async Task<IGetMyStarsApiResponse?> GetMyStarsOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetMyStarsAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// スターチャンネルリストを取得 自分がスターしているチャンネルのUUIDの配列を取得します。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMyStarsApiResponse"/>&gt;</returns>
        public async Task<IGetMyStarsApiResponse> GetMyStarsAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/users/me/stars";

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetMyStarsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetMyStarsApiResponse>();

                        GetMyStarsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/users/me/stars", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetMyStarsDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetMyStars(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetMyStarsDefaultImplementation(e, "/users/me/stars", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetMyStars(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetMyStarsApiResponse"/>
        /// </summary>
        public partial class GetMyStarsApiResponse : Traq.Client.ApiResponse, IGetMyStarsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetMyStarsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetMyStarsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetMyStarsApiResponse(ILogger<GetMyStarsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<Guid>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<Guid>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<Guid>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetMyTokensDefaultImplementation(IGetMyTokensApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetMyTokens(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetMyTokens(ref bool suppressDefaultLog, IGetMyTokensApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        private void OnErrorGetMyTokensDefaultImplementation(Exception exception, string pathFormat, string path)
        {
            bool suppressDefaultLog = false;
            OnErrorGetMyTokens(ref suppressDefaultLog, exception, pathFormat, path);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        partial void OnErrorGetMyTokens(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path);

        /// <summary>
        /// 有効トークンのリストを取得 有効な自分に発行されたOAuth2トークンのリストを取得します。
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMyTokensApiResponse"/>&gt;</returns>
        public async Task<IGetMyTokensApiResponse?> GetMyTokensOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetMyTokensAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 有効トークンのリストを取得 有効な自分に発行されたOAuth2トークンのリストを取得します。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMyTokensApiResponse"/>&gt;</returns>
        public async Task<IGetMyTokensApiResponse> GetMyTokensAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/users/me/tokens";

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetMyTokensApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetMyTokensApiResponse>();

                        GetMyTokensApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/users/me/tokens", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetMyTokensDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetMyTokens(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetMyTokensDefaultImplementation(e, "/users/me/tokens", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetMyTokens(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetMyTokensApiResponse"/>
        /// </summary>
        public partial class GetMyTokensApiResponse : Traq.Client.ApiResponse, IGetMyTokensApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetMyTokensApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetMyTokensApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetMyTokensApiResponse(ILogger<GetMyTokensApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<ActiveOAuth2Token>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<ActiveOAuth2Token>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<ActiveOAuth2Token>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetMyUnreadChannelsDefaultImplementation(IGetMyUnreadChannelsApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetMyUnreadChannels(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetMyUnreadChannels(ref bool suppressDefaultLog, IGetMyUnreadChannelsApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        private void OnErrorGetMyUnreadChannelsDefaultImplementation(Exception exception, string pathFormat, string path)
        {
            bool suppressDefaultLog = false;
            OnErrorGetMyUnreadChannels(ref suppressDefaultLog, exception, pathFormat, path);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        partial void OnErrorGetMyUnreadChannels(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path);

        /// <summary>
        /// 未読チャンネルを取得 自分が現在未読のチャンネルの未読情報を取得します。
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMyUnreadChannelsApiResponse"/>&gt;</returns>
        public async Task<IGetMyUnreadChannelsApiResponse?> GetMyUnreadChannelsOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetMyUnreadChannelsAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 未読チャンネルを取得 自分が現在未読のチャンネルの未読情報を取得します。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMyUnreadChannelsApiResponse"/>&gt;</returns>
        public async Task<IGetMyUnreadChannelsApiResponse> GetMyUnreadChannelsAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/users/me/unread";

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetMyUnreadChannelsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetMyUnreadChannelsApiResponse>();

                        GetMyUnreadChannelsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/users/me/unread", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetMyUnreadChannelsDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetMyUnreadChannels(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetMyUnreadChannelsDefaultImplementation(e, "/users/me/unread", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetMyUnreadChannels(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetMyUnreadChannelsApiResponse"/>
        /// </summary>
        public partial class GetMyUnreadChannelsApiResponse : Traq.Client.ApiResponse, IGetMyUnreadChannelsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetMyUnreadChannelsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetMyUnreadChannelsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetMyUnreadChannelsApiResponse(ILogger<GetMyUnreadChannelsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<UnreadChannel>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<UnreadChannel>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<UnreadChannel>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetMyUserTagsDefaultImplementation(IGetMyUserTagsApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetMyUserTags(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetMyUserTags(ref bool suppressDefaultLog, IGetMyUserTagsApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        private void OnErrorGetMyUserTagsDefaultImplementation(Exception exception, string pathFormat, string path)
        {
            bool suppressDefaultLog = false;
            OnErrorGetMyUserTags(ref suppressDefaultLog, exception, pathFormat, path);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        partial void OnErrorGetMyUserTags(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path);

        /// <summary>
        /// 自分のタグリストを取得 自分に付けられているタグの配列を取得します。
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMyUserTagsApiResponse"/>&gt;</returns>
        public async Task<IGetMyUserTagsApiResponse?> GetMyUserTagsOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetMyUserTagsAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 自分のタグリストを取得 自分に付けられているタグの配列を取得します。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMyUserTagsApiResponse"/>&gt;</returns>
        public async Task<IGetMyUserTagsApiResponse> GetMyUserTagsAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/users/me/tags";

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetMyUserTagsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetMyUserTagsApiResponse>();

                        GetMyUserTagsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/users/me/tags", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetMyUserTagsDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetMyUserTags(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetMyUserTagsDefaultImplementation(e, "/users/me/tags", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetMyUserTags(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetMyUserTagsApiResponse"/>
        /// </summary>
        public partial class GetMyUserTagsApiResponse : Traq.Client.ApiResponse, IGetMyUserTagsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetMyUserTagsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetMyUserTagsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetMyUserTagsApiResponse(ILogger<GetMyUserTagsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<UserTag>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<UserTag>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<UserTag>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetMyViewStatesDefaultImplementation(IGetMyViewStatesApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetMyViewStates(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetMyViewStates(ref bool suppressDefaultLog, IGetMyViewStatesApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        private void OnErrorGetMyViewStatesDefaultImplementation(Exception exception, string pathFormat, string path)
        {
            bool suppressDefaultLog = false;
            OnErrorGetMyViewStates(ref suppressDefaultLog, exception, pathFormat, path);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        partial void OnErrorGetMyViewStates(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path);

        /// <summary>
        /// 自身のチャンネル閲覧状態一覧を取得 自身のチャンネル閲覧状態一覧を取得します。
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMyViewStatesApiResponse"/>&gt;</returns>
        public async Task<IGetMyViewStatesApiResponse?> GetMyViewStatesOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetMyViewStatesAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 自身のチャンネル閲覧状態一覧を取得 自身のチャンネル閲覧状態一覧を取得します。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetMyViewStatesApiResponse"/>&gt;</returns>
        public async Task<IGetMyViewStatesApiResponse> GetMyViewStatesAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/users/me/view-states";

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetMyViewStatesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetMyViewStatesApiResponse>();

                        GetMyViewStatesApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/users/me/view-states", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetMyViewStatesDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetMyViewStates(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetMyViewStatesDefaultImplementation(e, "/users/me/view-states", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetMyViewStates(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetMyViewStatesApiResponse"/>
        /// </summary>
        public partial class GetMyViewStatesApiResponse : Traq.Client.ApiResponse, IGetMyViewStatesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetMyViewStatesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetMyViewStatesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetMyViewStatesApiResponse(ILogger<GetMyViewStatesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<MyChannelViewState>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<MyChannelViewState>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<MyChannelViewState>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetOIDCUserInfoDefaultImplementation(IGetOIDCUserInfoApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetOIDCUserInfo(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetOIDCUserInfo(ref bool suppressDefaultLog, IGetOIDCUserInfoApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        private void OnErrorGetOIDCUserInfoDefaultImplementation(Exception exception, string pathFormat, string path)
        {
            bool suppressDefaultLog = false;
            OnErrorGetOIDCUserInfo(ref suppressDefaultLog, exception, pathFormat, path);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        partial void OnErrorGetOIDCUserInfo(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path);

        /// <summary>
        /// 自分のユーザー詳細を取得 (OIDC UserInfo) OIDCトークンを用いてユーザー詳細を取得します。 OIDC UserInfo Endpointです。 
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOIDCUserInfoApiResponse"/>&gt;</returns>
        public async Task<IGetOIDCUserInfoApiResponse?> GetOIDCUserInfoOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetOIDCUserInfoAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 自分のユーザー詳細を取得 (OIDC UserInfo) OIDCトークンを用いてユーザー詳細を取得します。 OIDC UserInfo Endpointです。 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOIDCUserInfoApiResponse"/>&gt;</returns>
        public async Task<IGetOIDCUserInfoApiResponse> GetOIDCUserInfoAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/users/me/oidc";

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetOIDCUserInfoApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetOIDCUserInfoApiResponse>();

                        GetOIDCUserInfoApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/users/me/oidc", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetOIDCUserInfoDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetOIDCUserInfo(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetOIDCUserInfoDefaultImplementation(e, "/users/me/oidc", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetOIDCUserInfo(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetOIDCUserInfoApiResponse"/>
        /// </summary>
        public partial class GetOIDCUserInfoApiResponse : Traq.Client.ApiResponse, IGetOIDCUserInfoApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetOIDCUserInfoApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetOIDCUserInfoApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetOIDCUserInfoApiResponse(ILogger<GetOIDCUserInfoApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Traq.Model.OIDCUserInfo? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Traq.Model.OIDCUserInfo>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Traq.Model.OIDCUserInfo? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetUserSettingsDefaultImplementation(IGetUserSettingsApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetUserSettings(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetUserSettings(ref bool suppressDefaultLog, IGetUserSettingsApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        private void OnErrorGetUserSettingsDefaultImplementation(Exception exception, string pathFormat, string path)
        {
            bool suppressDefaultLog = false;
            OnErrorGetUserSettings(ref suppressDefaultLog, exception, pathFormat, path);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        partial void OnErrorGetUserSettings(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path);

        /// <summary>
        /// ユーザー設定を取得 ユーザー設定を取得します。
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserSettingsApiResponse"/>&gt;</returns>
        public async Task<IGetUserSettingsApiResponse?> GetUserSettingsOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetUserSettingsAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// ユーザー設定を取得 ユーザー設定を取得します。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserSettingsApiResponse"/>&gt;</returns>
        public async Task<IGetUserSettingsApiResponse> GetUserSettingsAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/users/me/settings";

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetUserSettingsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetUserSettingsApiResponse>();

                        GetUserSettingsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/users/me/settings", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetUserSettingsDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetUserSettings(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetUserSettingsDefaultImplementation(e, "/users/me/settings", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetUserSettings(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetUserSettingsApiResponse"/>
        /// </summary>
        public partial class GetUserSettingsApiResponse : Traq.Client.ApiResponse, IGetUserSettingsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetUserSettingsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetUserSettingsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetUserSettingsApiResponse(ILogger<GetUserSettingsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Traq.Model.UserSettings? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Traq.Model.UserSettings>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Traq.Model.UserSettings? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatLinkExternalAccount(Option<PostLinkExternalAccount> postLinkExternalAccount);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="postLinkExternalAccount"></param>
        /// <returns></returns>
        private void ValidateLinkExternalAccount(Option<PostLinkExternalAccount> postLinkExternalAccount)
        {
            if (postLinkExternalAccount.IsSet && postLinkExternalAccount.Value == null)
                throw new ArgumentNullException(nameof(postLinkExternalAccount));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="postLinkExternalAccount"></param>
        private void AfterLinkExternalAccountDefaultImplementation(ILinkExternalAccountApiResponse apiResponseLocalVar, Option<PostLinkExternalAccount> postLinkExternalAccount)
        {
            bool suppressDefaultLog = false;
            AfterLinkExternalAccount(ref suppressDefaultLog, apiResponseLocalVar, postLinkExternalAccount);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="postLinkExternalAccount"></param>
        partial void AfterLinkExternalAccount(ref bool suppressDefaultLog, ILinkExternalAccountApiResponse apiResponseLocalVar, Option<PostLinkExternalAccount> postLinkExternalAccount);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="postLinkExternalAccount"></param>
        private void OnErrorLinkExternalAccountDefaultImplementation(Exception exception, string pathFormat, string path, Option<PostLinkExternalAccount> postLinkExternalAccount)
        {
            bool suppressDefaultLog = false;
            OnErrorLinkExternalAccount(ref suppressDefaultLog, exception, pathFormat, path, postLinkExternalAccount);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="postLinkExternalAccount"></param>
        partial void OnErrorLinkExternalAccount(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<PostLinkExternalAccount> postLinkExternalAccount);

        /// <summary>
        /// 外部ログインアカウントを紐付ける 自分に外部ログインアカウントを紐付けます。 指定した&#x60;providerName&#x60;がサーバー側で有効である必要があります。 リクエストが受理された場合、外部サービスの認証画面にリダイレクトされ、認証される必要があります。
        /// </summary>
        /// <param name="postLinkExternalAccount"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILinkExternalAccountApiResponse"/>&gt;</returns>
        public async Task<ILinkExternalAccountApiResponse?> LinkExternalAccountOrDefaultAsync(Option<PostLinkExternalAccount> postLinkExternalAccount = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await LinkExternalAccountAsync(postLinkExternalAccount, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 外部ログインアカウントを紐付ける 自分に外部ログインアカウントを紐付けます。 指定した&#x60;providerName&#x60;がサーバー側で有効である必要があります。 リクエストが受理された場合、外部サービスの認証画面にリダイレクトされ、認証される必要があります。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="postLinkExternalAccount"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ILinkExternalAccountApiResponse"/>&gt;</returns>
        public async Task<ILinkExternalAccountApiResponse> LinkExternalAccountAsync(Option<PostLinkExternalAccount> postLinkExternalAccount = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateLinkExternalAccount(postLinkExternalAccount);

                FormatLinkExternalAccount(postLinkExternalAccount);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/users/me/ex-accounts/link";

                    if (postLinkExternalAccount.IsSet)
                        httpRequestMessageLocalVar.Content = (postLinkExternalAccount.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(postLinkExternalAccount.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<LinkExternalAccountApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<LinkExternalAccountApiResponse>();

                        LinkExternalAccountApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/users/me/ex-accounts/link", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterLinkExternalAccountDefaultImplementation(apiResponseLocalVar, postLinkExternalAccount);

                        Events.ExecuteOnLinkExternalAccount(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorLinkExternalAccountDefaultImplementation(e, "/users/me/ex-accounts/link", uriBuilderLocalVar.Path, postLinkExternalAccount);
                Events.ExecuteOnErrorLinkExternalAccount(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="LinkExternalAccountApiResponse"/>
        /// </summary>
        public partial class LinkExternalAccountApiResponse : Traq.Client.ApiResponse, ILinkExternalAccountApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<LinkExternalAccountApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="LinkExternalAccountApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public LinkExternalAccountApiResponse(ILogger<LinkExternalAccountApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 302 Found
            /// </summary>
            /// <returns></returns>
            public bool IsFound => 302 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatReadChannel(ref Guid channelId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="channelId"></param>
        private void AfterReadChannelDefaultImplementation(IReadChannelApiResponse apiResponseLocalVar, Guid channelId)
        {
            bool suppressDefaultLog = false;
            AfterReadChannel(ref suppressDefaultLog, apiResponseLocalVar, channelId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="channelId"></param>
        partial void AfterReadChannel(ref bool suppressDefaultLog, IReadChannelApiResponse apiResponseLocalVar, Guid channelId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="channelId"></param>
        private void OnErrorReadChannelDefaultImplementation(Exception exception, string pathFormat, string path, Guid channelId)
        {
            bool suppressDefaultLog = false;
            OnErrorReadChannel(ref suppressDefaultLog, exception, pathFormat, path, channelId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="channelId"></param>
        partial void OnErrorReadChannel(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Guid channelId);

        /// <summary>
        /// チャンネルを既読にする 自分が未読のチャンネルを既読にします。
        /// </summary>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IReadChannelApiResponse"/>&gt;</returns>
        public async Task<IReadChannelApiResponse?> ReadChannelOrDefaultAsync(Guid channelId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ReadChannelAsync(channelId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// チャンネルを既読にする 自分が未読のチャンネルを既読にします。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IReadChannelApiResponse"/>&gt;</returns>
        public async Task<IReadChannelApiResponse> ReadChannelAsync(Guid channelId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatReadChannel(ref channelId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/users/me/unread/{channelId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BchannelId%7D", Uri.EscapeDataString(channelId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<ReadChannelApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ReadChannelApiResponse>();

                        ReadChannelApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/users/me/unread/{channelId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterReadChannelDefaultImplementation(apiResponseLocalVar, channelId);

                        Events.ExecuteOnReadChannel(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorReadChannelDefaultImplementation(e, "/users/me/unread/{channelId}", uriBuilderLocalVar.Path, channelId);
                Events.ExecuteOnErrorReadChannel(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ReadChannelApiResponse"/>
        /// </summary>
        public partial class ReadChannelApiResponse : Traq.Client.ApiResponse, IReadChannelApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ReadChannelApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ReadChannelApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ReadChannelApiResponse(ILogger<ReadChannelApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatRegisterFCMDevice(Option<PostMyFCMDeviceRequest> postMyFCMDeviceRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="postMyFCMDeviceRequest"></param>
        /// <returns></returns>
        private void ValidateRegisterFCMDevice(Option<PostMyFCMDeviceRequest> postMyFCMDeviceRequest)
        {
            if (postMyFCMDeviceRequest.IsSet && postMyFCMDeviceRequest.Value == null)
                throw new ArgumentNullException(nameof(postMyFCMDeviceRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="postMyFCMDeviceRequest"></param>
        private void AfterRegisterFCMDeviceDefaultImplementation(IRegisterFCMDeviceApiResponse apiResponseLocalVar, Option<PostMyFCMDeviceRequest> postMyFCMDeviceRequest)
        {
            bool suppressDefaultLog = false;
            AfterRegisterFCMDevice(ref suppressDefaultLog, apiResponseLocalVar, postMyFCMDeviceRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="postMyFCMDeviceRequest"></param>
        partial void AfterRegisterFCMDevice(ref bool suppressDefaultLog, IRegisterFCMDeviceApiResponse apiResponseLocalVar, Option<PostMyFCMDeviceRequest> postMyFCMDeviceRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="postMyFCMDeviceRequest"></param>
        private void OnErrorRegisterFCMDeviceDefaultImplementation(Exception exception, string pathFormat, string path, Option<PostMyFCMDeviceRequest> postMyFCMDeviceRequest)
        {
            bool suppressDefaultLog = false;
            OnErrorRegisterFCMDevice(ref suppressDefaultLog, exception, pathFormat, path, postMyFCMDeviceRequest);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="postMyFCMDeviceRequest"></param>
        partial void OnErrorRegisterFCMDevice(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<PostMyFCMDeviceRequest> postMyFCMDeviceRequest);

        /// <summary>
        /// FCMデバイスを登録 自身のFCMデバイスを登録します。
        /// </summary>
        /// <param name="postMyFCMDeviceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRegisterFCMDeviceApiResponse"/>&gt;</returns>
        public async Task<IRegisterFCMDeviceApiResponse?> RegisterFCMDeviceOrDefaultAsync(Option<PostMyFCMDeviceRequest> postMyFCMDeviceRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await RegisterFCMDeviceAsync(postMyFCMDeviceRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// FCMデバイスを登録 自身のFCMデバイスを登録します。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="postMyFCMDeviceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRegisterFCMDeviceApiResponse"/>&gt;</returns>
        public async Task<IRegisterFCMDeviceApiResponse> RegisterFCMDeviceAsync(Option<PostMyFCMDeviceRequest> postMyFCMDeviceRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateRegisterFCMDevice(postMyFCMDeviceRequest);

                FormatRegisterFCMDevice(postMyFCMDeviceRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/users/me/fcm-device";

                    if (postMyFCMDeviceRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (postMyFCMDeviceRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(postMyFCMDeviceRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<RegisterFCMDeviceApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<RegisterFCMDeviceApiResponse>();

                        RegisterFCMDeviceApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/users/me/fcm-device", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterRegisterFCMDeviceDefaultImplementation(apiResponseLocalVar, postMyFCMDeviceRequest);

                        Events.ExecuteOnRegisterFCMDevice(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorRegisterFCMDeviceDefaultImplementation(e, "/users/me/fcm-device", uriBuilderLocalVar.Path, postMyFCMDeviceRequest);
                Events.ExecuteOnErrorRegisterFCMDevice(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="RegisterFCMDeviceApiResponse"/>
        /// </summary>
        public partial class RegisterFCMDeviceApiResponse : Traq.Client.ApiResponse, IRegisterFCMDeviceApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<RegisterFCMDeviceApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="RegisterFCMDeviceApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public RegisterFCMDeviceApiResponse(ILogger<RegisterFCMDeviceApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatRemoveMyStar(ref Guid channelId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="channelId"></param>
        private void AfterRemoveMyStarDefaultImplementation(IRemoveMyStarApiResponse apiResponseLocalVar, Guid channelId)
        {
            bool suppressDefaultLog = false;
            AfterRemoveMyStar(ref suppressDefaultLog, apiResponseLocalVar, channelId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="channelId"></param>
        partial void AfterRemoveMyStar(ref bool suppressDefaultLog, IRemoveMyStarApiResponse apiResponseLocalVar, Guid channelId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="channelId"></param>
        private void OnErrorRemoveMyStarDefaultImplementation(Exception exception, string pathFormat, string path, Guid channelId)
        {
            bool suppressDefaultLog = false;
            OnErrorRemoveMyStar(ref suppressDefaultLog, exception, pathFormat, path, channelId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="channelId"></param>
        partial void OnErrorRemoveMyStar(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Guid channelId);

        /// <summary>
        /// チャンネルをスターから削除します 既にスターから削除されているチャンネルを指定した場合は204を返します。
        /// </summary>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRemoveMyStarApiResponse"/>&gt;</returns>
        public async Task<IRemoveMyStarApiResponse?> RemoveMyStarOrDefaultAsync(Guid channelId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await RemoveMyStarAsync(channelId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// チャンネルをスターから削除します 既にスターから削除されているチャンネルを指定した場合は204を返します。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRemoveMyStarApiResponse"/>&gt;</returns>
        public async Task<IRemoveMyStarApiResponse> RemoveMyStarAsync(Guid channelId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatRemoveMyStar(ref channelId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/users/me/stars/{channelId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BchannelId%7D", Uri.EscapeDataString(channelId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<RemoveMyStarApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<RemoveMyStarApiResponse>();

                        RemoveMyStarApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/users/me/stars/{channelId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterRemoveMyStarDefaultImplementation(apiResponseLocalVar, channelId);

                        Events.ExecuteOnRemoveMyStar(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorRemoveMyStarDefaultImplementation(e, "/users/me/stars/{channelId}", uriBuilderLocalVar.Path, channelId);
                Events.ExecuteOnErrorRemoveMyStar(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="RemoveMyStarApiResponse"/>
        /// </summary>
        public partial class RemoveMyStarApiResponse : Traq.Client.ApiResponse, IRemoveMyStarApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<RemoveMyStarApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="RemoveMyStarApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public RemoveMyStarApiResponse(ILogger<RemoveMyStarApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatRemoveMyUserTag(ref Guid tagId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="tagId"></param>
        private void AfterRemoveMyUserTagDefaultImplementation(IRemoveMyUserTagApiResponse apiResponseLocalVar, Guid tagId)
        {
            bool suppressDefaultLog = false;
            AfterRemoveMyUserTag(ref suppressDefaultLog, apiResponseLocalVar, tagId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="tagId"></param>
        partial void AfterRemoveMyUserTag(ref bool suppressDefaultLog, IRemoveMyUserTagApiResponse apiResponseLocalVar, Guid tagId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="tagId"></param>
        private void OnErrorRemoveMyUserTagDefaultImplementation(Exception exception, string pathFormat, string path, Guid tagId)
        {
            bool suppressDefaultLog = false;
            OnErrorRemoveMyUserTag(ref suppressDefaultLog, exception, pathFormat, path, tagId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="tagId"></param>
        partial void OnErrorRemoveMyUserTag(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Guid tagId);

        /// <summary>
        /// 自分からタグを削除します 既に存在しないタグを削除しようとした場合は204を返します。
        /// </summary>
        /// <param name="tagId">タグUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRemoveMyUserTagApiResponse"/>&gt;</returns>
        public async Task<IRemoveMyUserTagApiResponse?> RemoveMyUserTagOrDefaultAsync(Guid tagId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await RemoveMyUserTagAsync(tagId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 自分からタグを削除します 既に存在しないタグを削除しようとした場合は204を返します。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId">タグUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRemoveMyUserTagApiResponse"/>&gt;</returns>
        public async Task<IRemoveMyUserTagApiResponse> RemoveMyUserTagAsync(Guid tagId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatRemoveMyUserTag(ref tagId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/users/me/tags/{tagId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BtagId%7D", Uri.EscapeDataString(tagId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<RemoveMyUserTagApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<RemoveMyUserTagApiResponse>();

                        RemoveMyUserTagApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/users/me/tags/{tagId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterRemoveMyUserTagDefaultImplementation(apiResponseLocalVar, tagId);

                        Events.ExecuteOnRemoveMyUserTag(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorRemoveMyUserTagDefaultImplementation(e, "/users/me/tags/{tagId}", uriBuilderLocalVar.Path, tagId);
                Events.ExecuteOnErrorRemoveMyUserTag(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="RemoveMyUserTagApiResponse"/>
        /// </summary>
        public partial class RemoveMyUserTagApiResponse : Traq.Client.ApiResponse, IRemoveMyUserTagApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<RemoveMyUserTagApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="RemoveMyUserTagApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public RemoveMyUserTagApiResponse(ILogger<RemoveMyUserTagApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatRevokeMySession(ref Guid sessionId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="sessionId"></param>
        private void AfterRevokeMySessionDefaultImplementation(IRevokeMySessionApiResponse apiResponseLocalVar, Guid sessionId)
        {
            bool suppressDefaultLog = false;
            AfterRevokeMySession(ref suppressDefaultLog, apiResponseLocalVar, sessionId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="sessionId"></param>
        partial void AfterRevokeMySession(ref bool suppressDefaultLog, IRevokeMySessionApiResponse apiResponseLocalVar, Guid sessionId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="sessionId"></param>
        private void OnErrorRevokeMySessionDefaultImplementation(Exception exception, string pathFormat, string path, Guid sessionId)
        {
            bool suppressDefaultLog = false;
            OnErrorRevokeMySession(ref suppressDefaultLog, exception, pathFormat, path, sessionId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="sessionId"></param>
        partial void OnErrorRevokeMySession(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Guid sessionId);

        /// <summary>
        /// セッションを無効化 指定した自分のセッションを無効化(ログアウト)します。 既に存在しない・無効化されているセッションを指定した場合も&#x60;204&#x60;を返します。
        /// </summary>
        /// <param name="sessionId">セッションUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRevokeMySessionApiResponse"/>&gt;</returns>
        public async Task<IRevokeMySessionApiResponse?> RevokeMySessionOrDefaultAsync(Guid sessionId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await RevokeMySessionAsync(sessionId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// セッションを無効化 指定した自分のセッションを無効化(ログアウト)します。 既に存在しない・無効化されているセッションを指定した場合も&#x60;204&#x60;を返します。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionId">セッションUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRevokeMySessionApiResponse"/>&gt;</returns>
        public async Task<IRevokeMySessionApiResponse> RevokeMySessionAsync(Guid sessionId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatRevokeMySession(ref sessionId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/users/me/sessions/{sessionId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BsessionId%7D", Uri.EscapeDataString(sessionId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<RevokeMySessionApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<RevokeMySessionApiResponse>();

                        RevokeMySessionApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/users/me/sessions/{sessionId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterRevokeMySessionDefaultImplementation(apiResponseLocalVar, sessionId);

                        Events.ExecuteOnRevokeMySession(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorRevokeMySessionDefaultImplementation(e, "/users/me/sessions/{sessionId}", uriBuilderLocalVar.Path, sessionId);
                Events.ExecuteOnErrorRevokeMySession(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="RevokeMySessionApiResponse"/>
        /// </summary>
        public partial class RevokeMySessionApiResponse : Traq.Client.ApiResponse, IRevokeMySessionApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<RevokeMySessionApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="RevokeMySessionApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public RevokeMySessionApiResponse(ILogger<RevokeMySessionApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatRevokeMyToken(ref Guid tokenId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="tokenId"></param>
        private void AfterRevokeMyTokenDefaultImplementation(IRevokeMyTokenApiResponse apiResponseLocalVar, Guid tokenId)
        {
            bool suppressDefaultLog = false;
            AfterRevokeMyToken(ref suppressDefaultLog, apiResponseLocalVar, tokenId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="tokenId"></param>
        partial void AfterRevokeMyToken(ref bool suppressDefaultLog, IRevokeMyTokenApiResponse apiResponseLocalVar, Guid tokenId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="tokenId"></param>
        private void OnErrorRevokeMyTokenDefaultImplementation(Exception exception, string pathFormat, string path, Guid tokenId)
        {
            bool suppressDefaultLog = false;
            OnErrorRevokeMyToken(ref suppressDefaultLog, exception, pathFormat, path, tokenId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="tokenId"></param>
        partial void OnErrorRevokeMyToken(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Guid tokenId);

        /// <summary>
        /// トークンの認可を取り消す 自分の指定したトークンの認可を取り消します。
        /// </summary>
        /// <param name="tokenId">OAuth2トークンUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRevokeMyTokenApiResponse"/>&gt;</returns>
        public async Task<IRevokeMyTokenApiResponse?> RevokeMyTokenOrDefaultAsync(Guid tokenId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await RevokeMyTokenAsync(tokenId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// トークンの認可を取り消す 自分の指定したトークンの認可を取り消します。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId">OAuth2トークンUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IRevokeMyTokenApiResponse"/>&gt;</returns>
        public async Task<IRevokeMyTokenApiResponse> RevokeMyTokenAsync(Guid tokenId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatRevokeMyToken(ref tokenId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/users/me/tokens/{tokenId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BtokenId%7D", Uri.EscapeDataString(tokenId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<RevokeMyTokenApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<RevokeMyTokenApiResponse>();

                        RevokeMyTokenApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/users/me/tokens/{tokenId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterRevokeMyTokenDefaultImplementation(apiResponseLocalVar, tokenId);

                        Events.ExecuteOnRevokeMyToken(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorRevokeMyTokenDefaultImplementation(e, "/users/me/tokens/{tokenId}", uriBuilderLocalVar.Path, tokenId);
                Events.ExecuteOnErrorRevokeMyToken(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="RevokeMyTokenApiResponse"/>
        /// </summary>
        public partial class RevokeMyTokenApiResponse : Traq.Client.ApiResponse, IRevokeMyTokenApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<RevokeMyTokenApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="RevokeMyTokenApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public RevokeMyTokenApiResponse(ILogger<RevokeMyTokenApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSetChannelSubscribeLevel(ref Guid channelId, Option<PutChannelSubscribeLevelRequest> putChannelSubscribeLevelRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="putChannelSubscribeLevelRequest"></param>
        /// <returns></returns>
        private void ValidateSetChannelSubscribeLevel(Option<PutChannelSubscribeLevelRequest> putChannelSubscribeLevelRequest)
        {
            if (putChannelSubscribeLevelRequest.IsSet && putChannelSubscribeLevelRequest.Value == null)
                throw new ArgumentNullException(nameof(putChannelSubscribeLevelRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="channelId"></param>
        /// <param name="putChannelSubscribeLevelRequest"></param>
        private void AfterSetChannelSubscribeLevelDefaultImplementation(ISetChannelSubscribeLevelApiResponse apiResponseLocalVar, Guid channelId, Option<PutChannelSubscribeLevelRequest> putChannelSubscribeLevelRequest)
        {
            bool suppressDefaultLog = false;
            AfterSetChannelSubscribeLevel(ref suppressDefaultLog, apiResponseLocalVar, channelId, putChannelSubscribeLevelRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="channelId"></param>
        /// <param name="putChannelSubscribeLevelRequest"></param>
        partial void AfterSetChannelSubscribeLevel(ref bool suppressDefaultLog, ISetChannelSubscribeLevelApiResponse apiResponseLocalVar, Guid channelId, Option<PutChannelSubscribeLevelRequest> putChannelSubscribeLevelRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="channelId"></param>
        /// <param name="putChannelSubscribeLevelRequest"></param>
        private void OnErrorSetChannelSubscribeLevelDefaultImplementation(Exception exception, string pathFormat, string path, Guid channelId, Option<PutChannelSubscribeLevelRequest> putChannelSubscribeLevelRequest)
        {
            bool suppressDefaultLog = false;
            OnErrorSetChannelSubscribeLevel(ref suppressDefaultLog, exception, pathFormat, path, channelId, putChannelSubscribeLevelRequest);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="channelId"></param>
        /// <param name="putChannelSubscribeLevelRequest"></param>
        partial void OnErrorSetChannelSubscribeLevel(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Guid channelId, Option<PutChannelSubscribeLevelRequest> putChannelSubscribeLevelRequest);

        /// <summary>
        /// チャンネル購読レベルを設定 自身の指定したチャンネルの購読レベルを設定します。
        /// </summary>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="putChannelSubscribeLevelRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISetChannelSubscribeLevelApiResponse"/>&gt;</returns>
        public async Task<ISetChannelSubscribeLevelApiResponse?> SetChannelSubscribeLevelOrDefaultAsync(Guid channelId, Option<PutChannelSubscribeLevelRequest> putChannelSubscribeLevelRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SetChannelSubscribeLevelAsync(channelId, putChannelSubscribeLevelRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// チャンネル購読レベルを設定 自身の指定したチャンネルの購読レベルを設定します。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">チャンネルUUID</param>
        /// <param name="putChannelSubscribeLevelRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISetChannelSubscribeLevelApiResponse"/>&gt;</returns>
        public async Task<ISetChannelSubscribeLevelApiResponse> SetChannelSubscribeLevelAsync(Guid channelId, Option<PutChannelSubscribeLevelRequest> putChannelSubscribeLevelRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSetChannelSubscribeLevel(putChannelSubscribeLevelRequest);

                FormatSetChannelSubscribeLevel(ref channelId, putChannelSubscribeLevelRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/users/me/subscriptions/{channelId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BchannelId%7D", Uri.EscapeDataString(channelId.ToString()));

                    if (putChannelSubscribeLevelRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (putChannelSubscribeLevelRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(putChannelSubscribeLevelRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<SetChannelSubscribeLevelApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SetChannelSubscribeLevelApiResponse>();

                        SetChannelSubscribeLevelApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/users/me/subscriptions/{channelId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSetChannelSubscribeLevelDefaultImplementation(apiResponseLocalVar, channelId, putChannelSubscribeLevelRequest);

                        Events.ExecuteOnSetChannelSubscribeLevel(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSetChannelSubscribeLevelDefaultImplementation(e, "/users/me/subscriptions/{channelId}", uriBuilderLocalVar.Path, channelId, putChannelSubscribeLevelRequest);
                Events.ExecuteOnErrorSetChannelSubscribeLevel(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SetChannelSubscribeLevelApiResponse"/>
        /// </summary>
        public partial class SetChannelSubscribeLevelApiResponse : Traq.Client.ApiResponse, ISetChannelSubscribeLevelApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SetChannelSubscribeLevelApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SetChannelSubscribeLevelApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SetChannelSubscribeLevelApiResponse(ILogger<SetChannelSubscribeLevelApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatUnlinkExternalAccount(Option<PostUnlinkExternalAccount> postUnlinkExternalAccount);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="postUnlinkExternalAccount"></param>
        /// <returns></returns>
        private void ValidateUnlinkExternalAccount(Option<PostUnlinkExternalAccount> postUnlinkExternalAccount)
        {
            if (postUnlinkExternalAccount.IsSet && postUnlinkExternalAccount.Value == null)
                throw new ArgumentNullException(nameof(postUnlinkExternalAccount));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="postUnlinkExternalAccount"></param>
        private void AfterUnlinkExternalAccountDefaultImplementation(IUnlinkExternalAccountApiResponse apiResponseLocalVar, Option<PostUnlinkExternalAccount> postUnlinkExternalAccount)
        {
            bool suppressDefaultLog = false;
            AfterUnlinkExternalAccount(ref suppressDefaultLog, apiResponseLocalVar, postUnlinkExternalAccount);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="postUnlinkExternalAccount"></param>
        partial void AfterUnlinkExternalAccount(ref bool suppressDefaultLog, IUnlinkExternalAccountApiResponse apiResponseLocalVar, Option<PostUnlinkExternalAccount> postUnlinkExternalAccount);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="postUnlinkExternalAccount"></param>
        private void OnErrorUnlinkExternalAccountDefaultImplementation(Exception exception, string pathFormat, string path, Option<PostUnlinkExternalAccount> postUnlinkExternalAccount)
        {
            bool suppressDefaultLog = false;
            OnErrorUnlinkExternalAccount(ref suppressDefaultLog, exception, pathFormat, path, postUnlinkExternalAccount);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="postUnlinkExternalAccount"></param>
        partial void OnErrorUnlinkExternalAccount(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<PostUnlinkExternalAccount> postUnlinkExternalAccount);

        /// <summary>
        /// 外部ログインアカウントの紐付けを解除 自分に紐付けられている外部ログインアカウントの紐付けを解除します。
        /// </summary>
        /// <param name="postUnlinkExternalAccount"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUnlinkExternalAccountApiResponse"/>&gt;</returns>
        public async Task<IUnlinkExternalAccountApiResponse?> UnlinkExternalAccountOrDefaultAsync(Option<PostUnlinkExternalAccount> postUnlinkExternalAccount = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await UnlinkExternalAccountAsync(postUnlinkExternalAccount, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// 外部ログインアカウントの紐付けを解除 自分に紐付けられている外部ログインアカウントの紐付けを解除します。
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="postUnlinkExternalAccount"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IUnlinkExternalAccountApiResponse"/>&gt;</returns>
        public async Task<IUnlinkExternalAccountApiResponse> UnlinkExternalAccountAsync(Option<PostUnlinkExternalAccount> postUnlinkExternalAccount = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateUnlinkExternalAccount(postUnlinkExternalAccount);

                FormatUnlinkExternalAccount(postUnlinkExternalAccount);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/users/me/ex-accounts/unlink";

                    if (postUnlinkExternalAccount.IsSet)
                        httpRequestMessageLocalVar.Content = (postUnlinkExternalAccount.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(postUnlinkExternalAccount.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    BearerToken bearerTokenLocalVar2 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar2);

                    bearerTokenLocalVar2.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<UnlinkExternalAccountApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<UnlinkExternalAccountApiResponse>();

                        UnlinkExternalAccountApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/users/me/ex-accounts/unlink", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterUnlinkExternalAccountDefaultImplementation(apiResponseLocalVar, postUnlinkExternalAccount);

                        Events.ExecuteOnUnlinkExternalAccount(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorUnlinkExternalAccountDefaultImplementation(e, "/users/me/ex-accounts/unlink", uriBuilderLocalVar.Path, postUnlinkExternalAccount);
                Events.ExecuteOnErrorUnlinkExternalAccount(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="UnlinkExternalAccountApiResponse"/>
        /// </summary>
        public partial class UnlinkExternalAccountApiResponse : Traq.Client.ApiResponse, IUnlinkExternalAccountApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<UnlinkExternalAccountApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="UnlinkExternalAccountApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public UnlinkExternalAccountApiResponse(ILogger<UnlinkExternalAccountApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
