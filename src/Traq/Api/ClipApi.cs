/*
 * traQ v3
 *
 * traQ v3 API
 *
 * The version of the OpenAPI document: 3.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using Traq.Client;
using Traq.Model;

namespace Traq.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IClipApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// メッセージをクリップフォルダに追加
        /// </summary>
        /// <remarks>
        /// 指定したメッセージを指定したクリップフォルダに追加します。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">クリップフォルダUUID</param>
        /// <param name="postClipFolderMessageRequest"> (optional)</param>
        /// <returns>ClippedMessage</returns>
        ClippedMessage ClipMessage(Guid folderId, PostClipFolderMessageRequest? postClipFolderMessageRequest = default(PostClipFolderMessageRequest?));

        /// <summary>
        /// メッセージをクリップフォルダに追加
        /// </summary>
        /// <remarks>
        /// 指定したメッセージを指定したクリップフォルダに追加します。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">クリップフォルダUUID</param>
        /// <param name="postClipFolderMessageRequest"> (optional)</param>
        /// <returns>ApiResponse of ClippedMessage</returns>
        ApiResponse<ClippedMessage> ClipMessageWithHttpInfo(Guid folderId, PostClipFolderMessageRequest? postClipFolderMessageRequest = default(PostClipFolderMessageRequest?));
        /// <summary>
        /// クリップフォルダを作成
        /// </summary>
        /// <remarks>
        /// クリップフォルダを作成します。 既にあるフォルダと同名のフォルダを作成することは可能です。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postClipFolderRequest"> (optional)</param>
        /// <returns>ClipFolder</returns>
        ClipFolder CreateClipFolder(PostClipFolderRequest? postClipFolderRequest = default(PostClipFolderRequest?));

        /// <summary>
        /// クリップフォルダを作成
        /// </summary>
        /// <remarks>
        /// クリップフォルダを作成します。 既にあるフォルダと同名のフォルダを作成することは可能です。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postClipFolderRequest"> (optional)</param>
        /// <returns>ApiResponse of ClipFolder</returns>
        ApiResponse<ClipFolder> CreateClipFolderWithHttpInfo(PostClipFolderRequest? postClipFolderRequest = default(PostClipFolderRequest?));
        /// <summary>
        /// クリップフォルダを削除
        /// </summary>
        /// <remarks>
        /// 指定したクリップフォルダを削除します。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">クリップフォルダUUID</param>
        /// <returns></returns>
        void DeleteClipFolder(Guid folderId);

        /// <summary>
        /// クリップフォルダを削除
        /// </summary>
        /// <remarks>
        /// 指定したクリップフォルダを削除します。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">クリップフォルダUUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteClipFolderWithHttpInfo(Guid folderId);
        /// <summary>
        /// クリップフォルダ情報を編集
        /// </summary>
        /// <remarks>
        /// 指定したクリップフォルダの情報を編集します。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">クリップフォルダUUID</param>
        /// <param name="patchClipFolderRequest"> (optional)</param>
        /// <returns></returns>
        void EditClipFolder(Guid folderId, PatchClipFolderRequest? patchClipFolderRequest = default(PatchClipFolderRequest?));

        /// <summary>
        /// クリップフォルダ情報を編集
        /// </summary>
        /// <remarks>
        /// 指定したクリップフォルダの情報を編集します。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">クリップフォルダUUID</param>
        /// <param name="patchClipFolderRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EditClipFolderWithHttpInfo(Guid folderId, PatchClipFolderRequest? patchClipFolderRequest = default(PatchClipFolderRequest?));
        /// <summary>
        /// クリップフォルダ情報を取得
        /// </summary>
        /// <remarks>
        /// 指定したクリップフォルダの情報を取得します。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">クリップフォルダUUID</param>
        /// <returns>ClipFolder</returns>
        ClipFolder GetClipFolder(Guid folderId);

        /// <summary>
        /// クリップフォルダ情報を取得
        /// </summary>
        /// <remarks>
        /// 指定したクリップフォルダの情報を取得します。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">クリップフォルダUUID</param>
        /// <returns>ApiResponse of ClipFolder</returns>
        ApiResponse<ClipFolder> GetClipFolderWithHttpInfo(Guid folderId);
        /// <summary>
        /// クリップフォルダのリストを取得
        /// </summary>
        /// <remarks>
        /// 自身が所有するクリップフォルダのリストを取得します。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ClipFolder&gt;</returns>
        List<ClipFolder> GetClipFolders();

        /// <summary>
        /// クリップフォルダのリストを取得
        /// </summary>
        /// <remarks>
        /// 自身が所有するクリップフォルダのリストを取得します。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ClipFolder&gt;</returns>
        ApiResponse<List<ClipFolder>> GetClipFoldersWithHttpInfo();
        /// <summary>
        /// フォルダ内のクリップのリストを取得
        /// </summary>
        /// <remarks>
        /// 指定したフォルダ内のクリップのリストを取得します。 &#x60;order&#x60;を指定しない場合、クリップした日時の新しい順で返されます。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">クリップフォルダUUID</param>
        /// <param name="limit">取得する件数 (optional)</param>
        /// <param name="offset">取得するオフセット (optional, default to 0)</param>
        /// <param name="order">昇順か降順か (optional, default to desc)</param>
        /// <returns>List&lt;ClippedMessage&gt;</returns>
        List<ClippedMessage> GetClips(Guid folderId, int? limit = default(int?), int? offset = default(int?), string? order = default(string?));

        /// <summary>
        /// フォルダ内のクリップのリストを取得
        /// </summary>
        /// <remarks>
        /// 指定したフォルダ内のクリップのリストを取得します。 &#x60;order&#x60;を指定しない場合、クリップした日時の新しい順で返されます。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">クリップフォルダUUID</param>
        /// <param name="limit">取得する件数 (optional)</param>
        /// <param name="offset">取得するオフセット (optional, default to 0)</param>
        /// <param name="order">昇順か降順か (optional, default to desc)</param>
        /// <returns>ApiResponse of List&lt;ClippedMessage&gt;</returns>
        ApiResponse<List<ClippedMessage>> GetClipsWithHttpInfo(Guid folderId, int? limit = default(int?), int? offset = default(int?), string? order = default(string?));
        /// <summary>
        /// 自分のクリップを取得
        /// </summary>
        /// <remarks>
        /// 対象のメッセージの自分のクリップの一覧を返します。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">メッセージUUID</param>
        /// <returns>List&lt;MessageClip&gt;</returns>
        List<MessageClip> GetMessageClips(Guid messageId);

        /// <summary>
        /// 自分のクリップを取得
        /// </summary>
        /// <remarks>
        /// 対象のメッセージの自分のクリップの一覧を返します。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">メッセージUUID</param>
        /// <returns>ApiResponse of List&lt;MessageClip&gt;</returns>
        ApiResponse<List<MessageClip>> GetMessageClipsWithHttpInfo(Guid messageId);
        /// <summary>
        /// メッセージをクリップフォルダから除外
        /// </summary>
        /// <remarks>
        /// 指定したフォルダから指定したメッセージのクリップを除外します。 既に外されているメッセージを指定した場合は204を返します。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">クリップフォルダUUID</param>
        /// <param name="messageId">メッセージUUID</param>
        /// <returns></returns>
        void UnclipMessage(Guid folderId, Guid messageId);

        /// <summary>
        /// メッセージをクリップフォルダから除外
        /// </summary>
        /// <remarks>
        /// 指定したフォルダから指定したメッセージのクリップを除外します。 既に外されているメッセージを指定した場合は204を返します。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">クリップフォルダUUID</param>
        /// <param name="messageId">メッセージUUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UnclipMessageWithHttpInfo(Guid folderId, Guid messageId);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IClipApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// メッセージをクリップフォルダに追加
        /// </summary>
        /// <remarks>
        /// 指定したメッセージを指定したクリップフォルダに追加します。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">クリップフォルダUUID</param>
        /// <param name="postClipFolderMessageRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClippedMessage</returns>
        System.Threading.Tasks.Task<ClippedMessage> ClipMessageAsync(Guid folderId, PostClipFolderMessageRequest? postClipFolderMessageRequest = default(PostClipFolderMessageRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// メッセージをクリップフォルダに追加
        /// </summary>
        /// <remarks>
        /// 指定したメッセージを指定したクリップフォルダに追加します。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">クリップフォルダUUID</param>
        /// <param name="postClipFolderMessageRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClippedMessage)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClippedMessage>> ClipMessageWithHttpInfoAsync(Guid folderId, PostClipFolderMessageRequest? postClipFolderMessageRequest = default(PostClipFolderMessageRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// クリップフォルダを作成
        /// </summary>
        /// <remarks>
        /// クリップフォルダを作成します。 既にあるフォルダと同名のフォルダを作成することは可能です。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postClipFolderRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClipFolder</returns>
        System.Threading.Tasks.Task<ClipFolder> CreateClipFolderAsync(PostClipFolderRequest? postClipFolderRequest = default(PostClipFolderRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// クリップフォルダを作成
        /// </summary>
        /// <remarks>
        /// クリップフォルダを作成します。 既にあるフォルダと同名のフォルダを作成することは可能です。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postClipFolderRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClipFolder)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClipFolder>> CreateClipFolderWithHttpInfoAsync(PostClipFolderRequest? postClipFolderRequest = default(PostClipFolderRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// クリップフォルダを削除
        /// </summary>
        /// <remarks>
        /// 指定したクリップフォルダを削除します。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">クリップフォルダUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteClipFolderAsync(Guid folderId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// クリップフォルダを削除
        /// </summary>
        /// <remarks>
        /// 指定したクリップフォルダを削除します。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">クリップフォルダUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteClipFolderWithHttpInfoAsync(Guid folderId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// クリップフォルダ情報を編集
        /// </summary>
        /// <remarks>
        /// 指定したクリップフォルダの情報を編集します。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">クリップフォルダUUID</param>
        /// <param name="patchClipFolderRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EditClipFolderAsync(Guid folderId, PatchClipFolderRequest? patchClipFolderRequest = default(PatchClipFolderRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// クリップフォルダ情報を編集
        /// </summary>
        /// <remarks>
        /// 指定したクリップフォルダの情報を編集します。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">クリップフォルダUUID</param>
        /// <param name="patchClipFolderRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EditClipFolderWithHttpInfoAsync(Guid folderId, PatchClipFolderRequest? patchClipFolderRequest = default(PatchClipFolderRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// クリップフォルダ情報を取得
        /// </summary>
        /// <remarks>
        /// 指定したクリップフォルダの情報を取得します。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">クリップフォルダUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClipFolder</returns>
        System.Threading.Tasks.Task<ClipFolder> GetClipFolderAsync(Guid folderId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// クリップフォルダ情報を取得
        /// </summary>
        /// <remarks>
        /// 指定したクリップフォルダの情報を取得します。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">クリップフォルダUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClipFolder)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClipFolder>> GetClipFolderWithHttpInfoAsync(Guid folderId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// クリップフォルダのリストを取得
        /// </summary>
        /// <remarks>
        /// 自身が所有するクリップフォルダのリストを取得します。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ClipFolder&gt;</returns>
        System.Threading.Tasks.Task<List<ClipFolder>> GetClipFoldersAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// クリップフォルダのリストを取得
        /// </summary>
        /// <remarks>
        /// 自身が所有するクリップフォルダのリストを取得します。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ClipFolder&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ClipFolder>>> GetClipFoldersWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// フォルダ内のクリップのリストを取得
        /// </summary>
        /// <remarks>
        /// 指定したフォルダ内のクリップのリストを取得します。 &#x60;order&#x60;を指定しない場合、クリップした日時の新しい順で返されます。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">クリップフォルダUUID</param>
        /// <param name="limit">取得する件数 (optional)</param>
        /// <param name="offset">取得するオフセット (optional, default to 0)</param>
        /// <param name="order">昇順か降順か (optional, default to desc)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ClippedMessage&gt;</returns>
        System.Threading.Tasks.Task<List<ClippedMessage>> GetClipsAsync(Guid folderId, int? limit = default(int?), int? offset = default(int?), string? order = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// フォルダ内のクリップのリストを取得
        /// </summary>
        /// <remarks>
        /// 指定したフォルダ内のクリップのリストを取得します。 &#x60;order&#x60;を指定しない場合、クリップした日時の新しい順で返されます。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">クリップフォルダUUID</param>
        /// <param name="limit">取得する件数 (optional)</param>
        /// <param name="offset">取得するオフセット (optional, default to 0)</param>
        /// <param name="order">昇順か降順か (optional, default to desc)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ClippedMessage&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ClippedMessage>>> GetClipsWithHttpInfoAsync(Guid folderId, int? limit = default(int?), int? offset = default(int?), string? order = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 自分のクリップを取得
        /// </summary>
        /// <remarks>
        /// 対象のメッセージの自分のクリップの一覧を返します。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">メッセージUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;MessageClip&gt;</returns>
        System.Threading.Tasks.Task<List<MessageClip>> GetMessageClipsAsync(Guid messageId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 自分のクリップを取得
        /// </summary>
        /// <remarks>
        /// 対象のメッセージの自分のクリップの一覧を返します。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">メッセージUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;MessageClip&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MessageClip>>> GetMessageClipsWithHttpInfoAsync(Guid messageId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// メッセージをクリップフォルダから除外
        /// </summary>
        /// <remarks>
        /// 指定したフォルダから指定したメッセージのクリップを除外します。 既に外されているメッセージを指定した場合は204を返します。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">クリップフォルダUUID</param>
        /// <param name="messageId">メッセージUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UnclipMessageAsync(Guid folderId, Guid messageId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// メッセージをクリップフォルダから除外
        /// </summary>
        /// <remarks>
        /// 指定したフォルダから指定したメッセージのクリップを除外します。 既に外されているメッセージを指定した場合は204を返します。
        /// </remarks>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">クリップフォルダUUID</param>
        /// <param name="messageId">メッセージUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UnclipMessageWithHttpInfoAsync(Guid folderId, Guid messageId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IClipApi : IClipApiSync, IClipApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ClipApi : IDisposable, IClipApi
    {
        private Traq.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ClipApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public ClipApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClipApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public ClipApi(string basePath)
        {
            this.Configuration = Traq.Client.Configuration.MergeConfigurations(
                Traq.Client.GlobalConfiguration.Instance,
                new Traq.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Traq.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Traq.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClipApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public ClipApi(Traq.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Traq.Client.Configuration.MergeConfigurations(
                Traq.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Traq.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Traq.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClipApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ClipApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClipApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ClipApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Traq.Client.Configuration.MergeConfigurations(
                Traq.Client.GlobalConfiguration.Instance,
                new Traq.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new Traq.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = Traq.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClipApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public ClipApi(HttpClient client, Traq.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = Traq.Client.Configuration.MergeConfigurations(
                Traq.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new Traq.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = Traq.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClipApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public ClipApi(Traq.Client.ISynchronousClient client, Traq.Client.IAsynchronousClient asyncClient, Traq.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Traq.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public Traq.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Traq.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Traq.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Traq.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Traq.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// メッセージをクリップフォルダに追加 指定したメッセージを指定したクリップフォルダに追加します。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">クリップフォルダUUID</param>
        /// <param name="postClipFolderMessageRequest"> (optional)</param>
        /// <returns>ClippedMessage</returns>
        public ClippedMessage ClipMessage(Guid folderId, PostClipFolderMessageRequest? postClipFolderMessageRequest = default(PostClipFolderMessageRequest?))
        {
            Traq.Client.ApiResponse<ClippedMessage> localVarResponse = ClipMessageWithHttpInfo(folderId, postClipFolderMessageRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// メッセージをクリップフォルダに追加 指定したメッセージを指定したクリップフォルダに追加します。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">クリップフォルダUUID</param>
        /// <param name="postClipFolderMessageRequest"> (optional)</param>
        /// <returns>ApiResponse of ClippedMessage</returns>
        public Traq.Client.ApiResponse<ClippedMessage> ClipMessageWithHttpInfo(Guid folderId, PostClipFolderMessageRequest? postClipFolderMessageRequest = default(PostClipFolderMessageRequest?))
        {
            Traq.Client.RequestOptions localVarRequestOptions = new Traq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Traq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Traq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("folderId", Traq.Client.ClientUtils.ParameterToString(folderId)); // path parameter
            localVarRequestOptions.Data = postClipFolderMessageRequest;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ClippedMessage>("/clip-folders/{folderId}/messages", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClipMessage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// メッセージをクリップフォルダに追加 指定したメッセージを指定したクリップフォルダに追加します。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">クリップフォルダUUID</param>
        /// <param name="postClipFolderMessageRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClippedMessage</returns>
        public async System.Threading.Tasks.Task<ClippedMessage> ClipMessageAsync(Guid folderId, PostClipFolderMessageRequest? postClipFolderMessageRequest = default(PostClipFolderMessageRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Traq.Client.ApiResponse<ClippedMessage> localVarResponse = await ClipMessageWithHttpInfoAsync(folderId, postClipFolderMessageRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// メッセージをクリップフォルダに追加 指定したメッセージを指定したクリップフォルダに追加します。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">クリップフォルダUUID</param>
        /// <param name="postClipFolderMessageRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClippedMessage)</returns>
        public async System.Threading.Tasks.Task<Traq.Client.ApiResponse<ClippedMessage>> ClipMessageWithHttpInfoAsync(Guid folderId, PostClipFolderMessageRequest? postClipFolderMessageRequest = default(PostClipFolderMessageRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Traq.Client.RequestOptions localVarRequestOptions = new Traq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Traq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Traq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("folderId", Traq.Client.ClientUtils.ParameterToString(folderId)); // path parameter
            localVarRequestOptions.Data = postClipFolderMessageRequest;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ClippedMessage>("/clip-folders/{folderId}/messages", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ClipMessage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// クリップフォルダを作成 クリップフォルダを作成します。 既にあるフォルダと同名のフォルダを作成することは可能です。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postClipFolderRequest"> (optional)</param>
        /// <returns>ClipFolder</returns>
        public ClipFolder CreateClipFolder(PostClipFolderRequest? postClipFolderRequest = default(PostClipFolderRequest?))
        {
            Traq.Client.ApiResponse<ClipFolder> localVarResponse = CreateClipFolderWithHttpInfo(postClipFolderRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// クリップフォルダを作成 クリップフォルダを作成します。 既にあるフォルダと同名のフォルダを作成することは可能です。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postClipFolderRequest"> (optional)</param>
        /// <returns>ApiResponse of ClipFolder</returns>
        public Traq.Client.ApiResponse<ClipFolder> CreateClipFolderWithHttpInfo(PostClipFolderRequest? postClipFolderRequest = default(PostClipFolderRequest?))
        {
            Traq.Client.RequestOptions localVarRequestOptions = new Traq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Traq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Traq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = postClipFolderRequest;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ClipFolder>("/clip-folders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateClipFolder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// クリップフォルダを作成 クリップフォルダを作成します。 既にあるフォルダと同名のフォルダを作成することは可能です。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postClipFolderRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClipFolder</returns>
        public async System.Threading.Tasks.Task<ClipFolder> CreateClipFolderAsync(PostClipFolderRequest? postClipFolderRequest = default(PostClipFolderRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Traq.Client.ApiResponse<ClipFolder> localVarResponse = await CreateClipFolderWithHttpInfoAsync(postClipFolderRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// クリップフォルダを作成 クリップフォルダを作成します。 既にあるフォルダと同名のフォルダを作成することは可能です。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postClipFolderRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClipFolder)</returns>
        public async System.Threading.Tasks.Task<Traq.Client.ApiResponse<ClipFolder>> CreateClipFolderWithHttpInfoAsync(PostClipFolderRequest? postClipFolderRequest = default(PostClipFolderRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Traq.Client.RequestOptions localVarRequestOptions = new Traq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Traq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Traq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = postClipFolderRequest;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ClipFolder>("/clip-folders", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateClipFolder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// クリップフォルダを削除 指定したクリップフォルダを削除します。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">クリップフォルダUUID</param>
        /// <returns></returns>
        public void DeleteClipFolder(Guid folderId)
        {
            DeleteClipFolderWithHttpInfo(folderId);
        }

        /// <summary>
        /// クリップフォルダを削除 指定したクリップフォルダを削除します。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">クリップフォルダUUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Traq.Client.ApiResponse<Object> DeleteClipFolderWithHttpInfo(Guid folderId)
        {
            Traq.Client.RequestOptions localVarRequestOptions = new Traq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Traq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Traq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("folderId", Traq.Client.ClientUtils.ParameterToString(folderId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/clip-folders/{folderId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteClipFolder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// クリップフォルダを削除 指定したクリップフォルダを削除します。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">クリップフォルダUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteClipFolderAsync(Guid folderId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await DeleteClipFolderWithHttpInfoAsync(folderId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// クリップフォルダを削除 指定したクリップフォルダを削除します。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">クリップフォルダUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Traq.Client.ApiResponse<Object>> DeleteClipFolderWithHttpInfoAsync(Guid folderId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Traq.Client.RequestOptions localVarRequestOptions = new Traq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = Traq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Traq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("folderId", Traq.Client.ClientUtils.ParameterToString(folderId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/clip-folders/{folderId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteClipFolder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// クリップフォルダ情報を編集 指定したクリップフォルダの情報を編集します。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">クリップフォルダUUID</param>
        /// <param name="patchClipFolderRequest"> (optional)</param>
        /// <returns></returns>
        public void EditClipFolder(Guid folderId, PatchClipFolderRequest? patchClipFolderRequest = default(PatchClipFolderRequest?))
        {
            EditClipFolderWithHttpInfo(folderId, patchClipFolderRequest);
        }

        /// <summary>
        /// クリップフォルダ情報を編集 指定したクリップフォルダの情報を編集します。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">クリップフォルダUUID</param>
        /// <param name="patchClipFolderRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Traq.Client.ApiResponse<Object> EditClipFolderWithHttpInfo(Guid folderId, PatchClipFolderRequest? patchClipFolderRequest = default(PatchClipFolderRequest?))
        {
            Traq.Client.RequestOptions localVarRequestOptions = new Traq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Traq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Traq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("folderId", Traq.Client.ClientUtils.ParameterToString(folderId)); // path parameter
            localVarRequestOptions.Data = patchClipFolderRequest;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<Object>("/clip-folders/{folderId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EditClipFolder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// クリップフォルダ情報を編集 指定したクリップフォルダの情報を編集します。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">クリップフォルダUUID</param>
        /// <param name="patchClipFolderRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EditClipFolderAsync(Guid folderId, PatchClipFolderRequest? patchClipFolderRequest = default(PatchClipFolderRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await EditClipFolderWithHttpInfoAsync(folderId, patchClipFolderRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// クリップフォルダ情報を編集 指定したクリップフォルダの情報を編集します。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">クリップフォルダUUID</param>
        /// <param name="patchClipFolderRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Traq.Client.ApiResponse<Object>> EditClipFolderWithHttpInfoAsync(Guid folderId, PatchClipFolderRequest? patchClipFolderRequest = default(PatchClipFolderRequest?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Traq.Client.RequestOptions localVarRequestOptions = new Traq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = Traq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Traq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("folderId", Traq.Client.ClientUtils.ParameterToString(folderId)); // path parameter
            localVarRequestOptions.Data = patchClipFolderRequest;

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Object>("/clip-folders/{folderId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EditClipFolder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// クリップフォルダ情報を取得 指定したクリップフォルダの情報を取得します。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">クリップフォルダUUID</param>
        /// <returns>ClipFolder</returns>
        public ClipFolder GetClipFolder(Guid folderId)
        {
            Traq.Client.ApiResponse<ClipFolder> localVarResponse = GetClipFolderWithHttpInfo(folderId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// クリップフォルダ情報を取得 指定したクリップフォルダの情報を取得します。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">クリップフォルダUUID</param>
        /// <returns>ApiResponse of ClipFolder</returns>
        public Traq.Client.ApiResponse<ClipFolder> GetClipFolderWithHttpInfo(Guid folderId)
        {
            Traq.Client.RequestOptions localVarRequestOptions = new Traq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Traq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Traq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("folderId", Traq.Client.ClientUtils.ParameterToString(folderId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ClipFolder>("/clip-folders/{folderId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetClipFolder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// クリップフォルダ情報を取得 指定したクリップフォルダの情報を取得します。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">クリップフォルダUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClipFolder</returns>
        public async System.Threading.Tasks.Task<ClipFolder> GetClipFolderAsync(Guid folderId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Traq.Client.ApiResponse<ClipFolder> localVarResponse = await GetClipFolderWithHttpInfoAsync(folderId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// クリップフォルダ情報を取得 指定したクリップフォルダの情報を取得します。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">クリップフォルダUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClipFolder)</returns>
        public async System.Threading.Tasks.Task<Traq.Client.ApiResponse<ClipFolder>> GetClipFolderWithHttpInfoAsync(Guid folderId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Traq.Client.RequestOptions localVarRequestOptions = new Traq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Traq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Traq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("folderId", Traq.Client.ClientUtils.ParameterToString(folderId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ClipFolder>("/clip-folders/{folderId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetClipFolder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// クリップフォルダのリストを取得 自身が所有するクリップフォルダのリストを取得します。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ClipFolder&gt;</returns>
        public List<ClipFolder> GetClipFolders()
        {
            Traq.Client.ApiResponse<List<ClipFolder>> localVarResponse = GetClipFoldersWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// クリップフォルダのリストを取得 自身が所有するクリップフォルダのリストを取得します。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ClipFolder&gt;</returns>
        public Traq.Client.ApiResponse<List<ClipFolder>> GetClipFoldersWithHttpInfo()
        {
            Traq.Client.RequestOptions localVarRequestOptions = new Traq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Traq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Traq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ClipFolder>>("/clip-folders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetClipFolders", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// クリップフォルダのリストを取得 自身が所有するクリップフォルダのリストを取得します。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ClipFolder&gt;</returns>
        public async System.Threading.Tasks.Task<List<ClipFolder>> GetClipFoldersAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Traq.Client.ApiResponse<List<ClipFolder>> localVarResponse = await GetClipFoldersWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// クリップフォルダのリストを取得 自身が所有するクリップフォルダのリストを取得します。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ClipFolder&gt;)</returns>
        public async System.Threading.Tasks.Task<Traq.Client.ApiResponse<List<ClipFolder>>> GetClipFoldersWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Traq.Client.RequestOptions localVarRequestOptions = new Traq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Traq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Traq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ClipFolder>>("/clip-folders", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetClipFolders", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// フォルダ内のクリップのリストを取得 指定したフォルダ内のクリップのリストを取得します。 &#x60;order&#x60;を指定しない場合、クリップした日時の新しい順で返されます。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">クリップフォルダUUID</param>
        /// <param name="limit">取得する件数 (optional)</param>
        /// <param name="offset">取得するオフセット (optional, default to 0)</param>
        /// <param name="order">昇順か降順か (optional, default to desc)</param>
        /// <returns>List&lt;ClippedMessage&gt;</returns>
        public List<ClippedMessage> GetClips(Guid folderId, int? limit = default(int?), int? offset = default(int?), string? order = default(string?))
        {
            Traq.Client.ApiResponse<List<ClippedMessage>> localVarResponse = GetClipsWithHttpInfo(folderId, limit, offset, order);
            return localVarResponse.Data;
        }

        /// <summary>
        /// フォルダ内のクリップのリストを取得 指定したフォルダ内のクリップのリストを取得します。 &#x60;order&#x60;を指定しない場合、クリップした日時の新しい順で返されます。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">クリップフォルダUUID</param>
        /// <param name="limit">取得する件数 (optional)</param>
        /// <param name="offset">取得するオフセット (optional, default to 0)</param>
        /// <param name="order">昇順か降順か (optional, default to desc)</param>
        /// <returns>ApiResponse of List&lt;ClippedMessage&gt;</returns>
        public Traq.Client.ApiResponse<List<ClippedMessage>> GetClipsWithHttpInfo(Guid folderId, int? limit = default(int?), int? offset = default(int?), string? order = default(string?))
        {
            Traq.Client.RequestOptions localVarRequestOptions = new Traq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Traq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Traq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("folderId", Traq.Client.ClientUtils.ParameterToString(folderId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Traq.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Traq.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Traq.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ClippedMessage>>("/clip-folders/{folderId}/messages", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetClips", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// フォルダ内のクリップのリストを取得 指定したフォルダ内のクリップのリストを取得します。 &#x60;order&#x60;を指定しない場合、クリップした日時の新しい順で返されます。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">クリップフォルダUUID</param>
        /// <param name="limit">取得する件数 (optional)</param>
        /// <param name="offset">取得するオフセット (optional, default to 0)</param>
        /// <param name="order">昇順か降順か (optional, default to desc)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ClippedMessage&gt;</returns>
        public async System.Threading.Tasks.Task<List<ClippedMessage>> GetClipsAsync(Guid folderId, int? limit = default(int?), int? offset = default(int?), string? order = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Traq.Client.ApiResponse<List<ClippedMessage>> localVarResponse = await GetClipsWithHttpInfoAsync(folderId, limit, offset, order, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// フォルダ内のクリップのリストを取得 指定したフォルダ内のクリップのリストを取得します。 &#x60;order&#x60;を指定しない場合、クリップした日時の新しい順で返されます。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">クリップフォルダUUID</param>
        /// <param name="limit">取得する件数 (optional)</param>
        /// <param name="offset">取得するオフセット (optional, default to 0)</param>
        /// <param name="order">昇順か降順か (optional, default to desc)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ClippedMessage&gt;)</returns>
        public async System.Threading.Tasks.Task<Traq.Client.ApiResponse<List<ClippedMessage>>> GetClipsWithHttpInfoAsync(Guid folderId, int? limit = default(int?), int? offset = default(int?), string? order = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Traq.Client.RequestOptions localVarRequestOptions = new Traq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Traq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Traq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("folderId", Traq.Client.ClientUtils.ParameterToString(folderId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Traq.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Traq.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (order != null)
            {
                localVarRequestOptions.QueryParameters.Add(Traq.Client.ClientUtils.ParameterToMultiMap("", "order", order));
            }

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ClippedMessage>>("/clip-folders/{folderId}/messages", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetClips", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 自分のクリップを取得 対象のメッセージの自分のクリップの一覧を返します。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">メッセージUUID</param>
        /// <returns>List&lt;MessageClip&gt;</returns>
        public List<MessageClip> GetMessageClips(Guid messageId)
        {
            Traq.Client.ApiResponse<List<MessageClip>> localVarResponse = GetMessageClipsWithHttpInfo(messageId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 自分のクリップを取得 対象のメッセージの自分のクリップの一覧を返します。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">メッセージUUID</param>
        /// <returns>ApiResponse of List&lt;MessageClip&gt;</returns>
        public Traq.Client.ApiResponse<List<MessageClip>> GetMessageClipsWithHttpInfo(Guid messageId)
        {
            Traq.Client.RequestOptions localVarRequestOptions = new Traq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Traq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Traq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("messageId", Traq.Client.ClientUtils.ParameterToString(messageId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<MessageClip>>("/messages/{messageId}/clips", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMessageClips", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 自分のクリップを取得 対象のメッセージの自分のクリップの一覧を返します。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">メッセージUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;MessageClip&gt;</returns>
        public async System.Threading.Tasks.Task<List<MessageClip>> GetMessageClipsAsync(Guid messageId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Traq.Client.ApiResponse<List<MessageClip>> localVarResponse = await GetMessageClipsWithHttpInfoAsync(messageId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 自分のクリップを取得 対象のメッセージの自分のクリップの一覧を返します。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">メッセージUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;MessageClip&gt;)</returns>
        public async System.Threading.Tasks.Task<Traq.Client.ApiResponse<List<MessageClip>>> GetMessageClipsWithHttpInfoAsync(Guid messageId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Traq.Client.RequestOptions localVarRequestOptions = new Traq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = Traq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Traq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("messageId", Traq.Client.ClientUtils.ParameterToString(messageId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<MessageClip>>("/messages/{messageId}/clips", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMessageClips", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// メッセージをクリップフォルダから除外 指定したフォルダから指定したメッセージのクリップを除外します。 既に外されているメッセージを指定した場合は204を返します。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">クリップフォルダUUID</param>
        /// <param name="messageId">メッセージUUID</param>
        /// <returns></returns>
        public void UnclipMessage(Guid folderId, Guid messageId)
        {
            UnclipMessageWithHttpInfo(folderId, messageId);
        }

        /// <summary>
        /// メッセージをクリップフォルダから除外 指定したフォルダから指定したメッセージのクリップを除外します。 既に外されているメッセージを指定した場合は204を返します。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">クリップフォルダUUID</param>
        /// <param name="messageId">メッセージUUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Traq.Client.ApiResponse<Object> UnclipMessageWithHttpInfo(Guid folderId, Guid messageId)
        {
            Traq.Client.RequestOptions localVarRequestOptions = new Traq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Traq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Traq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("folderId", Traq.Client.ClientUtils.ParameterToString(folderId)); // path parameter
            localVarRequestOptions.PathParameters.Add("messageId", Traq.Client.ClientUtils.ParameterToString(messageId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/clip-folders/{folderId}/messages/{messageId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnclipMessage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// メッセージをクリップフォルダから除外 指定したフォルダから指定したメッセージのクリップを除外します。 既に外されているメッセージを指定した場合は204を返します。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">クリップフォルダUUID</param>
        /// <param name="messageId">メッセージUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UnclipMessageAsync(Guid folderId, Guid messageId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await UnclipMessageWithHttpInfoAsync(folderId, messageId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// メッセージをクリップフォルダから除外 指定したフォルダから指定したメッセージのクリップを除外します。 既に外されているメッセージを指定した場合は204を返します。
        /// </summary>
        /// <exception cref="Traq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="folderId">クリップフォルダUUID</param>
        /// <param name="messageId">メッセージUUID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Traq.Client.ApiResponse<Object>> UnclipMessageWithHttpInfoAsync(Guid folderId, Guid messageId, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            Traq.Client.RequestOptions localVarRequestOptions = new Traq.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = Traq.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Traq.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("folderId", Traq.Client.ClientUtils.ParameterToString(folderId)); // path parameter
            localVarRequestOptions.PathParameters.Add("messageId", Traq.Client.ClientUtils.ParameterToString(messageId)); // path parameter

            // authentication (OAuth2) required
            // oauth required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }
            // authentication (bearerAuth) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/clip-folders/{folderId}/messages/{messageId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnclipMessage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
