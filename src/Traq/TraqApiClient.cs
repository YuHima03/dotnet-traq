// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Serialization.Form;
using Microsoft.Kiota.Serialization.Json;
using Microsoft.Kiota.Serialization.Multipart;
using Microsoft.Kiota.Serialization.Text;
using System;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using Traq.Activity;
using Traq.Bots;
using Traq.Channels;
using Traq.Clients;
using Traq.ClipFolders;
using Traq.Files;
using Traq.Groups;
using Traq.Login;
using Traq.Logout;
using Traq.Messages;
using Traq.Oauth2;
using Traq.Ogp;
using Traq.Public;
using Traq.Qall;
using Traq.StampPalettes;
using Traq.Stamps;
using Traq.Tags;
using Traq.Users;
using Traq.VersionNamespace;
using Traq.Webhooks;
using Traq.Webrtc;
using Traq.Ws;
namespace Traq
{
    /// <summary>
    /// The main entry point of the SDK, exposes the configuration and the fluent API.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class TraqApiClient : BaseRequestBuilder
    {
        /// <summary>The activity property</summary>
        public global::Traq.Activity.ActivityRequestBuilder Activity
        {
            get => new global::Traq.Activity.ActivityRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The bots property</summary>
        public global::Traq.Bots.BotsRequestBuilder Bots
        {
            get => new global::Traq.Bots.BotsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The channels property</summary>
        public global::Traq.Channels.ChannelsRequestBuilder Channels
        {
            get => new global::Traq.Channels.ChannelsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The clients property</summary>
        public global::Traq.Clients.ClientsRequestBuilder Clients
        {
            get => new global::Traq.Clients.ClientsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The clipFolders property</summary>
        public global::Traq.ClipFolders.ClipFoldersRequestBuilder ClipFolders
        {
            get => new global::Traq.ClipFolders.ClipFoldersRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The files property</summary>
        public global::Traq.Files.FilesRequestBuilder Files
        {
            get => new global::Traq.Files.FilesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The groups property</summary>
        public global::Traq.Groups.GroupsRequestBuilder Groups
        {
            get => new global::Traq.Groups.GroupsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The login property</summary>
        public global::Traq.Login.LoginRequestBuilder Login
        {
            get => new global::Traq.Login.LoginRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The logout property</summary>
        public global::Traq.Logout.LogoutRequestBuilder Logout
        {
            get => new global::Traq.Logout.LogoutRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The messages property</summary>
        public global::Traq.Messages.MessagesRequestBuilder Messages
        {
            get => new global::Traq.Messages.MessagesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The oauth2 property</summary>
        public global::Traq.Oauth2.Oauth2RequestBuilder Oauth2
        {
            get => new global::Traq.Oauth2.Oauth2RequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The ogp property</summary>
        public global::Traq.Ogp.OgpRequestBuilder Ogp
        {
            get => new global::Traq.Ogp.OgpRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The public property</summary>
        public global::Traq.Public.PublicRequestBuilder Public
        {
            get => new global::Traq.Public.PublicRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The qall property</summary>
        public global::Traq.Qall.QallRequestBuilder Qall
        {
            get => new global::Traq.Qall.QallRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The stampPalettes property</summary>
        public global::Traq.StampPalettes.StampPalettesRequestBuilder StampPalettes
        {
            get => new global::Traq.StampPalettes.StampPalettesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The stamps property</summary>
        public global::Traq.Stamps.StampsRequestBuilder Stamps
        {
            get => new global::Traq.Stamps.StampsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The tags property</summary>
        public global::Traq.Tags.TagsRequestBuilder Tags
        {
            get => new global::Traq.Tags.TagsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The users property</summary>
        public global::Traq.Users.UsersRequestBuilder Users
        {
            get => new global::Traq.Users.UsersRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The version property</summary>
        public global::Traq.VersionNamespace.VersionRequestBuilder Version
        {
            get => new global::Traq.VersionNamespace.VersionRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The webhooks property</summary>
        public global::Traq.Webhooks.WebhooksRequestBuilder Webhooks
        {
            get => new global::Traq.Webhooks.WebhooksRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The webrtc property</summary>
        public global::Traq.Webrtc.WebrtcRequestBuilder Webrtc
        {
            get => new global::Traq.Webrtc.WebrtcRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The ws property</summary>
        public global::Traq.Ws.WsRequestBuilder Ws
        {
            get => new global::Traq.Ws.WsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Traq.TraqApiClient"/> and sets the default values.
        /// </summary>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public TraqApiClient(IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}", new Dictionary<string, object>())
        {
            ApiClientBuilder.RegisterDefaultSerializer<JsonSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultSerializer<TextSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultSerializer<FormSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultSerializer<MultipartSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultDeserializer<JsonParseNodeFactory>();
            ApiClientBuilder.RegisterDefaultDeserializer<TextParseNodeFactory>();
            ApiClientBuilder.RegisterDefaultDeserializer<FormParseNodeFactory>();
            if (string.IsNullOrEmpty(RequestAdapter.BaseUrl))
            {
                RequestAdapter.BaseUrl = "https://q.trap.jp/api/v3";
            }
            PathParameters.TryAdd("baseurl", RequestAdapter.BaseUrl);
        }
    }
}
#pragma warning restore CS0618
