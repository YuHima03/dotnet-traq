// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
using Traq.Models;
using Traq.Users.Me.ExAccounts;
using Traq.Users.Me.FcmDevice;
using Traq.Users.Me.Icon;
using Traq.Users.Me.Oidc;
using Traq.Users.Me.Password;
using Traq.Users.Me.QrCode;
using Traq.Users.Me.Sessions;
using Traq.Users.Me.Settings;
using Traq.Users.Me.StampHistory;
using Traq.Users.Me.Stars;
using Traq.Users.Me.Subscriptions;
using Traq.Users.Me.Tags;
using Traq.Users.Me.Tokens;
using Traq.Users.Me.Unread;
using Traq.Users.Me.ViewStates;
namespace Traq.Users.Me
{
    /// <summary>
    /// Builds and executes requests for operations under \users\me
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class MeRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The exAccounts property</summary>
        public global::Traq.Users.Me.ExAccounts.ExAccountsRequestBuilder ExAccounts
        {
            get => new global::Traq.Users.Me.ExAccounts.ExAccountsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The fcmDevice property</summary>
        public global::Traq.Users.Me.FcmDevice.FcmDeviceRequestBuilder FcmDevice
        {
            get => new global::Traq.Users.Me.FcmDevice.FcmDeviceRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The icon property</summary>
        public global::Traq.Users.Me.Icon.IconRequestBuilder Icon
        {
            get => new global::Traq.Users.Me.Icon.IconRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The oidc property</summary>
        public global::Traq.Users.Me.Oidc.OidcRequestBuilder Oidc
        {
            get => new global::Traq.Users.Me.Oidc.OidcRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The password property</summary>
        public global::Traq.Users.Me.Password.PasswordRequestBuilder Password
        {
            get => new global::Traq.Users.Me.Password.PasswordRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The qrCode property</summary>
        public global::Traq.Users.Me.QrCode.QrCodeRequestBuilder QrCode
        {
            get => new global::Traq.Users.Me.QrCode.QrCodeRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The sessions property</summary>
        public global::Traq.Users.Me.Sessions.SessionsRequestBuilder Sessions
        {
            get => new global::Traq.Users.Me.Sessions.SessionsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The settings property</summary>
        public global::Traq.Users.Me.Settings.SettingsRequestBuilder Settings
        {
            get => new global::Traq.Users.Me.Settings.SettingsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The stampHistory property</summary>
        public global::Traq.Users.Me.StampHistory.StampHistoryRequestBuilder StampHistory
        {
            get => new global::Traq.Users.Me.StampHistory.StampHistoryRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The stars property</summary>
        public global::Traq.Users.Me.Stars.StarsRequestBuilder Stars
        {
            get => new global::Traq.Users.Me.Stars.StarsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The subscriptions property</summary>
        public global::Traq.Users.Me.Subscriptions.SubscriptionsRequestBuilder Subscriptions
        {
            get => new global::Traq.Users.Me.Subscriptions.SubscriptionsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The tags property</summary>
        public global::Traq.Users.Me.Tags.TagsRequestBuilder Tags
        {
            get => new global::Traq.Users.Me.Tags.TagsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The tokens property</summary>
        public global::Traq.Users.Me.Tokens.TokensRequestBuilder Tokens
        {
            get => new global::Traq.Users.Me.Tokens.TokensRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The unread property</summary>
        public global::Traq.Users.Me.Unread.UnreadRequestBuilder Unread
        {
            get => new global::Traq.Users.Me.Unread.UnreadRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The viewStates property</summary>
        public global::Traq.Users.Me.ViewStates.ViewStatesRequestBuilder ViewStates
        {
            get => new global::Traq.Users.Me.ViewStates.ViewStatesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Traq.Users.Me.MeRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public MeRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/users/me", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Traq.Users.Me.MeRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public MeRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/users/me", rawUrl)
        {
        }
        /// <summary>
        /// 自身のユーザー詳細情報を取得します。
        /// </summary>
        /// <returns>A <see cref="global::Traq.Models.MyUserDetail"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Traq.Models.MyUserDetail?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Traq.Models.MyUserDetail> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::Traq.Models.MyUserDetail>(requestInfo, global::Traq.Models.MyUserDetail.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// 自身のユーザー情報を変更します。
        /// </summary>
        /// <param name="body">自分のユーザー情報変更リクエスト</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task PatchAsync(global::Traq.Models.PatchMeRequest body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task PatchAsync(global::Traq.Models.PatchMeRequest body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPatchRequestInformation(body, requestConfiguration);
            await RequestAdapter.SendNoContentAsync(requestInfo, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// 自身のユーザー詳細情報を取得します。
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// 自身のユーザー情報を変更します。
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">自分のユーザー情報変更リクエスト</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPatchRequestInformation(global::Traq.Models.PatchMeRequest body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPatchRequestInformation(global::Traq.Models.PatchMeRequest body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.PATCH, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Traq.Users.Me.MeRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Traq.Users.Me.MeRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Traq.Users.Me.MeRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class MeRequestBuilderGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class MeRequestBuilderPatchRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
